{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringJoiner;\nimport java.util.StringTokenizer;\nimport java.util.function.IntUnaryOperator;\nimport java.util.function.LongUnaryOperator;\n\npublic class Main {\n    static In in = new In();\n    static Out out = new Out();\n    static long mod = 1000000007;\n    static long inf = 0xfffffffffffffffL;\n\n    void solve() {\n        long n = in.nextLong();\n        long ans = 0;\n        Map<Long, Integer> primeFactors2 = getPrimeFactors(n - 1);\n        for (long p = 2; p * p <= n; p++) {\n            if (p * p == n) {\n                ans++;\n                continue;\n            }\n            if (n % p == 0) {\n                if (check(p, n)) {\n                    ans++;\n                }\n                if (check(n / p, n)) {\n                    ans++;\n                }\n            }\n        }\n        long a1 = 1;\n        for (Map.Entry<Long, Integer> entry : primeFactors2.entrySet()) {\n            a1 *= entry.getValue() + 1;\n        }\n        out.println(a1 + ans);\n    }\n\n    static boolean check(long p, long n) {\n        while (n % p == 0) {\n            n /= p;\n            if (n % p == 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static Map<Long, Integer> getPrimeFactors(long n) {\n        Map<Long, Integer> primeFactors = new HashMap<>();\n        long c = n;\n        for (long i = 2; i * i <= n && 1 < c; i++) {\n            int count = 0;\n            while (c % i == 0) {\n                count++;\n                c /= i;\n            }\n            if (count > 0) {\n                primeFactors.put(i, count);\n            }\n        }\n        if (c > 1) {\n            primeFactors.put(c, 1);\n        }\n        return primeFactors;\n    }\n\n    public static void main(String[]$) {\n        new Main().solve();\n        out.flush();\n    }\n}\n\nclass In {\n    private BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 0x10000);\n    private StringTokenizer tokenizer;\n\n    String next() {\n        try {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                tokenizer = new StringTokenizer(reader.readLine());\n            }\n        } catch (IOException ignored) {\n        }\n        return tokenizer.nextToken();\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    char[][] nextCharArray(int n, int m) {\n        char[][] a = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            a[i] = next().toCharArray();\n        }\n        return a;\n    }\n\n    int[] nextIntArray(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    int[] nextIntArray(int n, IntUnaryOperator op) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = op.applyAsInt(nextInt());\n        }\n        return a;\n    }\n\n    long[] nextLongArray(int n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    long[] nextLongArray(int n, LongUnaryOperator op) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = op.applyAsLong(nextLong());\n        }\n        return a;\n    }\n}\n\nclass Out {\n    private PrintWriter out = new PrintWriter(System.out);\n    boolean autoFlush = false;\n\n    void println(Object... a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (Object obj : a) {\n            joiner.add(String.valueOf(obj));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void println(int[] a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (int i : a) {\n            joiner.add(Integer.toString(i));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void println(long[] a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (long i : a) {\n            joiner.add(Long.toString(i));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void flush() {\n        out.flush();\n    }\n}\nGicen the following input:\n6\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "3\n",
        "predict": "7\nEND-OF-OUTPUT"
    }
}