1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.io.PrintWriter;
4 import java.util.NoSuchElementException;
5 
6 public class Main {
7 	char[] ch;
8 	String S;
9 	boolean[] use = new boolean[10];
10 
11 	long minDiff = Long.MAX_VALUE;
12 	String ansStr;
13 	String startStr;
14 
15 	public void dfs(int n)
16 	{
17 		if(n == ch.length){
18 			ansStr = startStr;
19 			return;
20 		}
21 
22 		if(n == 0){
23 			use[(ch[n] - '0' + 5) % 10] = true;
24 			startStr = startStr + (char)((ch[n] - '0' + 5) % 10 + '0');
25 			dfs(n + 1);
26 			return;
27 		}
28 
29 		if(!use[ch[n] - '0']){
30 			dfs2(n,"");
31 			use[ch[n] - '0'] = true;
32 			startStr = startStr + ch[n];
33 			dfs(n + 1);
34 			return;
35 		}
36 		dfs2(n,"");
37 	}
38 
39 	public void dfs2(int n,String s){
40 		if(n == ch.length){
41 			long a = Long.valueOf(S.substring(startStr.length()));
42 			long b = Long.valueOf(s);
43 
44 			long diff = Math.abs(a - b);
45 
46 			if(minDiff > diff){
47 				ansStr = startStr + s;
48 				minDiff = diff;
49 			}
50 			return;
51 		}
52 
53 		for(int i = 0;i < 10;i++){
54 			if(use[i])continue;
55 			use[i] = true;
56 			dfs2(n + 1,s + (char)(i + '0'));
57 			use[i] = false;
58 		}
59 	}
60 
61 	public void solve() {
62 		S = next();
63 		ch = S.toCharArray();
64 		startStr = "";
65 		ansStr = "";
66 		dfs(0);
67 		out.println(ansStr);
68 
69 	}
70 
71 	public static void main(String[] args) {
72 		out.flush();
73 		new Main().solve();
74 		out.close();
75 	}
76 
77 	/* Input */
78 	private static final InputStream in = System.in;
79 	private static final PrintWriter out = new PrintWriter(System.out);
80 	private final byte[] buffer = new byte[2048];
81 	private int p = 0;
82 	private int buflen = 0;
83 
84 	private boolean hasNextByte() {
85 		if (p < buflen)
86 			return true;
87 		p = 0;
88 		try {
89 			buflen = in.read(buffer);
90 		} catch (IOException e) {
91 			e.printStackTrace();
92 		}
93 		if (buflen <= 0)
94 			return false;
95 		return true;
96 	}
97 
98 	public boolean hasNext() {
99 		while (hasNextByte() && !isPrint(buffer[p])) {
100 			p++;
101 		}
102 		return hasNextByte();
103 	}
104 
105 	private boolean isPrint(int ch) {
106 		if (ch >= '!' && ch <= '~')
107 			return true;
108 		return false;
109 	}
110 
111 	private int nextByte() {
112 		if (!hasNextByte())
113 			return -1;
114 		return buffer[p++];
115 	}
116 
117 	public String next() {
118 		if (!hasNext())
119 			throw new NoSuchElementException();
120 		StringBuilder sb = new StringBuilder();
121 		int b = -1;
122 		while (isPrint((b = nextByte()))) {
123 			sb.appendCodePoint(b);
124 		}
125 		return sb.toString();
126 	}
127 
128 	public int nextInt() {
129 		return Integer.parseInt(next());
130 	}
131 
132 	public long nextLong() {
133 		return Long.parseLong(next());
134 	}
135 
136 	public double nextDouble() {
137 		return Double.parseDouble(next());
138 	}
139 }