1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.*;
6 
7 public class Main {
8     static InputStream is;
9     static PrintWriter out;
10     static String INPUT = "";
11 
12     static void solve() {
13         long n = nl();
14         long mod = 1000000007;
15         long total = modpow(10, n, mod);
16         long partial = 2 * modpow(9, n, mod);
17         long both = modpow(8, n, mod);
18         long ans = (total - partial + both) % mod;
19         ans = (ans + mod) % mod;
20         System.out.println(ans);
21     }
22 
23     public static long modpow(long a, long n, long mod) {
24         long res = 1;
25         while (n > 0) {
26             if ((n & 1) == 1) {
27                 res = res * a % mod;
28             }
29             a = a * a % mod;
30             n >>= 1;
31         }
32         return res;
33     }
34 
35     public static void main(String[] args) throws Exception {
36         long S = System.currentTimeMillis();
37         is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
38         out = new PrintWriter(System.out);
39 
40         solve();
41         out.flush();
42         long G = System.currentTimeMillis();
43         tr(G-S+"ms");
44     }
45 
46     private static boolean eof() {
47         if(lenbuf == -1)return true;
48         int lptr = ptrbuf;
49         while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
50 
51         try {
52             is.mark(1000);
53             while(true){
54                 int b = is.read();
55                 if(b == -1){
56                     is.reset();
57                     return true;
58                 }else if(!isSpaceChar(b)){
59                     is.reset();
60                     return false;
61                 }
62             }
63         } catch (IOException e) {
64             return true;
65         }
66     }
67 
68     private static byte[] inbuf = new byte[1024];
69     static int lenbuf = 0, ptrbuf = 0;
70 
71     private static int readByte() {
72         if(lenbuf == -1)throw new InputMismatchException();
73         if(ptrbuf >= lenbuf){
74             ptrbuf = 0;
75             try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
76             if(lenbuf <= 0)return -1;
77         }
78         return inbuf[ptrbuf++];
79     }
80 
81     private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
82 
83     private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
84 
85     private static double nd() { return Double.parseDouble(ns()); }
86     private static char nc() { return (char)skip(); }
87 
88     private static String ns() {
89         int b = skip();
90         StringBuilder sb = new StringBuilder();
91         while(!(isSpaceChar(b))){
92             sb.appendCodePoint(b);
93             b = readByte();
94         }
95         return sb.toString();
96     }
97 
98     private static char[] ns(int n) {
99         char[] buf = new char[n];
100         int b = skip(), p = 0;
101         while(p < n && !(isSpaceChar(b))){
102             buf[p++] = (char)b;
103             b = readByte();
104         }
105         return n == p ? buf : Arrays.copyOf(buf, p);
106     }
107 
108     private static char[][] nm(int n, int m) {
109         char[][] map = new char[n][];
110         for(int i = 0;i < n;i++)map[i] = ns(m);
111         return map;
112     }
113 
114     private static int[] na(int n) {
115         int[] a = new int[n];
116         for(int i = 0;i < n;i++)a[i] = ni();
117         return a;
118     }
119 
120     private static int ni() {
121         int num = 0, b;
122         boolean minus = false;
123         while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
124         if(b == '-'){
125             minus = true;
126             b = readByte();
127         }
128 
129         while(true){
130             if(b >= '0' && b <= '9'){
131                 num = num * 10 + (b - '0');
132             }else{
133                 return minus ? -num : num;
134             }
135             b = readByte();
136         }
137     }
138 
139     private static long nl() {
140         long num = 0;
141         int b;
142         boolean minus = false;
143         while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
144         if(b == '-'){
145             minus = true;
146             b = readByte();
147         }
148 
149         while(true){
150             if(b >= '0' && b <= '9'){
151                 num = num * 10 + (b - '0');
152             }else{
153                 return minus ? -num : num;
154             }
155             b = readByte();
156         }
157     }
158 
159     private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
160 }
