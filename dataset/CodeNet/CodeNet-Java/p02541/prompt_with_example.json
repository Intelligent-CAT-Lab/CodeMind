{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.util.*;\n\n@SuppressWarnings(\"unused\")\npublic class Main {\n\n  private static void solve() {\n    long n = nl();\n    if (n == 1) {\n      System.out.println(1);\n      return;\n    } else if (n == 2) {\n      System.out.println(3);\n      return;\n    }\n    int[] primes = sieveEratosthenes(100000000);\n    n *= 2;\n    long[] divs = enumDivisors(n, primes);\n\n    // k(k+1) = p * d * e\n    long ret = Long.MAX_VALUE;\n    for (long d : divs) {\n      long e = n / d;\n      long[] g = exgcd(d, e);\n\n      if (g[0] != 1) {\n        continue;\n      }\n      long x = g[1];\n      long y = g[2];\n      // dx + ey = 1\n      // x = x - ek\n      // y = y + dk\n      if (x < 0) {\n        // ey = 1 + d(-x) = k\n        long k = d * (-x);\n        ret = Math.min(k, ret);\n      }\n\n      if (y < 0) {\n        // dx = 1 + e(-y) = k\n        long k = e * (-y);\n        ret = Math.min(k, ret);\n      }\n    }\n    System.out.println(ret);\n  }\n\n  public static long[] exgcd(long a, long b) {\n    if (a == 0 || b == 0)\n      return null;\n    int as = Long.signum(a);\n    int bs = Long.signum(b);\n    a = Math.abs(a);\n    b = Math.abs(b);\n    long p = 1, q = 0, r = 0, s = 1;\n    while (b > 0) {\n      long c = a / b;\n      long d;\n      d = a;\n      a = b;\n      b = d % b;\n      d = p;\n      p = q;\n      q = d - c * q;\n      d = r;\n      r = s;\n      s = d - c * s;\n    }\n    return new long[] { a, p * as, r * bs };\n  }\n\n  public static int[] sieveEratosthenes(int n) {\n    if (n <= 32) {\n      int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31 };\n      for (int i = 0; i < primes.length; i++) {\n        if (n < primes[i]) {\n          return Arrays.copyOf(primes, i);\n        }\n      }\n      return primes;\n    }\n\n    int u = n + 32;\n    double lu = Math.log(u);\n    int[] ret = new int[(int) (u / lu + u / lu / lu * 1.5)];\n    ret[0] = 2;\n    int pos = 1;\n\n    int[] isnp = new int[(n + 1) / 32 / 2 + 1];\n    int sup = (n + 1) / 32 / 2 + 1;\n\n    int[] tprimes = { 3, 5, 7, 11, 13, 17, 19, 23, 29, 31 };\n    for (int tp : tprimes) {\n      ret[pos++] = tp;\n      int[] ptn = new int[tp];\n      for (int i = (tp - 3) / 2; i < tp << 5; i += tp)\n        ptn[i >> 5] |= 1 << i;\n      for (int j = 0; j < sup; j += tp) {\n        for (int i = 0; i < tp && i + j < sup; i++) {\n          isnp[j + i] |= ptn[i];\n        }\n      }\n    }\n\n    // 3,5,7\n    // 2x+3=n\n    int[] magic = { 0, 1, 23, 2, 29, 24, 19, 3, 30, 27, 25, 11, 20, 8, 4, 13, 31, 22, 28, 18, 26, 10, 7, 12, 21, 17, 9,\n        6, 16, 5, 15, 14 };\n    int h = n / 2;\n    for (int i = 0; i < sup; i++) {\n      for (int j = ~isnp[i]; j != 0; j &= j - 1) {\n        int pp = i << 5 | magic[(j & -j) * 0x076be629 >>> 27];\n        int p = 2 * pp + 3;\n        if (p > n)\n          break;\n        ret[pos++] = p;\n        if ((long) p * p > n)\n          continue;\n        for (int q = (p * p - 3) / 2; q <= h; q += p)\n          isnp[q >> 5] |= 1 << q;\n      }\n    }\n\n    return Arrays.copyOf(ret, pos);\n  }\n\n  public static long[] enumDivisors(long n, int[] primes) {\n    int m = 1;\n    long[] divs = { 1L };\n    int t = 1;\n    long u = n;\n    for (int p : primes) {\n      if ((long) p * p > u)\n        break;\n      int e = 0;\n      while (u % p == 0) {\n        u /= p;\n        e++;\n      }\n      if (e > 0) {\n        divs = Arrays.copyOf(divs, t * (e + 1));\n        for (int q = t - 1; q >= 0; q--) {\n          long b = divs[q];\n          for (int k = 0; k < e; k++) {\n            b *= p;\n            // if((long)b*b <= n)divs[t++] = b;\n            divs[t++] = b;\n          }\n        }\n        m *= e + 1;\n      }\n    }\n    if (u > 1) {\n      long p = u;\n      int e = 1;\n      divs = Arrays.copyOf(divs, t * (e + 1));\n      for (int q = t - 1; q >= 0; q--) {\n        long b = divs[q];\n        for (int k = 0; k < e; k++) {\n          b *= p;\n          // if((long)b*b <= n)divs[t++] = b;\n          divs[t++] = b;\n        }\n      }\n      m *= e + 1;\n    }\n\n    return Arrays.copyOf(divs, t);\n  }\n\n  public static void main(String[] args) {\n    new Thread(null, new Runnable() {\n      @Override\n      public void run() {\n        long start = System.currentTimeMillis();\n        String debug = args.length > 0 ? args[0] : null;\n        if (debug != null) {\n          try {\n            is = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n        reader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n        solve();\n        out.flush();\n        tr((System.currentTimeMillis() - start) + \"ms\");\n      }\n    }, \"\", 64000000).start();\n  }\n\n  private static java.io.InputStream is = System.in;\n  private static java.io.PrintWriter out = new java.io.PrintWriter(System.out);\n  private static java.util.StringTokenizer tokenizer = null;\n  private static java.io.BufferedReader reader;\n\n  public static String next() {\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n      try {\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return tokenizer.nextToken();\n  }\n\n  private static double nd() {\n    return Double.parseDouble(next());\n  }\n\n  private static long nl() {\n    return Long.parseLong(next());\n  }\n\n  private static int[] na(int n) {\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++)\n      a[i] = ni();\n    return a;\n  }\n\n  private static char[] ns() {\n    return next().toCharArray();\n  }\n\n  private static long[] nal(int n) {\n    long[] a = new long[n];\n    for (int i = 0; i < n; i++)\n      a[i] = nl();\n    return a;\n  }\n\n  private static int[][] ntable(int n, int m) {\n    int[][] table = new int[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[i][j] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int[][] nlist(int n, int m) {\n    int[][] table = new int[m][n];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[j][i] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int ni() {\n    return Integer.parseInt(next());\n  }\n\n  private static void tr(Object... o) {\n    if (is != System.in)\n      System.out.println(java.util.Arrays.deepToString(o));\n  }\n}\nGicen the following input:\n11\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "10\n"
    }
}