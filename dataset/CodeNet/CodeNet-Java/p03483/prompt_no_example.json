{
    "0": {
        "prompt": "Consider the following code:\n\nimport java.util.Arrays;\n\npublic class Main {\n  private static void solve() {\n    char[] s = ns();\n    int n = s.length;\n    int[] idx = new int[26];\n    \n    for (int i = 0; i < n; i ++) {\n      int c = s[i] - 'a';\n      idx[c] ++;\n    }\n    int[][] a = new int[26][];\n    for (int i = 0; i < 26; i ++) {\n      a[i] = new int[idx[i]];\n    }\n\n    int[] map = new int[n];\n    Arrays.fill(map, -1);\n\n    int[] ptr = new int[26];\n    int now = 0;\n    int oddUsed = -1;\n    for (int i = 0; i < n; i ++) {\n      int c = s[i] - 'a';\n      \n      boolean odd = idx[c] % 2 == 1;\n      if (odd && oddUsed >= 0 && oddUsed != c) {\n        System.out.println(-1);\n        return;\n      }\n\n      int p = ptr[c];\n      if (p < idx[c] / 2) {\n        map[i] = now ++;\n      } else if (odd && p == idx[c] / 2) {\n        map[i] = n / 2;\n        oddUsed = c;\n        \n      } else {\n        int inv = idx[c] - p - 1;\n        map[i] = n - a[c][inv] - 1;\n      }\n      a[c][p] = map[i];\n      ptr[c] ++;\n    }\n    int[] array = new int[n];\n    for (int i = 0; i < n; i ++) {\n      array[map[i]] = i;\n    }\n    long x = bubbleCount(array, 0, n);\n    System.out.println(x);\n  }\n\n  public static long bubbleCount(int[] a, int l, int r)\n  {\n      if(r - l <= 1)return 0;\n      int m = (l+r)/2;\n      long ret = bubbleCount(a, l, m) + bubbleCount(a, m, r);\n      int[] temp = Arrays.copyOfRange(a, l, r);\n      for(int p0 = 0, p1 = m-l, p = l;p < r;){\n          if(p0 == m-l){\n              a[p++] = temp[p1++];\n          }else if(p1 == r-l){\n              a[p++] = temp[p0++];\n          }else if(temp[p0] <= temp[p1]){\n              a[p++] = temp[p0++];\n          }else{\n              a[p++] = temp[p1++];\n              ret += m-l-p0;\n          }\n      }\n      return ret;\n  }\n\n  public static void main(String[] args) {\n    new Thread(null, new Runnable() {\n      @Override\n      public void run() {\n        long start = System.currentTimeMillis();\n        String debug = args.length > 0 ? args[0] : null;\n        if (debug != null) {\n          try {\n            is = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n        reader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n        solve();\n        out.flush();\n        tr((System.currentTimeMillis() - start) + \"ms\");\n      }\n    }, \"\", 64000000).start();\n  }\n\n  private static java.io.InputStream is = System.in;\n  private static java.io.PrintWriter out = new java.io.PrintWriter(System.out);\n  private static java.util.StringTokenizer tokenizer = null;\n  private static java.io.BufferedReader reader;\n\n  public static String next() {\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n      try {\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return tokenizer.nextToken();\n  }\n\n  private static double nd() {\n    return Double.parseDouble(next());\n  }\n\n  private static long nl() {\n    return Long.parseLong(next());\n  }\n\n  private static int[] na(int n) {\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++)\n      a[i] = ni();\n    return a;\n  }\n\n  private static char[] ns() {\n    return next().toCharArray();\n  }\n\n  private static long[] nal(int n) {\n    long[] a = new long[n];\n    for (int i = 0; i < n; i++)\n      a[i] = nl();\n    return a;\n  }\n\n  private static int[][] ntable(int n, int m) {\n    int[][] table = new int[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[i][j] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int[][] nlist(int n, int m) {\n    int[][] table = new int[m][n];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[j][i] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int ni() {\n    return Integer.parseInt(next());\n  }\n\n  private static void tr(Object... o) {\n    if (is != System.in)\n      System.out.println(java.util.Arrays.deepToString(o));\n  }\n}\n\n\nGicen the following input:\neel\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "1\n"
    }
}