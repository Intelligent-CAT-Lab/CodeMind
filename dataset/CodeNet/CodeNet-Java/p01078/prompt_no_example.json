{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.NoSuchElementException;\n\n/*\n                   _ooOoo_\n                  o8888888o\n                  88\" . \"88\n                  (| -_- |)\n                  O\\  =  /O\n               ____/`---'\\____\n             .'  \\\\|     |//  `.\n            /  \\\\|||  :  |||//  \\\n           /  _||||| -:- |||||-  \\\n           |   | \\\\\\  -  /// |   |\n           | \\_|  ''\\---/''  |   |\n           \\  .-\\__  `-`  ___/-. /\n         ___`. .'  /--.--\\  `. . __\n      .\"\" '<  `.___\\_<|>_/___.'  >'\"\".\n     | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /\n======`-.____`-.___\\_____/___.-`____.-'======\n                   `=---='\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            pass System Test!\n*/\n\npublic class Main {\n  private static class Task {\n    void solve(FastScanner in, PrintWriter out) throws Exception {\n      int N = in.nextInt();\n      int K = in.nextInt();\n      Point a = new Point(1.0, 0.0);\n      Point b = new Point(Math.cos(Math.PI * 2 / N), Math.sin(Math.PI * 2 / N));\n      Point pa = new Point(Math.cos(Math.PI * 2 / N * K), Math.sin(Math.PI * 2 / N * K));\n      Point pb = new Point(Math.cos(Math.PI * 2 / N * (1 - K)), Math.sin(Math.PI * 2 / N * (1 - K)));\n\n      Point intersection = lineIntersection(a, pa, b, pb);\n      Point ai = a.sub(intersection);\n      Point bi = b.sub(intersection);\n      double S = Math.abs(ai.det(bi)) / 2;\n      double convex = Math.abs(a.det(b)) / 2 * N;\n      out.print(convex - S * N);\n\n    }\n\n    private static double EPS = 2e-8;\n    /**\n     * Return the point which is intersection of line p1-p2 and q1-q2\n     *\n     * @param p1\n     * @param p2\n     * @param q1\n     * @param q2\n     * @return\n     */\n    public static Point lineIntersection(Point p1, Point p2, Point q1, Point q2) {\n      double a = (q2.sub(q1)).det(q1.sub(p1));\n      double b = (q2.sub(q1)).det(p2.sub(p1));\n      return p1.add((p2.sub(p1)).multiply(a / b));\n    }\n\n    /**\n     * Return point p is on segment a-b\n     *\n     * @param a\n     * @param b\n     * @param p\n     * @return\n     */\n    public static boolean onSegment(Point a, Point b, Point p) {\n      if (Math.abs(a.x - b.x) < EPS)\n        return Math.min(a.y, b.y) <= p.y && p.y <= Math.max(a.y, b.y);\n      double alpha = (b.y - a.y) / (b.x - a.x);\n      double beta = a.y - alpha * a.x;\n      return Math.abs(p.y - (alpha * p.x + beta)) < EPS && Math.min(a.x, b.x) <= p.x && p.x <= Math.max(a.x, b.x);\n    }\n\n    class Point implements Comparable<Point> {\n      double x, y;\n      Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      @Override\n      public int compareTo(Point o) {\n        if (this.x == o.x) return Double.compare(this.y, o.y);\n        return Double.compare(this.x, o.x);\n      }\n\n      /**\n       * ??????????\u00a8????????????????\n       *\n       * @param p\n       * @return\n       */\n      public double det(Point p) {\n        return x * p.y - y * p.x;\n      }\n\n      /**\n       * ??????\n       *\n       * @param p\n       * @return\n       */\n      public double dot(Point p) {\n        return x * p.x + y * p.y;\n      }\n\n      public Point sub(Point p) {\n        return new Point(x - p.x, y - p.y);\n      }\n\n      public Point add(Point p) {\n        return new Point(x + p.x, y + p.y);\n      }\n\n      public Point multiply(double d) {\n        return new Point(x * d, y * d);\n      }\n\n    }\n  }\n\n  /**\n   * ?????????????????????????????\u00ac????????\u00a7??????\n   */\n  public static void main(String[] args) throws Exception {\n    OutputStream outputStream = System.out;\n    FastScanner in = new FastScanner();\n    PrintWriter out = new PrintWriter(outputStream);\n    Task solver = new Task();\n    solver.solve(in, out);\n    out.close();\n  }\n  private static class FastScanner {\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int bufferLength = 0;\n\n    private boolean hasNextByte() {\n      if (ptr < bufferLength) {\n        return true;\n      } else {\n        ptr = 0;\n        try {\n          bufferLength = in.read(buffer);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n        if (bufferLength <= 0) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    private int readByte() {\n      if (hasNextByte()) return buffer[ptr++];\n      else return -1;\n    }\n\n    private static boolean isPrintableChar(int c) {\n      return 33 <= c && c <= 126;\n    }\n\n    private void skipUnprintable() {\n      while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;\n    }\n\n    boolean hasNext() {\n      skipUnprintable();\n      return hasNextByte();\n    }\n\n    public String next() {\n      if (!hasNext()) throw new NoSuchElementException();\n      StringBuilder sb = new StringBuilder();\n      int b = readByte();\n      while (isPrintableChar(b)) {\n        sb.appendCodePoint(b);\n        b = readByte();\n      }\n      return sb.toString();\n    }\n\n    long nextLong() {\n      if (!hasNext()) throw new NoSuchElementException();\n      long n = 0;\n      boolean minus = false;\n      int b = readByte();\n      if (b == '-') {\n        minus = true;\n        b = readByte();\n      }\n      if (b < '0' || '9' < b) {\n        throw new NumberFormatException();\n      }\n      while (true) {\n        if ('0' <= b && b <= '9') {\n          n *= 10;\n          n += b - '0';\n        } else if (b == -1 || !isPrintableChar(b)) {\n          return minus ? -n : n;\n        } else {\n          throw new NumberFormatException();\n        }\n        b = readByte();\n      }\n    }\n\n    double nextDouble() {\n      return Double.parseDouble(next());\n    }\n\n    double[] nextDoubleArray(int n) {\n      double[] array = new double[n];\n      for (int i = 0; i < n; i++) {\n        array[i] = nextDouble();\n      }\n      return array;\n    }\n\n    double[][] nextDoubleMap(int n, int m) {\n      double[][] map = new double[n][];\n      for (int i = 0; i < n; i++) {\n        map[i] = nextDoubleArray(m);\n      }\n      return map;\n    }\n\n    public int nextInt() {\n      return (int) nextLong();\n    }\n\n    public int[] nextIntArray(int n) {\n      int[] array = new int[n];\n      for (int i = 0; i < n; i++) array[i] = nextInt();\n      return array;\n    }\n\n    public long[] nextLongArray(int n) {\n      long[] array = new long[n];\n      for (int i = 0; i < n; i++) array[i] = nextLong();\n      return array;\n    }\n\n    public String[] nextStringArray(int n) {\n      String[] array = new String[n];\n      for (int i = 0; i < n; i++) array[i] = next();\n      return array;\n    }\n\n    public char[][] nextCharMap(int n) {\n      char[][] array = new char[n][];\n      for (int i = 0; i < n; i++) array[i] = next().toCharArray();\n      return array;\n    }\n\n    public int[][] nextIntMap(int n, int m) {\n      int[][] map = new int[n][];\n      for (int i = 0; i < n; i++) {\n        map[i] = nextIntArray(m);\n      }\n      return map;\n    }\n  }\n}Gicen the following input:\n5 2\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "1.12256994\n"
    }
}