{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.io.BufferedOutputStream;\nimport java.io.UncheckedIOException;\nimport java.util.List;\nimport java.nio.charset.Charset;\nimport java.util.StringTokenizer;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author mikit\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        LightScanner in = new LightScanner(inputStream);\n        LightWriter out = new LightWriter(outputStream);\n        CShift solver = new CShift();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class CShift {\n        private static final int MOD = 998244353;\n\n        public void solve(int testNumber, LightScanner in, LightWriter out) {\n            char[] str = in.chars();\n            int k = in.ints();\n            int[] a;\n            int n;\n            {\n                List<Integer> rlc = new ArrayList<>();\n                int count = 0;\n                for (int i = str.length - 1; i >= 0; i--) {\n                    if (str[i] == '0') {\n                        rlc.add(count);\n                        count = 0;\n                    } else count++;\n                }\n                rlc.add(count);\n                n = rlc.size();\n                a = new int[n];\n                for (int i = 0; i < n; i++) a[i] = rlc.get(i);\n            }\n            int ones = n - 1, zeros = str.length - ones;\n            if (ones == 0 || zeros == 0) {\n                out.ans(1).ln();\n                return;\n            }\n\n            long[][][] dp = new long[n + 1][zeros + 1][zeros + 1];\n            long[][] sum0 = new long[zeros + 1][zeros + 1], sum1 = new long[zeros + 1][zeros + 1];\n            dp[0][0][0] = 1;\n            for (int i = 0; i < n; i++) {\n                // sum0\n                for (int total = 0; total <= zeros; total++) {\n                    sum0[total][0] = dp[i][total][0];\n                    for (int now = 1; now <= zeros; now++) {\n                        sum0[total][now] = (sum0[total][now - 1] + dp[i][total][now]) % MOD;\n                    }\n                }\n                // sum1\n                for (int total = 0; total <= zeros; total++) {\n                    for (int now = 0; now <= zeros; now++) {\n                        sum1[total][now] = dp[i][total][now];\n                        if (total > 0 && now > 0) {\n                            sum1[total][now] += sum1[total - 1][now - 1];\n                            sum1[total][now] %= MOD;\n                        }\n                    }\n                }\n\n                // thru\n                for (int total = 0; total <= zeros; total++) {\n                    System.arraycopy(dp[i][total], 0, dp[i + 1][total], 0, zeros + 1);\n                }\n\n                // put\n                for (int total = 0; total <= zeros; total++) {\n                    for (int now = 0; now <= total; now++) {\n                        dp[i + 1][total][now] += (sum0[total][total] - sum0[total][now] + MOD);\n                        dp[i + 1][total][now] %= MOD;\n                    }\n                }\n\n                // take\n                for (int total = 1; total <= zeros; total++) {\n                    for (int now = 1; now <= total; now++) {\n                        int min = Math.min(total, Math.min(now, a[i]));\n                        for (int take = 1; take <= min; take++) {\n                            dp[i + 1][total][now] += dp[i][total - take][now - take];\n                        }\n                        //dp[i + 1][total][now] += sum1[total - 1][now - 1];\n                        //if (now - min - 1 >= 0) dp[i + 1][total][now] += MOD - sum1[total - min - 1][now - min - 1];\n                        dp[i + 1][total][now] %= MOD;\n                    }\n                }\n            }\n\n            long ans = 0;\n            for (int i = 0; i <= Math.min(k, zeros); i++) ans += dp[n][i][0];\n            out.ans(ans % MOD).ln();\n        }\n\n    }\n\n    static class LightWriter implements AutoCloseable {\n        private final Writer out;\n        private boolean autoflush = false;\n        private boolean breaked = true;\n\n        public LightWriter(Writer out) {\n            this.out = out;\n        }\n\n        public LightWriter(OutputStream out) {\n            this(new OutputStreamWriter(new BufferedOutputStream(out), Charset.defaultCharset()));\n        }\n\n        public LightWriter print(char c) {\n            try {\n                out.write(c);\n                breaked = false;\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n            return this;\n        }\n\n        public LightWriter print(String s) {\n            try {\n                out.write(s, 0, s.length());\n                breaked = false;\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n            return this;\n        }\n\n        public LightWriter ans(String s) {\n            if (!breaked) {\n                print(' ');\n            }\n            return print(s);\n        }\n\n        public LightWriter ans(long l) {\n            return ans(Long.toString(l));\n        }\n\n        public LightWriter ans(int i) {\n            return ans(Integer.toString(i));\n        }\n\n        public LightWriter ln() {\n            print(System.lineSeparator());\n            breaked = true;\n            if (autoflush) {\n                try {\n                    out.flush();\n                } catch (IOException ex) {\n                    throw new UncheckedIOException(ex);\n                }\n            }\n            return this;\n        }\n\n        public void close() {\n            try {\n                out.close();\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n        }\n\n    }\n\n    static class LightScanner implements AutoCloseable {\n        private BufferedReader reader = null;\n        private StringTokenizer tokenizer = null;\n\n        public LightScanner(InputStream in) {\n            reader = new BufferedReader(new InputStreamReader(in));\n        }\n\n        public String string() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new UncheckedIOException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public char[] chars() {\n            return string().toCharArray();\n        }\n\n        public int ints() {\n            return Integer.parseInt(string());\n        }\n\n        public void close() {\n            try {\n                this.reader.close();\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n        }\n\n    }\n}\n\nGicen the following input:\n0101 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "4\n"
    }
}