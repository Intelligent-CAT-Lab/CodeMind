{
    "0": {
        "prompt": "Consider the following code:\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\n\n/**\n * @author Mubtasim Shahriar\n */\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader sc = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tSolver solver = new Solver();\n//\t\tint t = sc.nextInt();\n\t\tint t = 1;\n\t\twhile(t--!=0) {\n\t\t\tsolver.solve(sc, out);\n\t\t}\t\t\n\t\tout.close();\n\n\t}\n\n\tstatic class Solver {\n\t\tpublic void solve(InputReader sc, PrintWriter out) {\n\t\t\tdouble r = sc.nextDouble();\n\t\t\tdouble pi = Math.PI;\n\t\t\tout.println(2*pi*r);\n\t\t}\n\t}\n\n\tstatic class InputReader { \n\t\tprivate boolean finished = false;\n\n\t\tprivate InputStream stream;\n\t\tprivate byte[] buf = new byte[1024];\n\t\tprivate int curChar;\n\t\tprivate int numChars;\n\t\tprivate SpaceCharFilter filter;\n\n\t\tpublic InputReader(InputStream stream) {\n\t\t\tthis.stream = stream;\n\t\t}\n\n\t\tpublic int read() {\n\t\t\tif (numChars == -1) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t\tif (curChar >= numChars) {\n\t\t\t\tcurChar = 0;\n\t\t\t\ttry {\n\t\t\t\t\tnumChars = stream.read(buf);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tif (numChars <= 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn buf[curChar++];\n\t\t}\n\n\t\tpublic int peek() {\n\t\t\tif (numChars == -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (curChar >= numChars) {\n\t\t\t\tcurChar = 0;\n\t\t\t\ttry {\n\t\t\t\t\tnumChars = stream.read(buf);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (numChars <= 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn buf[curChar];\n\t\t}\n\n\t\tpublic int nextInt() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c)) {\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9') {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic long nextLong() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c)) {\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tlong res = 0;\n\t\t\tdo {\n\t\t\t\tif (c < '0' || c > '9') {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic String nextString() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c)) {\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tStringBuilder res = new StringBuilder();\n\t\t\tdo {\n\t\t\t\tif (Character.isValidCodePoint(c)) {\n\t\t\t\t\tres.appendCodePoint(c);\n\t\t\t\t}\n\t\t\t\tc = read();\n\t\t\t} while (!isSpaceChar(c));\n\t\t\treturn res.toString();\n\t\t}\n\n\t\tpublic boolean isSpaceChar(int c) {\n\t\t\tif (filter != null) {\n\t\t\t\treturn filter.isSpaceChar(c);\n\t\t\t}\n\t\t\treturn isWhitespace(c);\n\t\t}\n\n\t\tpublic static boolean isWhitespace(int c) {\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n\t\t}\n\n\t\tprivate String readLine0() {\n\t\t\tStringBuilder buf = new StringBuilder();\n\t\t\tint c = read();\n\t\t\twhile (c != '\\n' && c != -1) {\n\t\t\t\tif (c != '\\r') {\n\t\t\t\t\tbuf.appendCodePoint(c);\n\t\t\t\t}\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\treturn buf.toString();\n\t\t}\n\n\t\tpublic String readLine() {\n\t\t\tString s = readLine0();\n\t\t\twhile (s.trim().length() == 0) {\n\t\t\t\ts = readLine0();\n\t\t\t}\n\t\t\treturn s;\n\t\t}\n\n\t\tpublic String readLine(boolean ignoreEmptyLines) {\n\t\t\tif (ignoreEmptyLines) {\n\t\t\t\treturn readLine();\n\t\t\t} else {\n\t\t\t\treturn readLine0();\n\t\t\t}\n\t\t}\n\n\t\tpublic BigInteger readBigInteger() {\n\t\t\ttry {\n\t\t\t\treturn new BigInteger(nextString());\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tthrow new InputMismatchException();\n\t\t\t}\n\t\t}\n\n\t\tpublic char nextCharacter() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c)) {\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\treturn (char) c;\n\t\t}\n\n\t\tpublic double nextDouble() {\n\t\t\tint c = read();\n\t\t\twhile (isSpaceChar(c)) {\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tint sgn = 1;\n\t\t\tif (c == '-') {\n\t\t\t\tsgn = -1;\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tdouble res = 0;\n\t\t\twhile (!isSpaceChar(c) && c != '.') {\n\t\t\t\tif (c == 'e' || c == 'E') {\n\t\t\t\t\treturn res * Math.pow(10, nextInt());\n\t\t\t\t}\n\t\t\t\tif (c < '0' || c > '9') {\n\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t}\n\t\t\t\tres *= 10;\n\t\t\t\tres += c - '0';\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\tif (c == '.') {\n\t\t\t\tc = read();\n\t\t\t\tdouble m = 1;\n\t\t\t\twhile (!isSpaceChar(c)) {\n\t\t\t\t\tif (c == 'e' || c == 'E') {\n\t\t\t\t\t\treturn res * Math.pow(10, nextInt());\n\t\t\t\t\t}\n\t\t\t\t\tif (c < '0' || c > '9') {\n\t\t\t\t\t\tthrow new InputMismatchException();\n\t\t\t\t\t}\n\t\t\t\t\tm /= 10;\n\t\t\t\t\tres += (c - '0') * m;\n\t\t\t\t\tc = read();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res * sgn;\n\t\t}\n\n\t\tpublic boolean isExhausted() {\n\t\t\tint value;\n\t\t\twhile (isSpaceChar(value = peek()) && value != -1) {\n\t\t\t\tread();\n\t\t\t}\n\t\t\treturn value == -1;\n\t\t}\n\n\t\tpublic String next() {\n\t\t\treturn nextString();\n\t\t}\n\n\t\tpublic SpaceCharFilter getFilter() {\n\t\t\treturn filter;\n\t\t}\n\n\t\tpublic void setFilter(SpaceCharFilter filter) {\n\t\t\tthis.filter = filter;\n\t\t}\n\n\t\tpublic interface SpaceCharFilter {\n\t\t\tpublic boolean isSpaceChar(int ch);\n\t\t}\n\t\tpublic int[] nextIntArray(int n){\n\t\t\tint[] array=new int[n];\n\t\t\tfor(int i=0;i<n;++i)array[i]=nextInt();\n\t\t\treturn array;\n\t\t}\n\t\tpublic int[] nextSortedIntArray(int n){\n\t\t\tint array[]=nextIntArray(n);\n\t\t\tArrays.sort(array);\n\t\t\treturn array;\n\t\t}\n\t\tpublic int[] nextSumIntArray(int n){\n\t\t\tint[] array=new int[n];\n\t\t\tarray[0]=nextInt();\n\t\t\tfor(int i=1;i<n;++i)array[i]=array[i-1]+nextInt();\n\t\t\treturn array;\n\t\t}\n\t\tpublic long[] nextLongArray(int n){\n\t\t\tlong[] array=new long[n];\n\t\t\tfor(int i=0;i<n;++i)array[i]=nextLong();\n\t\t\treturn array;\n\t\t}\n\t\tpublic long[] nextSumLongArray(int n){\n\t\t\tlong[] array=new long[n];\n\t\t\tarray[0]=nextInt();\n\t\t\tfor(int i=1;i<n;++i)array[i]=array[i-1]+nextInt();\n\t\t\treturn array;\n\t\t}\n\t\tpublic long[] nextSortedLongArray(int n){\n\t\t\tlong array[]=nextLongArray(n);\n\t\t\tArrays.sort(array);\n\t\t\treturn array;\n\t\t}\n\t}\n\n\n}\nGicen the following input:\n1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "6.28318530717958623200\n",
        "predict": "6.283185307179586\nEND-OF-OUTPUT"
    }
}