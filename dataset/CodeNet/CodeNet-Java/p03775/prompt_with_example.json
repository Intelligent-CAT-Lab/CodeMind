{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\n\nimport java.text.DecimalFormat;\nimport java.util.stream.LongStream;\nimport java.util.stream.IntStream;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n\n        AtCoder problem = new AtCoder(sc);\n        problem.solve(out);\n\n        out.flush();\n    }\n\n}\n\nclass AtCoder {\n\n    long N;\n\n    AtCoder(FastScanner sc) {\n        N = sc.nextLong();\n    }\n\n    void solve(PrintWriter out) {\n        int sqrt = (int) Math.sqrt(N);\n        for (int i = sqrt; i > 0; i--) {\n            if (N % i == 0) {\n                int A = Integer.toString(i).length();\n                int B = Long.toString(N / i).length();\n                out.println(Math.max(A, B));\n                return;\n            }\n        }\n    }\n\n}\n\nclass FastScanner {\n\n    private final InputStream in = System.in;\n    private final byte[] buffer = new byte[1024];\n    private int ptr = 0;\n    private int buflen = 0;\n\n    private boolean hasNextByte() {\n        if (ptr < buflen) {\n            return true;\n        } else {\n            ptr = 0;\n            try {\n                buflen = in.read(buffer);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (buflen <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private int readByte() {\n        if (hasNextByte()) {\n            return buffer[ptr++];\n        } else {\n            return -1;\n        }\n    }\n\n    private static boolean isPrintableChar(int c) {\n        return 33 <= c && c <= 126;\n    }\n\n    public boolean hasNext() {\n        while (hasNextByte() && !isPrintableChar(buffer[ptr])) {\n            ptr++;\n        }\n        return hasNextByte();\n    }\n\n    public String next() {\n        if (!hasNext()) {\n            throw new NoSuchElementException();\n        }\n        StringBuilder sb = new StringBuilder();\n        int b = readByte();\n        while (isPrintableChar(b)) {\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n\n    public long nextLong() {\n        if (!hasNext()) {\n            throw new NoSuchElementException();\n        }\n        long n = 0;\n        boolean minus = false;\n        int b = readByte();\n        if (b == '-') {\n            minus = true;\n            b = readByte();\n        }\n        if (b < '0' || '9' < b) {\n            throw new NumberFormatException();\n        }\n        while (true) {\n            if ('0' <= b && b <= '9') {\n                n *= 10;\n                n += b - '0';\n            } else if (b == -1 || !isPrintableChar(b)) {\n                return minus ? -n : n;\n            } else {\n                throw new NumberFormatException();\n            }\n            b = readByte();\n        }\n    }\n\n    public int nextInt() {\n        long nl = nextLong();\n        if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) {\n            throw new NumberFormatException();\n        }\n        return (int) nl;\n    }\n\n    public double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    public int[] arrayInt(int N) {\n        int[] array = new int[N];\n        for (int i = 0; i < N; i++) {\n            array[i] = nextInt();\n        }\n        return array;\n    }\n\n    public long[] arrayLong(int N) {\n        long[] array = new long[N];\n        for (int i = 0; i < N; i++) {\n            array[i] = nextLong();\n        }\n        return array;\n    }\n\n    public double[] arrayDouble(int N) {\n        double[] array = new double[N];\n        for (int i = 0; i < N; i++) {\n            array[i] = nextDouble();\n        }\n        return array;\n    }\n\n    public String[] arrayString(int N) {\n        String[] array = new String[N];\n        for (int i = 0; i < N; i++) {\n            array[i] = next();\n        }\n        return array;\n    }\n\n    public int randomInt() {\n        Random r = new Random();\n        int value = r.nextInt((int) 1e6);\n        System.out.println(value);\n        return value;\n    }\n\n    public int[] randomInt(int N) {\n        int[] array = new int[N];\n        Random r = new Random();\n        for (int i = 0; i < N; i++) {\n            array[i] = r.nextInt((int) 1e6);\n        }\n        System.out.println(Arrays.toString(array));\n        return array;\n    }\n\n}\n\nclass My {\n\n    static void ans(boolean b) {\n        System.out.println(b ? \"Yes\" : \"No\");\n    }\n\n    static void ANS(boolean b) {\n        System.out.println(b ? \"YES\" : \"NO\");\n    }\n\n    static String sort(String s) {\n        char[] ch = s.toCharArray();\n        Arrays.sort(ch);\n        return String.valueOf(ch);\n    }\n\n    static String reverse(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    static int[] reverse(int[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n\n    static long[] reverse(long[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            long temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n\n    static double[] reverse(double[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            double temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n\n    static String[] reverse(String[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            String temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n\n    static char[] reverse(char[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            char temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n\n    static long min(long... numbers) {\n        Arrays.sort(numbers);\n        return numbers[0];\n    }\n\n    static int min(int... numbers) {\n        Arrays.sort(numbers);\n        return numbers[0];\n    }\n\n    static double min(double... numbers) {\n        Arrays.sort(numbers);\n        return numbers[0];\n    }\n\n    static long max(long... numbers) {\n        Arrays.sort(numbers);\n        return numbers[numbers.length - 1];\n    }\n\n    static int max(int... numbers) {\n        Arrays.sort(numbers);\n        return numbers[numbers.length - 1];\n    }\n\n    static double max(double... numbers) {\n        Arrays.sort(numbers);\n        return numbers[numbers.length - 1];\n    }\n\n    static int sum(long number) {\n        int sum = 0;\n        while (number > 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n\n}\nGicen the following input:\n10000\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "3\n"
    }
}