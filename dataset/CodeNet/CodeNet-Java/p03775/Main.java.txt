1 
2 import java.text.DecimalFormat;
3 import java.util.stream.LongStream;
4 import java.util.stream.IntStream;
5 import java.io.*;
6 import java.util.*;
7 
8 public class Main {
9 
10     public static void main(String[] args) {
11         FastScanner sc = new FastScanner();
12         PrintWriter out = new PrintWriter(System.out);
13 
14         AtCoder problem = new AtCoder(sc);
15         problem.solve(out);
16 
17         out.flush();
18     }
19 
20 }
21 
22 class AtCoder {
23 
24     long N;
25 
26     AtCoder(FastScanner sc) {
27         N = sc.nextLong();
28     }
29 
30     void solve(PrintWriter out) {
31         int sqrt = (int) Math.sqrt(N);
32         for (int i = sqrt; i > 0; i--) {
33             if (N % i == 0) {
34                 int A = Integer.toString(i).length();
35                 int B = Long.toString(N / i).length();
36                 out.println(Math.max(A, B));
37                 return;
38             }
39         }
40     }
41 
42 }
43 
44 class FastScanner {
45 
46     private final InputStream in = System.in;
47     private final byte[] buffer = new byte[1024];
48     private int ptr = 0;
49     private int buflen = 0;
50 
51     private boolean hasNextByte() {
52         if (ptr < buflen) {
53             return true;
54         } else {
55             ptr = 0;
56             try {
57                 buflen = in.read(buffer);
58             } catch (IOException e) {
59                 e.printStackTrace();
60             }
61             if (buflen <= 0) {
62                 return false;
63             }
64         }
65         return true;
66     }
67 
68     private int readByte() {
69         if (hasNextByte()) {
70             return buffer[ptr++];
71         } else {
72             return -1;
73         }
74     }
75 
76     private static boolean isPrintableChar(int c) {
77         return 33 <= c && c <= 126;
78     }
79 
80     public boolean hasNext() {
81         while (hasNextByte() && !isPrintableChar(buffer[ptr])) {
82             ptr++;
83         }
84         return hasNextByte();
85     }
86 
87     public String next() {
88         if (!hasNext()) {
89             throw new NoSuchElementException();
90         }
91         StringBuilder sb = new StringBuilder();
92         int b = readByte();
93         while (isPrintableChar(b)) {
94             sb.appendCodePoint(b);
95             b = readByte();
96         }
97         return sb.toString();
98     }
99 
100     public long nextLong() {
101         if (!hasNext()) {
102             throw new NoSuchElementException();
103         }
104         long n = 0;
105         boolean minus = false;
106         int b = readByte();
107         if (b == '-') {
108             minus = true;
109             b = readByte();
110         }
111         if (b < '0' || '9' < b) {
112             throw new NumberFormatException();
113         }
114         while (true) {
115             if ('0' <= b && b <= '9') {
116                 n *= 10;
117                 n += b - '0';
118             } else if (b == -1 || !isPrintableChar(b)) {
119                 return minus ? -n : n;
120             } else {
121                 throw new NumberFormatException();
122             }
123             b = readByte();
124         }
125     }
126 
127     public int nextInt() {
128         long nl = nextLong();
129         if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) {
130             throw new NumberFormatException();
131         }
132         return (int) nl;
133     }
134 
135     public double nextDouble() {
136         return Double.parseDouble(next());
137     }
138 
139     public int[] arrayInt(int N) {
140         int[] array = new int[N];
141         for (int i = 0; i < N; i++) {
142             array[i] = nextInt();
143         }
144         return array;
145     }
146 
147     public long[] arrayLong(int N) {
148         long[] array = new long[N];
149         for (int i = 0; i < N; i++) {
150             array[i] = nextLong();
151         }
152         return array;
153     }
154 
155     public double[] arrayDouble(int N) {
156         double[] array = new double[N];
157         for (int i = 0; i < N; i++) {
158             array[i] = nextDouble();
159         }
160         return array;
161     }
162 
163     public String[] arrayString(int N) {
164         String[] array = new String[N];
165         for (int i = 0; i < N; i++) {
166             array[i] = next();
167         }
168         return array;
169     }
170 
171     public int randomInt() {
172         Random r = new Random();
173         int value = r.nextInt((int) 1e6);
174         System.out.println(value);
175         return value;
176     }
177 
178     public int[] randomInt(int N) {
179         int[] array = new int[N];
180         Random r = new Random();
181         for (int i = 0; i < N; i++) {
182             array[i] = r.nextInt((int) 1e6);
183         }
184         System.out.println(Arrays.toString(array));
185         return array;
186     }
187 
188 }
189 
190 class My {
191 
192     static void ans(boolean b) {
193         System.out.println(b ? "Yes" : "No");
194     }
195 
196     static void ANS(boolean b) {
197         System.out.println(b ? "YES" : "NO");
198     }
199 
200     static String sort(String s) {
201         char[] ch = s.toCharArray();
202         Arrays.sort(ch);
203         return String.valueOf(ch);
204     }
205 
206     static String reverse(String s) {
207         return new StringBuilder(s).reverse().toString();
208     }
209 
210     static int[] reverse(int[] array) {
211         for (int i = 0; i < array.length / 2; i++) {
212             int temp = array[i];
213             array[i] = array[array.length - 1 - i];
214             array[array.length - 1 - i] = temp;
215         }
216         return array;
217     }
218 
219     static long[] reverse(long[] array) {
220         for (int i = 0; i < array.length / 2; i++) {
221             long temp = array[i];
222             array[i] = array[array.length - 1 - i];
223             array[array.length - 1 - i] = temp;
224         }
225         return array;
226     }
227 
228     static double[] reverse(double[] array) {
229         for (int i = 0; i < array.length / 2; i++) {
230             double temp = array[i];
231             array[i] = array[array.length - 1 - i];
232             array[array.length - 1 - i] = temp;
233         }
234         return array;
235     }
236 
237     static String[] reverse(String[] array) {
238         for (int i = 0; i < array.length / 2; i++) {
239             String temp = array[i];
240             array[i] = array[array.length - 1 - i];
241             array[array.length - 1 - i] = temp;
242         }
243         return array;
244     }
245 
246     static char[] reverse(char[] array) {
247         for (int i = 0; i < array.length / 2; i++) {
248             char temp = array[i];
249             array[i] = array[array.length - 1 - i];
250             array[array.length - 1 - i] = temp;
251         }
252         return array;
253     }
254 
255     static long min(long... numbers) {
256         Arrays.sort(numbers);
257         return numbers[0];
258     }
259 
260     static int min(int... numbers) {
261         Arrays.sort(numbers);
262         return numbers[0];
263     }
264 
265     static double min(double... numbers) {
266         Arrays.sort(numbers);
267         return numbers[0];
268     }
269 
270     static long max(long... numbers) {
271         Arrays.sort(numbers);
272         return numbers[numbers.length - 1];
273     }
274 
275     static int max(int... numbers) {
276         Arrays.sort(numbers);
277         return numbers[numbers.length - 1];
278     }
279 
280     static double max(double... numbers) {
281         Arrays.sort(numbers);
282         return numbers[numbers.length - 1];
283     }
284 
285     static int sum(long number) {
286         int sum = 0;
287         while (number > 0) {
288             sum += number % 10;
289             number /= 10;
290         }
291         return sum;
292     }
293 
294 }
