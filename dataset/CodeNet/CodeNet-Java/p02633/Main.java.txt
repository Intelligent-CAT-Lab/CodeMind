1 import java.io.*;
2 import java.util.*;
3 class Main{
4 	static final long MOD = 1_000_000_007; // 10^9+7
5     static final int MAX = 2_147_483_646; // intMax 
6     static final int INF = 1_000_000_000; // 10^9  
7     public static void main(String[] args) throws Exception {
8 		hayami saori = new hayami();
9 		int n = saori.saori_hayami();
10 		saori.close();
11 		int i = 1;
12 		while(true){
13 			if(i*n % 360 == 0){
14 				System.out.println(i);
15 				return;
16 			}
17 			i++;
18 		}
19     }
20 }
21 
22 class hayami implements Closeable {
23 	private final InputStream in = System.in;
24 	private final byte[] hayami = new byte[1024];
25 	private int Hayami = 0;
26 	private int saori = 0;
27 	private boolean HayamiSaori() {
28 		if (Hayami < saori) {
29 			return true;
30 		}else{
31 			Hayami = 0;
32 			try {
33 				saori = in.read(hayami);
34 			} catch (IOException e) {
35 				e.printStackTrace();
36 			}
37 			if (saori <= 0) {
38 				return false;
39 			}
40 		}
41 		return true;
42 	}
43 	private int SaoriHayami() { 
44 		if (HayamiSaori()) {
45             return hayami[Hayami++];
46          }else{
47              return -1;
48          }
49 	}
50 	private static boolean hayami_saori(int hayami) { 
51 		return 33 <= hayami && hayami <= 126;
52 	}
53 	public boolean hayamisaori() { 
54 		while(HayamiSaori() && !hayami_saori(hayami[Hayami])) Hayami++; return HayamiSaori();
55 	}
56 	public String nextHayami() {
57 		if (!hayamisaori()) throw new NoSuchElementException();
58 		StringBuilder hayamin = new StringBuilder();
59 		int saori = SaoriHayami();
60 		while(hayami_saori(saori)) {
61 			hayamin.appendCodePoint(saori);
62 			saori = SaoriHayami();
63 		}
64 		return hayamin.toString();
65 	}
66 	public long saorihayami() {//nextLong
67 		if (!hayamisaori()) throw new NoSuchElementException();
68 		long hayami = 0;
69 		boolean misao = false;
70 		int saori = SaoriHayami();
71 		if (saori == '-') {
72 			misao = true;
73 			saori = SaoriHayami();
74 		}
75 		if (saori < '0' || '9' < saori) {
76 			throw new NumberFormatException();
77 		}
78 		while(true){
79 			if ('0' <= saori && saori <= '9') {
80 				hayami *= 10;
81 				hayami += saori - '0';
82 			}else if(saori == -1 || !hayami_saori(saori)){
83 				return misao ? -hayami : hayami;
84 			}else{
85 				throw new NumberFormatException();
86 			}
87 			saori = SaoriHayami();
88 		}
89 	}
90 	public int saori_hayami() {//nextInt
91 		long hayami = saorihayami();
92 		if (hayami < Integer.MIN_VALUE || hayami > Integer.MAX_VALUE) throw new NumberFormatException();
93 		return (int) hayami;
94 	}
95 	public double Hayamin() { //nextDouble
96 		return Double.parseDouble(nextHayami());
97 	}
98 	public void close() {
99 		try {
100 			in.close();
101 		} catch (IOException e) {
102 		}
103     }
104     
105 }