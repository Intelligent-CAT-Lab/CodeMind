1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.Arrays;
6 import java.util.InputMismatchException;
7 
8 public class Main {
9 	static InputStream is;
10 	static PrintWriter out;
11 	static String INPUT = "";
12 //	static String INPUT = "?0011";
13 //	static String INPUT = "000?00";
14 //	static String INPUT = "?010";
15 	
16 	// 22224
17 	// 11133    
18 	
19 	static void solve()
20 	{
21 		char[] s = ns().toCharArray();
22 		int n = s.length;
23 		
24 		StarrySkyTreeL sst = new StarrySkyTreeL(2*n+5);
25 		int O = n+2;
26 		int Q = O+1;
27 		sst.add(O+1, sst.H, 99999999);
28 		
29 		for(int i = n-1;i >= 0;i--){
30 			if(s[i] == '1'){
31 				if(sst.min(O, O+1) < 90000000){
32 					Q--;
33 				}
34 				long v = sst.min(O, O+1);
35 				long to = sst.min(O-1, O);
36 				
37 				sst.add(0, sst.H, 1);
38 				O--;
39 				if(v < to){
40 					sst.add(O, O+1, v-to);
41 				}
42 				sst.add(O+1, O+2, 99999999);
43 			}else if(s[i] == '0'){
44 				sst.add(0, sst.H, -1);
45 				O++;
46 				int last = sst.lastle(sst.H-1, -1);
47 				sst.add(0, last+1, 1);
48 			}else{
49 				O++;
50 				for(int j = Q-2;j < Q;j++){
51 					int nj = Math.min(j+2, O);
52 					long nv = sst.min(j, j+1) + 2;
53 					long ov = sst.min(nj, nj+1);
54 					if(nv < ov){
55 						sst.add(nj, nj+1, nv-ov);
56 					}
57 				}
58 				Q = Math.min(Q+2, O+1);
59 				
60 				sst.add(0, sst.H, -1);
61 				int last = sst.lastle(sst.H-1, -1);
62 				sst.add(0, last+1, 1);
63 			}
64 //			tr(O, Q, sst.toArray());
65 		}
66 		long[] ar = sst.toArray();
67 		long min = Long.MAX_VALUE;
68 		for(int i = 0;i < sst.H;i++){
69 			long inf = i-O;
70 			long sup = ar[i];
71 			min = Math.min(min, sup-inf);
72 		}
73 		out.println(min);
74 	}
75 	
76 	public static class StarrySkyTreeL {
77 		public int M, H, N;
78 		public long[] st;
79 		public long[] plus;
80 		public long I = Long.MAX_VALUE/4; // I+plus<long
81 		
82 		public StarrySkyTreeL(int n)
83 		{
84 			N = n;
85 			M = Integer.highestOneBit(Math.max(n-1, 1))<<2;
86 			H = M>>>1;
87 			st = new long[M];
88 			plus = new long[H];
89 		}
90 		
91 		public StarrySkyTreeL(long[] a)
92 		{
93 			N = a.length;
94 			M = Integer.highestOneBit(Math.max(N-1, 1))<<2;
95 			H = M>>>1;
96 			st = new long[M];
97 			for(int i = 0;i < N;i++){
98 				st[H+i] = a[i];
99 			}
100 			plus = new long[H];
101 			Arrays.fill(st, H+N, M, I);
102 			for(int i = H-1;i >= 1;i--)propagate(i);
103 		}
104 		
105 		private void propagate(int i)
106 		{
107 			st[i] = Math.min(st[2*i], st[2*i+1]) + plus[i];
108 		}
109 		
110 		public void add(int l, int r, long v){ if(l < r)add(l, r, v, 0, H, 1); }
111 		
112 		private void add(int l, int r, long v, int cl, int cr, int cur)
113 		{
114 			if(l <= cl && cr <= r){
115 				if(cur >= H){
116 					st[cur] += v;
117 				}else{
118 					plus[cur] += v;
119 					propagate(cur);
120 				}
121 			}else{
122 				int mid = cl+cr>>>1;
123 				if(cl < r && l < mid){
124 					add(l, r, v, cl, mid, 2*cur);
125 				}
126 				if(mid < r && l < cr){
127 					add(l, r, v, mid, cr, 2*cur+1);
128 				}
129 				propagate(cur);
130 			}
131 		}
132 		
133 		public long min(int l, int r){ return l >= r ? I : min(l, r, 0, H, 1);}
134 		
135 		private long min(int l, int r, int cl, int cr, int cur)
136 		{
137 			if(l <= cl && cr <= r){
138 				return st[cur];
139 			}else{
140 				int mid = cl+cr>>>1;
141 				long ret = I;
142 				if(cl < r && l < mid){
143 					ret = Math.min(ret, min(l, r, cl, mid, 2*cur));
144 				}
145 				if(mid < r && l < cr){
146 					ret = Math.min(ret, min(l, r, mid, cr, 2*cur+1));
147 				}
148 				return ret + plus[cur];
149 			}
150 		}
151 		
152 		public void fall(int i)
153 		{
154 			if(i < H){
155 				if(2*i < H){
156 					plus[2*i] += plus[i];
157 					plus[2*i+1] += plus[i];
158 				}
159 				st[2*i] += plus[i];
160 				st[2*i+1] += plus[i];
161 				plus[i] = 0;
162 			}
163 		}
164 		
165 		public int firstle(int l, long v) {
166 			if(l >= H)return -1;
167 			int cur = H+l;
168 			for(int i = 1, j = Integer.numberOfTrailingZeros(H)-1;i <= cur;j--){
169 				fall(i);
170 				i = i*2|cur>>>j&1;
171 			}
172 			while(true){
173 				fall(cur);
174 				if(st[cur] <= v){
175 					if(cur >= H)return cur-H;
176 					cur = 2*cur;
177 				}else{
178 					cur++;
179 					if((cur&cur-1) == 0)return -1;
180 					cur = cur>>>Integer.numberOfTrailingZeros(cur);
181 				}
182 			}
183 		}
184 		
185 		public int lastle(int l, long v) {
186 			if(l < 0)return -1;
187 			int cur = H+l;
188 			for(int i = 1, j = Integer.numberOfTrailingZeros(H)-1;i <= cur;j--){
189 				fall(i);
190 				i = i*2|cur>>>j&1;
191 			}
192 			while(true){
193 				fall(cur);
194 				if(st[cur] <= v){
195 					if(cur >= H)return cur-H;
196 					cur = 2*cur+1;
197 				}else{
198 					if((cur&cur-1) == 0)return -1;
199 					cur = cur>>>Integer.numberOfTrailingZeros(cur);
200 					cur--;
201 				}
202 			}
203 		}
204 		
205 		public void addx(int l, int r, long v){
206 			if(l >= r)return;
207 			while(l != 0){
208 				int f = l&-l;
209 				if(l+f > r)break;
210 				if(f == 1){
211 					st[(H+l)/f] += v;
212 				}else{
213 					plus[(H+l)/f] += v;
214 				}
215 				l += f;
216 			}
217 			
218 			while(l < r){
219 				int f = r&-r;
220 				if(f == 1){
221 					st[(H+r)/f-1] += v;
222 				}else{
223 					plus[(H+r)/f-1] += v;
224 				}
225 				r -= f;
226 			}
227 		}
228 		
229 		public long minx(int l, int r){
230 			long lmin = I;
231 			if(l >= r)return lmin;
232 			if(l != 0){
233 				for(int d = 0;H>>>d > 0;d++){
234 					if(d > 0){
235 						int id = (H+l-1>>>d);
236 						lmin += plus[id];
237 					}
238 					if(l<<~d<0 && l+(1<<d) <= r){
239 						long v = st[H+l>>>d];
240 						if(v < lmin)lmin = v;
241 						l += 1<<d;
242 					}
243 				}
244 			}
245 			long rmin = I;
246 			for(int d = 0;H>>>d > 0;d++){
247 				if(d > 0 && r < H)rmin += plus[H+r>>>d];
248 				if(r<<~d<0 && l < r){
249 					long v = st[(H+r>>>d)-1];
250 					if(v < rmin)rmin = v;
251 					r -= 1<<d;
252 				}
253 			}
254 			long min = Math.min(lmin, rmin);
255 			return min;
256 		}
257 		
258 		public long[] toArray() { return toArray(1, 0, H, new long[H]); }
259 		
260 		private long[] toArray(int cur, int l, int r, long[] ret)
261 		{
262 			if(r-l == 1){
263 				ret[cur-H] = st[cur];
264 			}else{
265 				toArray(2*cur, l, l+r>>>1, ret);
266 				toArray(2*cur+1, l+r>>>1, r, ret);
267 				for(int i = l;i < r;i++)ret[i] += plus[cur];
268 			}
269 			return ret;
270 		}
271 	}
272 	
273 	public static void main(String[] args) throws Exception
274 	{
275 		long S = System.currentTimeMillis();
276 		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
277 		out = new PrintWriter(System.out);
278 		
279 		solve();
280 		out.flush();
281 		long G = System.currentTimeMillis();
282 		tr(G-S+"ms");
283 	}
284 	
285 	private static boolean eof()
286 	{
287 		if(lenbuf == -1)return true;
288 		int lptr = ptrbuf;
289 		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
290 		
291 		try {
292 			is.mark(1000);
293 			while(true){
294 				int b = is.read();
295 				if(b == -1){
296 					is.reset();
297 					return true;
298 				}else if(!isSpaceChar(b)){
299 					is.reset();
300 					return false;
301 				}
302 			}
303 		} catch (IOException e) {
304 			return true;
305 		}
306 	}
307 	
308 	private static byte[] inbuf = new byte[1024];
309 	static int lenbuf = 0, ptrbuf = 0;
310 	
311 	private static int readByte()
312 	{
313 		if(lenbuf == -1)throw new InputMismatchException();
314 		if(ptrbuf >= lenbuf){
315 			ptrbuf = 0;
316 			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
317 			if(lenbuf <= 0)return -1;
318 		}
319 		return inbuf[ptrbuf++];
320 	}
321 	
322 	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
323 //	private static boolean isSpaceChar(int c) { return !(c >= 32 && c <= 126); }
324 	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
325 	
326 	private static double nd() { return Double.parseDouble(ns()); }
327 	private static char nc() { return (char)skip(); }
328 	
329 	private static String ns()
330 	{
331 		int b = skip();
332 		StringBuilder sb = new StringBuilder();
333 		while(!(isSpaceChar(b))){
334 			sb.appendCodePoint(b);
335 			b = readByte();
336 		}
337 		return sb.toString();
338 	}
339 	
340 	private static char[] ns(int n)
341 	{
342 		char[] buf = new char[n];
343 		int b = skip(), p = 0;
344 		while(p < n && !(isSpaceChar(b))){
345 			buf[p++] = (char)b;
346 			b = readByte();
347 		}
348 		return n == p ? buf : Arrays.copyOf(buf, p);
349 	}
350 	
351 	private static char[][] nm(int n, int m)
352 	{
353 		char[][] map = new char[n][];
354 		for(int i = 0;i < n;i++)map[i] = ns(m);
355 		return map;
356 	}
357 	
358 	private static int[] na(int n)
359 	{
360 		int[] a = new int[n];
361 		for(int i = 0;i < n;i++)a[i] = ni();
362 		return a;
363 	}
364 	
365 	private static int ni()
366 	{
367 		int num = 0, b;
368 		boolean minus = false;
369 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
370 		if(b == '-'){
371 			minus = true;
372 			b = readByte();
373 		}
374 		
375 		while(true){
376 			if(b >= '0' && b <= '9'){
377 				num = num * 10 + (b - '0');
378 			}else{
379 				return minus ? -num : num;
380 			}
381 			b = readByte();
382 		}
383 	}
384 	
385 	private static long nl()
386 	{
387 		long num = 0;
388 		int b;
389 		boolean minus = false;
390 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
391 		if(b == '-'){
392 			minus = true;
393 			b = readByte();
394 		}
395 		
396 		while(true){
397 			if(b >= '0' && b <= '9'){
398 				num = num * 10 + (b - '0');
399 			}else{
400 				return minus ? -num : num;
401 			}
402 			b = readByte();
403 		}
404 	}
405 	
406 	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
407 }
