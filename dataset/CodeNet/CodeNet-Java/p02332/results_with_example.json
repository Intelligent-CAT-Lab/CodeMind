{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN",
        "predict": "mon\nEND-OF-OUTPUT"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\n \npublic class Main implements Runnable {\n\t\n    public static void main(String[] args) {\n    \tnew Thread(null, new Main(), \"\", 16 * 1024 * 1024).start();\n    }\n    \n    public void run() {\n        FastScanner sc = new FastScanner();\n        \n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        \n        Combinatrics c = new Combinatrics(k);\n\n    \tSystem.out.println(c.permutation(k, n));\n    }\n}\n\n\n\nclass Combinatrics {\n\t\n\tstatic long mod = 1000000007; //\u9006\u5143\u3092\u53d6\u308b\u306e\u3067\u7d20\u6570\u524d\u63d0\n\tstatic long[] fact; //\u968e\u4e57\u306e\u30c6\u30fc\u30d6\u30eb\n\tstatic long[] inv;\t//\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\n\tstatic long[] finv; //\u968e\u4e57\u306e\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\n\t\n\tpublic Combinatrics(int n){\n\t\tfact = new long[n+1];\n\t\tinv = new long[n+1];\n\t\tfinv = new long[n+1];\n\t    fact[0] = fact[1] = 1;\n\t    finv[0] = finv[1] = 1;\n\t    inv[1] = 1;\n\t    for(int i=2;i<n+1; i++){\n\t        fact[i] = fact[i-1] * i % mod;\n\t        inv[i] = mod - inv[(int)mod%i] * (mod / i) % mod;\n\t        finv[i] = finv[i-1] * inv[i] % mod;\n\t    }\n\t}\n\t\n\t//\u9006\u5143\n\tint inv(int n){\n\t\treturn (int)inv[n];\n\t}\n\t\n\t//n!\n\tint factorial(int n){\n\t\treturn (int)fact[n];\n\t}\n\t\n\t//n!\u306e\u9006\u5143\n\tint factInv(int n){\n\t\treturn (int)finv[n];\n\t}\n\t\n\t//nCr\uff08n\u500b\u304b\u3089r\u500b\u9078\u3076\uff09\n    int combination(int n, int r) {\n        if(n<r|| r<0){\n        \treturn 0;\n        }\n        return (int)(fact[n]*finv[r]%mod*finv[n-r]%mod);\n    }\n\n    //nPr (=n*(n-1)*...*(n-r+1))\uff08n\u500b\u304b\u3089r\u500b\u9078\u3093\u3067\u4e26\u3079\u308b\uff09\n    int permutation(int n, int r) {\n        if(n<r || r<0){\n        \treturn 0;\n        }\n        return (int)(fact[n]*finv[n-r]%mod);\n    }\n\n    //nHr (=n+r-1Cr)\uff08n\u500b\u304b\u3089\u91cd\u8907\u3092\u8a31\u3057\u3066k\u500b\u3068\u308b\uff09\n    //\uff08\u30c6\u30fc\u30d6\u30eb\u304cn+r-1\u307e\u3067\u5fc5\u8981\u306a\u4e8b\u306b\u6ce8\u610f\uff01\uff09\n    int homogeneous(int n, int r) {\n        if(n==0 && r==0){\n        \treturn 1;\n        }\n        return combination(n+r-1,r);\n    }\n\n}\n\nclass FastScanner {\n\tprivate final InputStream in = System.in;\n\tprivate final byte[] buffer = new byte[1024];\n\tprivate int ptr = 0;\n\tprivate int buflen = 0;\n\tprivate boolean hasNextByte() {\n\t\tif (ptr < buflen) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tptr = 0;\n\t\t\ttry {\n\t\t\t\tbuflen = in.read(buffer);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tif (buflen <= 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tprivate int readByte() {\n\t\tif (hasNextByte())\n\t\t\treturn buffer[ptr++];\n\t\telse\n\t\t\treturn -1;\n\t}\n\tprivate static boolean isPrintableChar(int c) {\n\t\treturn 33 <= c && c <= 126;\n\t}\n\tpublic boolean hasNext() {\n\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\tptr++;\n\t\treturn hasNextByte();\n\t}\n\tpublic String next() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint b = readByte();\n\t\twhile (isPrintableChar(b)) {\n\t\t\tsb.appendCodePoint(b);\n\t\t\tb = readByte();\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic long nextLong() {\n\t\tif (!hasNext())\n\t\t\tthrow new NoSuchElementException();\n\t\tlong n = 0;\n\t\tboolean minus = false;\n\t\tint b = readByte();\n\t\tif (b == '-') {\n\t\t\tminus = true;\n\t\t\tb = readByte();\n\t\t}\n\t\tif (b < '0' || '9' < b) {\n\t\t\tthrow new NumberFormatException();\n\t\t}\n\t\twhile (true) {\n\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\tn *= 10;\n\t\t\t\tn += b - '0';\n\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\treturn minus ? -n : n;\n\t\t\t} else {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\tb = readByte();\n\t\t}\n\t}\n\tpublic int nextInt() {\n\t\tlong nl = nextLong();\n\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\tthrow new NumberFormatException();\n\t\treturn (int) nl;\n\t}\n\tpublic int[] nextIntArray(int n){\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic Integer[] nextIntegerArray(int n){\n\t\tInteger[] a = new Integer[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = nextInt();\n\t\t}\n\t\treturn a;\n\t}\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\nGicen the following input:\n2 3\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "6\n",
        "predict": "2"
    }
}