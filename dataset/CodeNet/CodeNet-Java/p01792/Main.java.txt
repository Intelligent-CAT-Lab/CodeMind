1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.io.PrintWriter;
4 import java.lang.management.ManagementFactory;
5 import java.lang.management.ThreadMXBean;
6 import java.util.ArrayList;
7 import java.util.Arrays;
8 import java.util.Collections;
9 import java.util.Comparator;
10 import java.util.PriorityQueue;
11 
12 public class Main {
13 	static boolean debug = false;
14 
15 	public static void main(String[] args) throws IOException {
16 
17 		UserScanner scan = new UserScanner(System.in);
18 		// PrintWriter pwriter = new PrintWriter(System.out);
19 		do {
20 			int p = scan.nextInt();
21 			int m = scan.nextInt();
22 			int n = scan.nextInt();
23 			Casino casino = new Casino(debug);
24 			casino.printProb(p, m, n);
25 		} while (debug);
26 
27 		scan.close();
28 		System.exit(0);
29 	}
30 }
31 
32 class Casino {
33 	boolean debug;
34 
35 	public Casino(boolean debug) {
36 		this.debug = debug;
37 	}
38 
39 	public void printProb(int p, int m, int n) {
40 		// if p is 0% or 100%, the probability are same for any bets.
41 		// and if p is 50%, bet amount must not be greater than m when succeed.
42 		if (p == 0) {
43 			System.out.println(0d);
44 			printBet(m);
45 		} else if (p == 50) {
46 			// we can get same answer
47 			if (debug)
48 				System.out.println("debug\n" + getProbLarge(p / 100d, m, n));
49 			System.out.println((double) m / n);
50 			printBet(Math.min(m, n - m));
51 		} else if (p == 100) {
52 			System.out.println(1d);
53 			printBet(m);
54 		} else if (p > 50) {
55 			System.out.println(getProbLarge(p / 100d, m, n));
56 			System.out.println("1");
57 			System.out.println("1");
58 		} else {
59 			printProbSmall(p / 100d, m, n);
60 		}
61 	}
62 
63 	private void printBet(int m) {
64 		System.out.println(m);
65 		System.out.print("1");
66 		if (m <= 200)
67 			for (int i = 2; i <= m; i++)
68 				System.out.print(" " + i);
69 		else {
70 			for (int i = 2; i <= 100; i++)
71 				System.out.print(" " + i);
72 			for (int i = m - 100 + 1; i <= m; i++)
73 				System.out.print(" " + i);
74 		}
75 		System.out.println();
76 	}
77 
78 	private void printProbSmall(double p, int m, int n) {
79 		Prob pb = new Prob(p, n);
80 		double hi = pb.getProbSmall(m, 1d);
81 		System.out.println(hi);
82 		if (debug) {
83 			// if we check all bet pattern, it can not end for larger m value
84 			// within CPU time limits.
85 			// This statement is only for check the result.
86 			int[] bet = new int[100];
87 			int cnt = 0;
88 			for (int i = 1; i <= m; i++)
89 				if (Math.abs(p * pb.getProbSmall(m + i, 1d) + (1d - p) * pb.getProbSmall(m - i, 1d) - hi) < Math
90 						.pow(0.1, 10)) {
91 					bet[cnt++] = i;
92 				}
93 			System.out.println("debug\n" + cnt);
94 			System.out.print(bet[0]);
95 			for (int i = 1; i < cnt; i++)
96 				System.out.print(" " + bet[i]);
97 			System.out.println();
98 		}
99 
100 		int[] bet = new int[100];
101 		setFirstBet(bet, 0, m, 0, n);
102 
103 		Arrays.sort(bet);
104 		int cnt = 0;
105 		for (int i = 1; i < bet.length; i++)
106 			if (bet[i] > 0 && bet[i] != bet[i - 1])
107 				bet[cnt++] = bet[i];
108 		System.out.println(cnt);
109 		System.out.print(bet[0]);
110 		for (int i = 1; i < cnt; i++)
111 			System.out.print(" " + bet[i]);
112 		System.out.println();
113 	}
114 
115 	private void setFirstBet(int[] bet, int cnt, int m, int min, int max) {
116 		// one of the best bet value is all m when m is less than half of n
117 		// otherwise n-m. It's just get the n.
118 		//
119 		// In case of m is less than half of n, other bet is same probability.
120 		//
121 		// for example m is 3, n is 8
122 		// success bet 3 , and success or fail at second bet 2, continue..
123 		// f(3) = p*f(6) = p*{p + (1-p)*f(4)} = pp + p(1-p)f(4)
124 		// success or fail first bet 1, and second bet is all
125 		// f(3) = p*f(4) + (1-p)*f(2) = p*f(4) + (1-p)*p*f(4) = same
126 		//
127 		// In case of m is greater than half of n
128 		// fail at first bet, then remain just half of n, is same probability.
129 		//
130 		// I can not prove this rule more exactly,
131 		// but it can recursively true
132 		//
133 		bet[cnt++] = Math.min(m - min, max - m);
134 		if (max > min && (max + min) % 2 == 0) {
135 			if ((max + min) / 2 > m)
136 				max = (max + min) / 2;
137 			else
138 				min = (max + min) / 2;
139 			setFirstBet(bet, cnt, m, min, max);
140 		}
141 
142 	}
143 
144 	class Prob {
145 		int n;
146 		double p;
147 
148 		public Prob(double p, int n) {
149 			this.p = p;
150 			this.n = n;
151 		}
152 
153 		public double getProbSmall(int m, double ps) {
154 			// If p is less than 50 percents, best selection is to minimize the
155 			// try count.
156 			// When we have m, and m is less than n/2, bet all m
157 			// Otherwise bet (n - m) and just get n when success.
158 			//
159 			// This function repeatedly call with same value, for example
160 			// when we have m = 2 and goal n = 3
161 			// f(2) = p + (1-p)*f(1) = p + (1-p)*p*f(2) = p + (1-p)*p*{ p +
162 			// (1-p)*f(1) } = ...
163 			//
164 			// it means if fail at first bet f(2) call f(1), and succeed in
165 			// second bet f(1) call f(2) ...
166 			// Then keep dependency of sub call as 'ps', and if it saturate to
167 			// zero percent, terminate the sub call
168 			//
169 			if (m >= n)
170 				return 1d;
171 			if (m <= 0)
172 				return 0d;
173 
174 			if (ps < Math.pow(0.1, 15))
175 				return 0d;
176 
177 			double x = 1d;
178 			if (2 * m <= n)
179 				x = p * getProbSmall(2 * m, ps * p);
180 			else
181 				x = p + (1d - p) * getProbSmall(2 * m - n, ps * (1d - p));
182 
183 			return x;
184 		}
185 	}
186 
187 	private double getProbLarge(double p, int m, int n) {
188 		// if p is greater than 50 percent, bet 1 by 1 is best selection
189 		//
190 		// probability to increase m to n is represented as f(m,n), then
191 		// --- f(m,n) = f(m,m+1) * f(m+1,n)
192 		// --- = f(m,m+1) * f(m+1,m+2) * (f(m+2,m+3) * ..... * f(n-1,n)
193 		//
194 		// and
195 		// --- f(m,m+1) = p + (1-p) * f(m-1,m) * f(m,m+1)
196 		// bet 1 and success, that probability is p, and probability of fail is
197 		// (1-p). if fail, retry increase m-1 to m, and m to m+1
198 		//
199 		// --- f(m,m+1) = p / ( 1 - (1-p) * f(m-1,m) )
200 		// --- f(0,1) = 0, f(1,2) = p;
201 		//
202 		// additionally f(m,m+1) saturate to 100 percent at large m value
203 		// when p is 51 percent, f(1000,1001), f(1001,1002),... are saturated to
204 		// 100 percent
205 		// no need to calculate
206 		if (m > 1000)
207 			return 1d;
208 		if (n > 1000)
209 			n = 1000;
210 		double[] f = new double[n];
211 		// f[m] means f(m,m+1)
212 		f[0] = 0;
213 		double pf = 1 - p;
214 		for (int i = 1; i < n; i++)
215 			f[i] = p / (1 - pf * f[i - 1]);
216 
217 		if (debug)
218 			for (int i = 1; i < n && f[i - 1] != f[i]; i++)
219 				System.out.println("f(" + i + ") = " + f[i]);
220 
221 		double result = 1d;
222 		for (int i = m; i < n; i++)
223 			result *= f[i];
224 
225 		return result;
226 	}
227 }
228 
229 class UserScanner {
230 	private InputStream in;
231 	private final byte[] buffer = new byte[1024];
232 	private int ptr = 0;
233 	private int buflen = 0;
234 
235 	public UserScanner(InputStream inStream) {
236 		in = inStream;
237 	}
238 
239 	private void read() {
240 		ptr = 0;
241 		try {
242 			buflen = in.read(buffer);
243 		} catch (IOException e) {
244 			e.printStackTrace();
245 			System.exit(9);
246 		}
247 	}
248 
249 	private byte getByte() {
250 		if (ptr >= buflen)
251 			read();
252 		if (buflen < 0 || isCtlSpace(buffer[ptr])) {
253 			return -1;
254 		} else
255 			return buffer[ptr++];
256 	}
257 
258 	private void skipCtlSpace() {
259 		for (; ptr < buflen; ptr++)
260 			if (!isCtlSpace(buffer[ptr]))
261 				return;
262 		read();
263 		skipCtlSpace();
264 	}
265 
266 	private boolean isCtlSpace(byte b) {
267 		if (b <= ' ' || b > '~')
268 			return true;
269 		else
270 			return false;
271 	}
272 
273 	public void close() {
274 		try {
275 			in.close();
276 		} catch (IOException e) {
277 			e.printStackTrace();
278 			System.exit(9);
279 		}
280 	}
281 
282 	public String next() {
283 		skipCtlSpace();
284 		StringBuilder sb = new StringBuilder();
285 		byte b;
286 		while ((b = getByte()) != -1) {
287 			sb.appendCodePoint(b);
288 		}
289 		return sb.toString();
290 	}
291 
292 	public long nextLong() {
293 		skipCtlSpace();
294 		long n = 0;
295 		boolean minus = false;
296 		byte b;
297 		while ((b = getByte()) != -1) {
298 			if (b == '-')
299 				minus = true;
300 			else {
301 				n *= 10d;
302 				n += (long) (b - '0');
303 			}
304 		}
305 		if (minus)
306 			return n * -1;
307 		else
308 			return n;
309 	}
310 
311 	public int nextInt() {
312 		skipCtlSpace();
313 		int n = 0;
314 		boolean minus = false;
315 		byte b;
316 		while ((b = getByte()) != -1) {
317 			if (b == '-')
318 				minus = true;
319 			else {
320 				n *= 10;
321 				n += (b - '0');
322 			}
323 		}
324 		if (minus)
325 			return n * -1;
326 		else
327 			return n;
328 	}
329 }