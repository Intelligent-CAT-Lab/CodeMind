{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.math.BigDecimal;\nimport java.util.AbstractMap;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeMap;\n\nimport static java.util.Comparator.*;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyInput in = new MyInput(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        \n        Solver solver = new Solver();\n        solver.solve(1, in, out);\n        \n        out.close();\n    }\n    \n    // ======================================================================\n    static class Solver {\n\n    \tpublic long calc(int n, int st, PrintWriter out) {\n//    \t    out.println(\"start : n = \" + n);\n    \t    long ans = 1;\n    \t\tlong val = st;\n    \t\twhile(val < n) {\n    \t\t\tval *= 2;\n    \t\t\tans *= 2;\n//    \t\t\tout.println(\"val = \" + val + \"  ans = \" + ans);\n    \t\t}\n\t\t\treturn ans;\n    \t}\n\n    \tpublic void solve(int testNumber, MyInput in, PrintWriter out) {\n    \t\tint N = in.nextInt();\n    \t\tint K = in.nextInt();\n    \t\tlong cnt; \n    \t\tdouble wk, ans = 0;\n    \t\tfor(int i=1; i <= N; i++) {\n    \t\t\tcnt = calc(K, i, out);\n  \t\t\t\twk = (double)1 / (cnt * N);\n   \t\t\t\tans += wk;\n//    \t\t    out.println(\"i = \" + i + \" wk = \" + wk + \"  ans = \" + ans);\n    \t\t}\n    \t\tout.println(ans);\n        }\n    }\n    static class PPP {\n    \tpublic int key, val;\n    \tpublic PPP(int key, int val) {\n    \t\tthis.key = key;\n    \t\tthis.val = val;\n    \t}\n\t\tpublic int getKey() {\n\t\t\treturn key;\n\t\t}\n\t\tpublic void setKey(int key) {\n\t\t\tthis.key = key;\n\t\t}\n\t\tpublic int getVal() {\n\t\t\treturn val;\n\t\t}\n\t\tpublic void setVal(int val) {\n\t\t\tthis.val = val;\n\t\t}\n    }\n    // ======================================================================\n    static class Pair<K, V> extends AbstractMap.SimpleEntry<K, V> {\n        /** serialVersionUID. */\n        private static final long serialVersionUID = 6411527075103472113L;\n\n        public Pair(final K key, final V value) {\n            super(key, value);\n        }\n        public String getString() {\n            return \"[\" + getKey() + \"] [\" + getValue() + \"]\";\n        }\n     }    \n    static class MyInput {\n        private final BufferedReader in;\n        private static int pos;\n        private static int readLen;\n        private static final char[] buffer = new char[1024 * 8];\n        private static char[] str = new char[500 * 8 * 2];\n        private static boolean[] isDigit = new boolean[256];\n        private static boolean[] isSpace = new boolean[256];\n        private static boolean[] isLineSep = new boolean[256];\n \n        static {\n            for (int i = 0; i < 10; i++) {\n                isDigit['0' + i] = true;\n            }\n            isDigit['-'] = true;\n            isSpace[' '] = isSpace['\\r'] = isSpace['\\n'] = isSpace['\\t'] = true;\n            isLineSep['\\r'] = isLineSep['\\n'] = true;\n        }\n \n        public MyInput(InputStream is) {\n            in = new BufferedReader(new InputStreamReader(is));\n        }\n \n        public int read() {\n            if (pos >= readLen) {\n                pos = 0;\n                try {\n                    readLen = in.read(buffer);\n                } catch (IOException e) {\n                    throw new RuntimeException();\n                }\n                if (readLen <= 0) {\n                    throw new MyInput.EndOfFileRuntimeException();\n                }\n            }\n            return buffer[pos++];\n        }\n \n        public int nextInt() {\n            int len = 0;\n            str[len++] = nextChar();\n            len = reads(len, isSpace);\n            int i = 0;\n            int ret = 0;\n            if (str[0] == '-') {\n                i = 1;\n            }\n            for (; i < len; i++) ret = ret * 10 + str[i] - '0';\n            if (str[0] == '-') {\n                ret = -ret;\n            }\n            return ret;\n        }\n \n        public long nextLong() {\n            int len = 0;\n            str[len++] = nextChar();\n            len = reads(len, isSpace);\n            int i = 0;\n            long ret = 0L;\n            if (str[0] == '-') {\n                i = 1;\n            }\n            for (; i < len; i++) ret = ret * 10 + str[i] - '0';\n            if (str[0] == '-') {\n                ret = -ret;\n            }\n            return ret;\n        }\n \n        public String nextString() {\n        \tString ret = new String(nextDChar()).trim();\n            return ret;\n        }\n \n        public char[] nextDChar() {\n            int len = 0;\n            len = reads(len, isSpace);\n            char[] ret = new char[len + 1];\n            for (int i=0; i < len; i++)\t\tret[i] = str[i];\n            ret[len] = 0x00;\n            return ret;\n        }\n \n        public char nextChar() {\n            while (true) {\n                final int c = read();\n                if (!isSpace[c]) {\n                    return (char) c;\n                }\n            }\n        }\n \n        int reads(int len, boolean[] accept) {\n            try {\n                while (true) {\n                    final int c = read();\n                    if (accept[c]) {\n                        break;\n                    }\n                    if (str.length == len) {\n                        char[] rep = new char[str.length * 3 / 2];\n                        System.arraycopy(str, 0, rep, 0, str.length);\n                        str = rep;\n                    }\n                    str[len++] = (char) c;\n                }\n            } catch (MyInput.EndOfFileRuntimeException e) {\n            }\n            return len;\n        }\n \n        static class EndOfFileRuntimeException extends RuntimeException {\n        }\n    }\n}\nGicen the following input:\n3 10\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "0.145833333333\n"
    }
}