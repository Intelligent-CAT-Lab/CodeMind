{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN",
        "predict": "mon\nEND-OF-OUTPUT"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\t\n\tlong maxDiff = 1_000_000_000;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tMain mainObj = new Main();\n\t\tmainObj.solve();\n\t}\n\n\tpublic void solve() throws IOException {\n\t\tFastScanner fs = new FastScanner();\n\t\tint x = fs.nextInt();\n\t\t\n\t\tHashMap<Long, Integer> powMap = new HashMap<>();\n\t\tpowMap.put(0L, 0);\n\t\tpowMap.put(1L, 1);\n\t\t\n\t\tlong beforePow = 1;\n\t\tlong base = 2;\n\t\twhile(true) {\n\t\t\tlong powVal = pow(base, 5);\n\t\t\tpowMap.put(powVal, (int)base);\n\t\t\tif(powVal - beforePow > x) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbase++;\n\t\t\tbeforePow = powVal;\n\t\t}\n\t\t\n\t\tfor(Map.Entry<Long, Integer> mapEntry : powMap.entrySet()) {\n\t\t\tlong powVal = mapEntry.getKey();\n\t\t\t\n\t\t\tlong diff = Math.abs(x - powVal);\n\t\t\tif(powMap.containsKey(diff)) {\n\t\t\t\tSystem.out.print(powMap.get(powVal));\n\t\t\t\tif(powVal - x < 0) {\n\t\t\t\t\tSystem.out.print(\" -\"+powMap.get(diff));\n\t\t\t\t}else {\n\t\t\t\t\tSystem.out.print(\" \"+powMap.get(diff));\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n\tpublic long pow(long base, int n) {\n\t\tlong retVal = 1;\n\t\twhile (n > 0) {\n\t\t\tif ((n & 1) == 1) {\n\t\t\t\tretVal *= base;\n\t\t\t}\n\t\t\tn >>= 1;\n\t\t\tbase *= base;\n\t\t}\n\t\treturn retVal;\n\t}\n\t\n\n\tpublic class FastScanner {\n\n\t\tBufferedReader reader;\n\t\tprivate StringTokenizer st;\n\n\t\tpublic FastScanner() {\n\t\t\tst = null;\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in));\n\t\t}\n\n\t\tpublic String next() throws IOException {\n\t\t\tif (st == null || !st.hasMoreElements()) {\n\t\t\t\tst = new StringTokenizer(reader.readLine());\n\t\t\t}\n\t\t\treturn st.nextToken();\n\t\t}\n\n\t\tpublic String nextLine() throws IOException {\n\t\t\tst = null;\n\t\t\tString readLine = null;\n\t\t\treadLine = reader.readLine();\n\t\t\treturn readLine;\n\t\t}\n\n\t\tpublic int nextInt() throws NumberFormatException, IOException {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tpublic long nextLong() throws NumberFormatException, IOException {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic int[] nextIntArr(int n) throws NumberFormatException, IOException {\n\t\t\tint[] retArr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextInt();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\tpublic long[] nextLongArr(int n) throws NumberFormatException, IOException {\n\t\t\tlong[] retArr = new long[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tretArr[i] = nextLong();\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\n\t\tpublic void close() throws IOException {\n\t\t\treader.close();\n\t\t}\n\t}\n\n}\nGicen the following input:\n33\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "2 -1\n",
        "predict": "2 -1\nEND-OF-OUTPUT"
    }
}