1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.*;
4  
5 public class Main implements Runnable {
6 	
7     public static void main(String[] args) {
8     	new Thread(null, new Main(), "", 16 * 1024 * 1024).start();
9     }
10     
11     public void run() {
12         FastScanner sc = new FastScanner();
13         
14         int n = sc.nextInt();
15         int k = sc.nextInt();
16         
17         Combinatrics c = new Combinatrics(n-1);
18 
19     	System.out.println(c.homogeneous(k, n-k));
20 
21     }
22 }
23 
24 
25 
26 class Combinatrics {
27 	
28 	static long mod = 1000000007; //逆元を取るので素数前提
29 	static long[] fact; //階乗のテーブル
30 	static long[] inv;	//逆元のテーブル
31 	static long[] finv; //階乗の逆元のテーブル
32 	
33 	public Combinatrics(int n){
34 		int N = Math.max(2,n+1);
35 		fact = new long[N];
36 		inv = new long[N];
37 		finv = new long[N];
38 	    fact[0] = fact[1] = 1;
39 	    finv[0] = finv[1] = 1;
40 	    inv[1] = 1;
41 	    for(int i=2;i<n+1; i++){
42 	        fact[i] = fact[i-1] * i % mod;
43 	        inv[i] = mod - inv[(int)mod%i] * (mod / i) % mod;
44 	        finv[i] = finv[i-1] * inv[i] % mod;
45 	    }
46 	}
47 	
48 	//逆元
49 	int inv(int n){
50 		return (int)inv[n];
51 	}
52 	
53 	//n!
54 	int factorial(int n){
55 		return (int)fact[n];
56 	}
57 	
58 	//n!の逆元
59 	int factInv(int n){
60 		return (int)finv[n];
61 	}
62 	
63 	//nCr（n個からr個選ぶ）
64     int combination(int n, int r) {
65         if(n<r|| r<0){
66         	return 0;
67         }
68         return (int)(fact[n]*finv[r]%mod*finv[n-r]%mod);
69     }
70 
71     //nPr (=n*(n-1)*...*(n-r+1))（n個からr個選んで並べる）
72     int permutation(int n, int r) {
73         if(n<r || r<0){
74         	return 0;
75         }
76         return (int)(fact[n]*finv[n-r]%mod);
77     }
78 
79     //nHr (=n+r-1Cr)（n個から重複を許してk個とる）
80     //（テーブルがn+r-1まで必要な事に注意！）
81     int homogeneous(int n, int r) {
82         if(n==0 && r==0){
83         	return 1;
84         }
85         return combination(n+r-1,r);
86     }
87 
88 }
89 
90 class FastScanner {
91 	private final InputStream in = System.in;
92 	private final byte[] buffer = new byte[1024];
93 	private int ptr = 0;
94 	private int buflen = 0;
95 	private boolean hasNextByte() {
96 		if (ptr < buflen) {
97 			return true;
98 		} else {
99 			ptr = 0;
100 			try {
101 				buflen = in.read(buffer);
102 			} catch (IOException e) {
103 				e.printStackTrace();
104 			}
105 			if (buflen <= 0) {
106 				return false;
107 			}
108 		}
109 		return true;
110 	}
111 	private int readByte() {
112 		if (hasNextByte())
113 			return buffer[ptr++];
114 		else
115 			return -1;
116 	}
117 	private static boolean isPrintableChar(int c) {
118 		return 33 <= c && c <= 126;
119 	}
120 	public boolean hasNext() {
121 		while (hasNextByte() && !isPrintableChar(buffer[ptr]))
122 			ptr++;
123 		return hasNextByte();
124 	}
125 	public String next() {
126 		if (!hasNext())
127 			throw new NoSuchElementException();
128 		StringBuilder sb = new StringBuilder();
129 		int b = readByte();
130 		while (isPrintableChar(b)) {
131 			sb.appendCodePoint(b);
132 			b = readByte();
133 		}
134 		return sb.toString();
135 	}
136 	public long nextLong() {
137 		if (!hasNext())
138 			throw new NoSuchElementException();
139 		long n = 0;
140 		boolean minus = false;
141 		int b = readByte();
142 		if (b == '-') {
143 			minus = true;
144 			b = readByte();
145 		}
146 		if (b < '0' || '9' < b) {
147 			throw new NumberFormatException();
148 		}
149 		while (true) {
150 			if ('0' <= b && b <= '9') {
151 				n *= 10;
152 				n += b - '0';
153 			} else if (b == -1 || !isPrintableChar(b)) {
154 				return minus ? -n : n;
155 			} else {
156 				throw new NumberFormatException();
157 			}
158 			b = readByte();
159 		}
160 	}
161 	public int nextInt() {
162 		long nl = nextLong();
163 		if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
164 			throw new NumberFormatException();
165 		return (int) nl;
166 	}
167 	public int[] nextIntArray(int n){
168 		int[] a = new int[n];
169 		for(int i=0;i<n;i++){
170 			a[i] = nextInt();
171 		}
172 		return a;
173 	}
174 	public Integer[] nextIntegerArray(int n){
175 		Integer[] a = new Integer[n];
176 		for(int i=0;i<n;i++){
177 			a[i] = nextInt();
178 		}
179 		return a;
180 	}
181 	public double nextDouble() {
182 		return Double.parseDouble(next());
183 	}
184 }
