1 import java.io.OutputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.StringTokenizer;
6 import java.io.IOException;
7 import java.io.BufferedReader;
8 import java.io.InputStreamReader;
9 import java.io.InputStream;
10 
11 /**
12  * Built using CHelper plug-in
13  * Actual solution is at the top
14  */
15 public class Main {
16     public static void main(String[] args) {
17         InputStream inputStream = System.in;
18         OutputStream outputStream = System.out;
19         InputReader in = new InputReader(inputStream);
20         PrintWriter out = new PrintWriter(outputStream);
21         TaskE solver = new TaskE();
22         solver.solve(1, in, out);
23         out.close();
24     }
25 
26     static class TaskE {
27         static final long MODULO = (long) (1e9 + 7);
28 
29         public void solve(int testNumber, InputReader in, PrintWriter out) {
30             String s = in.next();
31             boolean alternating = true;
32             for (int i = 0; i + 1 < s.length(); ++i) if (s.charAt(i) == s.charAt(i + 1)) alternating = false;
33             if (alternating) {
34                 out.println(1);
35                 return;
36             }
37             int[] sum = new int[s.length() + 1];
38             for (int i = 0; i < s.length(); ++i) {
39                 sum[i + 1] = sum[i];
40                 if (s.charAt(i) == 'a')
41                     sum[i + 1] += 1;
42                 else if (s.charAt(i) == 'b')
43                     sum[i + 1] += 2;
44                 else
45                     throw new RuntimeException();
46                 sum[i + 1] %= 3;
47             }
48             int[][] next = new int[3][s.length() + 2];
49             for (int i = 0; i < 3; ++i) {
50                 next[i][s.length() + 1] = s.length() + 1;
51             }
52             for (int pos = s.length(); pos >= 0; --pos) {
53                 for (int i = 0; i < 3; ++i) {
54                     next[i][pos] = next[i][pos + 1];
55                 }
56                 next[sum[pos]][pos] = pos;
57             }
58             int total = sum[s.length()];
59             long[] ways = new long[s.length() + 2];
60             ways[0] = 1;
61             for (int i = 0; i <= s.length(); ++i) {
62                 int need = (sum[i] + 1) % 3;
63                 ways[next[need][i]] += ways[i];
64                 ways[next[need][i]] %= MODULO;
65                 need = (sum[i] + 2) % 3;
66                 ways[next[need][i]] += ways[i];
67                 ways[next[need][i]] %= MODULO;
68             }
69             long res = 0;
70             for (int i = 1; i <= s.length(); ++i)
71                 if (sum[i] == total) {
72                     res = (res + ways[i]) % MODULO;
73                 }
74             out.println(res);
75         }
76 
77     }
78 
79     static class InputReader {
80         public BufferedReader reader;
81         public StringTokenizer tokenizer;
82 
83         public InputReader(InputStream stream) {
84             reader = new BufferedReader(new InputStreamReader(stream), 32768);
85             tokenizer = null;
86         }
87 
88         public String next() {
89             while (tokenizer == null || !tokenizer.hasMoreTokens()) {
90                 try {
91                     tokenizer = new StringTokenizer(reader.readLine());
92                 } catch (IOException e) {
93                     throw new RuntimeException(e);
94                 }
95             }
96             return tokenizer.nextToken();
97         }
98 
99     }
100 }
101 
