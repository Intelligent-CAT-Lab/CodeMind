{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskE solver = new TaskE();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskE {\n        static final long MODULO = (long) (1e9 + 7);\n\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            String s = in.next();\n            boolean alternating = true;\n            for (int i = 0; i + 1 < s.length(); ++i) if (s.charAt(i) == s.charAt(i + 1)) alternating = false;\n            if (alternating) {\n                out.println(1);\n                return;\n            }\n            int[] sum = new int[s.length() + 1];\n            for (int i = 0; i < s.length(); ++i) {\n                sum[i + 1] = sum[i];\n                if (s.charAt(i) == 'a')\n                    sum[i + 1] += 1;\n                else if (s.charAt(i) == 'b')\n                    sum[i + 1] += 2;\n                else\n                    throw new RuntimeException();\n                sum[i + 1] %= 3;\n            }\n            int[][] next = new int[3][s.length() + 2];\n            for (int i = 0; i < 3; ++i) {\n                next[i][s.length() + 1] = s.length() + 1;\n            }\n            for (int pos = s.length(); pos >= 0; --pos) {\n                for (int i = 0; i < 3; ++i) {\n                    next[i][pos] = next[i][pos + 1];\n                }\n                next[sum[pos]][pos] = pos;\n            }\n            int total = sum[s.length()];\n            long[] ways = new long[s.length() + 2];\n            ways[0] = 1;\n            for (int i = 0; i <= s.length(); ++i) {\n                int need = (sum[i] + 1) % 3;\n                ways[next[need][i]] += ways[i];\n                ways[next[need][i]] %= MODULO;\n                need = (sum[i] + 2) % 3;\n                ways[next[need][i]] += ways[i];\n                ways[next[need][i]] %= MODULO;\n            }\n            long res = 0;\n            for (int i = 1; i <= s.length(); ++i)\n                if (sum[i] == total) {\n                    res = (res + ways[i]) % MODULO;\n                }\n            out.println(res);\n        }\n\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n    }\n}\n\nGicen the following input:\naaaa\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "6\n"
    }
}