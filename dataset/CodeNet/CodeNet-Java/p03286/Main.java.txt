1 /**
2  * Created at 00:15 on 2019-06-28
3  */
4 
5 import java.io.*;
6 import java.util.*;
7 
8 public class Main {
9 
10   static FastScanner sc = new FastScanner();
11 
12   static int[] dx = {0, 1, 0, -1};
13   static int[] dy = {-1, 0, 1, 0};
14 
15   static long MOD = (long) (1e9 + 7);
16 
17   public static void main(String[] args) {
18 
19     new Main().run();
20 
21   }
22 
23   public void run() {
24 
25     long N = sc.nextLong();
26 
27     String ans = (N == 0 ? "0" : "");
28     while(N != 0) {
29       long q = q(N, -2);
30       long r = r(N, -2);
31       ans = r + ans;
32       N = q;
33     }
34 
35     System.out.println(ans);
36 
37   }
38 
39   public long q(long a, long b) {
40     if (b > 0) {
41       return floor(a, b);
42     } else {
43       return ceil(a, b);
44     }
45   }
46 
47   public long r(long a, long b) {
48     return a - q(a, b) * b;
49   }
50 
51   /*
52    * n <= a/b なる最大の整数nを返す
53    */
54   public long floor(long a, long b) {
55     if (b < 0) {
56       a *= -1;
57       b *= -1;
58     }
59 
60     if (a > 0) {
61       //絶対値の小さい方に丸められる(正なら負の方向)
62       return a/b;
63     } else {
64       //よくある切り上げのテクニックの切り捨て版
65       return (a-b+1)/b;
66     }
67   }
68 
69 
70   /*
71    * n >= a/b なる最小の整数nを返す
72    */
73   public long ceil(long a, long b) {
74     if (b < 0) {
75       a *= -1;
76       b *= -1;
77     }
78 
79     if (a > 0) {
80       //よくある切り上げのテクニック
81       return (a+b-1)/b;
82     } else {
83       //絶対値の小さい方に丸められる(負なら正の方向)
84       return a/b;
85     }
86   }
87 
88 
89   public static class Mathf {
90 
91     public static int max(int[] a) {
92       int M = a[0];
93       for (int i = 1; i < a.length; i++) {
94         M = Math.max(M, a[i]);
95       }
96       return M;
97     }
98 
99     public static int min(int[] a) {
100       int m = a[0];
101       for (int i = 1; i < a.length; i++) {
102         m = Math.min(m, a[i]);
103       }
104       return m;
105     }
106 
107     public static long max(long[] a) {
108       long M = a[0];
109       for (int i = 1; i < a.length; i++) {
110         M = Math.max(M, a[i]);
111       }
112       return M;
113     }
114 
115     public static long min(long[] a) {
116       long m = a[0];
117       for (int i = 1; i < a.length; i++) {
118         m = Math.min(m, a[i]);
119       }
120       return m;
121     }
122 
123   }
124 
125   /*
126     add()でインデックスを指定しない場合指定されたソート順に違わない位置に追加する
127     (ただしソートされていることが前提となる)
128     Comparatorが0を返したとき、それらの順序は保証しない
129     (TreeSet, TreeMapと違い削除はしない)
130    */
131   static class TreeList<E> extends ArrayList<E> {
132 
133     Comparator<? super E> comparator;
134 
135     TreeList(Comparator<? super E> c) {
136       super();
137       comparator = c;
138     }
139 
140     /*
141       ソート済みのリストに要素を追加する
142      */
143     public boolean add(E e) {
144       int lowIndex = 0;
145       int highIndex = size() - 1;
146       int index = 0;
147 
148       if (size() == 0) {
149         super.add(e);
150         return true;
151       }
152 
153       if (comparator.compare(e, get(0)) < 0) {
154         index = 0;
155       } else if (comparator.compare(e, get(highIndex)) > 0) {
156         index = highIndex + 1;
157       } else {
158         while (lowIndex <= highIndex) {
159 
160           if (highIndex == lowIndex + 1 || highIndex == lowIndex) {
161             index = highIndex;
162             break;
163           }
164 
165           int midIndex = (lowIndex + highIndex) / 2;
166           ;
167 
168           if (comparator.compare(e, get(midIndex)) > 0) {
169             lowIndex = midIndex;
170           } else {
171             highIndex = midIndex;
172           }
173 
174         }
175       }
176 
177       super.add(index, e);
178       return true;
179     }
180 
181   }
182 
183   static class FastScanner {
184     private final InputStream in = System.in;
185     private final byte[] buffer = new byte[1024];
186     private int ptr = 0;
187     private int buflen = 0;
188 
189     private boolean hasNextByte() {
190       if (ptr < buflen) {
191         return true;
192       } else {
193         ptr = 0;
194         try {
195           buflen = in.read(buffer);
196         } catch (IOException e) {
197           e.printStackTrace();
198         }
199         if (buflen <= 0) {
200           return false;
201         }
202       }
203       return true;
204     }
205 
206     private int readByte() {
207       if (hasNextByte()) return buffer[ptr++];
208       else return -1;
209     }
210 
211     private static boolean isPrintableChar(int c) {
212       return 33 <= c && c <= 126;
213     }
214 
215     private void skipUnprintable() {
216       while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;
217     }
218 
219     public boolean hasNext() {
220       skipUnprintable();
221       return hasNextByte();
222     }
223 
224     public String next() {
225       if (!hasNext()) throw new NoSuchElementException();
226       StringBuilder sb = new StringBuilder();
227       int b = readByte();
228       while (isPrintableChar(b)) {
229         sb.appendCodePoint(b);
230         b = readByte();
231       }
232       return sb.toString();
233     }
234 
235     public long nextLong() {
236       if (!hasNext()) throw new NoSuchElementException();
237       long n = 0;
238       boolean minus = false;
239       int b = readByte();
240       if (b == '-') {
241         minus = true;
242         b = readByte();
243       }
244       if (b < '0' || '9' < b) {
245         throw new NumberFormatException();
246       }
247       while (true) {
248         if ('0' <= b && b <= '9') {
249           n *= 10;
250           n += b - '0';
251         } else if (b == -1 || !isPrintableChar(b)) {
252           return minus ? -n : n;
253         } else {
254           throw new NumberFormatException();
255         }
256         b = readByte();
257       }
258     }
259 
260     public int nextInt() {
261       return (int) nextLong();
262     }
263 
264     public int[] nextIntArray(int N, boolean oneBased) {
265       if (oneBased) {
266         int[] array = new int[N + 1];
267         for (int i = 1; i <= N; i++) {
268           array[i] = sc.nextInt();
269         }
270         return array;
271       } else {
272         int[] array = new int[N];
273         for (int i = 0; i < N; i++) {
274           array[i] = sc.nextInt();
275         }
276         return array;
277       }
278     }
279 
280     public long[] nextLongArray(int N, boolean oneBased) {
281       if (oneBased) {
282         long[] array = new long[N + 1];
283         for (int i = 1; i <= N; i++) {
284           array[i] = sc.nextLong();
285         }
286         return array;
287       } else {
288         long[] array = new long[N];
289         for (int i = 0; i < N; i++) {
290           array[i] = sc.nextLong();
291         }
292         return array;
293       }
294     }
295   }
296 
297 }
