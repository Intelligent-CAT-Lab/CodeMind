some text, as header of the file, sleep 1s 
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> 
VM Started: No frames on the current call stack

main[1] > 
Step completed: "thread=main", Main.main(), line=8 bci=0
8    		new Main().run();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=442)
Local variables:
main[1] > 
Step completed: "thread=main", Main.<init>(), line=6 bci=0
6    class Main {

main[1] No local variables
main[1] > 
Step completed: "thread=main", Main.main(), line=8 bci=7
8    		new Main().run();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=442)
Local variables:
main[1] > 
Step completed: "thread=main", Main.run(), line=12 bci=0
12    		Scanner sc = new Scanner(System.in);

main[1] No local variables
main[1] > 
Step completed: "thread=main", Main.run(), line=13 bci=11
13    		long n = sc.nextLong();

main[1] Method arguments:
Local variables:
sc = instance of java.util.Scanner(id=582)
main[1] > 
Step completed: "thread=main", Main.run(), line=14 bci=16
14    		long a = sc.nextLong();

main[1] Method arguments:
Local variables:
sc = instance of java.util.Scanner(id=582)
n = 8
main[1] > 
Step completed: "thread=main", Main.run(), line=15 bci=22
15    		System.out.println(solver(n, a));

main[1] Method arguments:
Local variables:
sc = instance of java.util.Scanner(id=582)
n = 8
a = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=19 bci=0
19    		long ans = n;

main[1] Method arguments:
n = 8
a = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.solver(), line=20 bci=3
20    		if (n == 1) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=11
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 6
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 4
middle = 6
v = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 7
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 6
middle = 7
v = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 1
n = 8
Local variables:
ok = 8
ng = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 7
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 49
n = 0
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 7
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 49
n = 0
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 7
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 7
n = 1
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 49
n = 0
Local variables:
ret = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 0
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 8
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 8
maxK = 8
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 8
maxK = 8
curK = 8
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
t = 8
maxK = 8
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 2
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 3
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 3
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 3
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 9
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 4
ng = 2
middle = 3
v = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 3
ng = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 3
ng = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 2
n = 8
Local variables:
ok = 3
ng = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 16
n = 0
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 16
n = 0
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 4
n = 1
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 16
n = 0
Local variables:
ret = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 1
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 4
n = 0
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 4
n = 0
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 2
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 2
n = 1
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 4
n = 0
Local variables:
ret = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 4
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 7
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 7
maxK = 3
curK = 3
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 7
maxK = 3
curK = 9
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 8
i = 2
t = 7
maxK = 3
curK = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 3
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 3
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 2
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 4
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 6
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 8
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
t = 8
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 4
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 4
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 3
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 5
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 7
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 9
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
t = 10
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 5
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 5
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 4
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 6
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 8
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 10
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 11
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
t = 12
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 6
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 6
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 5
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 7
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 9
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 11
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 12
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 13
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
t = 14
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 7
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 7
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 6
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 8
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 10
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 12
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 13
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 14
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 15
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
t = 16
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 8
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 8
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 7
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 9
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 11
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 13
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 14
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 15
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 16
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 17
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
t = 18
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 9
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 9
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 8
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 10
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 12
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 14
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 15
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 16
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 17
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 18
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 19
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
t = 20
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 10
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 10
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 9
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 11
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 13
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 15
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 16
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 17
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 18
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 19
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 20
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 21
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
t = 22
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 11
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 11
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 10
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 12
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 14
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 16
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 17
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 18
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 19
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 20
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 21
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 22
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 23
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
t = 24
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 12
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 12
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 11
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 13
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 15
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 17
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 18
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 19
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 6
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 20
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 5
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 21
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 7
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 4
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 22
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 3
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 23
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 9
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 2
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 24
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 10
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 25
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 26
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 26
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 26
maxK = 2
curK = 8
j = 11
main[1] > 
Step completed: "thread=main", Main.solver(), line=46 bci=198
46    			ans = Math.min(ans, t);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
t = 26
maxK = 2
curK = 8
main[1] > 
Step completed: "thread=main", Main.solver(), line=23 bci=207
23    		for (int i = 1; i <= 40; ++i) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 12
main[1] > 
Step completed: "thread=main", Main.solver(), line=26 bci=21
26    			long t = a * (i - 1);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=30
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=52 bci=0
52    		long ok = n;

main[1] Method arguments:
i = 13
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.f(), line=53 bci=3
53    		long ng = 0;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 64
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 256
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1024
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4096
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16384
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 65536
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 262144
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 1048576
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 4194304
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 16777216
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 67108864
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 67108864
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 8
ng = 0
middle = 4
v = 67108864
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 16
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 32
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 64
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 128
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 256
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 512
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 1024
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 2048
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 4096
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8192
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8192
main[1] > 
Step completed: "thread=main", Main.f(), line=65 bci=82
65    				ok = middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 4
ng = 0
middle = 2
v = 8192
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=55 bci=16
55    			long middle = (ok + ng) / 2;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=56 bci=27
56    			long v = 1;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=30
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 0
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 2
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 3
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 4
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 5
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 6
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 7
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 8
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 9
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 10
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 11
main[1] > 
Step completed: "thread=main", Main.f(), line=58 bci=41
58    				if (v != v * middle / middle) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=62 bci=62
62    				v *= middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=57 bci=69
57    			for (int k = 0; k < i; ++k) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
k = 12
main[1] > 
Step completed: "thread=main", Main.f(), line=64 bci=75
64    			if (v >= n) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=67 bci=89
67    				ng = middle;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 0
middle = 1
v = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=69 bci=93
69    		}

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=54 bci=6
54    		out: while (ok - ng > 1) {

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.f(), line=70 bci=96
70    		return ok;

main[1] Method arguments:
i = 13
n = 8
Local variables:
ok = 2
ng = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=27 bci=38
27    			long maxK = f(i, n);

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
main[1] > 
Step completed: "thread=main", Main.solver(), line=28 bci=40
28    			long curK = 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=43
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 13
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 13
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 13
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 13
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 12
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 1
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 0
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 12
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 12
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 6
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 14
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 2
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 11
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 11
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=31 bci=113
31    					t += maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 16
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=32 bci=120
32    					if (curK != curK * maxK / maxK) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=35 bci=140
35    						curK *= maxK;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 4
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 2
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 10
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 10
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 5
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 18
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 3
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 9
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 9
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 19
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 4
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 8
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 8
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 4
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 2
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=107
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=38 bci=150
38    					t += maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 20
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=39 bci=159
39    					if (curK != curK * (maxK - 1) / (maxK - 1)) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=42 bci=183
42    						curK *= maxK - 1;

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=29 bci=192
29    			for (int j = 0; j < i; ++j) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 5
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=53
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=69
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 3
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 1
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=80 bci=36
80    		return ret;

main[1] Method arguments:
a = 1
n = 0
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.solver(), line=30 bci=84
30    				if (curK * pow(maxK - 1, i - j) / pow(maxK - 1, i - j) == curK && curK * pow(maxK - 1, i - j) < n) {

main[1] Method arguments:
n = 8
a = 1
Local variables:
ans = 7
i = 13
t = 21
maxK = 2
curK = 8
j = 6
main[1] > 
Step completed: "thread=main", Main.pow(), line=74 bci=0
74    		long ret = 1;

main[1] Method arguments:
a = 1
n = 7
Local variables:
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=3
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=76 bci=9
76    			if (n % 2 == 1) {

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=77 bci=19
77    				ret *= a;

main[1] Method arguments:
a = 1
n = 7
Local variables:
ret = 1
main[1] > 
Step completed: "thread=main", Main.pow(), line=75 bci=25
75    		for (; n > 0; n >>= 1, a *= a) {

main[1] 