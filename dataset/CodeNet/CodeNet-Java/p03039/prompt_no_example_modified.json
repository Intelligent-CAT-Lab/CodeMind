{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\n// import java.awt.Point;\n \npublic class Main {\n    InputStream is;\n    PrintWriter out;\n    String INPUT = \"\";\n \n    // static int mod = 1_000_000_007;\n    int mod = 998244353;\n    // long inf = Long.MAX_VALUE/2;\n    int inf = Integer.MAX_VALUE/2;\n\n \n    void solve(){\n        int n = ni();\n        int m = ni();\n        int k = ni();\n        int mod = 1000000007;\n        int[][] fif = enumFIF(1000000, mod);\n\n        long xsum = 0;\n        long ysum = 0;\n\n        long xa = C(n*m-2,k-2,mod,fif) * fif[0][k-2] % mod;\n        long xb = 0;\n        for(int i = 0; i <= m-1; i++){\n            long tmp = (long)i * (m-i) % mod * n % mod * n % mod * 2 % mod;\n            xb += tmp;\n            xb %= mod;\n        }\n        long xc = xa * xb % mod * C(k,2,mod,fif) % mod;\n        xsum = xc * fif[1][k] % mod;\n        // out.println(xa+\" \"+xb+\" \"+xc);\n        // out.println(xsum);\n\n        long ya = C(n*m-2,k-2,mod,fif) * fif[0][k-2] % mod;\n        long yb = 0;\n        for(int i = 0; i <= n-1; i++){\n            long tmp = (long)i * (n-i) % mod * m % mod * m % mod * 2 % mod;\n            yb += tmp;\n            yb %= mod;\n        }\n        long yc = ya * yb % mod * C(k,2,mod,fif) % mod;\n        ysum = yc * fif[1][k] % mod;\n\n        // out.println(ysum);\n\n        out.println((xsum+ysum)%mod);\n\n    }\n\n    public static long C(int n, int r, int mod, int[][] fif) {\n        if (n < 0 || r < 0 || r > n)\n            return 0;\n        return (long) fif[0][n] * fif[1][r] % mod * fif[1][n - r] % mod;\n    }\n\n    \n    public static int[][] enumFIF(int n, int mod) {\n        int[] f = new int[n + 1];\n        int[] invf = new int[n + 1];\n        f[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            f[i] = (int) ((long) f[i - 1] * i % mod);\n        }\n        long a = f[n];\n        long b = mod;\n        long p = 1, q = 0;\n        while (b > 0) {\n            long c = a / b;\n            long d;\n            d = a;\n            a = b;\n            b = d % b;\n            d = p;\n            p = q;\n            q = d - c * q;\n        }\n        invf[n] = (int) (p < 0 ? p + mod : p);\n        for (int i = n - 1; i >= 0; i--) {\n            invf[i] = (int) ((long) invf[i + 1] * (i + 1) % mod);\n        }\n        return new int[][] { f, invf };\n    }\n\n\n    void run() throws Exception\n    {\n        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n        out = new PrintWriter(System.out);\n        long s = System.currentTimeMillis();\n        solve();\n        out.flush();\n        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+\"ms\");\n    }\n    \n    public static void main(String[] args) throws Exception { new Main().run(); }\n    \n    private byte[] inbuf = new byte[1024];\n    private int lenbuf = 0, ptrbuf = 0;\n    \n    private int readByte()\n    {\n        if(lenbuf == -1)throw new InputMismatchException();\n        if(ptrbuf >= lenbuf){\n            ptrbuf = 0;\n            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }\n            if(lenbuf <= 0)return -1;\n        }\n        return inbuf[ptrbuf++];\n    }\n    \n    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }\n    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }\n    \n    private double nd() { return Double.parseDouble(ns()); }\n    private char nc() { return (char)skip(); }\n    \n    private String ns()\n    {\n        int b = skip();\n        StringBuilder sb = new StringBuilder();\n        while(!(isSpaceChar(b) && b != ' ')){\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    \n    private char[] ns(int n)\n    {\n        char[] buf = new char[n];\n        int b = skip(), p = 0;\n        while(p < n && !(isSpaceChar(b))){\n            buf[p++] = (char)b;\n            b = readByte();\n        }\n        return n == p ? buf : Arrays.copyOf(buf, p);\n    }\n    \n    private char[][] nm(int n, int m)\n    {\n        char[][] map = new char[n][];\n        for(int i = 0;i < n;i++)map[i] = ns(m);\n        return map;\n    }\n    \n    private int[] na(int n)\n    {\n        int[] a = new int[n];\n        for(int i = 0;i < n;i++)a[i] = ni();\n        return a;\n    }\n    \n    private int ni()\n    {\n        int num = 0, b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private long nl()\n    {\n        long num = 0;\n        int b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }\n \n}\n\nWhat would be the output of the code execution given the following input:\n2 2 2\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "8\n"
    }
}