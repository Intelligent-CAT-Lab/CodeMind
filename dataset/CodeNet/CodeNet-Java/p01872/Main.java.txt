1 import java.io.*;
2 import java.util.*;
3 public class Main
4 {
5 	public void solve()
6 	{
7 		String s = next();
8 		if(s.charAt(s.length() - 1) == '?')
9 		{
10 			int sum = 0;
11 			for(int i = 0;i < s.length() - 1;i++)
12 			{
13 				int n = 11 - i;
14 				int q = 0;
15 				int p = s.charAt(i) - '0';
16 				if(n <= 6 && n >= 1)
17 				{
18 					q = n + 1;
19 				}else //if(n >= 7 && n <= 11)
20 				{
21 					q = n - 5; 
22 				}
23 				sum += q * p;
24 			}
25 			sum %= 11;
26 			if(sum <= 1)sum = 0;
27 			else sum = 11 - sum;
28 			out.println(sum);
29 		}else
30 		{
31 			int check = s.charAt(s.length() - 1) - '0';
32 			int cnt = 0;
33 			int ans = 0;
34 			for(int j = 0;j <= 9;j++)
35 			{
36 				int sum = 0;
37 				for(int i = 0;i < s.length() - 1;i++)
38 				{
39 					int n = 11 - i;
40 					int q = 0;
41 					int p = 0;
42 					if(s.charAt(i) == '?')
43 					{
44 						p = j;
45 					}else
46 					{
47 						p = s.charAt(i) - '0';
48 					}
49 
50 					if(n <= 6 && n >= 1)
51 					{
52 						q = n + 1;
53 					}else //if(n >= 7 && n <= 11)
54 					{
55 						q = n - 5; 
56 					}
57 					sum += q * p;
58 				}
59 				sum %= 11;
60 				if(sum <= 1)sum = 0;
61 				else sum = 11 - sum;
62 				if(check == sum)
63 				{	
64 					cnt++;
65 					ans = j;
66 				}
67 			}
68 		if(cnt == 1)
69 		{
70 			out.println(ans);
71 		}else
72 		{
73 			out.println("MULTIPLE");
74 		}
75 	}
76 	}
77 	public static void main(String[] args)
78 	{
79 		out.flush();
80 		new Main().solve();
81 		out.close();
82 	}
83 	/*Input*/
84 	private static final InputStream in = System.in;
85 	private static final PrintWriter out = new PrintWriter(System.out);
86 	private final byte[] buffer = new byte[2048];
87 	private int p = 0;
88 	private int buflen = 0;
89  
90 	private boolean hasNextByte()
91 	{
92 		if(p < buflen)return true;
93 		p = 0;
94 		try
95 		{
96 			buflen = in.read(buffer);
97 		}catch(IOException e)
98 		{
99 			e.printStackTrace();
100 		}
101 		if(buflen <= 0)return false;
102 		return true;
103 	}
104 	public boolean hasNext()
105 	{
106 		while(hasNextByte() && !isPrint(buffer[p]))
107 		{
108 			p++;
109 		}
110 		return hasNextByte();
111 	}
112  
113 	private boolean isPrint(int ch)
114 	{
115 		if(ch >= '!' && ch <= '~')return true;
116 		return false;
117 	}
118  
119 	private int nextByte()
120 	{
121 		if(!hasNextByte())return -1;
122 		return buffer[p++];
123 	}
124  
125 	public String next()
126 	{
127 		if(!hasNext()) throw new NoSuchElementException();
128 		StringBuilder sb = new StringBuilder();
129 		int b = -1;
130 		while(isPrint((b = nextByte())))
131 		{
132 			sb.appendCodePoint(b);
133 		}
134 		return sb.toString();
135 	}
136  
137 	public int nextInt()
138 	{
139 		return Integer.parseInt(next());
140 	}
141  
142 	public long nextLong()
143 	{
144 		return Long.parseLong(next());
145 	}
146  
147 	public double nextDouble()
148 	{
149 		return Double.parseDouble(next());
150 	}
151 }