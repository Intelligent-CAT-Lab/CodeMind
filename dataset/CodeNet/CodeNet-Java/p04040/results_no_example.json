{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Sparsh Sanchorawala\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        DIrohaAndAGrid solver = new DIrohaAndAGrid();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class DIrohaAndAGrid {\n        long modExp(long x, long y, long mod) {\n            if (y == 0)\n                return 1 % mod;\n            long ret = modExp(x, y >> 1, mod);\n            ret = ret * ret % mod;\n            if ((y & 1) == 1)\n                ret = ret * (x % mod) % mod;\n            return ret;\n        }\n\n        public void solve(int testNumber, InputReader s, PrintWriter w) {\n            int r = s.nextInt(), c = s.nextInt();\n            int a = s.nextInt(), b = s.nextInt();\n            long mod = (long) 1e9 + 7;\n            long[] fact = new long[r + c];\n            long[] ifact = new long[r + c];\n            fact[0] = 1;\n            ifact[0] = 1;\n            for (int i = 1; i < r + c; i++) {\n                fact[i] = fact[i - 1] * i % mod;\n                ifact[i] = ifact[i - 1] * modExp(i, mod - 2, mod) % mod;\n            }\n            long res = fact[r - 1 + c - 1] * ifact[r - 1] % mod * ifact[c - 1] % mod;\n            long sub = 0;\n            for (int x = 0; x < b; x++) {\n                long v1 = fact[r - a - 1 + x] * ifact[r - a - 1] % mod * ifact[x] % mod;\n                long v2 = fact[a - 1 + c - 1 - x] * ifact[a - 1] % mod * ifact[c - 1 - x] % mod;\n                sub = (sub + v1 * v2 % mod) % mod;\n            }\n            res = (res - sub + mod) % mod;\n            w.println(res);\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}\n\nGicen the following input:\n2 3 1 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "2\n",
        "predict": "1\nEND-OF-OUTPUT"
    }
}