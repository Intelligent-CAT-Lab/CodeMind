1 import java.io.*;
2 import java.util.*;
3 
4 
5 public class Main {
6 	public static void main(String[] args) throws Exception {
7 		MScanner sc = new MScanner(System.in);
8 		PrintWriter pw = new PrintWriter(System.out);
9 		String days[]= {"MON", "TUE", "WED", "THU", "FRI","SAT","SUN"};
10 		String in=sc.nextLine();
11 		int idx=0;
12 		for(int i=0;i<days.length;i++) {
13 			if(days[i].equals(in)) {
14 				idx=i;break;
15 			}
16 		}
17 		int ans=((6-idx+7)%7);
18 		if(ans==0) {
19 			pw.println(7);
20 		}
21 		else
22 		pw.println(ans);
23 		pw.flush();
24 	}
25 
26 	static class MScanner {
27 		StringTokenizer st;
28 		BufferedReader br;
29 
30 		public MScanner(InputStream system) {
31 			br = new BufferedReader(new InputStreamReader(system));
32 		}
33 
34 		public MScanner(String file) throws Exception {
35 			br = new BufferedReader(new FileReader(file));
36 		}
37 
38 		public String next() throws IOException {
39 			while (st == null || !st.hasMoreTokens())
40 				st = new StringTokenizer(br.readLine());
41 			return st.nextToken();
42 		}
43 
44 		public int[] takearr(int n) throws IOException {
45 			int[] in = new int[n];
46 			for (int i = 0; i < n; i++)
47 				in[i] = nextInt();
48 			return in;
49 		}
50 
51 		public long[] takearrl(int n) throws IOException {
52 			long[] in = new long[n];
53 			for (int i = 0; i < n; i++)
54 				in[i] = nextLong();
55 			return in;
56 		}
57 
58 		public Integer[] takearrobj(int n) throws IOException {
59 			Integer[] in = new Integer[n];
60 			for (int i = 0; i < n; i++)
61 				in[i] = nextInt();
62 			return in;
63 		}
64 
65 		public Long[] takearrlobj(int n) throws IOException {
66 			Long[] in = new Long[n];
67 			for (int i = 0; i < n; i++)
68 				in[i] = nextLong();
69 			return in;
70 		}
71 
72 		public String nextLine() throws IOException {
73 			return br.readLine();
74 		}
75 
76 		public int nextInt() throws IOException {
77 			return Integer.parseInt(next());
78 		}
79 
80 		public double nextDouble() throws IOException {
81 			return Double.parseDouble(next());
82 		}
83 
84 		public char nextChar() throws IOException {
85 			return next().charAt(0);
86 		}
87 
88 		public Long nextLong() throws IOException {
89 			return Long.parseLong(next());
90 		}
91 
92 		public boolean ready() throws IOException {
93 			return br.ready();
94 		}
95 
96 		public void waitForInput() throws InterruptedException {
97 			Thread.sleep(3000);
98 		}
99 	}
100 }