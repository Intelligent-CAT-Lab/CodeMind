1 import java.io.OutputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.OutputStream;
5 import java.io.IOException;
6 import java.io.UncheckedIOException;
7 import java.io.Closeable;
8 import java.io.Writer;
9 import java.io.OutputStreamWriter;
10 import java.io.InputStream;
11 
12 /**
13  * Built using CHelper plug-in Actual solution is at the top
14  */
15 public class Main {
16     public static void main(String[] args) throws Exception {
17         Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);
18         thread.start();
19         thread.join();
20     }
21 
22     static class TaskAdapter implements Runnable {
23         @Override
24         public void run() {
25             InputStream inputStream = System.in;
26             OutputStream outputStream = System.out;
27             FastInput in = new FastInput(inputStream);
28             FastOutput out = new FastOutput(outputStream);
29             TaskE solver = new TaskE();
30             solver.solve(1, in, out);
31             out.close();
32         }
33     }
34     static class TaskE {
35         public void solve(int testNumber, FastInput in, FastOutput out) {
36             int n = in.readInt();
37             int h = in.readInt();
38             int d = in.readInt();
39             NumberTheory.Modular mod = new NumberTheory.Modular(1e9 + 7);
40             NumberTheory.Factorial fact = new NumberTheory.Factorial(n, mod);
41             int[] dp = new int[h + 1];
42             dp[0] = fact.fact(n);
43             int factSum = 0;
44             for (int i = 1; i <= n; i++) {
45                 factSum = mod.plus(factSum, fact.fact(i));
46             }
47             int[] preDpSum = new int[h + 1];
48             preDpSum[0] = dp[0];
49             for (int i = 1; i <= h; i++) {
50                 dp[i] = preDpSum[i - 1];
51                 if (i - d - 1 >= 0) {
52                     dp[i] = mod.subtract(dp[i], preDpSum[i - d - 1]);
53                 }
54                 if (i < h) {
55                     dp[i] = mod.mul(dp[i], factSum);
56                 }
57                 preDpSum[i] = mod.plus(preDpSum[i - 1], dp[i]);
58             }
59 
60             out.println(dp[h]);
61         }
62 
63     }
64     static class FastInput {
65         private final InputStream is;
66         private byte[] buf = new byte[1 << 13];
67         private int bufLen;
68         private int bufOffset;
69         private int next;
70 
71         public FastInput(InputStream is) {
72             this.is = is;
73         }
74 
75         private int read() {
76             while (bufLen == bufOffset) {
77                 bufOffset = 0;
78                 try {
79                     bufLen = is.read(buf);
80                 } catch (IOException e) {
81                     bufLen = -1;
82                 }
83                 if (bufLen == -1) {
84                     return -1;
85                 }
86             }
87             return buf[bufOffset++];
88         }
89 
90         public void skipBlank() {
91             while (next >= 0 && next <= 32) {
92                 next = read();
93             }
94         }
95 
96         public int readInt() {
97             int sign = 1;
98 
99             skipBlank();
100             if (next == '+' || next == '-') {
101                 sign = next == '+' ? 1 : -1;
102                 next = read();
103             }
104 
105             int val = 0;
106             if (sign == 1) {
107                 while (next >= '0' && next <= '9') {
108                     val = val * 10 + next - '0';
109                     next = read();
110                 }
111             } else {
112                 while (next >= '0' && next <= '9') {
113                     val = val * 10 - next + '0';
114                     next = read();
115                 }
116             }
117 
118             return val;
119         }
120 
121     }
122     static class NumberTheory {
123         public static class Modular {
124             int m;
125 
126             public Modular(int m) {
127                 this.m = m;
128             }
129 
130             public Modular(long m) {
131                 this.m = (int) m;
132                 if (this.m != m) {
133                     throw new IllegalArgumentException();
134                 }
135             }
136 
137             public Modular(double m) {
138                 this.m = (int) m;
139                 if (this.m != m) {
140                     throw new IllegalArgumentException();
141                 }
142             }
143 
144             public int valueOf(int x) {
145                 x %= m;
146                 if (x < 0) {
147                     x += m;
148                 }
149                 return x;
150             }
151 
152             public int valueOf(long x) {
153                 x %= m;
154                 if (x < 0) {
155                     x += m;
156                 }
157                 return (int) x;
158             }
159 
160             public int mul(int x, int y) {
161                 return valueOf((long) x * y);
162             }
163 
164             public int plus(int x, int y) {
165                 return valueOf(x + y);
166             }
167 
168             public int subtract(int x, int y) {
169                 return valueOf(x - y);
170             }
171 
172             public String toString() {
173                 return "mod " + m;
174             }
175 
176         }
177 
178         public static class InverseNumber {
179             int[] inv;
180 
181             public InverseNumber(int[] inv, int limit, NumberTheory.Modular modular) {
182                 this.inv = inv;
183                 inv[1] = 1;
184                 int p = modular.m;
185                 for (int i = 2; i <= limit; i++) {
186                     int k = p / i;
187                     int r = p % i;
188                     inv[i] = modular.mul(-k, inv[r]);
189                 }
190             }
191 
192             public InverseNumber(int limit, NumberTheory.Modular modular) {
193                 this(new int[limit + 1], limit, modular);
194             }
195 
196         }
197 
198         public static class Factorial {
199             int[] fact;
200             int[] inv;
201             NumberTheory.Modular modular;
202 
203             public Factorial(int[] fact, int[] inv, NumberTheory.InverseNumber in, int limit,
204                             NumberTheory.Modular modular) {
205                 this.modular = modular;
206                 this.fact = fact;
207                 this.inv = inv;
208                 fact[0] = inv[0] = 1;
209                 for (int i = 1; i <= limit; i++) {
210                     fact[i] = modular.mul(fact[i - 1], i);
211                     inv[i] = modular.mul(inv[i - 1], in.inv[i]);
212                 }
213             }
214 
215             public Factorial(int limit, NumberTheory.Modular modular) {
216                 this(new int[limit + 1], new int[limit + 1], new NumberTheory.InverseNumber(limit, modular), limit,
217                                 modular);
218             }
219 
220             public int fact(int n) {
221                 return fact[n];
222             }
223 
224         }
225 
226     }
227     static class FastOutput implements AutoCloseable, Closeable {
228         private StringBuilder cache = new StringBuilder(10 << 20);
229         private final Writer os;
230 
231         public FastOutput(Writer os) {
232             this.os = os;
233         }
234 
235         public FastOutput(OutputStream os) {
236             this(new OutputStreamWriter(os));
237         }
238 
239         public FastOutput println(int c) {
240             cache.append(c).append('\n');
241             return this;
242         }
243 
244         public FastOutput flush() {
245             try {
246                 os.append(cache);
247                 os.flush();
248                 cache.setLength(0);
249             } catch (IOException e) {
250                 throw new UncheckedIOException(e);
251             }
252             return this;
253         }
254 
255         public void close() {
256             flush();
257             try {
258                 os.close();
259             } catch (IOException e) {
260                 throw new UncheckedIOException(e);
261             }
262         }
263 
264         public String toString() {
265             return cache.toString();
266         }
267 
268     }
269 }
270 
