1 
2 import java.io.BufferedReader;
3 import java.io.IOException;
4 import java.io.InputStream;
5 import java.io.InputStreamReader;
6 import java.io.OutputStream;
7 import java.io.PrintWriter;
8 import java.util.InputMismatchException;
9 import java.util.StringTokenizer;
10 
11 public class Main {
12 
13 	public static void main(String[] args) throws IOException {
14 		InputStream inputStream = System.in;
15 		OutputStream outputStream = System.out;
16 		InputReader in = new InputReader(inputStream);
17 		PrintWriter out = new PrintWriter(outputStream);
18 		TaskX solver = new TaskX();
19 		solver.solve(1, in, out);
20 		out.close();
21 	}
22 
23 	static int INF = 1 << 30;
24 	static int modP = 1000000007;
25 
26 	static class TaskX {
27 		public void solve(int testNumber, InputReader in, PrintWriter out) {
28 
29 			int m = in.nextInt();
30 			int n = in.nextInt();
31 			out.println(power(m, n, modP));
32 
33 		}
34 
35 		static long power(long a, long e, long modP) {
36 			long ret = 1;
37 			for (; e > 0; e /= 2) {
38 				if (e % 2 != 0) {
39 					ret = (ret * a) % modP;
40 				}
41 				a = (a * a) % modP;
42 			}
43 			return ret;
44 		}
45 	}
46 
47 	static class InputReader {
48 		BufferedReader in;
49 		StringTokenizer tok;
50 
51 		public String nextString() {
52 			while (!tok.hasMoreTokens()) {
53 				try {
54 					tok = new StringTokenizer(in.readLine(), " ");
55 				} catch (IOException e) {
56 					throw new InputMismatchException();
57 				}
58 			}
59 			return tok.nextToken();
60 		}
61 
62 		public int nextInt() {
63 			return Integer.parseInt(nextString());
64 		}
65 
66 		public long nextLong() {
67 			return Long.parseLong(nextString());
68 		}
69 
70 		public double nextDouble() {
71 			return Double.parseDouble(nextString());
72 		}
73 
74 		public int[] nextIntArray(int n) {
75 			int[] res = new int[n];
76 			for (int i = 0; i < n; i++) {
77 				res[i] = nextInt();
78 			}
79 			return res;
80 		}
81 
82 		public long[] nextLongArray(int n) {
83 			long[] res = new long[n];
84 			for (int i = 0; i < n; i++) {
85 				res[i] = nextLong();
86 			}
87 			return res;
88 		}
89 
90 		public InputReader(InputStream inputStream) {
91 			in = new BufferedReader(new InputStreamReader(inputStream));
92 			tok = new StringTokenizer("");
93 		}
94 
95 	}
96 
97 }
98 
