1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.ArrayList;
4 import java.util.NoSuchElementException;
5 import java.util.Collections;
6 
7 public class Main {
8 	public static long MOD = 1000000007;
9 
10 	// calcurate n^k
11 	public static long pow(long n, long k) {
12 		long ans = 1;
13 		long tmp = n;
14 		while(true) {
15 			if(k==0) {
16 				return ans;
17 			}
18 			if(k % 2 == 1) {
19 				ans = (ans * tmp) % MOD;
20 			}
21 			tmp = (tmp * tmp) % MOD;
22 			k /= 2;
23 		}
24 	}
25 
26 	public static ArrayList<Integer> divisors(int n) {
27 		ArrayList<Integer> list = new ArrayList<Integer>();
28 		for(int i=1; i*i <= n; i++) {
29 			if(n % i == 0) {
30 				list.add(i);
31 				if(i != n/i) list.add(n/i);
32 			}
33 		}
34 		Collections.sort(list);
35 		return list;
36 	}
37 
38 	public static void main(String[] args) {
39 		FS r = new FS();
40 		int N = r.nextInt();
41 		int K = r.nextInt();
42 		ArrayList<Integer> divisor = divisors(N);
43 		long[] num = new long[divisor.size()];
44 		long tmpSum = 0;
45 		for(int i=0; i<divisor.size(); i++) {
46 			num[i] = pow(K, (divisor.get(i)+1)/2);
47 			for(int j=0; j<i; j++) {
48 				if(divisor.get(i) % divisor.get(j) == 0) {
49 					num[i] -= num[j];
50 				}
51 			}
52 			while(num[i]<0) num[i] += MOD;
53 			tmpSum += num[i];
54 			tmpSum %= MOD;
55 		}
56 		long ans = 0;
57 		for(int i=0; i<divisor.size(); i++) {
58 			if(num[i]<0) num[i] += MOD;
59 			num[i] = num[i] % MOD;
60 		}
61 		for(int i=0; i<divisor.size(); i++) {
62 			long d = (long)divisor.get(i);
63 			if(d%2==0) ans += num[i]*d/2;
64 			else ans += num[i]*d;
65 			ans = ans % MOD;
66 		}
67 		System.out.println(ans);
68 	}
69 
70 	// Read Class
71 	static class FS {
72 		private final InputStream in = System.in;
73 		private final byte[] buffer = new byte[1024];
74 		private int ptr = 0;
75 		private int buflen = 0;
76 		private boolean hasNextByte() {
77 			if (ptr < buflen) {
78 				return true;
79 			} else {
80 				ptr = 0;
81 				try {
82 					buflen = in.read(buffer);
83 				} catch (IOException e) {
84 					e.printStackTrace();
85 				}
86 				if (buflen <= 0) {
87 					return false;
88 				}
89 			}
90 			return true;
91 		}
92 
93 		private int readByte() { return hasNextByte() ? buffer[ptr++] : -1;}
94 		private boolean isPrintableChar(int c) {return 33 <= c && c <= 126;}
95 		private void skipUnprintable() {while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}
96 
97 		public boolean hasNext() { skipUnprintable(); return hasNextByte();}
98 		public String next() {
99 			if (!hasNext()) throw new NoSuchElementException();
100 			StringBuilder sb = new StringBuilder();
101 			int b = readByte();
102 			while(isPrintableChar(b)) {
103 				sb.appendCodePoint(b);
104 				b = readByte();
105 			}
106 			return sb.toString();
107 		}
108 		public int nextInt() {
109 			return (int)nextLong();
110 		}
111 		public long nextLong() {
112 			if (!hasNext()) throw new NoSuchElementException();
113 			long n = 0;
114 			boolean minus = false;
115 			int b = readByte();
116 			if (b == '-') {
117 				minus = true;
118 				b = readByte();
119 			}
120 			if (b < '0' || '9' < b) {
121 				throw new NumberFormatException();
122 			}
123 			while(true) {
124 				if ('0' <= b && b <= '9') {
125 					n *= 10;
126 					n += b - '0';
127 				} else if(b == -1 || !isPrintableChar(b)) {
128 					return minus ? -n : n;
129 				} else {
130 					throw new NumberFormatException();
131 				}
132 				b = readByte();
133 			}
134 		}
135 	}
136 }
