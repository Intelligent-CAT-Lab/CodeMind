1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.NoSuchElementException;
4  
5 public class Main {
6 	private static FastScanner sc = new FastScanner();
7 	
8 	public static void main(String[] args) {
9 		long K = sc.nextLong();
10 		long A = K/50;
11 		long B = K%50;
12 		
13 		long[] a = new long[50];
14 		for(int i=0; i<50; i++) {
15 			a[i] = i + A;
16 		}
17 		
18 		for(int i=49; i>49-B; i--) {
19 			a[i]++;
20 		}
21 		
22 		System.out.println(50);
23 		for(int i=0; i<50; i++) {
24 			System.out.print(a[i]);
25 			if(i != 49) {
26 				System.out.println(" ");
27 			}
28 		}
29 		System.out.println();
30 	}
31 	
32 	static class FastScanner {
33         private final InputStream in = System.in;
34         private final byte[] buffer = new byte[1024];
35         private int ptr = 0;
36         private int buflen = 0;
37         private boolean hasNextByte() {
38             if(ptr < buflen) {
39                 return true;
40             } else {
41                 ptr = 0;
42                 try {
43                     buflen = in.read(buffer);
44                 } catch(IOException e) {
45                     e.printStackTrace();
46                 }
47                 if(buflen <= 0) {
48                     return false;
49                 }
50             }
51             return true;
52         }
53         private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}
54         private static boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}
55         private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}
56         public boolean hasNext() { skipUnprintable(); return hasNextByte();}
57         public String next() {
58             if (!hasNext()) throw new NoSuchElementException();
59             StringBuilder sb = new StringBuilder();
60             int b = readByte();
61             while(isPrintableChar(b)) {
62                 sb.appendCodePoint(b);
63                 b = readByte();
64             }
65             return sb.toString();
66         }
67         public long nextLong() {
68             return Long.parseLong(next());
69         }
70         public int nextInt(){
71             return Integer.parseInt(next());
72         }
73         public double nextDouble(){
74             return Double.parseDouble(next());
75         }
76     }
77 }
