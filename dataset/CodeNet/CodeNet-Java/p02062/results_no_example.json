{
    "0": {
        "prompt": "Consider the following code:\nimport java.util.Scanner;\n\n// Java8\npublic class Main\n{\n\tstatic Scanner sc = new Scanner(System.in);\n\t\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tnew Main().run();\n\t}\n\t\n\tvoid run()\n\t{\n\t\tString s = sc.nextLine();\n\t\tParser parser = new Parser(s);\n\t\tNode node = parser.getFormula();\n\t\tSystem.out.println(node.get0() + \" \" + node.get1());\n\t}\n}\nabstract class Node {\n\tprivate int cost0 = 0;\n\tprivate int cost1 = 0;\n\n\tpublic final int get0() {\n\t\tif(cost0>0) return cost0;\n\t\treturn cost0 = calc0();\n\t}\n\n\tpublic final int get1() {\n\t\tif(cost1>0) return cost1;\n\t\treturn cost1 = calc1();\n\t}\n\n\tabstract int calc0();\n\n\tabstract int calc1();\n}\nclass VarNode extends Node {\n\n\t@Override\n\tint calc0()\n\t{\n\t\treturn 1;\n\t}\n\n\t@Override\n\tint calc1()\n\t{\n\t\treturn 1;\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"?\";\n\t}\n}\nclass AndNode extends Node {\n\tprivate Node left;\n\tprivate Node right;\n\n\tpublic AndNode(Node l, Node r)\n\t{\n\t\tleft = l;\n\t\tright = r;\n\t}\n\n\t@Override\n\tint calc0()\n\t{\n\t\treturn Math.min(left.get0(), left.get1() + right.get0());\n\t}\n\n\t@Override\n\tint calc1()\n\t{\n\t\treturn left.get1() + right.get1();\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"(\" + left.toString() + \"&\" + right.toString() + \")\";\n\t}\n}\nclass OrNode extends Node {\n\tprivate Node left;\n\tprivate Node right;\n\n\tpublic OrNode(Node l, Node r)\n\t{\n\t\tleft = l;\n\t\tright = r;\n\t}\n\n\t@Override\n\tint calc0()\n\t{\n\t\treturn left.get0() + right.get0();\n\t}\n\n\t@Override\n\tint calc1()\n\t{\n\t\treturn Math.min(left.get1(), left.get0() + right.get1());\n\t}\n\n\t@Override\n\tpublic String toString()\n\t{\n\t\treturn \"(\" + left.toString() + \"|\" + right.toString() + \")\";\n\t}\n}\nclass Parser {\n\tprivate String text;\n\tint cur;\n\n\tpublic Parser(String s) {\n\t\ttext = s + \"$\";\n\t\tcur = 0;\n\t}\n\n\tpublic Node getTerm() {\n\t\tchar c = text.charAt(cur);\n\t\tif(c=='?') {\n\t\t\tcur++;\n\t\t\treturn new VarNode();\n\t\t}\n\t\tif(c=='(') {\n\t\t\tcur++;\n\t\t\tNode node = getOrExpr();\n\t\t\tassert(text.charAt(cur) == ')');\n\t\t\tcur++;\n\t\t\treturn node;\n\t\t}\n\t\tthrow new IllegalStateException();\n\t}\n\n\tpublic Node getAndExpr() {\n\t\tNode node = getTerm();\n\t\twhile(text.charAt(cur)=='&') {\n\t\t\tcur++;\n\t\t\tNode r = getTerm();\n\t\t\tnode = new AndNode(node, r);\n\t\t}\n\t\treturn node;\n\t}\n\n\tpublic Node getOrExpr() {\n\t\tNode node = getAndExpr();\n\t\twhile(text.charAt(cur)=='|') {\n\t\t\tcur++;\n\t\t\tNode r = getAndExpr();\n\t\t\tnode = new OrNode(node, r);\n\t\t}\n\t\treturn node;\n\t}\n\t\n\tpublic Node getFormula() {\n\t\treturn getOrExpr();\n\t}\n\n}\nGicen the following input:\n?&?|?&?|?&?\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "3 2\n",
        "predict": "The output of the code is:\n1 1\nEND-OF-OUTPUT"
    }
}