1 import java.util.*;
2 import java.io.*;
3 
4 @SuppressWarnings("unused")
5 public class Main {
6     FastScanner in;
7     PrintWriter out;
8     int MOD = (int)1e9+7;
9     long ceil(long a, long b){return (a + b - 1) / b;}
10     long gcd(long a, long b){return b == 0 ? a : gcd(b, a % b);}
11     long lcm(long a, long b){return a / gcd(a, b) * b;}
12     
13     void solve(){
14         int N = in.nextInt(), K = in.nextInt();
15         int base = 1, cnt = 0;
16         while(base <= N){
17             cnt++;
18             base *= K;
19         }
20         out.println(cnt);
21     }
22     
23     public static void main(String[] args) {
24         new Main().m();
25     }
26     
27     private void m() {
28         in = new FastScanner(System.in);
29         out = new PrintWriter(System.out);
30         /*
31         try {
32             String path = "input.txt";
33             out = new PrintWriter(new BufferedWriter(new FileWriter(new File(path))));
34         }catch (IOException e){
35             e.printStackTrace();
36         }
37         */
38         solve();
39         out.flush();
40         in.close();
41         out.close();
42     }
43     
44     static class FastScanner {
45         private Reader input;
46         
47         public FastScanner() {this(System.in);}
48         public FastScanner(InputStream stream) {this.input = new BufferedReader(new InputStreamReader(stream));}
49         public void close() {
50             try {
51                 this.input.close();
52             } catch (IOException e) {
53                 e.printStackTrace();
54             }
55         }
56         
57         public int nextInt() {return (int) nextLong();}
58         
59         public long nextLong() {
60             try {
61                 int sign = 1;
62                 int b = input.read();
63                 while ((b < '0' || '9' < b) && b != '-' && b != '+') {
64                     b = input.read();
65                 }
66                 if (b == '-') {
67                     sign = -1;
68                     b = input.read();
69                 } else if (b == '+') {
70                     b = input.read();
71                 }
72                 long ret = b - '0';
73                 while (true) {
74                     b = input.read();
75                     if (b < '0' || '9' < b) return ret * sign;
76                     ret *= 10;
77                     ret += b - '0';
78                 }
79             } catch (IOException e) {
80                 e.printStackTrace();
81                 return -1;
82             }
83         }
84         
85         public double nextDouble() {
86             try {
87                 double sign = 1;
88                 int b = input.read();
89                 while ((b < '0' || '9' < b) && b != '-' && b != '+') {
90                     b = input.read();
91                 }
92                 if (b == '-') {
93                     sign = -1;
94                     b = input.read();
95                 } else if (b == '+') {
96                     b = input.read();
97                 }
98                 double ret = b - '0';
99                 while (true) {
100                     b = input.read();
101                     if (b < '0' || '9' < b) break;
102                     ret *= 10;
103                     ret += b - '0';
104                 }
105                 if (b != '.') return sign * ret;
106                 double div = 1;
107                 b = input.read();
108                 while ('0' <= b && b <= '9') {
109                     ret *= 10;
110                     ret += b - '0';
111                     div *= 10;
112                     b = input.read();
113                 }
114                 return sign * ret / div;
115             } catch (IOException e) {
116                 e.printStackTrace();
117                 return Double.NaN;
118             }
119         }
120         
121         public char nextChar() {
122             try {
123                 int b = input.read();
124                 while (Character.isWhitespace(b)) {
125                     b = input.read();
126                 }
127                 return (char) b;
128             } catch (IOException e) {
129                 e.printStackTrace();
130                 return 0;
131             }
132         }
133         
134         public String nextStr() {
135             try {
136                 StringBuilder sb = new StringBuilder();
137                 int b = input.read();
138                 while (Character.isWhitespace(b)) {
139                     b = input.read();
140                 }
141                 while (b != -1 && !Character.isWhitespace(b)) {
142                     sb.append((char) b);
143                     b = input.read();
144                 }
145                 return sb.toString();
146             } catch (IOException e) {
147                 e.printStackTrace();
148                 return "";
149             }
150         }
151         
152         public String nextLine() {
153             try {
154                 StringBuilder sb = new StringBuilder();
155                 int b = input.read();
156                 while (b != -1 && b != '\n') {
157                     sb.append((char) b);
158                     b = input.read();
159                 }
160                 return sb.toString();
161             } catch (IOException e) {
162                 e.printStackTrace();
163                 return "";
164             }
165         }
166         
167         public int[] nextIntArray(int n) {
168             int[] res = new int[n];
169             for (int i = 0; i < n; i++) {
170                 res[i] = nextInt();
171             }
172             return res;
173         }
174         
175         public int[] nextIntArrayDec(int n) {
176             int[] res = new int[n];
177             for (int i = 0; i < n; i++) {
178                 res[i] = nextInt() - 1;
179             }
180             return res;
181         }
182         
183         public int[] nextIntArray1Index(int n) {
184             int[] res = new int[n + 1];
185             for (int i = 0; i < n; i++) {
186                 res[i + 1] = nextInt();
187             }
188             return res;
189         }
190         
191         public long[] nextLongArray(int n) {
192             long[] res = new long[n];
193             for (int i = 0; i < n; i++) {
194                 res[i] = nextLong();
195             }
196             return res;
197         }
198         
199         public long[] nextLongArrayDec(int n) {
200             long[] res = new long[n];
201             for (int i = 0; i < n; i++) {
202                 res[i] = nextLong() - 1;
203             }
204             return res;
205         }
206         
207         public long[] nextLongArray1Index(int n) {
208             long[] res = new long[n + 1];
209             for (int i = 0; i < n; i++) {
210                 res[i + 1] = nextLong();
211             }
212             return res;
213         }
214         
215         public double[] nextDoubleArray(int n) {
216             double[] res = new double[n];
217             for (int i = 0; i < n; i++) {
218                 res[i] = nextDouble();
219             }
220             return res;
221         }
222     }
223 }