1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.*;
4  
5 public class Main implements Runnable {
6 	
7     public static void main(String[] args) {
8     	new Thread(null, new Main(), "", 16 * 1024 * 1024).start();
9     }
10     
11     public void run() {
12         FastScanner sc = new FastScanner();
13         
14         int n = sc.nextInt();
15         int k = sc.nextInt();
16         
17         Combinatrics c = new Combinatrics(n+k-1);
18 
19     	System.out.println(c.homogeneous(k, n));
20 
21     }
22 }
23 
24 
25 
26 class Combinatrics {
27 	
28 	static long mod = 1000000007; //逆元を取るので素数前提
29 	static long[] fact; //階乗のテーブル
30 	static long[] inv;	//逆元のテーブル
31 	static long[] finv; //階乗の逆元のテーブル
32 	
33 	public Combinatrics(int n){
34 		fact = new long[n+1];
35 		inv = new long[n+1];
36 		finv = new long[n+1];
37 	    fact[0] = fact[1] = 1;
38 	    finv[0] = finv[1] = 1;
39 	    inv[1] = 1;
40 	    for(int i=2;i<n+1; i++){
41 	        fact[i] = fact[i-1] * i % mod;
42 	        inv[i] = mod - inv[(int)mod%i] * (mod / i) % mod;
43 	        finv[i] = finv[i-1] * inv[i] % mod;
44 	    }
45 	}
46 	
47 	//逆元
48 	int inv(int n){
49 		return (int)inv[n];
50 	}
51 	
52 	//n!
53 	int factorial(int n){
54 		return (int)fact[n];
55 	}
56 	
57 	//n!の逆元
58 	int factInv(int n){
59 		return (int)finv[n];
60 	}
61 	
62 	//nCr（n個からr個選ぶ）
63     int combination(int n, int r) {
64         if(n<r|| r<0){
65         	return 0;
66         }
67         return (int)(fact[n]*finv[r]%mod*finv[n-r]%mod);
68     }
69 
70     //nPr (=n*(n-1)*...*(n-r+1))（n個からr個選んで並べる）
71     int permutation(int n, int r) {
72         if(n<r || r<0){
73         	return 0;
74         }
75         return (int)(fact[n]*finv[n-r]%mod);
76     }
77 
78     //nHr (=n+r-1Cr)（n個から重複を許してk個とる）
79     //（テーブルがn+r-1まで必要な事に注意！）
80     int homogeneous(int n, int r) {
81         if(n==0 && r==0){
82         	return 1;
83         }
84         return combination(n+r-1,r);
85     }
86 
87 }
88 
89 class FastScanner {
90 	private final InputStream in = System.in;
91 	private final byte[] buffer = new byte[1024];
92 	private int ptr = 0;
93 	private int buflen = 0;
94 	private boolean hasNextByte() {
95 		if (ptr < buflen) {
96 			return true;
97 		} else {
98 			ptr = 0;
99 			try {
100 				buflen = in.read(buffer);
101 			} catch (IOException e) {
102 				e.printStackTrace();
103 			}
104 			if (buflen <= 0) {
105 				return false;
106 			}
107 		}
108 		return true;
109 	}
110 	private int readByte() {
111 		if (hasNextByte())
112 			return buffer[ptr++];
113 		else
114 			return -1;
115 	}
116 	private static boolean isPrintableChar(int c) {
117 		return 33 <= c && c <= 126;
118 	}
119 	public boolean hasNext() {
120 		while (hasNextByte() && !isPrintableChar(buffer[ptr]))
121 			ptr++;
122 		return hasNextByte();
123 	}
124 	public String next() {
125 		if (!hasNext())
126 			throw new NoSuchElementException();
127 		StringBuilder sb = new StringBuilder();
128 		int b = readByte();
129 		while (isPrintableChar(b)) {
130 			sb.appendCodePoint(b);
131 			b = readByte();
132 		}
133 		return sb.toString();
134 	}
135 	public long nextLong() {
136 		if (!hasNext())
137 			throw new NoSuchElementException();
138 		long n = 0;
139 		boolean minus = false;
140 		int b = readByte();
141 		if (b == '-') {
142 			minus = true;
143 			b = readByte();
144 		}
145 		if (b < '0' || '9' < b) {
146 			throw new NumberFormatException();
147 		}
148 		while (true) {
149 			if ('0' <= b && b <= '9') {
150 				n *= 10;
151 				n += b - '0';
152 			} else if (b == -1 || !isPrintableChar(b)) {
153 				return minus ? -n : n;
154 			} else {
155 				throw new NumberFormatException();
156 			}
157 			b = readByte();
158 		}
159 	}
160 	public int nextInt() {
161 		long nl = nextLong();
162 		if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
163 			throw new NumberFormatException();
164 		return (int) nl;
165 	}
166 	public int[] nextIntArray(int n){
167 		int[] a = new int[n];
168 		for(int i=0;i<n;i++){
169 			a[i] = nextInt();
170 		}
171 		return a;
172 	}
173 	public Integer[] nextIntegerArray(int n){
174 		Integer[] a = new Integer[n];
175 		for(int i=0;i<n;i++){
176 			a[i] = nextInt();
177 		}
178 		return a;
179 	}
180 	public double nextDouble() {
181 		return Double.parseDouble(next());
182 	}
183 }
