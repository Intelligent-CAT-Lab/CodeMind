1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.Arrays;
6 import java.util.InputMismatchException;
7 
8 public class Main {
9 	static InputStream is;
10 	static PrintWriter out;
11 	static String INPUT = "";
12 	static double[] sins;
13 	
14 	static void solve()
15 	{
16 		int n = ni();
17 		long K = nl();
18 		K--;
19 		sins = new double[n+1];
20 		for(int i = 0;i <= n;i++){
21 			sins[i] = Math.sin(2*Math.PI*i/n)/2;
22 		}
23 		
24 		double low = 0, high = 2*Math.PI;
25 		for(int rep = 0;rep < 50;rep++){
26 			double h = (low+high)/2;
27 			if(count(h, n) <= K){
28 				low = h;
29 			}else{
30 				high = h;
31 			}
32 		}
33 		out.printf("%.14f\n", high);
34 	}
35 	
36 	static long count(double h, int n)
37 	{
38 		// a b
39 		// 
40 		long ret = 0;
41 		for(int len = 1;len <= n-1;len++){
42 			int low = 0, high = (n-len)/2+1;
43 			while(high-low > 1){
44 				int q = high+low>>1;
45 				if(S(len, q, n-len-q) <= h){
46 					low = q;
47 				}else{
48 					high = q;
49 				}
50 			}
51 			ret += low*2;
52 			if(low == (n-len)/2 && (n-len)%2 == 0){
53 				ret--;
54 			}
55 		}
56 		assert ret*n % 3 == 0;
57 		return ret*n/3;
58 	}
59 	
60 	static double S(int a, int b, int c)
61 	{
62 		return sins[a]+sins[b]+sins[c];
63 	}
64 	
65 	public static void main(String[] args) throws Exception
66 	{
67 		long S = System.currentTimeMillis();
68 		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
69 		out = new PrintWriter(System.out);
70 		
71 		solve();
72 		out.flush();
73 		long G = System.currentTimeMillis();
74 		tr(G-S+"ms");
75 	}
76 	
77 	private static boolean eof()
78 	{
79 		if(lenbuf == -1)return true;
80 		int lptr = ptrbuf;
81 		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
82 		
83 		try {
84 			is.mark(1000);
85 			while(true){
86 				int b = is.read();
87 				if(b == -1){
88 					is.reset();
89 					return true;
90 				}else if(!isSpaceChar(b)){
91 					is.reset();
92 					return false;
93 				}
94 			}
95 		} catch (IOException e) {
96 			return true;
97 		}
98 	}
99 	
100 	private static byte[] inbuf = new byte[1024];
101 	static int lenbuf = 0, ptrbuf = 0;
102 	
103 	private static int readByte()
104 	{
105 		if(lenbuf == -1)throw new InputMismatchException();
106 		if(ptrbuf >= lenbuf){
107 			ptrbuf = 0;
108 			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
109 			if(lenbuf <= 0)return -1;
110 		}
111 		return inbuf[ptrbuf++];
112 	}
113 	
114 	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
115 //	private static boolean isSpaceChar(int c) { return !(c >= 32 && c <= 126); }
116 	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
117 	
118 	private static double nd() { return Double.parseDouble(ns()); }
119 	private static char nc() { return (char)skip(); }
120 	
121 	private static String ns()
122 	{
123 		int b = skip();
124 		StringBuilder sb = new StringBuilder();
125 		while(!(isSpaceChar(b))){
126 			sb.appendCodePoint(b);
127 			b = readByte();
128 		}
129 		return sb.toString();
130 	}
131 	
132 	private static char[] ns(int n)
133 	{
134 		char[] buf = new char[n];
135 		int b = skip(), p = 0;
136 		while(p < n && !(isSpaceChar(b))){
137 			buf[p++] = (char)b;
138 			b = readByte();
139 		}
140 		return n == p ? buf : Arrays.copyOf(buf, p);
141 	}
142 	
143 	private static char[][] nm(int n, int m)
144 	{
145 		char[][] map = new char[n][];
146 		for(int i = 0;i < n;i++)map[i] = ns(m);
147 		return map;
148 	}
149 	
150 	private static int[] na(int n)
151 	{
152 		int[] a = new int[n];
153 		for(int i = 0;i < n;i++)a[i] = ni();
154 		return a;
155 	}
156 	
157 	private static int ni()
158 	{
159 		int num = 0, b;
160 		boolean minus = false;
161 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
162 		if(b == '-'){
163 			minus = true;
164 			b = readByte();
165 		}
166 		
167 		while(true){
168 			if(b >= '0' && b <= '9'){
169 				num = num * 10 + (b - '0');
170 			}else{
171 				return minus ? -num : num;
172 			}
173 			b = readByte();
174 		}
175 	}
176 	
177 	private static long nl()
178 	{
179 		long num = 0;
180 		int b;
181 		boolean minus = false;
182 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
183 		if(b == '-'){
184 			minus = true;
185 			b = readByte();
186 		}
187 		
188 		while(true){
189 			if(b >= '0' && b <= '9'){
190 				num = num * 10 + (b - '0');
191 			}else{
192 				return minus ? -num : num;
193 			}
194 			b = readByte();
195 		}
196 	}
197 	
198 	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
199 }
