1 import java.io.*;
2 import java.util.*;
3 
4 public class Main {
5 
6 	static final int P = 1_000_000_007;
7 
8 	int count(int a, int b, int c, int d) {
9 		return Math.max(Math.min(b, d) - Math.max(a, c) + 1, 0);
10 	}
11 
12 	int count(int x, int y, int z) {
13 		return (int) ((long) count(x - d, x + d, 0, a - 1)
14 				* count(y - d, y + d, 0, b - 1) % P
15 				* count(z - d, z + d, 0, c - 1) % P);
16 	}
17 
18 	int countX(int x, int y, int z) {
19 		return (int) ((long) count(x - d + 1, x + d, 0, a - 1)
20 				* count(y - d, y + d, 0, b - 1) % P
21 				* count(z - d, z + d, 0, c - 1) % P);
22 	}
23 
24 	int countY(int x, int y, int z) {
25 		return (int) ((long) count(x - d, x + d, 0, a - 1)
26 				* count(y - d + 1, y + d, 0, b - 1) % P
27 				* count(z - d, z + d, 0, c - 1) % P);
28 	}
29 
30 	int countZ(int x, int y, int z) {
31 		return (int) ((long) count(x - d, x + d, 0, a - 1)
32 				* count(y - d, y + d, 0, b - 1) % P
33 				* count(z - d + 1, z + d, 0, c - 1) % P);
34 	}
35 
36 	static class Item implements Comparable<Item> {
37 		long idx;
38 		int count;
39 
40 		public Item(long idx, int count) {
41 			this.idx = idx;
42 			this.count = count;
43 		}
44 
45 		@Override
46 		public int compareTo(Item o) {
47 			return Long.compare(idx, o.idx);
48 		}
49 	}
50 	
51 	void checkX(int x, List<Item> lst, boolean rec) {
52 		if (x >= 0 && x < a - 1) {
53 			int y = (int) ((long) (x + 1) * b / a);
54 			int z = (int) ((long) (x + 1) * c / a);
55 			lst.add(new Item(1L + x + y + z, count(x + 1, y, z)
56 					- countX(x, y, z)));
57 			if (rec) {
58 				checkY(y, lst, false);
59 				checkZ(z, lst, false);
60 			}
61 		}
62 	}
63 	
64 	void checkY(int y, List<Item> lst, boolean rec) {
65 		if (y >= 0 && y < b - 1) {
66 			int x = (int) ((long) (y + 1) * a / b);
67 			int z = (int) ((long) (y + 1) * c / b);
68 			lst.add(new Item(1L + y + x + z, count(x, y + 1, z)
69 					- countY(x, y, z)));
70 			if (rec) {
71 				checkX(x, lst, false);
72 				checkZ(z, lst, false);
73 			}
74 		}
75 	}
76 	
77 	void checkZ(int z, List<Item> lst, boolean rec) {
78 		if (z >= 0 && z < c - 1) {
79 			int x = (int) ((long) (z + 1) * a / c);
80 			int y = (int) ((long) (z + 1) * b / c);
81 			lst.add(new Item(1L + z + x + y, count(x, y, z + 1)
82 					- countZ(x, y, z)));
83 			if (rec) {
84 				checkX(x, lst, false);
85 				checkY(y, lst, false);
86 			}
87 		}
88 	}
89 
90 	int fast() {
91 		List<Item> lst = new ArrayList<>();
92 		for (int coord = 0; coord <= d + 1; coord++) {
93 			checkX(coord, lst, true);
94 			checkY(coord, lst, true);
95 			checkZ(coord, lst, true);
96 			checkX(a - 1 - d + coord, lst, true);
97 			checkY(b - 1 - d + coord, lst, true);
98 			checkZ(c - 1 - d + coord, lst, true);
99 		}
100 
101 		int ret = 0;
102 
103 		lst.add(new Item(0, count(0, 0, 0)));
104 		lst.add(new Item((long)a + b + c - 2, 0));
105 
106 		Collections.sort(lst);
107 		for (int i = 0; i < lst.size() - 1; i++) {
108 			int what = lst.get(i).count;
109 			long len = lst.get(i + 1).idx - lst.get(i).idx;
110 			if (what < 0) {
111 				what += P;
112 			}
113 			ret += (int) (len * what % P);
114 			if (ret >= P) {
115 				ret -= P;
116 			}
117 		}
118 
119 		return ret;
120 
121 	}
122 
123 	int slow() {
124 		long leftX = (long) b * c;
125 		long leftY = (long) c * a;
126 		long leftZ = (long) a * b;
127 
128 		int x = 0, y = 0, z = 0;
129 
130 		int ret = count(0, 0, 0);
131 		while (x != a - 1 || y != b - 1 || z != c - 1) {
132 			if (leftX < leftY && leftX < leftZ) {
133 				ret -= countX(x, y, z);
134 				leftY -= leftX;
135 				leftZ -= leftX;
136 				leftX = (long) b * c;
137 				x++;
138 			} else if (leftY < leftZ) {
139 				ret -= countY(x, y, z);
140 				leftX -= leftY;
141 				leftZ -= leftY;
142 				leftY = (long) a * c;
143 				y++;
144 			} else {
145 				ret -= countZ(x, y, z);
146 				leftX -= leftZ;
147 				leftY -= leftZ;
148 				leftZ = (long) a * b;
149 				z++;
150 			}
151 
152 			if (ret < 0) {
153 				ret += P;
154 			}
155 
156 			ret += count(x, y, z);
157 			if (ret >= P) {
158 				ret -= P;
159 			}
160 		}
161 		return ret;
162 	}
163 
164 	int a, b, c, d;
165 
166 	void submit() {
167 		a = nextInt();
168 		b = nextInt();
169 		c = nextInt();
170 		d = nextInt();
171 		out.println(fast());
172 	}
173 
174 	void preCalc() {
175 
176 	}
177 
178 	int gcd(int a, int b) {
179 		return b == 0 ? a : gcd(b, a % b);
180 	}
181 
182 	static final int C = 20;
183 
184 	void stress() {
185 		for (int tst = 0;; tst++) {
186 			int[] tmp = { rand(1, C), rand(1, C), rand(1, C) };
187 			Arrays.sort(tmp);
188 			if (gcd(tmp[0], tmp[1]) != 1 || gcd(tmp[0], tmp[2]) != 1
189 					|| gcd(tmp[1], tmp[2]) != 1) {
190 				continue;
191 			}
192 			if (tmp[0] == tmp[1] || tmp[1] == tmp[2]) {
193 				continue;
194 			}
195 			a = tmp[0];
196 			b = tmp[1];
197 			c = tmp[2];
198 			d = rand(0, C);
199 			if (fast() != slow()) {
200 				System.err.println(a + " " + b + " " + c + " " + d);
201 				System.err.println(fast());
202 				System.err.println(slow());
203 				throw new AssertionError();
204 			}
205 
206 			System.err.println(tst);
207 		}
208 	}
209 
210 	void test() {
211 
212 	}
213 
214 	Main() throws IOException {
215 		br = new BufferedReader(new InputStreamReader(System.in));
216 		out = new PrintWriter(System.out);
217 		preCalc();
218 		submit();
219 //		 stress();
220 		// test();
221 		out.close();
222 	}
223 
224 	static final Random rng = new Random();
225 
226 	static int rand(int l, int r) {
227 		return l + rng.nextInt(r - l + 1);
228 	}
229 
230 	public static void main(String[] args) throws IOException {
231 		new Main();
232 	}
233 
234 	BufferedReader br;
235 	PrintWriter out;
236 	StringTokenizer st;
237 
238 	String nextToken() {
239 		while (st == null || !st.hasMoreTokens()) {
240 			try {
241 				st = new StringTokenizer(br.readLine());
242 			} catch (IOException e) {
243 				throw new RuntimeException(e);
244 			}
245 		}
246 		return st.nextToken();
247 	}
248 
249 	String nextString() {
250 		try {
251 			return br.readLine();
252 		} catch (IOException e) {
253 			throw new RuntimeException(e);
254 		}
255 	}
256 
257 	int nextInt() {
258 		return Integer.parseInt(nextToken());
259 	}
260 
261 	long nextLong() {
262 		return Long.parseLong(nextToken());
263 	}
264 
265 	double nextDouble() {
266 		return Double.parseDouble(nextToken());
267 	}
268 }
