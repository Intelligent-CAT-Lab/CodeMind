1 import java.util.*;
2 import java.io.*;
3 public class Main {
4 	static boolean DEBUG;
5 	public static void main(String[] args) {
6 		DEBUG = args.length > 0 && args[0].equals("-DEBUG");
7 		Solver solver = new Solver();
8 		solver.solve();
9 		solver.exit();
10 	}
11 
12 	static class FastScanner {
13 		private final InputStream in = System.in;
14 		private final byte[] buffer = new byte[1024];
15 		private int ptr = 0;
16 		private int buflen = 0;
17 		private boolean hasNextByte() {
18 			if (ptr < buflen) {
19 				return true;
20 			}else{
21 				ptr = 0;
22 				try {
23 					buflen = in.read(buffer);
24 				} catch (IOException e) {
25 					e.printStackTrace();
26 				}
27 				if (buflen <= 0) {
28 					return false;
29 				}
30 			}
31 			return true;
32 		}
33 		private int readByte() { if (hasNextByte()) return buffer[ptr++]; else return -1;}
34 		private boolean isPrintableChar(int c) { return 33 <= c && c <= 126;}
35 		private void skipUnprintable() { while(hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;}
36 		public boolean hasNext() { skipUnprintable(); return hasNextByte();}
37 		public String next() {
38 			if (!hasNext()) throw new NoSuchElementException();
39 			StringBuilder sb = new StringBuilder();
40 			int b = readByte();
41 			while(isPrintableChar(b)) {
42 				sb.appendCodePoint(b);
43 				b = readByte();
44 			}
45 			return sb.toString();
46 		}
47 		public long nextLong() {
48 			if (!hasNext()) throw new NoSuchElementException();
49 			long n = 0;
50 			boolean minus = false;
51 			int b = readByte();
52 			if (b == '-') {
53 				minus = true;
54 				b = readByte();
55 			}
56 			if (b < '0' || '9' < b) {
57 				throw new NumberFormatException();
58 			}
59 			while(true){
60 				if ('0' <= b && b <= '9') {
61 					n *= 10;
62 					n += b - '0';
63 				}else if(b == -1 || !isPrintableChar(b)){
64 					return minus ? -n : n;
65 				}else{
66 					throw new NumberFormatException();
67 				}
68 				b = readByte();
69 			}
70 		}
71 	}
72 
73 	static class Solver {
74 		FastScanner sc = new FastScanner();
75 		public Solver() { }
76 
77 		String ns() { return sc.next(); }
78 		String[] ns(int n) {
79 			String a[] = new String[n];
80 			for(int i = 0; i < n; i ++) { a[i] = ns(); }
81 			return a;
82 		}
83 		String[][] ns(int n, int m) {
84 			String a[][] = new String[n][m];
85 			for(int i = 0; i < n; i ++) { a[i] = ns(m); }
86 			return a;
87 		}
88 		char[] nc(int n) {
89 			String str = ns();
90 			char a[] = new char[max(n, str.length())];
91 			for(int i = 0; i < str.length(); i ++) { a[i] = str.charAt(i); }
92 			return a;
93 		}
94 		char[][] nc(int n, int m) {
95 			char a[][] = new char[n][m];
96 			for(int i = 0; i < n; i ++) { a[i] = nc(m); }
97 			return a;
98 		}
99 		boolean[] nb(int n, char t) {
100 			char c[] = nc(-1);
101 			if(n < 0) n = c.length;
102 			boolean a[] = new boolean[n];
103 			for(int i = 0; i < n; i ++) { a[i] = c[i] == t; }
104 			return a;
105 		}
106 		boolean[][] nb(int n, int m, char t) {
107 			boolean a[][] = new boolean[n][m];
108 			for(int i = 0; i < n; i ++) { a[i] = nb(m, t); }
109 			return a;
110 		}
111 		int ni() { return (int)sc.nextLong(); }
112 		int[] ni(int n) {
113 			int a[] = new int[n];
114 			for(int i = 0; i < n; i ++) { a[i] = ni(); }
115 			return a;
116 		}
117 		int[][] ni(int n, int m) {
118 			int a[][] = new int[n][m];
119 			for(int i = 0; i < n; i ++) { a[i] = ni(m); }
120 			return a;
121 		}
122 		long nl() { return sc.nextLong(); }
123 		long[] nl(int n) {
124 			long a[] = new long[n];
125 			for(int i = 0; i < n; i ++) { a[i] = nl(); }
126 			return a;
127 		}
128 		long[][] nl(int n, int m) {
129 			long a[][] = new long[n][m];
130 			for(int i = 0; i < n; i ++) { a[i] = nl(m); }
131 			return a;
132 		}
133 		double nd() { return Double.parseDouble(sc.next()); }
134 		double[] nd(int n) {
135 			double a[] = new double[n];
136 			for(int i = 0; i < n; i ++) { a[i] = nd(); }
137 			return a;
138 		}
139 		double[][] nd(int n, int m) {
140 			double a[][] = new double[n][m];
141 			for(int i = 0; i < n; i ++) { a[i] = nd(m); }
142 			return a;
143 		}
144 
145 		PrintWriter out = new PrintWriter(System.out);
146 		PrintWriter err = new PrintWriter(System.err);
147 		void prt() { out.print(""); }
148 		<T> void prt(T a) { out.print(a); }
149 		void prtln() { out.println(""); }
150 		<T> void prtln(T a) { out.println(a); }
151 		void prtln(int... a) {
152 			StringBuilder sb = new StringBuilder();
153 			for(int element : a){ sb.append(element+" "); }
154 			prtln(sb.toString().trim());
155 		}
156 		void prtln(long... a) {
157 			StringBuilder sb = new StringBuilder();
158 			for(long element : a){ sb.append(element+" "); }
159 			prtln(sb.toString().trim());
160 		}
161 		void prtln(double... a) {
162 			StringBuilder sb = new StringBuilder();
163 			for(double element : a){ sb.append(element+" "); }
164 			prtln(sb.toString().trim());
165 		}
166 		void prtln(String... a) {
167 			StringBuilder sb = new StringBuilder();
168 			for(String element : a){ sb.append(element+" "); }
169 			prtln(sb.toString().trim());
170 		}
171 		void prtln(char... a) {
172 			StringBuilder sb = new StringBuilder();
173 			for(char element : a){ sb.append(element); }
174 			prtln(sb.toString().trim());
175 		}
176 		void prtln(int[][] a) { for(int[] element : a){ prtln(element); } }
177 		void prtln(long[][] a) { for(long[] element : a){ prtln(element); } }
178 		void prtln(double[][] a) { for(double[] element : a){ prtln(element); } }
179 		void prtln(String[][] a) { for(String[] element : a){ prtln(element); } }
180 		void prtln(char[][] a) { for(char[] element : a){ prtln(element); } }
181 		String errconvert(int a) { return isINF(a) ? "_" : String.valueOf(a); }
182 		String errconvert(long a) { return isINF(a) ? "_" : String.valueOf(a); }
183 		void errprt(int a) { if(DEBUG) { err.print(errconvert(a)); } }
184 		void errprt(long a) { if(DEBUG) { err.print(errconvert(a)); } }
185 		void errprt() { if(DEBUG) { err.print(""); } }
186 		<T> void errprt(T a) { if(DEBUG) { err.print(a); } }
187 		void errprt(boolean a) { if(DEBUG) { errprt(a ? "#" : "."); } }
188 		void errprtln() { if(DEBUG) { err.println(""); } }
189 		void errprtln(int a) { if(DEBUG) { err.println(errconvert(a)); } }
190 		void errprtln(long a) { if(DEBUG) { err.println(errconvert(a)); } }
191 		<T> void errprtln(T a) { if(DEBUG) { err.println(a); } }
192 		void errprtln(boolean a) { if(DEBUG) { errprtln(a ? "#" : "."); } }
193 		void errprtln(int... a) {
194 			if(DEBUG) {
195 				StringBuilder sb = new StringBuilder();
196 				for(int element : a){ sb.append(errconvert(element)+" "); }
197 				errprtln(sb.toString().trim());
198 			}
199 		}
200 		void errprtln(long... a) {
201 			if(DEBUG) {
202 				StringBuilder sb = new StringBuilder();
203 				for(long element : a){ sb.append(errconvert(element)+" "); }
204 				errprtln(sb.toString().trim());
205 			}
206 		}
207 		void errprtln(double... a) {
208 			if(DEBUG) {
209 				StringBuilder sb = new StringBuilder();
210 				for(double element : a){ sb.append(element+" "); }
211 				errprtln(sb.toString().trim());
212 			}
213 		}
214 		void errprtln(String... a) {
215 			if(DEBUG) {
216 				StringBuilder sb = new StringBuilder();
217 				for(String element : a){ sb.append(element+" "); }
218 				errprtln(sb.toString().trim());
219 			}
220 		}
221 		void errprtln(char... a) {
222 			if(DEBUG) {
223 				StringBuilder sb = new StringBuilder();
224 				for(char element : a){ sb.append(element); }
225 				errprtln(sb.toString().trim());
226 			}
227 		}
228 		void errprtln(boolean... a) {
229 			if(DEBUG) {
230 				StringBuilder sb = new StringBuilder();
231 				for(boolean element : a){ sb.append((element ? "#" : ".")+" "); }
232 				errprtln(sb.toString().trim());
233 			}
234 		}
235 		void errprtln(int[][] a) { if(DEBUG) { for(int[] element : a){ errprtln(element); } } }
236 		void errprtln(long[][] a) { if(DEBUG) { for(long[] element : a){ errprtln(element); } } }
237 		void errprtln(double[][] a) { if(DEBUG) { for(double[] element : a){ errprtln(element); } } }
238 		void errprtln(String[][] a) { if(DEBUG) { for(String[] element : a){ errprtln(element); } } }
239 		void errprtln(char[][] a) { if(DEBUG) { for(char[] element : a){ errprtln(element); } } }
240 		void errprtln(boolean[][] a) { if(DEBUG) { for(boolean[] element : a){ errprtln(element); } } }
241 
242 		void reply(boolean b) { prtln(b ? "Yes" : "No"); }
243 		void REPLY(boolean b) { prtln(b ? "YES" : "NO"); }
244 
245 		void flush() { out.flush(); if(DEBUG) { err.flush(); } }
246 		void exit() { flush(); System.exit(0); }
247 
248 		int min(int a, int b) { return Math.min(a, b); }
249 		long min(long a, long b) { return Math.min(a, b); }
250 		double min(double a, double b) { return Math.min(a, b); }
251 		int min(int... x) {
252 			int min = x[0];
253 			for(int val : x) { min = min(min, val); }
254 			return min;
255 		}
256 		long min(long... x) {
257 			long min = x[0];
258 			for(long val : x) { min = min(min, val); }
259 			return min;
260 		}
261 		double min(double... x) {
262 			double min = x[0];
263 			for(double val : x) { min = min(min, val); }
264 			return min;
265 		}
266 		int max(int a, int b) { return Math.max(a, b); }
267 		long max(long a, long b) { return Math.max(a, b); }
268 		double max(double a, double b) { return Math.max(a, b); }
269 		int max(int... x) {
270 			int max = x[0];
271 			for(int val : x) { max = max(max, val); }
272 			return max;
273 		}
274 		long max(long... x) {
275 			long max = x[0];
276 			for(long val : x) { max = max(max, val); }
277 			return max;
278 		}
279 		double max(double... x) {
280 			double max = x[0];
281 			for(double val : x) { max = max(max, val); }
282 			return max;
283 		}
284 		long sum(int... a) {
285 			long sum = 0;
286 			for(int element : a) { sum += element; }
287 			return sum;
288 		}
289 		long sum(long... a) {
290 			long sum = 0;
291 			for(long element : a) { sum += element; }
292 			return sum;
293 		}
294 		double sum(double... a) {
295 			double sum = 0;
296 			for(double element : a) { sum += element; }
297 			return sum;
298 		}
299 		long[] sums(int[] a) {
300 			long sum[] = new long[a.length + 1];
301 			sum[0] = 0;
302 			for(int i = 0; i < a.length; i ++) { sum[i + 1] = sum[i] + a[i]; }
303 			return sum;
304 		}
305 		long[] sums(long[] a) {
306 			long sum[] = new long[a.length + 1];
307 			sum[0] = 0;
308 			for(int i = 0; i < a.length; i ++) { sum[i + 1] = sum[i] + a[i]; }
309 			return sum;
310 		}
311 		double[] sums(double[] a) {
312 			double sum[] = new double[a.length + 1];
313 			sum[0] = 0;
314 			for(int i = 0; i < a.length; i ++) { sum[i + 1] = sum[i] + a[i]; }
315 			return sum;
316 		}
317 
318 		long abs(double x) { return (long)Math.abs(x); }
319 		long round(double x) { return Math.round(x); }
320 		long floor(double x) { return (long)Math.floor(x); }
321 		long ceil(double x) { return (long)Math.ceil(x); }
322 		double sqrt(double x) { return Math.sqrt(x); }
323 		double pow(double x, double y) { return Math.pow(x, y); }
324 		long pow(long x, long y) { return (long)Math.pow(x, y); }
325 		int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }
326 		long gcd(long a, long b) { return b == 0 ? a : gcd(b, a % b); }
327 		long lcm(long a, long b) { return a * b / gcd(a, b); }
328 
329 		int upperToInt(char a) { return a - 'A'; }
330 		int lowerToInt(char a) { return a - 'a'; }
331 		int numToInt(char a) { return a - '0'; }
332 		int charToInt(char a) { return a >= 'a' ? lowerToInt(a) : a >= 'A' ? upperToInt(a) : numToInt(a); }
333 		char intToUpper(int a) { return (char)(a + 'A'); }
334 		char intToLower(int a) { return (char)(a + 'a'); }
335 		char intToNum(int a) { return (char)(a + '0'); }
336 
337 		long[] div(long a) {
338 			List<Long> divList = new ArrayList<Long>();
339 			for(long i = 1; i * i <= a; i ++) {
340 				if(a % i == 0) {
341 					divList.add(i);
342 					if(i * i != a) { divList.add(a / i); };
343 				}
344 			}
345 
346 			long div[] = new long[divList.size()];
347 			for(int i = 0; i < divList.size(); i ++) { div[i] = divList.get(i); }
348 			return div;
349 		}
350 
351 		long[][] factor(long a) {
352 			List<Long> factorList = new ArrayList<Long>();
353 			List<Long> degreeList = new ArrayList<Long>();
354 			for(long i = 2; i * i <= a; i ++) {
355 				if(a % i == 0) {
356 					long count = 0;
357 					while(a % i == 0) {
358 						a /= i;
359 						count ++;
360 					}
361 					factorList.add(i);
362 					degreeList.add(count);
363 				}
364 			}
365 			if(a > 1) {
366 				factorList.add(a);
367 				degreeList.add(1L);
368 			}
369 			long factor[][] = new long[factorList.size()][2];
370 			for(int i = 0; i < factorList.size(); i ++) {
371 				factor[i][0] = factorList.get(i);
372 				factor[i][1] = degreeList.get(i);
373 			}
374 			Arrays.sort(factor, (sort1, sort2) -> Long.compare(sort1[0], sort2[0]));
375 			return factor;
376 		}
377 
378 		boolean isPrime(long x) {
379 			boolean ok = x > 1;
380 			for(long i = 2; i * i <= x; i ++) {
381 				ok &= x % i != 0;
382 				if(!ok) return ok;
383 			}
384 			return ok;
385 		}
386 		boolean[] prime(int num) {
387 			boolean prime[] = new boolean[num];
388 			fill(prime, true);
389 			prime[0] = false;
390 			prime[1] = false;
391 			for(int i = 2; i < num; i ++) {
392 				if(prime[i]) {
393 					for(int j = 2; i * j < num; j ++) {
394 						prime[i * j] = false;
395 					}
396 				}
397 			}
398 			return prime;
399 		}
400 
401 		long[][] countElements(long[] a, boolean sort) {
402 			int len = a.length;
403 			long array[] = new long[len];
404 			for(int i = 0; i < len; i ++) {
405 				array[i] = a[i];
406 			}
407 			if(sort) { Arrays.sort(array); }
408 			List<Long> elem = new ArrayList<Long>();
409 			List<Long> cnt = new ArrayList<Long>();
410 			long tmp = 1;
411 			for(int i = 1; i <= len; i ++) {
412 				if(i == len || array[i] != array[i - 1]) {
413 					elem.add(array[i - 1]);
414 					cnt.add(tmp);
415 					tmp = 1;
416 				}else {
417 					tmp ++;
418 				}
419 			}
420 			long counts[][] = new long[elem.size()][2];
421 			for(int i = 0; i < elem.size(); i ++) {
422 				counts[i][0] = elem.get(i);
423 				counts[i][1] = cnt.get(i);
424 			}
425 			return counts;
426 		}
427 		long[][] countElements(String str, boolean sort) {
428 			int len = str.length();
429 			char array[] = str.toCharArray();
430 			if(sort) { Arrays.sort(array); }
431 			List<Long> elem = new ArrayList<Long>();
432 			List<Long> cnt = new ArrayList<Long>();
433 			long tmp = 1;
434 			for(int i = 1; i <= len; i ++) {
435 				if(i == len || array[i] != array[i - 1]) {
436 					elem.add((long)array[i - 1]);
437 					cnt.add(tmp);
438 					tmp = 1;
439 				}else {
440 					tmp ++;
441 				}
442 			}
443 			long counts[][] = new long[elem.size()][2];
444 			for(int i = 0; i < elem.size(); i ++) {
445 				counts[i][0] = elem.get(i);
446 				counts[i][1] = cnt.get(i);
447 			}
448 			return counts;
449 		}
450 
451 		int numDigits(long a) { return Long.toString(a).length(); }
452 		long bitFlag(int a) { return 1L << (long)a; }
453 		boolean isFlagged(long x, int a) { return (x & bitFlag(a)) != 0; }
454 
455 		long countString(String str, String a) { return (str.length() - str.replace(a, "").length()) / a.length(); }
456 		long countStringAll(String str, String a) { return str.length() - str.replaceAll(a, "").length(); }
457 
458 		int lowerBound(long array[], long key) {
459 			return BS(array, key, true, true, true);
460 		}
461 		int lowerBound(long array[], long key, int ng, int ok) {
462 			return BS(array, key, true, true, true, ng, ok);
463 		}
464 		int upperBound(long array[], long key) {
465 			return BS(array, key, true, true, false);
466 		}
467 		int upperBound(long array[], long key, int ng, int ok) {
468 			return BS(array, key, true, true, false, ng, ok);
469 		}
470 		int cntBS(long array[], long key, boolean ascending, boolean greater, boolean equals) {
471 			return BS(array, key, ascending, greater, equals, true);
472 		}
473 		int cntBS(long array[], long key, boolean ascending, boolean greater, boolean equals, int ng, int ok) {
474 			return BS(array, key, ascending, greater, equals, true, ng, ok);
475 		}
476 		int BS(long array[], long key, boolean ascending, boolean greater, boolean equals) {
477 			return BS(array, key, ascending, greater, equals, false);
478 		}
479 		int BS(long array[], long key, boolean ascending, boolean greater, boolean equals, int ng, int ok) {
480 			return BS(array, key, ascending, greater, equals, false, ng, ok);
481 		}
482 		int BS(long array[], long key, boolean ascending, boolean greater, boolean equals, boolean count) {
483 			int ng = ascending ^ greater ? array.length : -1;
484 			int ok = ascending ^ greater ? -1 : array.length;
485 			return BS(array, key, ascending, greater, equals, count, ng, ok);
486 		}
487 		int BS(long array[], long key, boolean ascending, boolean greater, boolean equals, boolean count, int ng, int ok) {
488 			int index = binarySearch(array, key, greater, equals, ng, ok);
489 			return count ? (int)abs(ok - index) : index;
490 		}
491 		int binarySearch(long array[], long key, boolean greater, boolean equals, int ng, int ok) {
492 			while (abs(ok - ng) > 1) {
493 				int mid = (ok + ng) / 2;
494 				if(isOKforBinarySearch(array, mid, key, greater, equals)) {
495 					ok = mid;
496 				}else {
497 					ng = mid;
498 				}
499 			}
500 			return ok;
501 		}
502 		boolean isOKforBinarySearch(long array[], int index, long key, boolean greater, boolean equals) {
503 			return (array[index] > key && greater)
504 				|| (array[index] < key && !greater)
505 				|| (array[index] == key && equals);
506 		}
507 
508 		void reverse(String array[]) {
509 			String reversed[] = new String[array.length];
510 			for(int i = 0; i < array.length; i ++) { reversed[array.length - i - 1] = array[i]; }
511 			for(int i = 0; i < array.length; i ++) { array[i] = reversed[i]; }
512 		}
513 		void reverse(int array[]) {
514 			int reversed[] = new int[array.length];
515 			for(int i = 0; i < array.length; i ++) { reversed[array.length - i - 1] = array[i]; }
516 			for(int i = 0; i < array.length; i ++) { array[i] = reversed[i]; }
517 		}
518 		void reverse(long array[]) {
519 			long reversed[] = new long[array.length];
520 			for(int i = 0; i < array.length; i ++) { reversed[array.length - i - 1] = array[i]; }
521 			for(int i = 0; i < array.length; i ++) { array[i] = reversed[i]; }
522 		}
523 		void reverse(double array[]) {
524 			double reversed[] = new double[array.length];
525 			for(int i = 0; i < array.length; i ++) { reversed[array.length - i - 1] = array[i]; }
526 			for(int i = 0; i < array.length; i ++) { array[i] = reversed[i]; }
527 		}
528 		void reverse(boolean array[]) {
529 			boolean reversed[] = new boolean[array.length];
530 			for(int i = 0; i < array.length; i ++) { reversed[array.length - i - 1] = array[i]; }
531 			for(int i = 0; i < array.length; i ++) { array[i] = reversed[i]; }
532 		}
533 		void fill(int array[], int x) { Arrays.fill(array, x); }
534 		void fill(long array[], long x) { Arrays.fill(array, x); }
535 		void fill(double array[], double x) { Arrays.fill(array, x); }
536 		void fill(boolean array[], boolean x) { Arrays.fill(array, x); }
537 		void fill(int array[][], int x) { for(int a[] : array) { fill(a, x); } }
538 		void fill(long array[][], long x) { for(long a[] : array) { fill(a, x); } }
539 		void fill(double array[][], double x) { for(double a[] : array) { fill(a, x); } }
540 		void fill(boolean array[][], boolean x) { for(boolean a[] : array) { fill(a, x); } }
541 		void fill(int array[][][], int x) { for(int a[][] : array) { fill(a, x); } }
542 		void fill(long array[][][], long x) { for(long a[][] : array) { fill(a, x); } }
543 		void fill(double array[][][], double x) { for(double a[][] : array) { fill(a, x); } }
544 		void fill(boolean array[][][], boolean x) { for(boolean a[][] : array) { fill(a, x); } }
545 
546 		void shuffleArray(int[] array){
547 			int n = array.length;
548 			Random rnd = new Random();
549 			for(int i = 0; i < n; i ++){
550 				int tmp = array[i];
551 				int randomPos = i + rnd.nextInt(n - i);
552 				array[i] = array[randomPos];
553 				array[randomPos] = tmp;
554 			}
555 		}
556 		void shuffleArray(long[] array){
557 			int n = array.length;
558 			Random rnd = new Random();
559 			for(int i = 0; i < n; i ++){
560 				long tmp = array[i];
561 				int randomPos = i + rnd.nextInt(n - i);
562 				array[i] = array[randomPos];
563 				array[randomPos] = tmp;
564 			}
565 		}
566 		void shuffleArray(double[] array){
567 			int n = array.length;
568 			Random rnd = new Random();
569 			for(int i = 0; i < n; i ++){
570 				double tmp = array[i];
571 				int randomPos = i + rnd.nextInt(n - i);
572 				array[i] = array[randomPos];
573 				array[randomPos] = tmp;
574 			}
575 		}
576 
577 		long INF = (long)1e18 + 7;
578 		boolean isINF(long a) { return abs(a) > INF / 1000; }
579 		boolean isPlusINF(long a) { return a > 0 && isINF(a); }
580 		boolean isMinusINF(long a) { return isPlusINF(- a); }
581 		int I_INF = (int)1e9 + 7;
582 		boolean isINF(int a) { return abs(a) > I_INF / 1000; }
583 		boolean isPlusINF(int a) { return a > 0 && isINF(a); }
584 		boolean isMinusINF(int a) { return isPlusINF(- a); }
585 
586 
587 		// mods
588 		long MOD = (long)1e9 + 7; // 998244353;
589 		public long mod(long i) { i %= MOD; return i + (i < 0 ? MOD : 0); }
590 
591 		long pow_m(long x, long y) {
592 			if (y == 0) { return 1;
593 			}else {
594 				long tmp = pow_m(x, y / 2);
595 				return mod(mod(tmp * tmp) * (y % 2 == 0 ? 1 : x));
596 			}
597 		}
598 		long[] pows_m(long x, int max) {
599 			long pow[] = new long[max + 1];
600 			pow[0] = 1;
601 			for(int i = 0; i < max; i ++) {
602 				pow[i + 1] = mod(pow[i] * x);
603 			}
604 			return pow;
605 		}
606 
607 		int MAX_INV_SIZE = 100_100;
608 		HashMap<Long, Long> invMap = new HashMap<>();
609 		long inv(long x) {
610 			x = mod(x);
611 			if(invMap.containsKey(x)) { return invMap.get(x); }
612 			if(invMap.size() >= MAX_INV_SIZE) { return calInv(x); }
613 			invMap.put(x, calInv(x));
614 			return invMap.get(x);
615 		}
616 		long calInv(long x) { return pow_m(x, MOD - 2); }
617 
618 		int MAX_FACT = 5_000_100;
619 		long fact[];
620 		long invFact[];
621 		boolean isFactPrepared = false;
622 		HashMap<Integer, long[]> factMap;
623 		void prepareFact() {
624 			fact = new long[MAX_FACT];
625 			Arrays.fill(fact, 0);
626 			invFact = new long[MAX_FACT];
627 			Arrays.fill(invFact, 0);
628 			fact[0] = 1;
629 			int maxIndex = min(MAX_FACT, (int)MOD);
630 			for(int i = 1; i < maxIndex; i ++) { fact[i] = mod(fact[i - 1] * i); }
631 			invFact[maxIndex - 1] = inv(fact[maxIndex - 1]);
632 			for(int i = maxIndex - 1; i > 0; i --) { invFact[i - 1] = mod(invFact[i] * i); }
633 
634 			factMap = new HashMap<>();
635 			isFactPrepared = true;
636 		}
637 
638 		long P(int n, int r) {
639 			if(!isFactPrepared) { prepareFact(); }
640 			if(n < 0 || r < 0 || n < r) { return 0; }
641 			if(n >= MAX_FACT) {
642 				if(!factMap.containsKey(n)) {
643 					long largeFact[] = new long[MAX_FACT];
644 					factMap.put(n, largeFact);
645 					fill(largeFact, -INF);
646 					largeFact[0] = 1;
647 				}
648 				long largeFact[] = factMap.get(n);
649 				int i = r;
650 				while(isINF(largeFact[i])) { i --; }
651 				for(; i < r; i ++) { largeFact[i + 1] = mod(largeFact[i] * (n - i)); }
652 				return largeFact[r];
653 			}
654 			return mod(fact[n] * invFact[n - r]);
655 		}
656 		long C(int n, int r) {
657 			if(!isFactPrepared) { prepareFact(); }
658 			if(n < 0 || r < 0 || n < r) { return 0; }
659 			return mod(P(n, r) * invFact[r]);
660 		}
661 		long H(int n, int r) { return C((n - 1) + r, r); }
662 
663 
664 		// grid
665 		class Grids {
666 			int h;
667 			int w;
668 			Grid[][] gs;
669 			Grids(int h, int w) {
670 				this.h = h;
671 				this.w = w;
672 				gs = new Grid[h][w];
673 				for(int i = 0; i < h; i ++) {
674 					for(int j = 0; j < w; j ++) {
675 						gs[i][j] = new Grid(i, j, h, w);
676 					}
677 				}
678 			}
679 
680 			void init(boolean[][] b) {
681 				for(int i = 0; i < h; i ++) {
682 					for(int j = 0; j < w; j ++) {
683 						gs[i][j].b = b[i][j];
684 					}
685 				}
686 			}
687 			void init(long[][] val) {
688 				for(int i = 0; i < h; i ++) {
689 					for(int j = 0; j < w; j ++) {
690 						gs[i][j].val = val[i][j];
691 					}
692 				}
693 			}
694 
695 			int dx[] = {0, -1, 1, 0, 0, -1, 1, -1, 1};
696 			int dy[] = {0, 0, 0, -1, 1, -1, -1, 1, 1};
697 			Grid next(Grid g, int i) {
698 				return isValid(g.x + dx[i], g.y + dy[i], g.h, g.w)
699 					? gs[g.x + dx[i]][g.y + dy[i]]
700 					: null;
701 			}
702 		}
703 		class Grid implements Comparable<Grid> {
704 			int x;
705 			int y;
706 			int h;
707 			int w;
708 			int i;
709 			boolean b;
710 			long val;
711 
712 			Grid() {  }
713 			Grid(int x, int y, int h, int w) { init(x, y, h, w, false, 0); }
714 			Grid(int x, int y, int h, int w, boolean b) { init(x, y, h, w, b, 0); }
715 			Grid(int x, int y, int h, int w, long val) { init(x, y, h, w, false, val); }
716 			Grid(int x, int y, int h, int w, boolean b, long val) { init(x, y, h, w, b, val); }
717 
718 			void init(int x, int y, int h, int w, boolean b, long val) {
719 				this.x = x;
720 				this.y = y;
721 				this.h = h;
722 				this.w = w;
723 				this.b = b;
724 				this.val = val;
725 				i = x * w + y;
726 			}
727 
728 			@Override
729 			public int compareTo(Grid g) {
730 				return Long.compare(this.val, g.val);
731 			}
732 		}
733 
734 		boolean isValid(int x, int y, int h, int w) {
735 			return x >= 0 && x < h && y >= 0 && y < w;
736 		}
737 		boolean isValid(Grid g) {
738 			return isValid(g.x, g.y, g.h, g.w);
739 		}
740 
741 		// graph
742 		class Graph {
743 			int numNode;
744 			int numEdge;
745 			boolean directed;
746 			Edge edges[];
747 			Node nodes[];
748 			Node reversedNodes[];
749 
750 			Graph(int numNode, int numEdge, Edge edges[], boolean directed) {
751 				this.numNode = numNode;
752 				this.numEdge = numEdge;
753 				this.directed = directed;
754 				this.edges = edges;
755 				nodes = new Node[numNode];
756 				reversedNodes = new Node[numNode];
757 				for(int i = 0; i < numNode; i ++) {
758 					nodes[i] = new Node(i);
759 					reversedNodes[i] = new Node(i);
760 				}
761 
762 				for(Edge edge : edges) {
763 					nodes[edge.source].add(edge.target, edge.cost);
764 					if(directed) {
765 						reversedNodes[edge.target].add(edge.source, edge.cost);
766 					}else {
767 						nodes[edge.target].add(edge.source, edge.cost);
768 					}
769 				}
770 			}
771 
772 			void clearNodes() {
773 				for(Node n : nodes) { n.clear(); }
774 				for(Node n : reversedNodes) { n.clear(); }
775 			}
776 		}
777 
778 		class Node {
779 			int id;
780 			ArrayList<Edge> edges = new ArrayList<Edge>();
781 
782 			Node(int id) {
783 				this.id = id;
784 			}
785 			void add(int target, long cost) {
786 				edges.add(new Edge(id, target, cost));
787 			}
788 			void clear() {
789 				edges.clear();
790 			}
791 		}
792 
793 		class Edge implements Comparable<Edge> {
794 			int source;
795 			int target;
796 			long cost;
797 			Edge(int source, int target, long cost) {
798 				this.source = source;
799 				this.target = target;
800 				this.cost = cost;
801 			}
802 
803 			@Override
804 			public int compareTo(Edge e) {
805 				return Long.compare(this.cost, e.cost);
806 			}
807 		}
808 
809 public void solve() {
810 	int l = ni();
811 	l --;
812 	int crt = 1;
813 	List<Edge> edges = new ArrayList<>();
814 	int numNode = 20;
815 	while(l >= 0 && crt < numNode) {
816 		if(l % 2 == 0) {
817 			edges.add(new Edge(crt, numNode, l));
818 			l --;
819 		}else {
820 			l /= 2;
821 			edges.add(new Edge(crt, crt + 1, 0));
822 			edges.add(new Edge(crt, crt + 1, l + 1));
823 			crt ++;
824 		}
825 	}
826 	prtln(numNode, edges.size());
827 	assert(edges.size() <= 60);
828 	assert(crt <= numNode);
829 	for(int i = 0; i < edges.size(); i ++) {
830 		prtln(edges.get(i).source, edges.get(i).target, edges.get(i).cost);
831 	}
832 }
833 
834 
835 
836 	}
837 }