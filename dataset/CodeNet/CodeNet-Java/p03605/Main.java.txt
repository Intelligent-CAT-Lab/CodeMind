1 
2 
3 import java.io.IOException;
4 import java.util.Arrays;
5 import java.util.Scanner;
6 
7 public class Main {
8 
9 	public static void main(String[] args) throws IOException {
10 
11 		Scanner scan = new Scanner(System.in);
12 
13 		int N = scan.nextInt();
14 
15 		int amari = N % 10;
16 		int sho = N / 10;
17 
18 		if (amari == 9) {
19 			System.out.println("Yes");
20 		} else if (sho == 9) {
21 			System.out.println("Yes");
22 		} else {
23 			System.out.println("No");
24 		}
25 	}
26 
27 	//***********************以下共通関数************************************************
28 	/**
29 	 * 文字列を反転して返す
30 	 * @param pStr 文字列
31 	 * @return 反転した文字列
32 	 */
33 	public static String myReverse(String pStr) {
34 		if (pStr.length() < 1) {
35 			return "";
36 		}
37 
38 		StringBuffer sb = new StringBuffer(pStr);
39 		return sb.reverse().toString();
40 	}
41 
42 	/**
43 	 * 余りを求める。
44 	 * @param a
45 	 * @param b
46 	 * @return 余り。余りがマイナスの時はプラスで返す。
47 	 */
48 	public static long myMod(long a, long b) {
49 		long ret = 0;
50 
51 		ret = a % b;
52 
53 		if (ret < 0) {
54 			ret += b;
55 		}
56 
57 		return ret;
58 	}
59 
60 	/**
61 	 * 乗数を求める ※mod対応
62 	 * @param kisu 基数
63 	 * @param josu 乗数
64 	 * @param primeNumMod_0 法 mod値 使わない場合は「0」
65 	 * @return
66 	 */
67 	public static long myPowWithMod(long kisu, long josu, long primeNumMod_0) {
68 
69 		long ans = 1;
70 
71 		//乗数が0の場合→1
72 		if (josu == 0)
73 			return 1;
74 
75 		if (primeNumMod_0 == 0) {
76 			//modを使わないとき
77 
78 			while (josu > 0) {
79 
80 				if (josu % 2 == 0) {
81 					//累乗が偶数の時
82 
83 					kisu *= kisu;
84 					josu = josu / 2;
85 				} else {
86 					//累乗が奇数の時
87 					ans *= kisu;
88 					josu--;
89 				}
90 			}
91 
92 			return ans;
93 
94 		} else {
95 			//modを使うとき
96 
97 			//初めに桁を落とす
98 			kisu = myMod(kisu, primeNumMod_0);
99 
100 			while (josu > 0) {
101 
102 				if (josu % 2 == 0) {
103 					//累乗が偶数の時
104 
105 					kisu *= myMod(kisu, primeNumMod_0);
106 					josu = josu / 2;
107 
108 				} else {
109 					//累乗が奇数の時
110 					ans *= myMod(kisu, primeNumMod_0);
111 					josu--;
112 
113 				}
114 			}
115 
116 			return myMod(ans, primeNumMod_0);
117 
118 		}
119 
120 	}
121 
122 }
