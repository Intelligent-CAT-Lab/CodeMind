1 import java.io.*;
2 import java.util.*;
3 
4 public class Main {
5 
6 	BufferedReader br;
7 	PrintWriter out;
8 	StringTokenizer st;
9 	boolean eof;
10 
11 	static final int P = 1_000_000_007;
12 	
13 	void solve() throws IOException {
14 		int n = nextInt();
15 		int[] dp = {1, 0, 0};
16 		
17 		int[] inv = new int[n + 7];
18 		inv[1] = 1;
19 		for (int x = 2; x < inv.length; x++) {
20 			inv[x] = P - (int)((long)(P / x) * inv[P % x] % P);
21 		}
22 		
23 		int coef = 1;
24 		long ret = 0;
25 		for (int k = 1; k <= n; k++) {
26 			int[] nxt = new int[3];
27 			for (int j1 = 0; j1 < 3; j1++) {
28 				for (int j2 = 0; j2 < 3; j2++) {
29 					if (j1 != j2) {
30 						nxt[j2] += dp[j1];
31 						if (nxt[j2] >= P) {
32 							nxt[j2] -= P;
33 						}
34 					}
35 				}
36 			}
37 			
38 			dp = nxt;
39 			
40 			coef = (int)((long)coef * (n - k + 1) % P * inv[k] % P);
41 			
42 			int ways = (int)((long)dp[1] * coef % P);
43 			
44 			int delta = (int)((long)inv[3] * inv[n] % P * inv[k] % P * ways % P);
45 			
46 			ret += delta;
47 		}
48 		
49 		ret %= P;
50 		
51 		for (int i = 1; i < n; i++) {
52 			ret = ret * inv[3] % P;
53 		}
54 		
55 		out.println(ret);
56 	}
57 
58 	void inp() throws IOException {
59 		br = new BufferedReader(new InputStreamReader(System.in));
60 		out = new PrintWriter(System.out);
61 		solve();
62 		out.close();
63 	}
64 
65 	public static void main(String[] args) throws IOException {
66 		new Main().inp();
67 	}
68 
69 	String nextToken() {
70 		while (st == null || !st.hasMoreTokens()) {
71 			try {
72 				st = new StringTokenizer(br.readLine());
73 			} catch (Exception e) {
74 				eof = true;
75 				return null;
76 			}
77 		}
78 		return st.nextToken();
79 	}
80 
81 	String nextString() {
82 		try {
83 			return br.readLine();
84 		} catch (IOException e) {
85 			eof = true;
86 			return null;
87 		}
88 	}
89 
90 	int nextInt() throws IOException {
91 		return Integer.parseInt(nextToken());
92 	}
93 
94 	long nextLong() throws IOException {
95 		return Long.parseLong(nextToken());
96 	}
97 
98 	double nextDouble() throws IOException {
99 		return Double.parseDouble(nextToken());
100 	}
101 }
