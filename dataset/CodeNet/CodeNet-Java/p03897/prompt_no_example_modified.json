{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.BufferedWriter;\nimport java.util.Set;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashSet;\nimport java.io.UncheckedIOException;\nimport java.nio.charset.Charset;\nimport java.util.StringTokenizer;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author mikit\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        LightScanner in = new LightScanner(inputStream);\n        LightWriter out = new LightWriter(outputStream);\n        JConnectedCheckerboard solver = new JConnectedCheckerboard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class JConnectedCheckerboard {\n        public void solve(int testNumber, LightScanner in, LightWriter out) {\n            // out.setBoolLabel(LightWriter.BoolLabel.YES_NO_FIRST_UP);\n            int n = in.ints();\n            Set<Vec2i> ans = new HashSet<>();\n            for (int i = 1; i < n; i += 2) {\n                ans.add(new Vec2i(i, 0));\n                ans.add(new Vec2i(0, i));\n            }\n            for (int i = n % 2; i < n; i += 2) {\n                ans.add(new Vec2i(i, n - 1));\n                ans.add(new Vec2i(n - 1, i));\n            }\n            int offset = 0;\n            int d = 2;\n            for (int unused = 0; unused < 10; unused++) {\n                for (int i = 1; i < n; i += 2 * d) {\n                    for (int j = offset; j < n; j += 2 * d) {\n                        ans.add(new Vec2i(i, j));\n                    }\n                }\n                for (int i = d + 1; i < n; i += 2 * d) {\n                    for (int j = offset + d; j < n; j += 2 * d) {\n                        ans.add(new Vec2i(i, j));\n                    }\n                }\n\n                offset += d;\n                d *= 2;\n            }\n\n            out.ans(ans.size()).ln();\n            for (Vec2i an : ans) {\n                out.ans(an.x).ans(an.y).ln();\n            }\n        }\n\n    }\n\n    static class LightScanner {\n        private BufferedReader reader = null;\n        private StringTokenizer tokenizer = null;\n\n        public LightScanner(InputStream in) {\n            reader = new BufferedReader(new InputStreamReader(in));\n        }\n\n        public String string() {\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new UncheckedIOException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int ints() {\n            return Integer.parseInt(string());\n        }\n\n    }\n\n    static class LightWriter implements AutoCloseable {\n        private final Writer out;\n        private boolean autoflush = false;\n        private boolean breaked = true;\n\n        public LightWriter(Writer out) {\n            this.out = out;\n        }\n\n        public LightWriter(OutputStream out) {\n            this(new BufferedWriter(new OutputStreamWriter(out, Charset.defaultCharset())));\n        }\n\n        public LightWriter print(char c) {\n            try {\n                out.write(c);\n                breaked = false;\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n            return this;\n        }\n\n        public LightWriter print(String s) {\n            try {\n                out.write(s, 0, s.length());\n                breaked = false;\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n            return this;\n        }\n\n        public LightWriter ans(String s) {\n            if (!breaked) {\n                print(' ');\n            }\n            return print(s);\n        }\n\n        public LightWriter ans(int i) {\n            return ans(Integer.toString(i));\n        }\n\n        public LightWriter ln() {\n            print(System.lineSeparator());\n            breaked = true;\n            if (autoflush) {\n                try {\n                    out.flush();\n                } catch (IOException ex) {\n                    throw new UncheckedIOException(ex);\n                }\n            }\n            return this;\n        }\n\n        public void close() {\n            try {\n                out.close();\n            } catch (IOException ex) {\n                throw new UncheckedIOException(ex);\n            }\n        }\n\n    }\n\n    static class Vec2i implements Comparable<Vec2i> {\n        public int x;\n        public int y;\n\n        public Vec2i(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Vec2i vec2i = (Vec2i) o;\n            return x == vec2i.x && y == vec2i.y;\n        }\n\n        public int hashCode() {\n            return 31 * x + y;\n        }\n\n        public String toString() {\n            return \"(\" + x + \", \" + y + \")\";\n        }\n\n        public int compareTo(Vec2i o) {\n            if (x == o.x) {\n                return Integer.compare(y, o.y);\n            }\n            return Integer.compare(x, o.x);\n        }\n\n    }\n}\n\n\nWhat would be the output of the code execution given the following input:\n2\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "1\n1 0\n"
    }
}