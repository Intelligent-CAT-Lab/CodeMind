1 import java.io.BufferedReader;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.InputStreamReader;
5 
6 public class Main {
7 
8     public static void main(String[] args) throws Exception {
9         try (Reader r = new Reader(System.in)) {
10             int N = r.i();
11             System.out.println((N - 1) / 2);
12         }
13     }
14 
15     public static class Reader implements AutoCloseable {
16 
17         private BufferedReader br;
18 
19         private String[] buf;
20 
21         private int bufidx = -1;
22 
23         public Reader(InputStream in) {
24             this.br = new BufferedReader(new InputStreamReader(in));
25         }
26 
27         @Override
28         public void close() throws Exception {
29             br.close();
30         }
31 
32         private void readBuf() throws IOException {
33             if (bufidx == -1 || bufidx == buf.length) {
34                 buf = br.readLine().split(" ");
35                 bufidx = 0;
36             }
37         }
38 
39         public String s() throws IOException {
40             readBuf();
41             return buf[bufidx++];
42         }
43 
44         public int i() throws IOException {
45             return Integer.parseInt(s());
46         }
47 
48         public long l() throws IOException {
49             return Long.parseLong(s());
50         }
51 
52         public double d() throws IOException {
53             return Double.parseDouble(s());
54         }
55 
56         public String[] sa() throws IOException {
57             readBuf();
58             if (bufidx != 0) {
59                 throw new RuntimeException("illegal read");
60             }
61             bufidx = -1;
62             return buf;
63         }
64 
65         public int[] ia() throws IOException {
66             String[] sa = sa();
67             int[] ia = new int[sa.length];
68             for (int i = 0; i < sa.length; i++) {
69                 ia[i] = Integer.parseInt(sa[i]);
70             }
71             return ia;
72         }
73 
74         public long[] la() throws IOException {
75             String[] sa = sa();
76             long[] la = new long[sa.length];
77             for (int i = 0; i < sa.length; i++) {
78                 la[i] = Long.parseLong(sa[i]);
79             }
80             return la;
81         }
82 
83         public double[] da() throws IOException {
84             String[] sa = sa();
85             double[] da = new double[sa.length];
86             for (int i = 0; i < sa.length; i++) {
87                 da[i] = Double.parseDouble(sa[i]);
88             }
89             return da;
90         }
91 
92         public int[][] im(int N) throws IOException {
93             int[][] im = new int[N][];
94             for (int i = 0; i < N; i++) {
95                 im[i] = ia();
96             }
97             return im;
98         }
99 
100         public long[][] lm(int N) throws IOException {
101             long[][] lm = new long[N][];
102             for (int i = 0; i < N; i++) {
103                 lm[i] = la();
104             }
105             return lm;
106         }
107 
108         public double[][] dm(int N) throws IOException {
109             double[][] dm = new double[N][];
110             for (int i = 0; i < N; i++) {
111                 dm[i] = da();
112             }
113             return dm;
114         }
115 
116     }
117 
118 }
