1 import java.util.Arrays;
2 import java.util.Scanner;
3 
4 class Main{
5 
6     static long M;
7     static long[][] S;
8     static long[][] C;
9     static int N;
10 
11     static long[][] complex(int N){
12         long[][] res = new long[N+1][N+1];
13         for(int i=0;i<=N;++i){
14             res[i][0]=res[i][i]=1;
15             for(int j=1;j<i;++j){
16                 res[i][j]=(res[i-1][j]+res[i-1][j-1])%M;
17             }
18         }
19         return res;
20     }
21 
22     static long[][] stirling(int N){
23         long[][] res = new long[N+1][N+1];
24         //i個を空でないjに分割(含まれないものが合っても良い)
25         for(int i=0;i<=N;++i){
26             res[i][0]=res[i][i]=1;
27             for(int j=1;j<i;++j){
28                 res[i][j] = (res[i-1][j-1] + (long)(j+1)*(res[i-1][j]%M))%M;
29             }
30         }
31         return res;
32     }
33 
34     //a^x
35     static long beki(long a, long x, long mod){
36         long res=1;
37         for(int i=0;i<32;++i){
38             if(((x>>i)&1)==1)res=(res*a)%mod;
39             a = (a*a)%mod;
40         }
41         return res;
42     }
43 
44     static long ways(int i){
45         long res = 0;
46         long b1 = beki(2,N-i,M);
47         long beki1 = 1;
48         long beki2 = beki(2,beki(2,N-i,M-1)%(M-1),M);
49         for(int j=0;j<=i;++j){
50             res = (res+ways2(i,j,beki1,beki2))%M;
51             beki1 = (beki1*b1)%M;
52         }
53         return res;
54     }
55 
56     static long ways2(int i,int j,long beki1, long beki2){
57         return ((S[i][j]*beki1)%M*beki2%M)%M;
58     }
59 
60     public static void main(String[] args){
61         Scanner scan = new Scanner(System.in);
62         N = scan.nextInt();
63         M = scan.nextLong();
64         C = complex(N);
65         S = stirling(N);
66         long ans = 0;
67         for(int i=0;i<=N;++i){
68             ans = (ans + (i%2==0 ? 1:-1)*(C[N][i]*ways(i))%M + (i%2==0 ? 0:M))%M;
69         }
70         System.out.println(ans);
71     }
72 }