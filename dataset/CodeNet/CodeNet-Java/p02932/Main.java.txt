1 
2 
3 import java.io.FileInputStream;
4 import java.io.IOException;
5 import java.io.InputStream;
6 import java.io.OutputStream;
7 import java.math.BigInteger;
8 import java.nio.charset.Charset;
9 import java.util.Arrays;
10 import java.util.HashMap;
11 import java.util.Map;
12 import java.util.Random;
13 
14 
15 public class Main {
16     public static void main(String[] args) throws Exception {
17         boolean local = false;
18         boolean async = true;
19 
20         Charset charset = Charset.forName("ascii");
21 
22         FastIO io = local ? new FastIO(new FileInputStream("D:\\DATABASE\\TESTCASE\\Code.in"), System.out, charset) : new FastIO(System.in, System.out, charset);
23         Task task = new Task(io, new Debug(local));
24 
25         if (async) {
26             Thread t = new Thread(null, task, "skypool", 1 << 27);
27             t.setPriority(Thread.MAX_PRIORITY);
28             t.start();
29             t.join();
30         } else {
31             task.run();
32         }
33 
34         if (local) {
35             io.cache.append("\n\n--memory -- \n" + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) >> 20) + "M");
36         }
37 
38         io.flush();
39     }
40 
41     public static class Task implements Runnable {
42         final FastIO io;
43         final Debug debug;
44         int inf = (int) 1e8;
45         long lInf = (long) 1e18;
46         double dInf = 1e50;
47 
48         public Task(FastIO io, Debug debug) {
49             this.io = io;
50             this.debug = debug;
51         }
52 
53         @Override
54         public void run() {
55             solve();
56         }
57 
58         NumberTheory.Modular mod = new NumberTheory.Modular((int) 1e9 + 7);
59         NumberTheory.Composite comp = new NumberTheory.Composite(1000000, mod);
60         NumberTheory.BitOperator bo = new NumberTheory.BitOperator();
61 
62         public void solve() {
63             int n = io.readInt();
64             int m = io.readInt();
65             int l = io.readInt();
66             int r = io.readInt();
67 
68             io.cache.append(solve(n, m, l, r));
69         }
70 
71         public int solve(int n, int m, int l, int r) {
72             //ei
73             int lPart = m;
74             int rPart = n - m;
75             int[] cache1 = new int[r + 1];
76             int[] cache2 = new int[r + 1];
77             for (int x = 1; x < cache1.length; x++) {
78                 int localSum = 0;
79                 for (int j = 0; j <= rPart; j++) {
80                     int c = comp.composite(rPart, j);
81                     int numberOfX = lPart + j;
82                     int sub = numberOfX * x;
83                     if ((long)numberOfX * x > r) {
84                         break;
85                     }
86                     int plus = mod.mul(c, mod.subtract(inRange(n, r - sub), inRange(n, l - 1 - sub)));
87                     if (bo.bitAt(j, 0) == 1) {
88                         plus = -plus;
89                     }
90                     localSum = mod.plus(localSum, plus);
91                 }
92                 cache1[x] = mod.mul(localSum, comp.composite(n, lPart));
93             }
94             // min{1..M} >= x + 1 and max{M+1...N} < x
95             for (int x = 1; x < cache2.length; x++) {
96                 int localSum = 0;
97                 for (int j = 0; j <= rPart; j++) {
98                     int c = comp.composite(rPart, j);
99                     int numberOfX = lPart + j;
100                     int sub = numberOfX * x + lPart;
101                     if ((long)numberOfX * x + lPart > r) {
102                         break;
103                     }
104                     int plus = mod.mul(c, mod.subtract(inRange(n, r - sub), inRange(n, l - 1 - sub)));
105                     if (bo.bitAt(j, 0) == 1) {
106                         plus = -plus;
107                     }
108                     localSum = mod.plus(localSum, plus);
109                 }
110                 cache2[x] = mod.mul(localSum, comp.composite(n, lPart));
111             }
112 
113             int sum = mod.subtract(inRange(n, r), inRange(n, l - 1));
114             for (int i = 0; i <= r; i++) {
115                 int plus = mod.subtract(cache1[i], cache2[i]);
116                 sum = mod.subtract(sum, plus);
117             }
118 
119             return sum;
120         }
121 
122 
123         /**
124          * a1 + a2 + ... + an <= m
125          */
126         public int inRange(int n, int m) {
127             return comp.composite(m + n, n);
128         }
129     }
130 
131 
132     public static class NumberTheory {
133         private static final Random RANDOM = new Random();
134 
135         public static class ExtLucasFactorial {
136             int exp;
137             int fact;
138             int p;
139             int pc;
140             Modular modular;
141             Power power;
142             ExtGCD extGCD = new ExtGCD();
143             int[] g;
144 
145             /**
146              * O(pc)
147              *
148              * @param p  the prime
149              * @param pc p^c
150              * @param g  buffer
151              */
152             public ExtLucasFactorial(int p, int pc, int[] g) {
153                 this.p = p;
154                 this.pc = pc;
155                 this.g = g;
156                 modular = new Modular(pc);
157                 power = new Power(modular);
158                 g[0] = 1;
159                 g[1] = 1;
160                 for (int i = 2; i <= pc; i++) {
161                     if (i % p == 0) {
162                         g[i] = g[i - 1];
163                     } else {
164                         g[i] = modular.mul(g[i - 1], i);
165                     }
166                 }
167             }
168 
169             /**
170              * return m! (mod pc) without any factor which is multiple of p.
171              * <br>
172              * O(\log_2^2{m})
173              */
174             private int fact(long m) {
175                 fact = 1;
176                 exp = 0;
177                 while (m > 1) {
178                     exp += m / p;
179                     fact = modular.mul(fact, power.pow(g[pc], m / pc));
180                     fact = modular.mul(fact, g[(int) (m % pc)]);
181                     m /= p;
182                 }
183                 return fact;
184             }
185 
186             /**
187              * Find C(m,n), it means choose n elements from a set whose size is m.
188              * <br>
189              * O(\log_2^2{m})
190              */
191             public int composite(long m, long n) {
192                 int v = fact(m);
193                 int e = exp;
194                 extGCD.extgcd(fact(n), pc);
195                 v = modular.mul(v, modular.valueOf(extGCD.getX()));
196                 e -= exp;
197                 extGCD.extgcd(fact(m - n), pc);
198                 v = modular.mul(v, modular.valueOf(extGCD.getX()));
199                 e -= exp;
200                 v = modular.mul(v, power.pow(p, e));
201                 return v;
202             }
203         }
204 
205         /**
206          * Extend lucas algorithm
207          */
208         public static class ExtLucas {
209             PollardRho pr = new PollardRho();
210             Map<Integer, ExtLucasFactorial> factorialMap = new HashMap();
211 
212             public ExtLucas(int p) {
213                 Map<Integer, Integer> factors = pr.findAllFactors(p);
214                 for (Map.Entry<Integer, Integer> entry : factors.entrySet()) {
215                     factorialMap.put(entry.getValue(), new ExtLucasFactorial(entry.getKey(), entry.getValue(), new int[entry.getValue() + 1]));
216                 }
217             }
218 
219             /**
220              * Get C(m, n) % p
221              */
222             public int composite(long m, long n) {
223                 ExtCRT extCRT = new ExtCRT();
224                 for (Map.Entry<Integer, ExtLucasFactorial> entry : factorialMap.entrySet()) {
225                     extCRT.add(entry.getValue().composite(m, n), entry.getKey());
226                 }
227                 return (int) extCRT.r;
228             }
229         }
230 
231         /**
232          * Extend lucas algorithm long version
233          */
234         public static class LongExtLucas {
235             LongPollardRho pr = new LongPollardRho();
236             Map<Integer, ExtLucasFactorial> factorialMap = new HashMap();
237 
238             public LongExtLucas(long p) {
239                 Map<Long, Long> factors = pr.findAllFactors(p);
240                 for (Map.Entry<Long, Long> entry : factors.entrySet()) {
241                     factorialMap.put(entry.getValue().intValue(), new ExtLucasFactorial(entry.getKey().intValue(), entry.getValue().intValue(), new int[entry.getValue().intValue() + 1]));
242                 }
243             }
244 
245             /**
246              * Get C(m, n) % p
247              */
248             public int composite(long m, long n) {
249                 ExtCRT extCRT = new ExtCRT();
250                 for (Map.Entry<Integer, ExtLucasFactorial> entry : factorialMap.entrySet()) {
251                     extCRT.add(entry.getValue().composite(m, n), entry.getKey());
252                 }
253                 return (int) extCRT.r;
254             }
255         }
256 
257         /**
258          * Extend gcd
259          */
260         public static class ExtGCD {
261             private long x;
262             private long y;
263             private long g;
264 
265             public long getX() {
266                 return x;
267             }
268 
269             public long getY() {
270                 return y;
271             }
272 
273             /**
274              * Get g = Gcd(a, b) and find a way to set x and y to match ax+by=g
275              */
276             public long extgcd(long a, long b) {
277                 if (a >= b) {
278                     g = extgcd0(a, b);
279                 } else {
280                     g = extgcd0(b, a);
281                     long tmp = x;
282                     x = y;
283                     y = tmp;
284                 }
285                 return g;
286             }
287 
288 
289             private long extgcd0(long a, long b) {
290                 if (b == 0) {
291                     x = 1;
292                     y = 0;
293                     return a;
294                 }
295                 long g = extgcd0(b, a % b);
296                 long n = x;
297                 long m = y;
298                 x = m;
299                 y = n - m * (a / b);
300                 return g;
301             }
302         }
303 
304         public static class Gcd {
305             public long gcd(long a, long b) {
306                 return a >= b ? gcd0(a, b) : gcd0(b, a);
307             }
308 
309             private long gcd0(long a, long b) {
310                 return b == 0 ? a : gcd0(b, a % b);
311             }
312 
313             public int gcd(int a, int b) {
314                 return a >= b ? gcd0(a, b) : gcd0(b, a);
315             }
316 
317             private int gcd0(int a, int b) {
318                 return b == 0 ? a : gcd0(b, a % b);
319             }
320         }
321 
322         /**
323          * Euler sieve for filter primes
324          */
325         public static class EulerSieve {
326             int[] primes;
327             boolean[] isComp;
328             int primeLength;
329 
330             public EulerSieve(int limit) {
331                 isComp = new boolean[limit + 1];
332                 primes = new int[limit + 1];
333                 primeLength = 0;
334                 for (int i = 2; i <= limit; i++) {
335                     if (!isComp[i]) {
336                         primes[primeLength++] = i;
337                     }
338                     for (int j = 0, until = limit / i; j < primeLength && primes[j] <= until; j++) {
339                         int pi = primes[j] * i;
340                         isComp[pi] = true;
341                         if (i % primes[j] == 0) {
342                             break;
343                         }
344                     }
345                 }
346             }
347         }
348 
349         /**
350          * Euler sieve for multiplicative function
351          */
352         public static class MultiplicativeFunctionSieve {
353             int[] primes;
354             boolean[] isComp;
355             int primeLength;
356             int[] mobius;
357             int[] euler;
358             int[] factors;
359             int[] smallestPrimeFactor;
360             int[] numberOfSmallestPrimeFactor;
361 
362             public MultiplicativeFunctionSieve(int limit, boolean enableMobius, boolean enableEuler, boolean enableFactors) {
363                 isComp = new boolean[limit + 1];
364                 primes = new int[limit + 1];
365                 numberOfSmallestPrimeFactor = new int[limit + 1];
366                 smallestPrimeFactor = new int[limit + 1];
367                 primeLength = 0;
368                 for (int i = 2; i <= limit; i++) {
369                     if (!isComp[i]) {
370                         primes[primeLength++] = i;
371                         numberOfSmallestPrimeFactor[i] = smallestPrimeFactor[i] = i;
372                     }
373                     for (int j = 0, until = limit / i; j < primeLength && primes[j] <= until; j++) {
374                         int pi = primes[j] * i;
375                         smallestPrimeFactor[pi] = primes[j];
376                         numberOfSmallestPrimeFactor[pi] = smallestPrimeFactor[i] == primes[j]
377                                 ? (numberOfSmallestPrimeFactor[i] * numberOfSmallestPrimeFactor[primes[j]])
378                                 : numberOfSmallestPrimeFactor[primes[j]];
379                         isComp[pi] = true;
380                         if (i % primes[j] == 0) {
381                             break;
382                         }
383                     }
384                 }
385 
386                 if (enableMobius) {
387                     mobius = new int[limit + 1];
388                     mobius[1] = 1;
389                     for (int i = 2; i <= limit; i++) {
390                         if (!isComp[i]) {
391                             mobius[i] = -1;
392                         } else {
393                             if (numberOfSmallestPrimeFactor[i] != smallestPrimeFactor[i]) {
394                                 mobius[i] = 0;
395                             } else {
396                                 mobius[i] = mobius[numberOfSmallestPrimeFactor[i]] *
397                                         mobius[i / numberOfSmallestPrimeFactor[i]];
398                             }
399                         }
400                     }
401                 }
402 
403                 if (enableEuler) {
404                     euler = new int[limit + 1];
405                     euler[1] = 1;
406                     for (int i = 2; i <= limit; i++) {
407                         if (!isComp[i]) {
408                             euler[i] = i - 1;
409                         } else {
410                             if (numberOfSmallestPrimeFactor[i] == i) {
411                                 euler[i] = i - i / smallestPrimeFactor[i];
412                             } else {
413                                 euler[i] = euler[numberOfSmallestPrimeFactor[i]] *
414                                         euler[i / numberOfSmallestPrimeFactor[i]];
415                             }
416                         }
417                     }
418                 }
419 
420                 if (enableFactors) {
421                     factors = new int[limit + 1];
422                     factors[1] = 1;
423                     for (int i = 2; i <= limit; i++) {
424                         if (!isComp[i]) {
425                             factors[i] = 2;
426                         } else {
427                             if (numberOfSmallestPrimeFactor[i] == i) {
428                                 factors[i] = 1 + factors[i / smallestPrimeFactor[i]];
429                             } else {
430                                 factors[i] = factors[numberOfSmallestPrimeFactor[i]] *
431                                         factors[i / numberOfSmallestPrimeFactor[i]];
432                             }
433                         }
434                     }
435                 }
436             }
437         }
438 
439         /**
440          * Mod operations
441          */
442         public static class Modular {
443             int m;
444 
445             public Modular(int m) {
446                 this.m = m;
447             }
448 
449             public int valueOf(int x) {
450                 x %= m;
451                 if (x < 0) {
452                     x += m;
453                 }
454                 return x;
455             }
456 
457             public int valueOf(long x) {
458                 x %= m;
459                 if (x < 0) {
460                     x += m;
461                 }
462                 return (int) x;
463             }
464 
465             public int mul(int x, int y) {
466                 return valueOf((long) x * y);
467             }
468 
469             public int mul(long x, long y) {
470                 x = valueOf(x);
471                 y = valueOf(y);
472                 return valueOf(x * y);
473             }
474 
475             public int plus(int x, int y) {
476                 return valueOf(x + y);
477             }
478 
479             public int plus(long x, long y) {
480                 x = valueOf(x);
481                 y = valueOf(y);
482                 return valueOf(x + y);
483             }
484 
485             public int subtract(int x, int y) {
486                 return valueOf(x - y);
487             }
488 
489             public int subtract(long x, long y) {
490                 return valueOf(x - y);
491             }
492 
493             @Override
494             public String toString() {
495                 return "mod " + m;
496             }
497         }
498 
499         /**
500          * Bit operations
501          */
502         public static class BitOperator {
503             public int bitAt(int x, int i) {
504                 return (x >> i) & 1;
505             }
506 
507             public int bitAt(long x, int i) {
508                 return (int) ((x >> i) & 1);
509             }
510 
511             public int setBit(int x, int i, boolean v) {
512                 if (v) {
513                     x |= 1 << i;
514                 } else {
515                     x &= ~(1 << i);
516                 }
517                 return x;
518             }
519 
520             public long setBit(long x, int i, boolean v) {
521                 if (v) {
522                     x |= 1L << i;
523                 } else {
524                     x &= ~(1L << i);
525                 }
526                 return x;
527             }
528 
529             public long swapBit(long x, int i, int j) {
530                 int bi = bitAt(x, i);
531                 int bj = bitAt(x, j);
532                 x = setBit(x, i, bj == 1);
533                 x = setBit(x, j, bi == 1);
534                 return x;
535             }
536 
537             public int swapBit(int x, int i, int j) {
538                 int bi = bitAt(x, i);
539                 int bj = bitAt(x, j);
540                 x = setBit(x, i, bj == 1);
541                 x = setBit(x, j, bi == 1);
542                 return x;
543             }
544 
545             /**
546              * Determine whether x is subset of y
547              */
548             public boolean subset(long x, long y) {
549                 return intersect(x, y) == x;
550             }
551 
552             /**
553              * Merge two set
554              */
555             public long merge(long x, long y) {
556                 return x | y;
557             }
558 
559             public long intersect(long x, long y) {
560                 return x & y;
561             }
562 
563             public long differ(long x, long y) {
564                 return x - intersect(x, y);
565             }
566         }
567 
568         /**
569          * Power operations
570          */
571         public static class Power {
572             public Modular getModular() {
573                 return modular;
574             }
575 
576             final Modular modular;
577 
578             public Power(Modular modular) {
579                 this.modular = modular;
580             }
581 
582             public int pow(int x, long n) {
583                 if (n == 0) {
584                     return 1;
585                 }
586                 long r = pow(x, n >> 1);
587                 r = modular.valueOf(r * r);
588                 if ((n & 1) == 1) {
589                     r = modular.valueOf(r * x);
590                 }
591                 return (int) r;
592             }
593 
594             public int inverse(int x) {
595                 return pow(x, modular.m - 2);
596             }
597 
598             public int pow2(int x) {
599                 return x * x;
600             }
601 
602             public long pow2(long x) {
603                 return x * x;
604             }
605 
606             public double pow2(double x) {
607                 return x * x;
608             }
609         }
610 
611         /**
612          * Log operations
613          */
614         public static class Log2 {
615             public int ceilLog(int x) {
616                 return 32 - Integer.numberOfLeadingZeros(x - 1);
617             }
618 
619             public int floorLog(int x) {
620                 return 31 - Integer.numberOfLeadingZeros(x);
621             }
622 
623             public int ceilLog(long x) {
624                 return 64 - Long.numberOfLeadingZeros(x - 1);
625             }
626 
627             public int floorLog(long x) {
628                 return 63 - Long.numberOfLeadingZeros(x);
629             }
630         }
631 
632         /**
633          * Find all inverse number
634          */
635         public static class InverseNumber {
636             int[] inv;
637 
638             public InverseNumber(int[] inv, int limit, Modular modular) {
639                 this.inv = inv;
640                 inv[1] = 1;
641                 int p = modular.m;
642                 for (int i = 2; i <= limit; i++) {
643                     int k = p / i;
644                     int r = p % i;
645                     inv[i] = modular.mul(-k, inv[r]);
646                 }
647             }
648 
649             public InverseNumber(int limit, Modular modular) {
650                 this(new int[limit + 1], limit, modular);
651             }
652         }
653 
654         /**
655          * Factorial
656          */
657         public static class Factorial {
658             int[] fact;
659             int[] inv;
660 
661             public Factorial(int[] fact, int[] inv, InverseNumber in, int limit, Modular modular) {
662                 this.fact = fact;
663                 this.inv = inv;
664                 fact[0] = inv[0] = 1;
665                 for (int i = 1; i <= limit; i++) {
666                     fact[i] = modular.mul(fact[i - 1], i);
667                     inv[i] = modular.mul(inv[i - 1], in.inv[i]);
668                 }
669             }
670 
671             public Factorial(int limit, Modular modular) {
672                 this(new int[limit + 1], new int[limit + 1], new InverseNumber(limit, modular), limit, modular);
673             }
674         }
675 
676         /**
677          * Composition
678          */
679         public static class Composite {
680             final Factorial factorial;
681             final Modular modular;
682 
683             public Composite(Factorial factorial, Modular modular) {
684                 this.factorial = factorial;
685                 this.modular = modular;
686             }
687 
688             public Composite(int limit, Modular modular) {
689                 this(new Factorial(limit, modular), modular);
690             }
691 
692             public int composite(int m, int n) {
693                 if (n > m) {
694                     return 0;
695                 }
696                 return modular.mul(modular.mul(factorial.fact[m], factorial.inv[n]), factorial.inv[m - n]);
697             }
698         }
699 
700         /**
701          * Test whether a number is primes
702          */
703         public static class MillerRabin {
704             Modular modular;
705             Power power;
706 
707             /**
708              * Check whether n is a prime s times
709              */
710             public boolean mr(int n, int s) {
711                 if (n == 2) {
712                     return true;
713                 }
714                 if (n % 2 == 0) {
715                     return false;
716                 }
717                 modular = new Modular(n);
718                 power = new Power(modular);
719                 for (int i = 0; i < s; i++) {
720                     int x = RANDOM.nextInt(n - 2) + 2;
721                     if (!mr0(x, n)) {
722                         return false;
723                     }
724                 }
725                 return true;
726             }
727 
728             private boolean mr0(int x, int n) {
729                 int exp = n - 1;
730                 while (true) {
731                     int y = power.pow(x, exp);
732                     if (y != 1 && y != n - 1) {
733                         return false;
734                     }
735                     if (y != 1 || exp % 2 == 1) {
736                         break;
737                     }
738                     exp = exp / 2;
739                 }
740                 return true;
741             }
742         }
743 
744         /**
745          * Modular operation for long version
746          */
747         public static class LongModular {
748             final long m;
749 
750             public LongModular(long m) {
751                 this.m = m;
752             }
753 
754             public long mul(long a, long b) {
755                 return b == 0 ? 0 : ((mul(a, b >> 1) << 1) % m + a * (b & 1)) % m;
756             }
757 
758             public long plus(long a, long b) {
759                 return valueOf(a + b);
760             }
761 
762             public long valueOf(long a) {
763                 a %= m;
764                 if (a < 0) {
765                     a += m;
766                 }
767                 return a;
768             }
769         }
770 
771         public static class LongPower {
772             final LongModular modular;
773 
774             public LongPower(LongModular modular) {
775                 this.modular = modular;
776             }
777 
778             long pow(long x, long n) {
779                 if (n == 0) {
780                     return 1;
781                 }
782                 long r = pow(x, n >> 1);
783                 r = modular.mul(r, r);
784                 if ((n & 1) == 1) {
785                     r = modular.mul(r, x);
786                 }
787                 return r;
788             }
789 
790             long inverse(long x) {
791                 return pow(x, modular.m - 2);
792             }
793         }
794 
795         /**
796          * Test whether a number is primes
797          */
798         public static class LongMillerRabin {
799             LongModular modular;
800             LongPower power;
801 
802             /**
803              * Check whether n is a prime s times
804              */
805             public boolean mr(long n, int s) {
806                 if (n == 2) {
807                     return true;
808                 }
809                 if (n % 2 == 0) {
810                     return false;
811                 }
812                 modular = new LongModular(n);
813                 power = new LongPower(modular);
814                 for (int i = 0; i < s; i++) {
815                     long x = (long) (RANDOM.nextDouble() * (n - 2) + 2);
816                     if (!mr0(x, n)) {
817                         return false;
818                     }
819                 }
820                 return true;
821             }
822 
823             private boolean mr0(long x, long n) {
824                 long exp = n - 1;
825                 while (true) {
826                     long y = power.pow(x, exp);
827                     if (y != 1 && y != n - 1) {
828                         return false;
829                     }
830                     if (y != 1 || exp % 2 == 1) {
831                         break;
832                     }
833                     exp = exp / 2;
834                 }
835                 return true;
836             }
837         }
838 
839         public static class LongPollardRho {
840             LongMillerRabin mr = new LongMillerRabin();
841             Gcd gcd = new Gcd();
842             LongModular modular;
843 
844             /**
845              * Find a factor of n, if n is returned, it means n is 1 or a prime
846              */
847             public long findFactor(long n) {
848                 if (mr.mr(n, 3)) {
849                     return n;
850                 }
851                 modular = new LongModular(n);
852                 while (true) {
853                     long f = findFactor0((long) (RANDOM.nextDouble() * n), (long) (RANDOM.nextDouble() * n), n);
854                     if (f != -1) {
855                         return f;
856                     }
857                 }
858             }
859 
860             private long findFactor0(long x, long c, long n) {
861                 long xi = x;
862                 long xj = x;
863                 int j = 2;
864                 int i = 1;
865                 while (i < n) {
866                     i++;
867                     xi = modular.plus(modular.mul(xi, xi), c);
868                     long g = gcd.gcd(n, Math.abs(xi - xj));
869                     if (g != 1 && g != n) {
870                         return g;
871                     }
872                     if (i == j) {
873                         j = j << 1;
874                         xj = xi;
875                     }
876                 }
877                 return -1;
878             }
879 
880             /**
881              * Find the representation of n=p1^c1 * p2^c2 * ... * pm ^ cm.
882              * <br>
883              * The returned map contained such entries: pi -> pi^ci
884              */
885             public Map<Long, Long> findAllFactors(long n) {
886                 Map<Long, Long> map = new HashMap();
887                 findAllFactors(map, n);
888                 return map;
889             }
890 
891             private void findAllFactors(Map<Long, Long> map, long n) {
892                 if (n == 1) {
893                     return;
894                 }
895                 long f = findFactor(n);
896                 if (f == n) {
897                     Long value = map.get(f);
898                     if (value == null) {
899                         value = 1L;
900                     }
901                     map.put(f, value * f);
902                     return;
903                 }
904                 findAllFactors(map, f);
905                 findAllFactors(map, n / f);
906             }
907 
908         }
909 
910         /**
911          * Extend chinese remainder theory
912          */
913         public static class ExtCRT {
914             /**
915              * remainder
916              */
917             long r;
918             /**
919              * modulus
920              */
921             long m;
922             ExtGCD gcd = new ExtGCD();
923 
924             public ExtCRT() {
925                 r = 0;
926                 m = 1;
927             }
928 
929             /**
930              * Add a new condition: x % m = r
931              */
932             public boolean add(long r, long m) {
933                 long m1 = this.m;
934                 long x1 = this.r;
935                 long m2 = m;
936                 long x2 = ((r % m) + m) % m;
937                 long g = gcd.extgcd(m1, m2);
938                 long a = gcd.getX();
939                 if ((x2 - x1) % g != 0) {
940                     return false;
941                 }
942                 this.m = m1 / g * m2;
943                 this.r = BigInteger.valueOf(a).multiply(BigInteger.valueOf((x2 - x1) / g))
944                         .multiply(BigInteger.valueOf(m1)).add(BigInteger.valueOf(x1))
945                         .mod(BigInteger.valueOf(this.m)).longValue();
946                 return true;
947             }
948         }
949 
950         /**
951          * Lucas algorithm
952          */
953         public static class Lucas {
954             private final Composite composite;
955             private int modulus;
956 
957             public Lucas(Composite composite) {
958                 this.composite = composite;
959                 this.modulus = composite.modular.m;
960             }
961 
962             public int composite(long m, long n) {
963                 if (n == 0) {
964                     return 1;
965                 }
966                 return composite.modular.mul(composite.composite((int) (m % modulus), (int) (n % modulus)),
967                         composite(m / modulus, n / modulus));
968             }
969         }
970 
971         /**
972          * Find all factors of a number
973          */
974         public static class PollardRho {
975             MillerRabin mr = new MillerRabin();
976             Gcd gcd = new Gcd();
977             Random random = new Random();
978 
979             public int findFactor(int n) {
980                 if (mr.mr(n, 10)) {
981                     return n;
982                 }
983                 while (true) {
984                     int f = findFactor0(random.nextInt(n), random.nextInt(n), n);
985                     if (f != -1) {
986                         return f;
987                     }
988                 }
989             }
990 
991             /**
992              * Find all prime factor of n
993              * <br>
994              * p1 => p1^c1
995              * <br>
996              * ...
997              * <br>
998              * pk => pk^ck
999              */
1000             public Map<Integer, Integer> findAllFactors(int n) {
1001                 Map<Integer, Integer> map = new HashMap();
1002                 findAllFactors(map, n);
1003                 return map;
1004             }
1005 
1006             private void findAllFactors(Map<Integer, Integer> map, int n) {
1007                 if (n == 1) {
1008                     return;
1009                 }
1010                 int f = findFactor(n);
1011                 if (f == n) {
1012                     Integer value = map.get(f);
1013                     if (value == null) {
1014                         value = 1;
1015                     }
1016                     map.put(f, value * f);
1017                     return;
1018                 }
1019                 findAllFactors(map, f);
1020                 findAllFactors(map, n / f);
1021             }
1022 
1023             private int findFactor0(int x, int c, int n) {
1024                 int xi = x;
1025                 int xj = x;
1026                 int j = 2;
1027                 int i = 1;
1028                 while (i < n) {
1029                     i++;
1030                     xi = (int) ((long) xi * xi + c) % n;
1031                     int g = gcd.gcd(n, Math.abs(xi - xj));
1032                     if (g != 1 && g != n) {
1033                         return g;
1034                     }
1035                     if (i == j) {
1036                         j = j << 1;
1037                         xj = xi;
1038                     }
1039                 }
1040                 return -1;
1041             }
1042         }
1043 
1044         public static class ModExpression {
1045             ExtGCD extGCD = new ExtGCD();
1046             Modular modular = new Modular(1);
1047 
1048             /**
1049              * Find ka=b(mod c) where k is the minimum possible non negative integer.
1050              * <br>
1051              * If it's impossible, -1 will be returned.
1052              */
1053             public long solve(long a, long b, int c) {
1054                 modular.m = c;
1055                 a = modular.valueOf(a);
1056                 b = modular.valueOf(b);
1057                 int g = (int) extGCD.extgcd((int) a, c);
1058                 if (b % g != 0) {
1059                     return -1;
1060                 }
1061                 modular.m = c / g;
1062                 return modular.valueOf(b / g * extGCD.getX());
1063             }
1064         }
1065 
1066         /**
1067          * \sum_{i=1}^{limit}f(\lfloor n/i \rfloor)
1068          */
1069         public static class FloorDivisionOptimizer {
1070             int l;
1071             int r;
1072             int n;
1073             int limit;
1074 
1075 
1076             public FloorDivisionOptimizer(int n, int l, int limit) {
1077                 this.n = n;
1078                 this.l = 0;
1079                 this.limit = limit;
1080                 this.r = l - 1;
1081             }
1082 
1083             public boolean hasNext() {
1084                 return r < limit;
1085             }
1086 
1087             public int next() {
1088                 l = r + 1;
1089                 r = n / (n / l);
1090                 return n / l;
1091             }
1092         }
1093 
1094 
1095         public static class QuadraticResidue {
1096             final Modular modular;
1097             final BitOperator bitOperator = new BitOperator();
1098             Power power;
1099             final PollardRho rho = new PollardRho();
1100 
1101 
1102             public QuadraticResidue(Modular modular) {
1103                 this.modular = modular;
1104                 power = new Power(modular);
1105             }
1106 
1107             /**
1108              * return \sqrt{n} or -1 if it doesn't exist
1109              */
1110             public int square(int n) {
1111                 n = modular.valueOf(n);
1112                 if (n == 0) {
1113                     return 0;
1114                 }
1115                 int p = modular.m;
1116                 if (power.pow(n, (p - 1) / 2) != 1) {
1117                     return -1;
1118                 }
1119                 while (true) {
1120                     int a = RANDOM.nextInt(p);
1121                     int w = modular.plus(modular.mul(a, a), -n);
1122                     if (power.pow(w, (p - 1) / 2) == 1) {
1123                         continue;
1124                     }
1125 
1126 
1127                     int pow = (p + 1) / 2;
1128                     int i = 31 - Integer.numberOfLeadingZeros(pow);
1129                     int real = 1;
1130                     int img = 0;
1131                     for (; i >= 0; i--) {
1132                         int nReal = modular.plus(modular.mul(real, real),
1133                                 modular.mul(modular.mul(img, img), w));
1134                         int nImg = modular.mul(modular.mul(real, img), 2);
1135                         real = nReal;
1136                         img = nImg;
1137                         if (bitOperator.bitAt(pow, i) == 1) {
1138                             nReal = modular.plus(modular.mul(real, a), modular.mul(img, w));
1139                             nImg = modular.plus(modular.mul(img, a), real);
1140                             real = nReal;
1141                             img = nImg;
1142                         }
1143                     }
1144 
1145                     return real;
1146                 }
1147             }
1148 
1149             public int minPrimitiveRoot() {
1150                 if (modular.m == 2) {
1151                     return 1;
1152                 }
1153                 Map<Integer, Integer> factorMap = rho.findAllFactors(modular.m - 1);
1154                 int[] factors = factorMap.keySet().stream().mapToInt(Integer::intValue).toArray();
1155                 for (int i = 2; ; i++) {
1156                     boolean valid = true;
1157                     for (int factor : factors) {
1158                         if (power.pow(i, (modular.m - 1) / factor) == 1) {
1159                             valid = false;
1160                             break;
1161                         }
1162                     }
1163                     if (valid) {
1164                         return i;
1165                     }
1166                 }
1167             }
1168         }
1169     }
1170 
1171     public static class FastIO {
1172         public final StringBuilder cache = new StringBuilder(20 << 20);
1173         private final InputStream is;
1174         private final OutputStream os;
1175         private final Charset charset;
1176         private StringBuilder defaultStringBuf = new StringBuilder(1 << 8);
1177         private byte[] buf = new byte[1 << 20];
1178         private int bufLen;
1179         private int bufOffset;
1180         private int next;
1181 
1182         public FastIO(InputStream is, OutputStream os, Charset charset) {
1183             this.is = is;
1184             this.os = os;
1185             this.charset = charset;
1186         }
1187 
1188         public FastIO(InputStream is, OutputStream os) {
1189             this(is, os, Charset.forName("ascii"));
1190         }
1191 
1192         private int read() {
1193             while (bufLen == bufOffset) {
1194                 bufOffset = 0;
1195                 try {
1196                     bufLen = is.read(buf);
1197                 } catch (IOException e) {
1198                     throw new RuntimeException(e);
1199                 }
1200                 if (bufLen == -1) {
1201                     return -1;
1202                 }
1203             }
1204             return buf[bufOffset++];
1205         }
1206 
1207         public void skipBlank() {
1208             while (next >= 0 && next <= 32) {
1209                 next = read();
1210             }
1211         }
1212 
1213         public int readInt() {
1214             int sign = 1;
1215 
1216             skipBlank();
1217             if (next == '+' || next == '-') {
1218                 sign = next == '+' ? 1 : -1;
1219                 next = read();
1220             }
1221 
1222             int val = 0;
1223             if (sign == 1) {
1224                 while (next >= '0' && next <= '9') {
1225                     val = val * 10 + next - '0';
1226                     next = read();
1227                 }
1228             } else {
1229                 while (next >= '0' && next <= '9') {
1230                     val = val * 10 - next + '0';
1231                     next = read();
1232                 }
1233             }
1234 
1235             return val;
1236         }
1237 
1238         public long readLong() {
1239             int sign = 1;
1240 
1241             skipBlank();
1242             if (next == '+' || next == '-') {
1243                 sign = next == '+' ? 1 : -1;
1244                 next = read();
1245             }
1246 
1247             long val = 0;
1248             if (sign == 1) {
1249                 while (next >= '0' && next <= '9') {
1250                     val = val * 10 + next - '0';
1251                     next = read();
1252                 }
1253             } else {
1254                 while (next >= '0' && next <= '9') {
1255                     val = val * 10 - next + '0';
1256                     next = read();
1257                 }
1258             }
1259 
1260             return val;
1261         }
1262 
1263         public double readDouble() {
1264             boolean sign = true;
1265             skipBlank();
1266             if (next == '+' || next == '-') {
1267                 sign = next == '+';
1268                 next = read();
1269             }
1270 
1271             long val = 0;
1272             while (next >= '0' && next <= '9') {
1273                 val = val * 10 + next - '0';
1274                 next = read();
1275             }
1276             if (next != '.') {
1277                 return sign ? val : -val;
1278             }
1279             next = read();
1280             long radix = 1;
1281             long point = 0;
1282             while (next >= '0' && next <= '9') {
1283                 point = point * 10 + next - '0';
1284                 radix = radix * 10;
1285                 next = read();
1286             }
1287             double result = val + (double) point / radix;
1288             return sign ? result : -result;
1289         }
1290 
1291         public String readString(StringBuilder builder) {
1292             skipBlank();
1293 
1294             while (next > 32) {
1295                 builder.append((char) next);
1296                 next = read();
1297             }
1298 
1299             return builder.toString();
1300         }
1301 
1302         public String readString() {
1303             defaultStringBuf.setLength(0);
1304             return readString(defaultStringBuf);
1305         }
1306 
1307         public int readLine(char[] data, int offset) {
1308             int originalOffset = offset;
1309             while (next != -1 && next != '\n') {
1310                 data[offset++] = (char) next;
1311                 next = read();
1312             }
1313             return offset - originalOffset;
1314         }
1315 
1316         public int readString(char[] data, int offset) {
1317             skipBlank();
1318 
1319             int originalOffset = offset;
1320             while (next > 32) {
1321                 data[offset++] = (char) next;
1322                 next = read();
1323             }
1324 
1325             return offset - originalOffset;
1326         }
1327 
1328         public int readString(byte[] data, int offset) {
1329             skipBlank();
1330 
1331             int originalOffset = offset;
1332             while (next > 32) {
1333                 data[offset++] = (byte) next;
1334                 next = read();
1335             }
1336 
1337             return offset - originalOffset;
1338         }
1339 
1340         public char readChar() {
1341             skipBlank();
1342             char c = (char) next;
1343             next = read();
1344             return c;
1345         }
1346 
1347         public void flush() {
1348             try {
1349                 os.write(cache.toString().getBytes(charset));
1350                 os.flush();
1351                 cache.setLength(0);
1352             } catch (IOException e) {
1353                 throw new RuntimeException(e);
1354             }
1355         }
1356 
1357         public boolean hasMore() {
1358             skipBlank();
1359             return next != -1;
1360         }
1361     }
1362 
1363     public static class Debug {
1364         private boolean allowDebug;
1365 
1366         public Debug(boolean allowDebug) {
1367             this.allowDebug = allowDebug;
1368         }
1369 
1370         public void assertTrue(boolean flag) {
1371             if (!allowDebug) {
1372                 return;
1373             }
1374             if (!flag) {
1375                 fail();
1376             }
1377         }
1378 
1379         public void fail() {
1380             throw new RuntimeException();
1381         }
1382 
1383         public void assertFalse(boolean flag) {
1384             if (!allowDebug) {
1385                 return;
1386             }
1387             if (flag) {
1388                 fail();
1389             }
1390         }
1391 
1392         private void outputName(String name) {
1393             System.out.print(name + " = ");
1394         }
1395 
1396         public void debug(String name, int x) {
1397             if (!allowDebug) {
1398                 return;
1399             }
1400 
1401             outputName(name);
1402             System.out.println("" + x);
1403         }
1404 
1405         public void debug(String name, long x) {
1406             if (!allowDebug) {
1407                 return;
1408             }
1409             outputName(name);
1410             System.out.println("" + x);
1411         }
1412 
1413         public void debug(String name, double x) {
1414             if (!allowDebug) {
1415                 return;
1416             }
1417             outputName(name);
1418             System.out.println("" + x);
1419         }
1420 
1421         public void debug(String name, int[] x) {
1422             if (!allowDebug) {
1423                 return;
1424             }
1425             outputName(name);
1426             System.out.println(Arrays.toString(x));
1427         }
1428 
1429         public void debug(String name, long[] x) {
1430             if (!allowDebug) {
1431                 return;
1432             }
1433             outputName(name);
1434             System.out.println(Arrays.toString(x));
1435         }
1436 
1437         public void debug(String name, double[] x) {
1438             if (!allowDebug) {
1439                 return;
1440             }
1441             outputName(name);
1442             System.out.println(Arrays.toString(x));
1443         }
1444 
1445         public void debug(String name, Object x) {
1446             if (!allowDebug) {
1447                 return;
1448             }
1449             outputName(name);
1450             System.out.println("" + x);
1451         }
1452 
1453         public void debug(String name, Object... x) {
1454             if (!allowDebug) {
1455                 return;
1456             }
1457             outputName(name);
1458             System.out.println(Arrays.deepToString(x));
1459         }
1460     }
1461 }