some text, as header of the file, sleep 1s 
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> 
VM Started: No frames on the current call stack

main[1] > 
Step completed: "thread=main", Main.main(), line=17 bci=0
17            boolean local = false;

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=18 bci=2
18            boolean async = true;

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
main[1] > 
Step completed: "thread=main", Main.main(), line=20 bci=4
20            Charset charset = Charset.forName("ascii");

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
async = true
main[1] > 
Step completed: "thread=main", Main.main(), line=22 bci=10
22            FastIO io = local ? new FastIO(new FileInputStream("D:\\DATABASE\\TESTCASE\\Code.in"), System.out, charset) : new FastIO(System.in, System.out, charset);

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
async = true
charset = instance of sun.nio.cs.US_ASCII(id=444)
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,182 bci=0
1,182            public FastIO(InputStream is, OutputStream os, Charset charset) {

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,172 bci=4
1,172            public final StringBuilder cache = new StringBuilder(20 << 20);

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,176 bci=17
1,176            private StringBuilder defaultStringBuf = new StringBuilder(1 << 8);

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,177 bci=31
1,177            private byte[] buf = new byte[1 << 20];

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,183 bci=39
1,183                this.is = is;

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,184 bci=44
1,184                this.os = os;

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,185 bci=49
1,185                this.charset = charset;

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main$FastIO.<init>(), line=1,186 bci=54
1,186            }

main[1] Method arguments:
is = instance of java.io.BufferedInputStream(id=446)
os = instance of java.io.PrintStream(id=447)
charset = instance of sun.nio.cs.US_ASCII(id=444)
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=22 bci=51
22            FastIO io = local ? new FastIO(new FileInputStream("D:\\DATABASE\\TESTCASE\\Code.in"), System.out, charset) : new FastIO(System.in, System.out, charset);

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
async = true
charset = instance of sun.nio.cs.US_ASCII(id=444)
main[1] > 
Step completed: "thread=main", Main.main(), line=23 bci=53
23            Task task = new Task(io, new Debug(local));

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
async = true
charset = instance of sun.nio.cs.US_ASCII(id=444)
io = instance of Main$FastIO(id=448)
main[1] > 
Step completed: "thread=main", Main$Debug.<init>(), line=1,366 bci=0
1,366            public Debug(boolean allowDebug) {

main[1] Method arguments:
allowDebug = false
Local variables:
main[1] > 
Step completed: "thread=main", Main$Debug.<init>(), line=1,367 bci=4
1,367                this.allowDebug = allowDebug;

main[1] Method arguments:
allowDebug = false
Local variables:
main[1] > 
Step completed: "thread=main", Main$Debug.<init>(), line=1,368 bci=9
1,368            }

main[1] Method arguments:
allowDebug = false
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=23 bci=67
23            Task task = new Task(io, new Debug(local));

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
local = false
async = true
charset = instance of sun.nio.cs.US_ASCII(id=444)
io = instance of Main$FastIO(id=448)
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=48 bci=0
48            public Task(FastIO io, Debug debug) {

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=44 bci=4
44            int inf = (int) 1e8;

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=45 bci=10
45            long lInf = (long) 1e18;

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=46 bci=17
46            double dInf = 1e50;

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=58 bci=24
58            NumberTheory.Modular mod = new NumberTheory.Modular((int) 1e9 + 7);

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.<init>(), line=445 bci=0
445                public Modular(int m) {

main[1] Method arguments:
m = 1000000007
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.<init>(), line=446 bci=4
446                    this.m = m;

main[1] Method arguments:
m = 1000000007
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.<init>(), line=447 bci=9
447                }

main[1] Method arguments:
m = 1000000007
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=58 bci=34
58            NumberTheory.Modular mod = new NumberTheory.Modular((int) 1e9 + 7);

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$Task.<init>(), line=59 bci=37
59            NumberTheory.Composite comp = new NumberTheory.Composite(1000000, mod);

main[1] Method arguments:
io = instance of Main$FastIO(id=448)
debug = instance of Main$Debug(id=451)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Composite.<init>(), line=689 bci=0
689                    this(new Factorial(limit, modular), modular);

main[1] Method arguments:
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Factorial.<init>(), line=672 bci=0
672                    this(new int[limit + 1], new int[limit + 1], new InverseNumber(limit, modular), limit, modular);

main[1] Method arguments:
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=650 bci=0
650                    this(new int[limit + 1], limit, modular);

main[1] Method arguments:
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=638 bci=0
638                public InverseNumber(int[] inv, int limit, Modular modular) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=639 bci=4
639                    this.inv = inv;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=640 bci=9
640                    inv[1] = 1;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=641 bci=13
641                    int p = modular.m;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=19
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 2
k = 500000003
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 2
k = 500000003
r = 1
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -500000003
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -500000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -500000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -500000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -500000003
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 2
k = 500000003
r = 1
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 3
k = 333333335
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 3
k = 333333335
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -333333335
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -166666668833333340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -666666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -666666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -333333335
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 3
k = 333333335
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 4
k = 250000001
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 4
k = 250000001
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -250000001
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -83333334333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -750000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -750000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 250000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -250000001
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 4
k = 250000001
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 5
k = 200000001
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 5
k = 200000001
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -200000001
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -100000001300000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -600000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -600000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -200000001
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 5
k = 200000001
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 6
k = 166666667
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 6
k = 166666667
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -166666667
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -66666667300000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -833333339
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -833333339
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -166666667
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 6
k = 166666667
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 7
k = 142857143
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 7
k = 142857143
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -142857143
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -23809524023809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -857142863
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -857142863
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -142857143
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 7
k = 142857143
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 8
k = 125000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 8
k = 125000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -125000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -17857143000000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -875000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -875000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -125000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 8
k = 125000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 9
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 9
k = 111111111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 9
k = 111111111
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -111111111
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -13888888986111111
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -888888895
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -888888895
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 111111112
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -111111111
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 9
k = 111111111
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 9
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 10
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 10
k = 100000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 10
k = 100000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -100000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -14285714400000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -300000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -300000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 700000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -100000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 10
k = 100000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 10
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 11
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 11
k = 90909091
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 11
k = 90909091
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -90909091
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -15151515287878788
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -181818183
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -181818183
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 818181824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -90909091
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 11
k = 90909091
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 11
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 12
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 12
k = 83333333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 12
k = 83333333
r = 11
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -83333333
y = 818181824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -68181818393939392
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -916666673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -916666673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 83333334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -83333333
y = 818181824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 12
k = 83333333
r = 11
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 12
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 13
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 13
k = 76923077
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 13
k = 76923077
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -76923077
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -12820512935897436
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -846153852
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -846153852
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 153846155
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -76923077
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 13
k = 76923077
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 13
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 14
k = 71428571
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 14
k = 71428571
r = 13
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -71428571
y = 153846155
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -10989011005494505
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -928571435
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -928571435
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 71428572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -71428571
y = 153846155
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 14
k = 71428571
r = 13
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 15
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 15
k = 66666667
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 15
k = 66666667
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -66666667
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -33333333766666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -533333337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -533333337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 466666670
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -66666667
y = 500000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 15
k = 66666667
r = 2
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 15
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 16
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 16
k = 62500000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 16
k = 62500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -62500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8928571500000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -437500003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -437500003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 562500004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -62500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 16
k = 62500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 16
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 17
k = 58823529
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 17
k = 58823529
r = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -58823529
y = 71428572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4201680676470588
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -647058828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -647058828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -58823529
y = 71428572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 17
k = 58823529
r = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 18
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 18
k = 55555555
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 18
k = 55555555
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -55555555
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -19607843081699345
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -944444451
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -944444451
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 55555556
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -55555555
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 18
k = 55555555
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 18
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 19
k = 52631579
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 19
k = 52631579
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -52631579
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8771929903508772
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -842105269
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -842105269
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -52631579
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 19
k = 52631579
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 20
k = 50000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 20
k = 50000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -50000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7142857200000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -150000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -150000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -50000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 20
k = 50000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 21
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 21
k = 47619047
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 21
k = 47619047
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -47619047
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -40476190235714282
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -952380959
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -952380959
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 47619048
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -47619047
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 21
k = 47619047
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 21
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 22
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 22
k = 45454545
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 22
k = 45454545
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -45454545
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -16042780703208555
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -590909095
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -590909095
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 409090912
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -45454545
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 22
k = 45454545
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 22
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 23
k = 43478261
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 23
k = 43478261
r = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -43478261
y = 250000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -10869565336956522
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -260869567
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -260869567
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -43478261
y = 250000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 23
k = 43478261
r = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 24
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 24
k = 41666666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 24
k = 41666666
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -41666666
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -30797101173913040
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -958333340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -958333340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 41666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -41666666
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 24
k = 41666666
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 24
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 25
k = 40000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 25
k = 40000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -40000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5714285760000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -720000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -720000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -40000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 25
k = 40000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 26
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 26
k = 38461538
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 26
k = 38461538
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -38461538
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6072874465587044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -423076926
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -423076926
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 576923081
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -38461538
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 26
k = 38461538
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 26
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 27
k = 37037037
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 27
k = 37037037
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -37037037
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4629629662037037
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -629629634
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -629629634
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -37037037
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 27
k = 37037037
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 28
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 28
k = 35714285
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 28
k = 35714285
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -35714285
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -13227513056878305
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -964285721
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -964285721
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 35714286
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -35714285
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 28
k = 35714285
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 28
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 29
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 29
k = 34482758
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 29
k = 34482758
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -34482758
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -9655172308965516
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -241379312
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -241379312
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 758620695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -34482758
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 29
k = 34482758
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 29
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 30
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 30
k = 33333333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 30
k = 33333333
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -33333333
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -11764705849019607
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -766666672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -766666672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 233333335
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -33333333
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 30
k = 33333333
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 30
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 31
k = 32258064
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 31
k = 32258064
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -32258064
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -23842917037868160
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -870967748
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -870967748
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -32258064
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 31
k = 32258064
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 32
k = 31250000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 32
k = 31250000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -31250000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4464285750000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -718750005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -718750005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -31250000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 32
k = 31250000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 33
k = 30303030
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 33
k = 30303030
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -30303030
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -10695187135472370
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -60606061
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -60606061
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -30303030
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 33
k = 30303030
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 34
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 34
k = 29411764
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 34
k = 29411764
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -29411764
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3795066350094876
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -323529414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -323529414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 676470593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -29411764
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 34
k = 29411764
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 34
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 35
k = 28571428
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 35
k = 28571428
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -28571428
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -10582010445502644
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -371428574
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -371428574
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -28571428
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 35
k = 28571428
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 36
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 36
k = 27777777
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 36
k = 27777777
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -27777777
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -17460317094444441
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -972222229
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -972222229
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 27777778
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -27777777
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 36
k = 27777777
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 36
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 37
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 37
k = 27027027
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 37
k = 27027027
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -27027027
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3378378402027027
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -378378381
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -378378381
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 621621626
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -27027027
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 37
k = 27027027
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 37
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 38
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 38
k = 26315789
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 38
k = 26315789
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -26315789
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7368420972631578
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -921052638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -921052638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 78947369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -26315789
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 38
k = 26315789
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 38
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 39
k = 25641025
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 39
k = 25641025
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -25641025
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7211538332532050
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -282051284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -282051284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -25641025
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 39
k = 25641025
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 40
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 40
k = 25000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 40
k = 25000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -25000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3571428600000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -575000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -575000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 425000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -25000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 40
k = 25000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 40
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 41
k = 24390244
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 41
k = 24390244
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -24390244
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8130081398373984
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -341463417
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -341463417
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -24390244
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 41
k = 24390244
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 42
k = 23809523
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 42
k = 23809523
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -23809523
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -15679442085946570
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -976190483
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -976190483
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 23809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -23809523
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 42
k = 23809523
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 43
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 43
k = 23255814
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 43
k = 23255814
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -23255814
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -9302325669767442
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -604651167
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -604651167
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 395348840
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -23255814
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 43
k = 23255814
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 43
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 44
k = 22727272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 44
k = 22727272
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -22727272
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -16317015909673656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -795454551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -795454551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -22727272
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 44
k = 22727272
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 45
k = 22222222
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 45
k = 22222222
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -22222222
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7843137232679738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -177777779
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -177777779
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -22222222
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 45
k = 22222222
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 46
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 46
k = 21739130
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 46
k = 21739130
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -21739130
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8051529686795490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -630434787
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -630434787
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 369565220
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -21739130
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 46
k = 21739130
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 46
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 47
k = 21276595
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 47
k = 21276595
r = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -21276595
y = 23809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -506585599290780
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -595744685
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -595744685
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 404255322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -21276595
y = 23809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 47
k = 21276595
r = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 48
k = 20833333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 48
k = 20833333
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20833333
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -15398550586956520
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -479166670
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -479166670
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 520833337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20833333
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 48
k = 20833333
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 49
k = 20408163
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 49
k = 20408163
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20408163
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -17346938672448978
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -551020412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -551020412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20408163
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 49
k = 20408163
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 50
k = 20000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 50
k = 20000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2857142880000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -860000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -860000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 140000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -20000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 50
k = 20000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 51
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 51
k = 19607843
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 51
k = 19607843
r = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -19607843
y = 71428572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1400560225490196
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -215686276
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -215686276
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 784313731
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -19607843
y = 71428572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 51
k = 19607843
r = 14
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 51
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 52
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 52
k = 19230769
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 52
k = 19230769
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -19230769
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3036437232793522
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -211538463
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -211538463
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 788461544
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -19230769
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 52
k = 19230769
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 52
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 53
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 53
k = 18867924
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 53
k = 18867924
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18867924
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -11859838026415092
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -943396233
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -943396233
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 56603774
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18867924
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 53
k = 18867924
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 53
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 54
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 54
k = 18518518
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 54
k = 18518518
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18518518
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -11640211396296294
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -314814817
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -314814817
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 685185190
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18518518
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 54
k = 18518518
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 54
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 55
k = 18181818
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 55
k = 18181818
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18181818
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6417112281283422
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -236363638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -236363638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 763636369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -18181818
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 55
k = 18181818
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 56
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 56
k = 17857142
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 56
k = 17857142
r = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17857142
y = 763636369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -13636363077597398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -982142864
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -982142864
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 17857143
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17857142
y = 763636369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 56
k = 17857142
r = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 56
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 57
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 57
k = 17543859
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 57
k = 17543859
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17543859
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3588516639154704
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -614035092
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -614035092
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 385964915
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17543859
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 57
k = 17543859
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 57
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 58
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 58
k = 17241379
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 58
k = 17241379
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17241379
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4827586154482758
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -120689656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -120689656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 879310351
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -17241379
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 58
k = 17241379
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 58
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 59
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 59
k = 16949152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 59
k = 16949152
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16949152
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -12168622034332896
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -949152549
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -949152549
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 50847458
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16949152
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 59
k = 16949152
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 59
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 60
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 60
k = 16666666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 60
k = 16666666
r = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16666666
y = 404255322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6737588430496452
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -383333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -383333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 616666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16666666
y = 404255322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 60
k = 16666666
r = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 60
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 61
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 61
k = 16393442
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 61
k = 16393442
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16393442
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -13479052405828776
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -311475412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -311475412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 688524595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16393442
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 61
k = 16393442
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 61
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 62
k = 16129032
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 62
k = 16129032
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16129032
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -11921458518934080
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -435483874
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -435483874
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -16129032
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 62
k = 16129032
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 63
k = 15873015
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 63
k = 15873015
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15873015
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8960573046850995
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -984126991
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -984126991
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15873015
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 63
k = 15873015
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 64
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 64
k = 15625000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 64
k = 15625000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15625000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2232142875000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -859375006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -859375006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 140625001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15625000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 64
k = 15625000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 64
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 65
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 65
k = 15384615
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 65
k = 15384615
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15384615
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4326922999519230
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -969230776
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -969230776
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 30769231
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15384615
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 65
k = 15384615
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 65
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 66
k = 15151515
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 66
k = 15151515
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15151515
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5347593567736185
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -530303034
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -530303034
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 469696973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -15151515
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 66
k = 15151515
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 67
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 67
k = 14925373
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 67
k = 14925373
r = 16
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14925373
y = 562500004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8395522372201492
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -313432838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -313432838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 686567169
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14925373
y = 562500004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 67
k = 14925373
r = 16
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 67
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 68
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 68
k = 14705882
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 68
k = 14705882
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14705882
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1897533175047438
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -161764707
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -161764707
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 838235300
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14705882
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 68
k = 14705882
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 68
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 69
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 69
k = 14492753
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 69
k = 14492753
r = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14492753
y = 140000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2028985434492753
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -420289858
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -420289858
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 579710149
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14492753
y = 140000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 69
k = 14492753
r = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 69
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 70
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 70
k = 14285714
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 70
k = 14285714
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14285714
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5291005222751322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -185714287
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -185714287
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 814285720
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14285714
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 70
k = 14285714
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 70
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 71
k = 14084507
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 71
k = 14084507
r = 10
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14084507
y = 700000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -9859154970422535
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -901408457
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -901408457
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -14084507
y = 700000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 71
k = 14084507
r = 10
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 72
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 72
k = 13888888
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 72
k = 13888888
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13888888
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1369326995696400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -986111118
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -986111118
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 13888889
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13888888
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 72
k = 13888888
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 72
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 73
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 73
k = 13698630
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 73
k = 13698630
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13698630
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4834810622884770
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -589041100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -589041100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 410958907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13698630
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 73
k = 13698630
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 73
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 74
k = 13513513
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 74
k = 13513513
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13513513
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -11111110766966964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -689189194
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -689189194
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13513513
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 74
k = 13513513
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 75
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 75
k = 13333333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 75
k = 13333333
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13333333
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3749999932916666
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -906666673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -906666673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 93333334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13333333
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 75
k = 13333333
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 75
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 76
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 76
k = 13157894
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 76
k = 13157894
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13157894
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -208855461988304
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -460526319
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -460526319
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 539473688
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -13157894
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 76
k = 13157894
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 76
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 77
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 77
k = 12987013
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 77
k = 12987013
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12987013
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2164502183982684
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -168831170
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -168831170
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 831168837
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12987013
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 77
k = 12987013
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 77
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 78
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 78
k = 12820512
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 78
k = 12820512
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12820512
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1263994149873600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -141025642
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -141025642
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 858974365
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12820512
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 78
k = 12820512
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 78
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 79
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 79
k = 12658227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 79
k = 12658227
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12658227
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3934313825008551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -797468360
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -797468360
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 202531647
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12658227
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 79
k = 12658227
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 79
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 80
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 80
k = 12500000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 80
k = 12500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1785714300000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -287500002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -287500002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 712500005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 80
k = 12500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 80
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 81
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 81
k = 12345679
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 81
k = 12345679
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12345679
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1543209887345679
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -876543216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -876543216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 123456791
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12345679
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 81
k = 12345679
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 81
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 82
k = 12195122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 82
k = 12195122
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12195122
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4065040699186992
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -670731712
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -670731712
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12195122
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 82
k = 12195122
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 83
k = 12048192
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 83
k = 12048192
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12048192
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1187849923977600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -915662657
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -915662657
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -12048192
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 83
k = 12048192
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 84
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 84
k = 11904761
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 84
k = 11904761
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11904761
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1004015995123350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -988095245
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -988095245
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 11904762
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11904761
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 84
k = 11904761
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 84
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 85
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 85
k = 11764705
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 85
k = 11764705
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11764705
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3873744356527975
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -329411767
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -329411767
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 670588240
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11764705
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 85
k = 11764705
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 85
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 86
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 86
k = 11627907
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 86
k = 11627907
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11627907
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4651162834883721
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -802325587
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -802325587
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 197674420
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11627907
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 86
k = 11627907
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 86
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 87
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 87
k = 11494252
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 87
k = 11494252
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11494252
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -969394753912200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -747126442
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -747126442
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 252873565
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11494252
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 87
k = 11494252
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 87
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 88
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 88
k = 11363636
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 88
k = 11363636
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11363636
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8158507954836828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -897727279
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -897727279
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 102272728
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11363636
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 88
k = 11363636
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 88
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 89
k = 11235955
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 89
k = 11235955
r = 12
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11235955
y = 83333334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -936329590823970
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -584269667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -584269667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11235955
y = 83333334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 89
k = 11235955
r = 12
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 90
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 90
k = 11111111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 90
k = 11111111
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11111111
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3921568616339869
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -588888893
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -588888893
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 411111114
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -11111111
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 90
k = 11111111
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 90
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 91
k = 10989011
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 91
k = 10989011
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10989011
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1831501847985348
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -835164841
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -835164841
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10989011
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 91
k = 10989011
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 92
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 92
k = 10869565
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 92
k = 10869565
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10869565
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4025764843397745
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -815217397
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -815217397
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 184782610
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10869565
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 92
k = 10869565
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 92
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 93
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 93
k = 10752688
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 93
k = 10752688
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10752688
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7947639012622720
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -956989254
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -956989254
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 43010753
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10752688
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 93
k = 10752688
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 93
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 94
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 94
k = 10638297
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 94
k = 10638297
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10638297
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4422662828830980
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -797872346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -797872346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 202127661
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10638297
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 94
k = 10638297
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 94
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 95
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 95
k = 10526315
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 95
k = 10526315
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10526315
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3465981792682925
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -768421058
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -768421058
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 231578949
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10526315
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 95
k = 10526315
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 95
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 96
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 96
k = 10416666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 96
k = 10416666
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10416666
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1026995246772300
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -239583335
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -239583335
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 760416672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10416666
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 96
k = 10416666
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 96
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 97
k = 10309278
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 97
k = 10309278
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10309278
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6789036779482020
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -731958768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -731958768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 268041239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10309278
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 97
k = 10309278
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 98
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 98
k = 10204081
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 98
k = 10204081
r = 69
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10204081
y = 579710149
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5915409316918069
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -275510206
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -275510206
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 724489801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10204081
y = 579710149
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 98
k = 10204081
r = 69
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 98
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 99
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 99
k = 10101010
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 99
k = 10101010
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10101010
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3565062378490790
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -353535356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -353535356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 646464651
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10101010
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 99
k = 10101010
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 99
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 100
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 100
k = 10000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 100
k = 10000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1428571440000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -430000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -430000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 570000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -10000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 100
k = 10000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 100
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 101
k = 9900990
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 101
k = 9900990
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9900990
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3494467083867210
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -59405941
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -59405941
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9900990
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 101
k = 9900990
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 102
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 102
k = 9803921
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 102
k = 9803921
r = 65
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9803921
y = 30769231
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -301659109954751
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -107843138
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -107843138
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 892156869
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9803921
y = 30769231
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 102
k = 9803921
r = 65
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 102
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 103
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 103
k = 9708737
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 103
k = 9708737
r = 96
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9708737
y = 760416672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7382685478863264
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -427184469
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -427184469
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 572815538
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9708737
y = 760416672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 103
k = 9708737
r = 96
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 103
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 104
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 104
k = 9615384
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 104
k = 9615384
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9615384
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -947995612405200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -605769235
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -605769235
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 394230772
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9615384
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 104
k = 9615384
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 104
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 105
k = 9523809
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 105
k = 9523809
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9523809
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5376343828110597
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -790476196
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -790476196
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 209523811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9523809
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 105
k = 9523809
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 106
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 106
k = 9433962
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 106
k = 9433962
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9433962
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5929919013207546
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -971698120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -971698120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 28301887
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9433962
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 106
k = 9433962
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 106
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 107
k = 9345794
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 107
k = 9345794
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9345794
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4196070805073430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -775700940
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -775700940
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9345794
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 107
k = 9345794
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 108
k = 9259259
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 108
k = 9259259
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9259259
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5820105698148147
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -657407412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -657407412
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 342592595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9259259
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 108
k = 9259259
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 109
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 109
k = 9174311
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 109
k = 9174311
r = 108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9174311
y = 342592595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3143051012827045
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -990825695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -990825695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 9174312
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9174311
y = 342592595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 109
k = 9174311
r = 108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 109
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 110
k = 9090909
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 110
k = 9090909
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9090909
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3208556140641711
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -118181819
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -118181819
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 881818188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9090909
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 110
k = 9090909
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 111
k = 9009009
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 111
k = 9009009
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9009009
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1126126134009009
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -126126127
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -126126127
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 873873880
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -9009009
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 111
k = 9009009
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 112
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 112
k = 8928571
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 112
k = 8928571
r = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8928571
y = 763636369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6818181538798699
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -491071432
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -491071432
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 508928575
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8928571
y = 763636369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 112
k = 8928571
r = 55
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 112
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 113
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 113
k = 8849557
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 113
k = 8849557
r = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8849557
y = 469696973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4156610135290961
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -106194691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -106194691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 893805316
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8849557
y = 469696973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 113
k = 8849557
r = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 113
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 114
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 114
k = 8771929
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 114
k = 8771929
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8771929
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -8250824364773314
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -307017546
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -307017546
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 692982461
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8771929
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 114
k = 8771929
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 114
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 115
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 115
k = 8695652
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 115
k = 8695652
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8695652
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3220611874718196
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -852173919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -852173919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 147826088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8695652
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 115
k = 8695652
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 115
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 116
k = 8620689
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 116
k = 8620689
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8620689
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -727046065434150
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -60344828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -60344828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8620689
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 116
k = 8620689
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 117
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 117
k = 8547008
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 117
k = 8547008
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8547008
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -842662766582400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -760683766
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -760683766
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 239316241
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8547008
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 117
k = 8547008
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 117
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 118
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 118
k = 8474576
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 118
k = 8474576
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8474576
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6084311017166448
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -974576278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -974576278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 25423729
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8474576
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 118
k = 8474576
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 118
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 119
k = 8403361
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 119
k = 8403361
r = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8403361
y = 520833337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4376750551645657
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -521008407
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -521008407
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8403361
y = 520833337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 119
k = 8403361
r = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 120
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 120
k = 8333333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 120
k = 8333333
r = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8333333
y = 404255322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3368794215248226
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -191666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -191666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 808333339
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8333333
y = 404255322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 120
k = 8333333
r = 47
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 120
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 121
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 121
k = 8264462
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 121
k = 8264462
r = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8264462
y = 209523811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1731601574104682
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -561983475
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -561983475
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 438016532
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8264462
y = 209523811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 121
k = 8264462
r = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 121
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 122
k = 8196721
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 122
k = 8196721
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8196721
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6739526202914388
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -155737706
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -155737706
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 844262301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8196721
y = 822222228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 122
k = 8196721
r = 45
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 123
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 123
k = 8130081
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 123
k = 8130081
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8130081
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1662971125461936
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -113821139
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -113821139
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 886178868
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8130081
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 123
k = 8130081
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 123
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 124
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 124
k = 8064516
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 124
k = 8064516
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8064516
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5960729259467040
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -217741937
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -217741937
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 782258070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8064516
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 124
k = 8064516
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 124
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 125
k = 8000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 125
k = 8000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1142857152000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -144000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -144000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -8000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 125
k = 8000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 126
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 126
k = 7936507
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 126
k = 7936507
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7936507
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6793650039619042
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -992063499
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -992063499
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 7936508
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7936507
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 126
k = 7936507
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 126
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 127
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 127
k = 7874015
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 127
k = 7874015
r = 102
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7874015
y = 892156869
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -7024856568859035
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -519685043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -519685043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 480314964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7874015
y = 892156869
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 127
k = 7874015
r = 102
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 127
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 128
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 128
k = 7812500
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 128
k = 7812500
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7812500
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1116071437500000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -429687503
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -429687503
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 570312504
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7812500
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 128
k = 7812500
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 128
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 129
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 129
k = 7751938
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 129
k = 7751938
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7751938
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3100775223255814
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -201550389
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -201550389
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 798449618
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7751938
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 129
k = 7751938
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 129
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 130
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 130
k = 7692307
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 130
k = 7692307
r = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7692307
y = 268041239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2061855499048373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -484615388
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -484615388
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 515384619
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7692307
y = 268041239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 130
k = 7692307
r = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 130
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 131
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 131
k = 7633587
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 131
k = 7633587
r = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7633587
y = 881818188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6731435856280356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -809160311
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -809160311
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 190839696
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7633587
y = 881818188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 131
k = 7633587
r = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 131
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 132
k = 7575757
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 132
k = 7575757
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7575757
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -638919269623950
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -265151517
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -265151517
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 734848490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7575757
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 132
k = 7575757
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 133
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 133
k = 7518797
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 133
k = 7518797
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7518797
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1253132843358396
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -834586472
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -834586472
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 165413535
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7518797
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 133
k = 7518797
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 133
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 134
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 134
k = 7462686
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 134
k = 7462686
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7462686
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -629383161122100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -156716419
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -156716419
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 843283588
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7462686
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 134
k = 7462686
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 134
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 135
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 135
k = 7407407
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 135
k = 7407407
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7407407
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4181600755197131
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -725925931
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -725925931
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 274074076
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7407407
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 135
k = 7407407
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 135
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 136
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 136
k = 7352941
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 136
k = 7352941
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7352941
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -948766587523719
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -580882357
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -580882357
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 419117650
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7352941
y = 129032259
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 136
k = 7352941
r = 31
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 136
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 137
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 137
k = 7299270
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 137
k = 7299270
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7299270
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2576212959639330
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -941605846
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -941605846
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 58394161
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7299270
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 137
k = 7299270
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 137
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 138
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 138
k = 7246376
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 138
k = 7246376
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7246376
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3470953234441600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -210144929
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -210144929
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 789855078
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7246376
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 138
k = 7246376
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 138
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 139
k = 7194244
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 139
k = 7194244
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7194244
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1185864403984504
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -395683456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -395683456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 604316551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7194244
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 139
k = 7194244
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 140
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 140
k = 7142857
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 140
k = 7142857
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7142857
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2645502611375661
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -592857147
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -592857147
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 407142860
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7142857
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 140
k = 7142857
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 140
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 141
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 141
k = 7092198
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 141
k = 7092198
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7092198
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2948441885887320
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -865248233
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -865248233
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 134751774
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7092198
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 141
k = 7092198
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 141
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 142
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 142
k = 7042253
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 142
k = 7042253
r = 81
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7042253
y = 123456791
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -869413956790123
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -950704232
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -950704232
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 49295775
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -7042253
y = 123456791
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 142
k = 7042253
r = 81
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 142
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 143
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 143
k = 6993007
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 143
k = 6993007
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6993007
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1165501175990676
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -167832169
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -167832169
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 832167838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6993007
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 143
k = 6993007
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 143
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 144
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 144
k = 6944444
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 144
k = 6944444
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6944444
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -684663497848200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -493055559
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -493055559
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 506944448
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6944444
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 144
k = 6944444
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 144
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 145
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 145
k = 6896551
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 145
k = 6896551
r = 112
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6896551
y = 508928575
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3509851872844825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -848275868
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -848275868
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 151724139
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6896551
y = 508928575
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 145
k = 6896551
r = 112
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 145
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 146
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 146
k = 6849315
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 146
k = 6849315
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6849315
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2417405311442385
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -294520550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -294520550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 705479457
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6849315
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 146
k = 6849315
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 146
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 147
k = 6802721
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 147
k = 6802721
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6802721
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5782312890816326
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -850340142
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -850340142
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 149659865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6802721
y = 850000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 147
k = 6802721
r = 20
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 148
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 148
k = 6756756
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 148
k = 6756756
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6756756
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3236429367249600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -344594597
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -344594597
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 655405410
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6756756
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 148
k = 6756756
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 148
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 149
k = 6711409
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 149
k = 6711409
r = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6711409
y = 469696973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3152328491864957
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -469798661
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -469798661
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6711409
y = 469696973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 149
k = 6711409
r = 66
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 150
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 150
k = 6666666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 150
k = 6666666
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6666666
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1495326963800622
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -953333340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -953333340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 46666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6666666
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 150
k = 6666666
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 150
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 151
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 151
k = 6622516
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 151
k = 6622516
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6622516
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1091623524197656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -516556295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -516556295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 483443712
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6622516
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 151
k = 6622516
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 151
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 152
k = 6578947
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 152
k = 6578947
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6578947
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -104427730994152
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -730263163
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -730263163
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 269736844
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6578947
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 152
k = 6578947
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 153
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 153
k = 6535947
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 153
k = 6535947
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6535947
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -6141536448219513
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -405228761
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -405228761
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 594771246
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6535947
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 153
k = 6535947
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 153
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 154
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 154
k = 6493506
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 154
k = 6493506
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6493506
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -547645088249100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -84415585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -84415585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 915584422
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6493506
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 154
k = 6493506
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 154
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 155
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 155
k = 6451612
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 155
k = 6451612
r = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6451612
y = 149659865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -965547380952380
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -374193551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -374193551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 625806456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6451612
y = 149659865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 155
k = 6451612
r = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 155
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 156
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 156
k = 6410256
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 156
k = 6410256
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6410256
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -631997074936800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -70512821
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -70512821
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 929487186
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6410256
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 156
k = 6410256
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 156
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 157
k = 6369426
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 157
k = 6369426
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6369426
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5452228694216556
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -656050960
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -656050960
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 343949047
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6369426
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 157
k = 6369426
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 158
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 158
k = 6329113
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 158
k = 6329113
r = 153
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6329113
y = 594771246
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3764374425084798
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -398734180
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -398734180
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 601265827
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6329113
y = 594771246
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 158
k = 6329113
r = 153
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 158
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 159
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 159
k = 6289308
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 159
k = 6289308
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6289308
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3953279342138364
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -314465411
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -314465411
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 685534596
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6289308
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 159
k = 6289308
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 159
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 160
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 160
k = 6250000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 160
k = 6250000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6250000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -892857150000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -143750001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -143750001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 856250006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6250000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 160
k = 6250000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 160
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 161
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 161
k = 6211180
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 161
k = 6211180
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6211180
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2300437053370140
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -37267081
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -37267081
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 962732926
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6211180
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 161
k = 6211180
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 161
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 162
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 162
k = 6172839
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 162
k = 6172839
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6172839
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2566236456235260
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -438271608
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -438271608
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 561728399
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6172839
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 162
k = 6172839
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 162
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 163
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 163
k = 6134969
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 163
k = 6134969
r = 60
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6134969
y = 616666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3783230909918199
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -883435589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -883435589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 116564418
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6134969
y = 616666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 163
k = 6134969
r = 60
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 163
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 164
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 164
k = 6097561
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 164
k = 6097561
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6097561
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2032520349593496
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -335365856
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -335365856
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 664634151
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6097561
y = 333333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 164
k = 6097561
r = 3
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 164
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 165
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 165
k = 6060606
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 165
k = 6060606
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6060606
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2139037427094474
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -412121215
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -412121215
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 587878792
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6060606
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 165
k = 6060606
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 165
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 166
k = 6024096
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 166
k = 6024096
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6024096
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -593924961988800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -957831332
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -957831332
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 42168675
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -6024096
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 166
k = 6024096
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 167
k = 5988023
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 167
k = 5988023
r = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5988023
y = 42168675
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -252506995779525
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -994011983
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -994011983
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5988023
y = 42168675
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 167
k = 5988023
r = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 168
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 168
k = 5952380
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 168
k = 5952380
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5952380
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -35642994297120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -994047626
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -994047626
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 5952381
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5952380
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 168
k = 5952380
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 168
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 169
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 169
k = 5917159
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 169
k = 5917159
r = 136
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5917159
y = 419117650
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2479985774756350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -757396455
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -757396455
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 242603552
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5917159
y = 419117650
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 169
k = 5917159
r = 136
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 169
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 170
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 170
k = 5882352
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 170
k = 5882352
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5882352
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -35223664952448
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -664705887
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -664705887
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 335294120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5882352
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 170
k = 5882352
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 170
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 171
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 171
k = 5847953
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 171
k = 5847953
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5847953
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1196172213051568
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -204678364
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -204678364
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 795321643
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5847953
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 171
k = 5847953
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 171
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 172
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 172
k = 5813953
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 172
k = 5813953
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5813953
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -958343907871198
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -901162797
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -901162797
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 98837210
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5813953
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 172
k = 5813953
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 172
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 173
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 173
k = 5780346
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 173
k = 5780346
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5780346
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3064747229545716
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -208092487
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -208092487
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 791907520
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5780346
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 173
k = 5780346
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 173
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 174
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 174
k = 5747126
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 174
k = 5747126
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5747126
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -484697376956100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -373563221
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -373563221
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 626436786
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5747126
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 174
k = 5747126
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 174
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 175
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 175
k = 5714285
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 175
k = 5714285
r = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5714285
y = 734848490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4199133703679650
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -674285719
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -674285719
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 325714288
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5714285
y = 734848490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 175
k = 5714285
r = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 175
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 176
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 176
k = 5681818
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 176
k = 5681818
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5681818
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4079253977418414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -948863643
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -948863643
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 51136364
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5681818
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 176
k = 5681818
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 176
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 177
k = 5649717
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 177
k = 5649717
r = 98
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5649717
y = 724489801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4093162345036317
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -316384183
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -316384183
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 683615824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5649717
y = 724489801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 177
k = 5649717
r = 98
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 178
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 178
k = 5617977
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 178
k = 5617977
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5617977
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5284235829124482
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -792134837
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -792134837
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 207865170
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5617977
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 178
k = 5617977
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 178
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 179
k = 5586592
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 179
k = 5586592
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5586592
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4010886592322016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -564245814
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -564245814
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 435754193
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5586592
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 179
k = 5586592
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 180
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 180
k = 5555555
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 180
k = 5555555
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5555555
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1246105803167185
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -794444450
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -794444450
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 205555557
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5555555
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 180
k = 5555555
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 180
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 181
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 181
k = 5524861
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 181
k = 5524861
r = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5524861
y = 42168675
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -232976067929175
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -66298343
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -66298343
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 933701664
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5524861
y = 42168675
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 181
k = 5524861
r = 166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 181
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 182
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 182
k = 5494505
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 182
k = 5494505
r = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5494505
y = 268041239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1472753927891695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -917582424
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -917582424
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 82417583
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5494505
y = 268041239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 182
k = 5494505
r = 97
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 182
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 183
k = 5464480
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 183
k = 5464480
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5464480
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -32721437387520
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -437158473
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -437158473
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 562841534
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5464480
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 183
k = 5464480
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 184
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 184
k = 5434782
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 184
k = 5434782
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5434782
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2603214925831200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -907608702
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -907608702
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 92391305
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5434782
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 184
k = 5434782
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 184
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 185
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 185
k = 5405405
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 185
k = 5405405
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5405405
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1779828488134475
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -475675679
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -475675679
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 524324328
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5405405
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 185
k = 5405405
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 185
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 186
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 186
k = 5376344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 186
k = 5376344
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5376344
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3973819506311360
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -478494627
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -478494627
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 521505380
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5376344
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 186
k = 5376344
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 186
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 187
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 187
k = 5347593
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 187
k = 5347593
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5347593
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -5024893457634147
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -422459896
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -422459896
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 577540111
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5347593
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 187
k = 5347593
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 187
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 188
k = 5319148
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 188
k = 5319148
r = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5319148
y = 562841534
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2993837419893032
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -398936173
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -398936173
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5319148
y = 562841534
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 188
k = 5319148
r = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 189
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 189
k = 5291005
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 189
k = 5291005
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5291005
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2986857682283665
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -661375666
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -661375666
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 338624341
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5291005
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 189
k = 5291005
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 189
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 190
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 190
k = 5263157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 190
k = 5263157
r = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5263157
y = 683615824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3597977409396368
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -384210529
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -384210529
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 615789478
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5263157
y = 683615824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 190
k = 5263157
r = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 190
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 191
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 191
k = 5235602
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 191
k = 5235602
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5235602
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1465968570471204
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -560209428
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -560209428
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 439790579
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5235602
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 191
k = 5235602
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 191
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 192
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 192
k = 5208333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 192
k = 5208333
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5208333
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -513497623386150
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -619791671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -619791671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 380208336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5208333
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 192
k = 5208333
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 192
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 193
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 193
k = 5181347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 193
k = 5181347
r = 36
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5181347
y = 27777778
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -143926306706966
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -305699484
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -305699484
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 694300523
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5181347
y = 27777778
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 193
k = 5181347
r = 36
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 193
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 194
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 194
k = 5154639
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 194
k = 5154639
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5154639
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3394518389741010
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -365979384
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -365979384
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 634020623
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5154639
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 194
k = 5154639
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 194
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 195
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 195
k = 5128205
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 195
k = 5128205
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5128205
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1442307666506410
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -656410261
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -656410261
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 343589746
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5128205
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 195
k = 5128205
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 195
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 196
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 196
k = 5102040
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 196
k = 5102040
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5102040
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -30551137968960
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -137755103
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -137755103
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 862244904
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5102040
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 196
k = 5102040
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 196
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 197
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 197
k = 5076142
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 197
k = 5076142
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5076142
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4768497063836332
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -30456853
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -30456853
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 969543154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5076142
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 197
k = 5076142
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 197
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 198
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 198
k = 5050505
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 198
k = 5050505
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5050505
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1782531189245395
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -176767678
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -176767678
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 823232329
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5050505
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 198
k = 5050505
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 198
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 199
k = 5025125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 199
k = 5025125
r = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5025125
y = 734848490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3692705518311250
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -492462315
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -492462315
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 507537692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5025125
y = 734848490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 199
k = 5025125
r = 132
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 200
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 200
k = 5000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 200
k = 5000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -714285720000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -715000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -715000005
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 285000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -5000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 200
k = 5000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 200
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 201
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 201
k = 4975124
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 201
k = 4975124
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4975124
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -419588774081400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -771144284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -771144284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 228855723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4975124
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 201
k = 4975124
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 201
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 202
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 202
k = 4950495
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 202
k = 4950495
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4950495
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1747233541933605
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -529702974
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -529702974
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 470297033
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4950495
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 202
k = 4950495
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 202
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 203
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 203
k = 4926108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 203
k = 4926108
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4926108
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -415454894533800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -891625622
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -891625622
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 108374385
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4926108
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 203
k = 4926108
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 203
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 204
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 204
k = 4901960
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 204
k = 4901960
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4901960
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -29353054127040
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -53921569
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -53921569
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 946078438
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4901960
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 204
k = 4901960
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 204
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 205
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 205
k = 4878048
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 205
k = 4878048
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4878048
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -29209868497152
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -868292689
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -868292689
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 131707318
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4878048
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 205
k = 4878048
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 205
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 206
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 206
k = 4854368
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 206
k = 4854368
r = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4854368
y = 507537692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2463774730838656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -713592238
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -713592238
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 286407769
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4854368
y = 507537692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 206
k = 4854368
r = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 206
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 207
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 207
k = 4830917
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 207
k = 4830917
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4830917
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2903689493755778
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -473429955
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -473429955
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 526570052
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4830917
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 207
k = 4830917
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 207
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 208
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 208
k = 4807692
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 208
k = 4807692
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4807692
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -473997806202600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -802884621
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -802884621
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 197115386
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4807692
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 208
k = 4807692
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 208
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 209
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 209
k = 4784689
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 209
k = 4784689
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4784689
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -797448173046252
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -167464116
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -167464116
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 832535891
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4784689
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 209
k = 4784689
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 209
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 210
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 210
k = 4761904
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 210
k = 4761904
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4761904
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -28514395437696
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -395238098
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -395238098
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 604761909
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4761904
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 210
k = 4761904
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 210
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 211
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 211
k = 4739336
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 211
k = 4739336
r = 111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4739336
y = 873873880
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4141581938943680
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -909952613
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -909952613
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 90047394
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4739336
y = 873873880
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 211
k = 4739336
r = 111
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 211
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 212
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 212
k = 4716981
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 212
k = 4716981
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4716981
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2964959506603773
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -485849060
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -485849060
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 514150947
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4716981
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 212
k = 4716981
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 212
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 213
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 213
k = 4694835
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 213
k = 4694835
r = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4694835
y = 269736844
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1266369976000740
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -967136157
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -967136157
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 32863850
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4694835
y = 269736844
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 213
k = 4694835
r = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 213
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 214
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 214
k = 4672897
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 214
k = 4672897
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4672897
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2098035402536715
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -387850470
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -387850470
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 612149537
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4672897
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 214
k = 4672897
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 214
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 215
k = 4651162
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 215
k = 4651162
r = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4651162
y = 683615824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3179607943187488
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -920930239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -920930239
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4651162
y = 683615824
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 215
k = 4651162
r = 177
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 216
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 216
k = 4629629
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 216
k = 4629629
r = 143
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4629629
y = 832167838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3852628355672102
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -328703706
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -328703706
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 671296301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4629629
y = 832167838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 216
k = 4629629
r = 143
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 216
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 217
k = 4608294
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 217
k = 4608294
r = 209
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4608294
y = 832535891
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3836570151279954
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -124423964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -124423964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 875576043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4608294
y = 832535891
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 217
k = 4608294
r = 209
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 218
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 218
k = 4587155
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 218
k = 4587155
r = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4587155
y = 875576043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -4016403023527665
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -995412851
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -995412851
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 4587156
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4587155
y = 875576043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 218
k = 4587155
r = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 218
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 219
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 219
k = 4566210
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 219
k = 4566210
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4566210
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1611603540961590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -529680369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -529680369
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 470319638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4566210
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 219
k = 4566210
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 219
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 220
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 220
k = 4545454
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 220
k = 4545454
r = 127
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4545454
y = 480314964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2183249574373656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -559090913
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -559090913
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 440909094
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4545454
y = 480314964
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 220
k = 4545454
r = 127
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 220
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 221
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 221
k = 4524886
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 221
k = 4524886
r = 201
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4524886
y = 228855723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1035546057022578
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -49773756
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -49773756
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 950226251
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4524886
y = 228855723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 221
k = 4524886
r = 201
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 221
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 222
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 222
k = 4504504
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 222
k = 4504504
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4504504
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2157619578166400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -563063067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -563063067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 436936940
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4504504
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 222
k = 4504504
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 222
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 223
k = 4484304
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 223
k = 4484304
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4484304
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -354572876921472
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -874439468
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -874439468
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 125560539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4484304
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 223
k = 4484304
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 224
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 224
k = 4464285
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 224
k = 4464285
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4464285
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -26732245722840
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -245535716
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -245535716
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 754464291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4464285
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 224
k = 4464285
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 224
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 225
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 225
k = 4444444
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 225
k = 4444444
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4444444
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -996884642533748
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -635555560
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -635555560
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 364444447
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4444444
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 225
k = 4444444
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 225
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 226
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 226
k = 4424778
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 226
k = 4424778
r = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4424778
y = 435754193
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1928115566594154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -553097349
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -553097349
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 446902658
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4424778
y = 435754193
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 226
k = 4424778
r = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 226
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 227
k = 4405286
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 227
k = 4405286
r = 85
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4405286
y = 670588240
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2954132985436640
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -964757716
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -964757716
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 35242291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4405286
y = 670588240
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 227
k = 4405286
r = 85
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 228
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 228
k = 4385964
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 228
k = 4385964
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4385964
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -346797155936352
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -153508773
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -153508773
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 846491234
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4385964
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 228
k = 4385964
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 228
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 229
k = 4366812
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 229
k = 4366812
r = 59
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4366812
y = 50847458
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -222041289763896
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -288209609
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -288209609
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 711790398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4366812
y = 50847458
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 229
k = 4366812
r = 59
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 230
k = 4347826
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 230
k = 4347826
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4347826
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1610305937359098
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -926086963
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -926086963
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 73913044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4347826
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 230
k = 4347826
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 231
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 231
k = 4329004
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 231
k = 4329004
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4329004
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -365096725499400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -722943728
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -722943728
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 277056279
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4329004
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 231
k = 4329004
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 231
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 232
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 232
k = 4310344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 232
k = 4310344
r = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4310344
y = 507537692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2187662045486048
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -30172414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -30172414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 969827593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4310344
y = 507537692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 232
k = 4310344
r = 199
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 232
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 233
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 233
k = 4291845
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 233
k = 4291845
r = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4291845
y = 844262301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3623442935235345
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -909871251
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -909871251
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 90128756
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4291845
y = 844262301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 233
k = 4291845
r = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 233
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 234
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 234
k = 4273504
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 234
k = 4273504
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4273504
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -421331383291200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -380341883
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -380341883
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 619658124
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4273504
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 234
k = 4273504
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 234
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 235
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 235
k = 4255319
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 235
k = 4255319
r = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4255319
y = 23809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -101317119858156
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -119148937
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -119148937
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 880851070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4255319
y = 23809524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 235
k = 4255319
r = 42
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 235
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 236
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 236
k = 4237288
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 236
k = 4237288
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4237288
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3042155508583224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -487288139
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -487288139
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 512711868
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4237288
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 236
k = 4237288
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 236
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 237
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 237
k = 4219409
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 237
k = 4219409
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4219409
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1311437941669517
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -932489458
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -932489458
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 67510549
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4219409
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 237
k = 4219409
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 237
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 238
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 238
k = 4201680
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 238
k = 4201680
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4201680
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -25159760680320
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -760504207
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -760504207
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 239495800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4201680
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 238
k = 4201680
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 238
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 239
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 239
k = 4184100
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 239
k = 4184100
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4184100
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -938489726234700
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -719665277
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -719665277
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 280334730
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4184100
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 239
k = 4184100
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 239
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 240
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 240
k = 4166666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 240
k = 4166666
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4166666
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -24950096007984
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -95833334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -95833334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 904166673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4166666
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 240
k = 4166666
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 240
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 241
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 241
k = 4149377
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 241
k = 4149377
r = 150
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4149377
y = 46666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -193637594716459
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -593361000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -593361000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 406639007
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4149377
y = 46666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 241
k = 4149377
r = 150
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 241
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 242
k = 4132231
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 242
k = 4132231
r = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4132231
y = 209523811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -865800787052341
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -780991741
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -780991741
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 219008266
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4132231
y = 209523811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 242
k = 4132231
r = 105
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 243
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 243
k = 4115226
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 243
k = 4115226
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4115226
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1710824304156840
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -292181072
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -292181072
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 707818935
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4115226
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 243
k = 4115226
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 243
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 244
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 244
k = 4098360
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 244
k = 4098360
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4098360
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -24541078040640
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -77868853
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -77868853
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 922131154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4098360
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 244
k = 4098360
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 244
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 245
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 245
k = 4081632
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 245
k = 4081632
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4081632
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -24440910375168
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -910204088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -910204088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 89795919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4081632
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 245
k = 4081632
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 245
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 246
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 246
k = 4065040
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 246
k = 4065040
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4065040
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -24341557080960
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -556910573
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -556910573
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 443089434
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4065040
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 246
k = 4065040
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 246
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 247
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 247
k = 4048583
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 247
k = 4048583
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4048583
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -674763838731444
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -834008103
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -834008103
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 165991904
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4048583
y = 166666668
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 247
k = 4048583
r = 6
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 247
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 248
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 248
k = 4032258
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 248
k = 4032258
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4032258
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2980364629733520
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -608870972
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -608870972
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 391129035
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4032258
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 248
k = 4032258
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 248
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 249
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 249
k = 4016064
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 249
k = 4016064
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4016064
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -395949974659200
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -971887557
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -971887557
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 28112450
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4016064
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 249
k = 4016064
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 249
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 250
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 250
k = 4000000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 250
k = 4000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -571428576000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -572000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -572000004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 428000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -4000000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 250
k = 4000000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 250
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 251
k = 3984063
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 251
k = 3984063
r = 194
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3984063
y = 634020623
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2525978105331249
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -87649403
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -87649403
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3984063
y = 634020623
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 251
k = 3984063
r = 194
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 252
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 252
k = 3968253
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 252
k = 3968253
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3968253
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3620438021374812
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -996031753
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -996031753
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 3968254
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3968253
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 252
k = 3968253
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 252
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 253
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 253
k = 3952569
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 253
k = 3952569
r = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3952569
y = 140000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -553359663952569
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -660079056
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -660079056
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 339920951
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3952569
y = 140000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 253
k = 3952569
r = 50
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 253
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 254
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 254
k = 3937007
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 254
k = 3937007
r = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3937007
y = 711790398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2802323779458786
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -759842525
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -759842525
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 240157482
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3937007
y = 711790398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 254
k = 3937007
r = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 254
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 255
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 255
k = 3921568
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 255
k = 3921568
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3921568
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -23482443301632
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -443137258
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -443137258
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 556862749
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3921568
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 255
k = 3921568
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 255
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 256
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 256
k = 3906250
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 256
k = 3906250
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3906250
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -558035718750000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -714843755
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -714843755
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 285156252
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3906250
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 256
k = 3906250
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 256
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 257
k = 3891050
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 257
k = 3891050
r = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3891050
y = 343949047
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1338322939329350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -929961096
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -929961096
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3891050
y = 343949047
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 257
k = 3891050
r = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 258
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 258
k = 3875969
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 258
k = 3875969
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3875969
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1550387611627907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -600775198
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -600775198
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 399224809
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3875969
y = 400000003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 258
k = 3875969
r = 5
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 258
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 259
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 259
k = 3861003
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 259
k = 3861003
r = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3861003
y = 73913044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -285378484623132
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -482625486
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -482625486
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 517374521
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3861003
y = 73913044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 259
k = 3861003
r = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 259
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 260
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 260
k = 3846153
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 260
k = 3846153
r = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3846153
y = 35242291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -135547243256523
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -242307694
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -242307694
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 757692313
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3846153
y = 35242291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 260
k = 3846153
r = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 260
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 261
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 261
k = 3831417
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 261
k = 3831417
r = 170
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3831417
y = 335294120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1284651591368040
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -582375483
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -582375483
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 417624524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3831417
y = 335294120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 261
k = 3831417
r = 170
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 261
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 262
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 262
k = 3816793
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 262
k = 3816793
r = 241
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3816793
y = 406639007
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1552056915444551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -904580159
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -904580159
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 95419848
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3816793
y = 406639007
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 262
k = 3816793
r = 241
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 262
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 263
k = 3802281
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 263
k = 3802281
r = 104
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3802281
y = 394230772
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1498976173990932
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -163498100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -163498100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3802281
y = 394230772
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 263
k = 3802281
r = 104
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 264
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 264
k = 3787878
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 264
k = 3787878
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3787878
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -299506634672304
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -632575762
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -632575762
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 367424245
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3787878
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 264
k = 3787878
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 264
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 265
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 265
k = 3773584
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 265
k = 3773584
r = 247
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3773584
y = 165991904
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -626384393063936
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -388679248
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -388679248
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 611320759
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3773584
y = 165991904
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 265
k = 3773584
r = 247
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 265
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 266
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 266
k = 3759398
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 266
k = 3759398
r = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3759398
y = 604316551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2271866433196298
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -417293236
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -417293236
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 582706771
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3759398
y = 604316551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 266
k = 3759398
r = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 266
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 267
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 267
k = 3745318
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 267
k = 3745318
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3745318
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3522823886082988
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -861423227
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -861423227
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 138576780
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3745318
y = 940594066
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 267
k = 3745318
r = 101
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 267
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 268
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 268
k = 3731343
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 268
k = 3731343
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3731343
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -314691580561050
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -578358213
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -578358213
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 421641794
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3731343
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 268
k = 3731343
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 268
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 269
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 269
k = 3717472
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 269
k = 3717472
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3717472
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2668954275188256
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -256505578
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -256505578
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 743494429
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3717472
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 269
k = 3717472
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 269
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 270
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 270
k = 3703703
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 270
k = 3703703
r = 197
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3703703
y = 969543154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3590899888099262
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -862962969
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -862962969
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 137037038
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3703703
y = 969543154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 270
k = 3703703
r = 197
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 270
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 271
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 271
k = 3690036
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 271
k = 3690036
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3690036
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3366606573381744
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -549815502
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -549815502
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 450184505
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3690036
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 271
k = 3690036
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 271
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 272
k = 3676470
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 272
k = 3676470
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3676470
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -22014790595280
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -790441182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -790441182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 209558825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3676470
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 272
k = 3676470
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 273
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 273
k = 3663003
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 273
k = 3663003
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3663003
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2201698627133502
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -611721616
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -611721616
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 388278391
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3663003
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 273
k = 3663003
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 273
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 274
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 274
k = 3649635
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 274
k = 3649635
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3649635
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1288106479819665
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -470802923
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -470802923
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 529197084
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3649635
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 274
k = 3649635
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 274
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 275
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 275
k = 3636363
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 275
k = 3636363
r = 182
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3636363
y = 82417583
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -299700249370629
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -247272729
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -247272729
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 752727278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3636363
y = 82417583
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 275
k = 3636363
r = 182
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 275
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 276
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 276
k = 3623188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 276
k = 3623188
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3623188
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1735476617220800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -605072468
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -605072468
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 394927539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3623188
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 276
k = 3623188
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 276
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 277
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 277
k = 3610108
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 277
k = 3610108
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3610108
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -595072751457928
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -747292424
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -747292424
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 252707583
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3610108
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 277
k = 3610108
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 277
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 278
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 278
k = 3597122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 278
k = 3597122
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3597122
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -592932201992252
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -197841728
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -197841728
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 802158279
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3597122
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 278
k = 3597122
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 278
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 279
k = 3584229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 279
k = 3584229
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3584229
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3367939342571991
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -318996418
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -318996418
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 681003589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3584229
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 279
k = 3584229
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 280
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 280
k = 3571428
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 280
k = 3571428
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3571428
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -21385796578272
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -796428577
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -796428577
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 203571430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3571428
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 280
k = 3571428
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 280
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 281
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 281
k = 3558718
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 281
k = 3558718
r = 249
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3558718
y = 28112450
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -100044281839100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -281138792
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -281138792
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 718861215
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3558718
y = 28112450
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 281
k = 3558718
r = 249
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 281
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 282
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 282
k = 3546099
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 282
k = 3546099
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3546099
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1474220942943660
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -932624120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -932624120
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 67375887
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3546099
y = 415730340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 282
k = 3546099
r = 89
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 282
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 283
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 283
k = 3533568
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 283
k = 3533568
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3533568
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2955836370514176
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -349823324
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -349823324
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 650176683
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3533568
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 283
k = 3533568
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 283
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 284
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 284
k = 3521126
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 284
k = 3521126
r = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3521126
y = 125560539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -442114478446914
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -475352116
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -475352116
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 524647891
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3521126
y = 125560539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 284
k = 3521126
r = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 284
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 285
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 285
k = 3508771
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 285
k = 3508771
r = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3508771
y = 209558825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -735293927954075
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -922807024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -922807024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 77192983
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3508771
y = 209558825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 285
k = 3508771
r = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 285
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 286
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 286
k = 3496503
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 286
k = 3496503
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3496503
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1853850596893038
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -583916088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -583916088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 416083919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3496503
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 286
k = 3496503
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 286
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 287
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 287
k = 3484320
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 287
k = 3484320
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3484320
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -20864191783680
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -191637632
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -191637632
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 808362375
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3484320
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 287
k = 3484320
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 287
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 288
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 288
k = 3472222
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 288
k = 3472222
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3472222
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -342331748924100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -746527783
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -746527783
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 253472224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3472222
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 288
k = 3472222
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 288
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 289
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 289
k = 3460207
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 289
k = 3460207
r = 184
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3460207
y = 92391305
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -319693040300135
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -38062284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -38062284
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 961937723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3460207
y = 92391305
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 289
k = 3460207
r = 184
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 289
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 290
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 290
k = 3448275
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 290
k = 3448275
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3448275
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -241513425828525
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -424137934
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -424137934
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 575862073
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3448275
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 290
k = 3448275
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 290
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 291
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 291
k = 3436426
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 291
k = 3436426
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3436426
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2263012259827340
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -243986256
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -243986256
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 756013751
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3436426
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 291
k = 3436426
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 291
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 292
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 292
k = 3424657
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 292
k = 3424657
r = 163
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3424657
y = 116564418
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -399193150054626
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -147260275
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -147260275
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 852739732
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3424657
y = 116564418
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 292
k = 3424657
r = 163
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 292
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 293
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 293
k = 3412969
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 293
k = 3412969
r = 90
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3412969
y = 411111114
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1403109487637466
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -477815703
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -477815703
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 522184304
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3412969
y = 411111114
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 293
k = 3412969
r = 90
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 293
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 294
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 294
k = 3401360
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 294
k = 3401360
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3401360
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -20367425312640
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -425170071
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -425170071
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 574829936
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3401360
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 294
k = 3401360
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 294
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 295
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 295
k = 3389830
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 295
k = 3389830
r = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3389830
y = 343949047
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1165928797992010
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -789830514
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -789830514
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 210169493
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3389830
y = 343949047
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 295
k = 3389830
r = 157
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 295
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 296
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 296
k = 3378378
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 296
k = 3378378
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3378378
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1618214683624800
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -672297302
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -672297302
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 327702705
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3378378
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 296
k = 3378378
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 296
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 297
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 297
k = 3367003
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 297
k = 3367003
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3367003
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3163821806658537
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -784511790
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -784511790
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 215488217
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3367003
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 297
k = 3367003
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 297
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 298
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 298
k = 3355704
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 298
k = 3355704
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3355704
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -265334736756672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -734899334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -734899334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 265100673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3355704
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 298
k = 3355704
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 298
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 299
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 299
k = 3344481
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 299
k = 3344481
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3344481
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2010246572600154
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -558528432
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -558528432
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 441471575
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3344481
y = 601063834
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 299
k = 3344481
r = 188
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 299
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 300
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 300
k = 3333333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 300
k = 3333333
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3333333
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -747663481900311
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -476666670
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -476666670
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 523333337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3333333
y = 224299067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 300
k = 3333333
r = 107
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 300
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 301
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 301
k = 3322259
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 301
k = 3322259
r = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3322259
y = 520833337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1730343241348283
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -229235882
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -229235882
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 770764125
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3322259
y = 520833337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 301
k = 3322259
r = 48
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 301
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 302
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 302
k = 3311258
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 302
k = 3311258
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3311258
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -545811762098828
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -758278151
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -758278151
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 241721856
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3311258
y = 164835166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 302
k = 3311258
r = 91
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 302
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 303
k = 3300330
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 303
k = 3300330
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3300330
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1164822361289070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -353135316
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -353135316
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 646864691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3300330
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 303
k = 3300330
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 304
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 304
k = 3289473
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 304
k = 3289473
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3289473
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -260097866952264
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -865131585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -865131585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 134868422
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3289473
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 304
k = 3289473
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 304
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 305
k = 3278688
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 305
k = 3278688
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3278688
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -19632862432512
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -862295088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -862295088
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 137704919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3278688
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 305
k = 3278688
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 306
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 306
k = 3267973
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 306
k = 3267973
r = 269
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3267973
y = 743494429
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2429719719622417
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -702614384
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -702614384
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 297385623
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3267973
y = 743494429
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 306
k = 3267973
r = 269
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 306
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 307
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 307
k = 3257329
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 307
k = 3257329
r = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3257329
y = 250000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -814332256514658
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -250814334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -250814334
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 749185673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3257329
y = 250000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 307
k = 3257329
r = 4
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 307
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 308
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 308
k = 3246753
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 308
k = 3246753
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3246753
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -273822544124550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -542207796
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -542207796
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 457792211
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3246753
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 308
k = 3246753
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 308
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 309
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 309
k = 3236245
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 309
k = 3236245
r = 302
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3236245
y = 241721856
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -782271147870720
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -142394823
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -142394823
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 857605184
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3236245
y = 241721856
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 309
k = 3236245
r = 302
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 309
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 310
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 310
k = 3225806
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 310
k = 3225806
r = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3225806
y = 149659865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -482773690476190
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -687096779
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -687096779
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 312903228
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3225806
y = 149659865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 310
k = 3225806
r = 147
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 310
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 311
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 311
k = 3215434
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 311
k = 3215434
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3215434
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -3020559233362564
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -212218651
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -212218651
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 787781356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3215434
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 311
k = 3215434
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 311
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 312
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 312
k = 3205128
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 312
k = 3205128
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3205128
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -315998537468400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -535256414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -535256414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 464743593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3205128
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 312
k = 3205128
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 312
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 313
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 313
k = 3194888
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 313
k = 3194888
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3194888
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -50712508342208
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -507987224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -507987224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 492012783
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3194888
y = 15873016
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 313
k = 3194888
r = 63
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 313
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 314
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 314
k = 3184713
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 314
k = 3184713
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3184713
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2726114347108278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -328025480
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -328025480
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 671974527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3184713
y = 856000006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 314
k = 3184713
r = 125
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 314
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 315
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 315
k = 3174603
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 315
k = 3174603
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3174603
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1792114609370199
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -596825401
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -596825401
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 403174606
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3174603
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 315
k = 3174603
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 315
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 316
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 316
k = 3164556
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 316
k = 3164556
r = 311
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3164556
y = 787781356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2492978216817936
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -199367090
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -199367090
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 800632917
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3164556
y = 787781356
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 316
k = 3164556
r = 311
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 316
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 317
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 317
k = 3154574
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 317
k = 3154574
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3154574
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1416339356917530
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -347003157
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -347003157
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 652996850
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3154574
y = 448979595
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 317
k = 3154574
r = 49
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 317
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 318
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 318
k = 3144654
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 318
k = 3144654
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3144654
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1976639671069182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -657232709
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -657232709
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 342767298
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3144654
y = 628571433
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 318
k = 3144654
r = 35
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 318
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 319
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 319
k = 3134796
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 319
k = 3134796
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3134796
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -264380387430600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -385579940
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -385579940
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 614420067
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3134796
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 319
k = 3134796
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 319
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 320
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 320
k = 3125000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 320
k = 3125000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3125000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -446428575000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -571875004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -571875004
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 428125003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3125000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 320
k = 3125000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 320
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 321
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 321
k = 3115264
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 321
k = 3115264
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3115264
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2605924276808448
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -258566980
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -258566980
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 741433027
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3115264
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 321
k = 3115264
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 321
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 322
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 322
k = 3105590
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 322
k = 3105590
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3105590
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1150218526685070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -518633544
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -518633544
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 481366463
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3105590
y = 370370373
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 322
k = 3105590
r = 27
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 322
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 323
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 323
k = 3095975
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 323
k = 3095975
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3095975
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1019406409612625
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -402476783
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -402476783
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 597523224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3095975
y = 329268295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 323
k = 3095975
r = 82
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 323
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 324
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 324
k = 3086419
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 324
k = 3086419
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3086419
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2815896238847076
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -219135804
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -219135804
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 780864203
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3086419
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 324
k = 3086419
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 324
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 325
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 325
k = 3076923
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 325
k = 3076923
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3076923
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -865384599903846
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -593846158
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -593846158
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 406153849
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3076923
y = 281250002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 325
k = 3076923
r = 32
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 325
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 326
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 326
k = 3067484
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 326
k = 3067484
r = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3067484
y = 125560539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -385154944413876
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -941717798
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -941717798
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 58282209
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3067484
y = 125560539
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 326
k = 3067484
r = 223
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 326
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 327
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 327
k = 3058103
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 327
k = 3058103
r = 326
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3058103
y = 58282209
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -178232998189527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -996941903
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -996941903
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 3058104
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3058103
y = 58282209
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 327
k = 3058103
r = 326
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 327
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 328
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 328
k = 3048780
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 328
k = 3048780
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3048780
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -18256167810720
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -167682928
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -167682928
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 832317079
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3048780
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 328
k = 3048780
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 328
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 329
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 329
k = 3039513
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 329
k = 3039513
r = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3039513
y = 73913044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -224659658107572
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -656534959
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -656534959
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 343465048
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3039513
y = 73913044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 329
k = 3039513
r = 230
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 329
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 330
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 330
k = 3030303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 330
k = 3030303
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3030303
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1069518713547237
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -706060611
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -706060611
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 293939396
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3030303
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 330
k = 3030303
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 330
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 331
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 331
k = 3021148
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 331
k = 3021148
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3021148
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -477023371919224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -368580063
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -368580063
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 631419944
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3021148
y = 157894738
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 331
k = 3021148
r = 19
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 331
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 332
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 332
k = 3012048
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 332
k = 3012048
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3012048
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -296962480994400
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -478915666
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -478915666
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 521084341
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3012048
y = 98591550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 332
k = 3012048
r = 71
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 332
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 333
k = 3003003
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 333
k = 3003003
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3003003
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -375375378003003
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -375375378
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -375375378
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 624624629
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -3003003
y = 125000001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 333
k = 3003003
r = 8
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 334
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 334
k = 2994011
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 334
k = 2994011
r = 333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2994011
y = 624624629
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1870133010096919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -997005995
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -997005995
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 2994012
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2994011
y = 624624629
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 334
k = 2994011
r = 333
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 334
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 335
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 335
k = 2985074
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 335
k = 2985074
r = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2985074
y = 875576043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2613659280982182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -262686569
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -262686569
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 737313438
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2985074
y = 875576043
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 335
k = 2985074
r = 217
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 335
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 336
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 336
k = 2976190
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 336
k = 2976190
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2976190
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -17821497148560
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -497023813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -497023813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 502976194
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2976190
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 336
k = 2976190
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 336
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 337
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 337
k = 2967359
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 337
k = 2967359
r = 24
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2967359
y = 41666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -123639959322453
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -958456980
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -958456980
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 41543027
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2967359
y = 41666667
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 337
k = 2967359
r = 24
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 337
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 338
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 338
k = 2958579
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 338
k = 2958579
r = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2958579
y = 137704919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -407410881550101
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -878698231
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -878698231
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 121301776
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2958579
y = 137704919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 338
k = 2958579
r = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 338
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 339
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 339
k = 2949852
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 339
k = 2949852
r = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2949852
y = 435754193
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1285410377729436
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -368731566
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -368731566
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 631268441
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2949852
y = 435754193
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 339
k = 2949852
r = 179
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 339
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 340
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 340
k = 2941176
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 340
k = 2941176
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2941176
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -17611832476224
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -832352947
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -832352947
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 167647060
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2941176
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 340
k = 2941176
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 340
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 341
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 341
k = 2932551
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 341
k = 2932551
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2932551
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2755586734831629
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -715542527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -715542527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 284457480
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2932551
y = 939655179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 341
k = 2932551
r = 116
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 341
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 342
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 342
k = 2923976
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 342
k = 2923976
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2923976
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -231198103957568
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -102339182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -102339182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 897660825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2923976
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 342
k = 2923976
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 342
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 343
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 343
k = 2915451
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 343
k = 2915451
r = 314
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2915451
y = 671974527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1959108806716677
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -793002921
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -793002921
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 206997086
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2915451
y = 671974527
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 343
k = 2915451
r = 314
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 343
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 344
k = 2906976
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 344
k = 2906976
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2906976
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2431690967603232
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -950581402
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -950581402
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 49418605
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2906976
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 344
k = 2906976
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 345
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 345
k = 2898550
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 345
k = 2898550
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2898550
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -203011285479050
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -284057973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -284057973
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 715942034
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2898550
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 345
k = 2898550
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 345
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 346
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 346
k = 2890173
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 346
k = 2890173
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2890173
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1532373614772858
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -604046247
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -604046247
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 395953760
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2890173
y = 530201346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 346
k = 2890173
r = 149
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 346
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 347
k = 2881844
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 347
k = 2881844
r = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2881844
y = 604316551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1741546026600044
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -14409222
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -14409222
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 985590785
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2881844
y = 604316551
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 347
k = 2881844
r = 139
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 348
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 348
k = 2873563
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 348
k = 2873563
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2873563
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -242348688478050
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -686781614
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -686781614
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 313218393
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2873563
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 348
k = 2873563
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 348
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 349
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 349
k = 2865329
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 349
k = 2865329
r = 186
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2865329
y = 521505380
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1494284488970020
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -478510032
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -478510032
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 521489975
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2865329
y = 521505380
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 349
k = 2865329
r = 186
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 349
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 350
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 350
k = 2857142
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 350
k = 2857142
r = 307
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2857142
y = 749185673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2140529852126566
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -837142863
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -837142863
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 162857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2857142
y = 749185673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 350
k = 2857142
r = 307
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 350
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 351
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 351
k = 2849002
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 351
k = 2849002
r = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2849002
y = 137704919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -392321589640838
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -586894591
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -586894591
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 413105416
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2849002
y = 137704919
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 351
k = 2849002
r = 305
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 351
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 352
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 352
k = 2840909
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 352
k = 2840909
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2840909
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2039626988709207
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -974431825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -974431825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 25568182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2840909
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 352
k = 2840909
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 352
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 353
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 353
k = 2832861
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 353
k = 2832861
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2832861
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -880483830525993
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -824362612
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -824362612
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 175637395
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2832861
y = 310810813
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 353
k = 2832861
r = 74
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 353
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 354
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 354
k = 2824858
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 354
k = 2824858
r = 275
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2824858
y = 752727278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2126347673076524
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -658192095
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -658192095
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 341807912
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2824858
y = 752727278
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 354
k = 2824858
r = 275
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 354
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 355
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 355
k = 2816901
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 355
k = 2816901
r = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2816901
y = 269736844
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -759821985600444
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -980281697
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -980281697
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 19718310
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2816901
y = 269736844
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 355
k = 2816901
r = 152
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 355
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 356
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 356
k = 2808988
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 356
k = 2808988
r = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2808988
y = 681003589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1912930909457932
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -896067422
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -896067422
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 103932585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2808988
y = 681003589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 356
k = 2808988
r = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 356
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 357
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 357
k = 2801120
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 357
k = 2801120
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2801120
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -16773173786880
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -173669469
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -173669469
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 826330538
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2801120
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 357
k = 2801120
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 357
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 358
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 358
k = 2793296
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 358
k = 2793296
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2793296
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2005443296161008
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -282122907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -282122907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 717877100
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2793296
y = 717948723
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 358
k = 2793296
r = 39
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 358
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 359
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 359
k = 2785515
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 359
k = 2785515
r = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2785515
y = 844262301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2351705303370015
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -286908080
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -286908080
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 713091927
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2785515
y = 844262301
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 359
k = 2785515
r = 122
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 359
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 360
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 360
k = 2777777
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 360
k = 2777777
r = 287
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2777777
y = 808362375
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2245450412940375
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -397222225
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -397222225
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 602777782
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2777777
y = 808362375
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 360
k = 2777777
r = 287
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 360
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 361
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 361
k = 2770083
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 361
k = 2770083
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2770083
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -566607890392848
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -886426599
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -886426599
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 113573408
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2770083
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 361
k = 2770083
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 361
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 362
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 362
k = 2762430
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 362
k = 2762430
r = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2762430
y = 985590785
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2722625552207550
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -533149175
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -533149175
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 466850832
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2762430
y = 985590785
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 362
k = 2762430
r = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 362
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 363
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 363
k = 2754820
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 363
k = 2754820
r = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2754820
y = 985590785
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2715125206333700
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -187327825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -187327825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 812672182
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2754820
y = 985590785
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 363
k = 2754820
r = 347
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 363
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 364
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 364
k = 2747252
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 364
k = 2747252
r = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2747252
y = 681003589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1870888471887428
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -458791212
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -458791212
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 541208795
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2747252
y = 681003589
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 364
k = 2747252
r = 279
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 364
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 365
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 365
k = 2739726
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 365
k = 2739726
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2739726
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -966962124576954
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -117808220
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -117808220
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 882191787
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2739726
y = 352941179
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 365
k = 2739726
r = 17
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 365
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 366
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 366
k = 2732240
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 366
k = 2732240
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2732240
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -16360718693760
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -718579240
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -718579240
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 281420767
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2732240
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 366
k = 2732240
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 366
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 367
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 367
k = 2724795
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 367
k = 2724795
r = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2724795
y = 219008266
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -596752628155470
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -623978206
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -623978206
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 376021801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2724795
y = 219008266
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 367
k = 2724795
r = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 367
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 368
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 368
k = 2717391
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 368
k = 2717391
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2717391
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1301607462915600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -453804351
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -453804351
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 546195656
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2717391
y = 478991600
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 368
k = 2717391
r = 119
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 368
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 369
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 369
k = 2710027
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 369
k = 2710027
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2710027
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -554323708487312
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -704607051
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -704607051
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 295392956
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2710027
y = 204545456
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 369
k = 2710027
r = 44
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 369
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 370
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 370
k = 2702702
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 370
k = 2702702
r = 267
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2702702
y = 138576780
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -374531740459560
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -737837843
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -737837843
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 262162164
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2702702
y = 138576780
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 370
k = 2702702
r = 267
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 370
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 371
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 371
k = 2695417
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 371
k = 2695417
r = 300
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2695417
y = 523333337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1410601573216529
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -563342322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -563342322
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 436657685
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2695417
y = 523333337
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 371
k = 2695417
r = 300
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 371
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 372
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 372
k = 2688172
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 372
k = 2688172
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2688172
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1986909753155680
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -739247317
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -739247317
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 260752690
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2688172
y = 739130440
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 372
k = 2688172
r = 23
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 372
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 373
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 373
k = 2680965
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 373
k = 2680965
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2680965
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1513447994508345
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -983914216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -983914216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 16085791
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2680965
y = 564516133
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 373
k = 2680965
r = 62
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 373
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 374
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 374
k = 2673796
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 374
k = 2673796
r = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2673796
y = 646864691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1729584223337036
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -211229948
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -211229948
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 788770059
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2673796
y = 646864691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 374
k = 2673796
r = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 374
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 375
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 375
k = 2666666
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 375
k = 2666666
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2666666
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -186770382640726
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -381333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -381333336
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 618666671
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2666666
y = 70038911
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 375
k = 2666666
r = 257
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 375
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 376
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 376
k = 2659574
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 376
k = 2659574
r = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2659574
y = 562841534
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1496918709946516
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -699468090
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -699468090
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 300531917
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2659574
y = 562841534
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 376
k = 2659574
r = 183
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 376
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 377
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 377
k = 2652519
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 377
k = 2652519
r = 344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2652519
y = 49418605
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -131083788715995
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -787798414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -787798414
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 212201593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2652519
y = 49418605
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 377
k = 2652519
r = 344
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 377
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 378
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 378
k = 2645502
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 378
k = 2645502
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2645502
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2413625347583208
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -330687833
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -330687833
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 669312174
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2645502
y = 912350604
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 378
k = 2645502
r = 251
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 378
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 379
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 379
k = 2638522
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 379
k = 2638522
r = 169
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2638522
y = 242603552
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -640114809230144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -804749346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -804749346
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 195250661
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2638522
y = 242603552
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 379
k = 2638522
r = 169
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 379
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 380
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 380
k = 2631578
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 380
k = 2631578
r = 367
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2631578
y = 376021801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -989530699031978
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -692105268
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -692105268
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 307894739
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2631578
y = 376021801
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 380
k = 2631578
r = 367
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 380
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 381
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 381
k = 2624671
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 381
k = 2624671
r = 356
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2624671
y = 103932585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -272788841804535
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -839895019
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -839895019
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 160104988
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2624671
y = 103932585
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 381
k = 2624671
r = 356
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 381
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 382
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 382
k = 2617801
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 382
k = 2617801
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2617801
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -732984285235602
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -280104714
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -280104714
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 719895293
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2617801
y = 280000002
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 382
k = 2617801
r = 25
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 382
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 383
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 383
k = 2610966
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 383
k = 2610966
r = 29
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2610966
y = 758620695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1980732841541370
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -827676246
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -827676246
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 172323761
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2610966
y = 758620695
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 383
k = 2610966
r = 29
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 383
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 384
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 384
k = 2604166
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 384
k = 2604166
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2604166
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2178389825144562
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -809895839
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -809895839
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 190104168
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2604166
y = 836501907
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 384
k = 2604166
r = 263
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 384
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 385
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 385
k = 2597402
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 385
k = 2597402
r = 237
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2597402
y = 67510549
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -175352034993698
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -33766234
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -33766234
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 966233773
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2597402
y = 67510549
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 385
k = 2597402
r = 237
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 385
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 386
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 386
k = 2590673
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 386
k = 2590673
r = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2590673
y = 711790398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1844016165757854
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -152849742
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -152849742
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 847150265
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2590673
y = 711790398
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 386
k = 2590673
r = 229
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 386
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 387
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 387
k = 2583979
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 387
k = 2583979
r = 134
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2583979
y = 843283588
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2179027082436652
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -67183463
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -67183463
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 932816544
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2583979
y = 843283588
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 387
k = 2583979
r = 134
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 387
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 388
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 388
k = 2577319
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 388
k = 2577319
r = 235
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2577319
y = 880851070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2270234198881330
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -182989692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -182989692
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 817010315
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2577319
y = 880851070
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 388
k = 2577319
r = 235
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 388
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 389
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 389
k = 2570694
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 389
k = 2570694
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2570694
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1692896060693460
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -48843188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -48843188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 951156819
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2570694
y = 658536590
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 389
k = 2570694
r = 41
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 389
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 390
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 390
k = 2564102
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 390
k = 2564102
r = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2564102
y = 35242291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -90364828837682
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -828205134
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -828205134
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 171794873
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2564102
y = 35242291
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 390
k = 2564102
r = 227
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 390
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 391
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 391
k = 2557544
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 391
k = 2557544
r = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2557544
y = 646864691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1654384909278904
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -897698216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -897698216
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 102301791
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2557544
y = 646864691
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 391
k = 2557544
r = 303
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 391
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 392
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 392
k = 2551020
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 392
k = 2551020
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2551020
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -15275568984480
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -568877555
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -568877555
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 431122452
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2551020
y = 5988024
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 392
k = 2551020
r = 167
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 392
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 393
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 393
k = 2544529
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 393
k = 2544529
r = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2544529
y = 881818188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2243811952093452
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -936386775
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -936386775
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 63613232
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2544529
y = 881818188
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 393
k = 2544529
r = 110
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 393
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 394
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 394
k = 2538071
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 394
k = 2538071
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2538071
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2384248531918166
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -515228430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -515228430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 484771577
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2538071
y = 939393946
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 394
k = 2538071
r = 33
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 394
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 395
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 395
k = 2531645
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 395
k = 2531645
r = 232
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2531645
y = 969827593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2455259176680485
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -159493672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -159493672
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 840506335
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2531645
y = 969827593
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 395
k = 2531645
r = 232
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 395
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 396
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 396
k = 2525252
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 396
k = 2525252
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2525252
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -199671089781536
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -88383839
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -88383839
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 911616168
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2525252
y = 79069768
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 396
k = 2525252
r = 215
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 396
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 397
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 397
k = 2518891
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 397
k = 2518891
r = 280
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2518891
y = 203571430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -512774242884130
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -239294712
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -239294712
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 760705295
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2518891
y = 203571430
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 397
k = 2518891
r = 280
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 397
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 398
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 398
k = 2512562
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 398
k = 2512562
r = 331
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2512562
y = 631419944
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1586481757336528
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -746231161
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -746231161
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 253768846
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2512562
y = 631419944
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 398
k = 2512562
r = 331
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 398
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 399
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 399
k = 2506265
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 399
k = 2506265
r = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2506265
y = 209558825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -525209948538625
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -944862162
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -944862162
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 55137845
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2506265
y = 209558825
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 399
k = 2506265
r = 272
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 399
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 400
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 400
k = 2500000
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 400
k = 2500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -357142860000000
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -857500006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -857500006
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 142500001
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2500000
y = 142857144
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 400
k = 2500000
r = 7
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 400
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 401
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 401
k = 2493765
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 401
k = 2493765
r = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2493765
y = 219008266
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -546155148461490
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -144638405
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -144638405
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 855361602
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2493765
y = 219008266
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 401
k = 2493765
r = 242
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 401
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 402
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 402
k = 2487562
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 402
k = 2487562
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2487562
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -209794387040700
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -385572142
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -385572142
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 614427865
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2487562
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 402
k = 2487562
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 402
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 403
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 403
k = 2481389
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 403
k = 2481389
r = 240
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2481389
y = 904166673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -2243589236548797
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -220843674
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -220843674
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 779156333
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2481389
y = 904166673
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 403
k = 2481389
r = 240
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 403
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 404
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 404
k = 2475247
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 404
k = 2475247
r = 219
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2475247
y = 470319638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1164157273000586
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -264851487
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -264851487
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 735148520
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2475247
y = 470319638
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 404
k = 2475247
r = 219
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 404
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 405
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 405
k = 2469135
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 405
k = 2469135
r = 332
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2469135
y = 521084341
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -1286627584315035
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -575308646
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -575308646
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 424691361
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2469135
y = 521084341
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 405
k = 2469135
r = 332
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=642 bci=57
642                    for (int i = 2; i <= limit; i++) {

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 405
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=643 bci=28
643                        int k = p / i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 406
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=644 bci=35
644                        int r = p % i;

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 406
k = 2463054
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=42
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 406
k = 2463054
r = 83
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=0
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2463054
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=458 bci=0
458                    x %= m;

main[1] Method arguments:
x = -207727447266900
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=459 bci=8
459                    if (x < 0) {

main[1] Method arguments:
x = -445812811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=460 bci=14
460                        x += m;

main[1] Method arguments:
x = -445812811
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.valueOf(), line=462 bci=22
462                    return (int) x;

main[1] Method arguments:
x = 554187196
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$Modular.mul(), line=466 bci=9
466                    return valueOf((long) x * y);

main[1] Method arguments:
x = -2463054
y = 84337350
Local variables:
main[1] > 
Step completed: "thread=main", Main$NumberTheory$InverseNumber.<init>(), line=645 bci=56
645                        inv[i] = modular.mul(-k, inv[r]);

main[1] Method arguments:
inv = instance of int[1000001] (id=457)
limit = 1000000
modular = instance of Main$NumberTheory$Modular(id=454)
Local variables:
p = 1000000007
i = 406
k = 2463054
r = 83
main[1] 