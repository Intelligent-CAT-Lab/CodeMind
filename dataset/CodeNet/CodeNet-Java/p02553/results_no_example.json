{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.NoSuchElementException;\nimport java.util.Objects;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\npublic class Main {\n\n\tstatic Scanner sc = new Scanner(System.in);\n\n\tstatic class FastScanner {\n\t\tprivate final InputStream in;\n\t\tprivate final byte[] buffer = new byte[1024];\n\t\tprivate int ptr = 0;\n\t\tprivate int buflen = 0;\n\n\t\tpublic FastScanner(InputStream source) {\n\t\t\tin = source;\n\t\t}\n\n\t\tprivate boolean hasNextByte() {\n\t\t\tif (ptr < buflen) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tptr = 0;\n\t\t\t\ttry {\n\t\t\t\t\tbuflen = in.read(buffer);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\tif (buflen <= 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tprivate int readByte() {\n\t\t\tif (hasNextByte())\n\t\t\t\treturn buffer[ptr++];\n\t\t\telse\n\t\t\t\treturn -1;\n\t\t}\n\n\t\tprivate static boolean isPrintableChar(int c) {\n\t\t\treturn 33 <= c && c <= 126;\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\twhile (hasNextByte() && !isPrintableChar(buffer[ptr]))\n\t\t\t\tptr++;\n\t\t\treturn hasNextByte();\n\t\t}\n\n\t\tpublic String next() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint b = readByte();\n\t\t\twhile (isPrintableChar(b)) {\n\t\t\t\tsb.appendCodePoint(b);\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tpublic long nextLong() {\n\t\t\tif (!hasNext())\n\t\t\t\tthrow new NoSuchElementException();\n\t\t\tlong n = 0;\n\t\t\tboolean minus = false;\n\t\t\tint b = readByte();\n\t\t\tif (b == '-') {\n\t\t\t\tminus = true;\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t\tif (b < '0' || '9' < b) {\n\t\t\t\tthrow new NumberFormatException();\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif ('0' <= b && b <= '9') {\n\t\t\t\t\tn *= 10;\n\t\t\t\t\tn += b - '0';\n\t\t\t\t} else if (b == -1 || !isPrintableChar(b)) {\n\t\t\t\t\treturn minus ? -n : n;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NumberFormatException();\n\t\t\t\t}\n\t\t\t\tb = readByte();\n\t\t\t}\n\t\t}\n\n\t\tpublic int nextInt() {\n\t\t\tlong nl = nextLong();\n\t\t\tif (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)\n\t\t\t\tthrow new NumberFormatException();\n\t\t\treturn (int) nl;\n\t\t}\n\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\t}\n\n\t/**\n\t * Compute n! mod. p, (n!)^(-1) mod.p\n\t *\n\t * @param fac[]\n\t *            : n! mod. p\n\t * @param finv[]\n\t *            : (n!)^(-1) mod. p\n\t * @param MAX\n\t *            :\n\t * @param MOD\n\t *            :\n\t */\n\n\tstatic void hz_COMinit(long fac[], long finv[], long inv[], final int MAX, final long MOD) {\n\t\tfac[0] = fac[1] = 1L;\n\t\tfinv[0] = finv[1] = 1L;\n\t\tinv[1] = 1L;\n\t\tfor (int i = 2; i < MAX; i++) {\n\t\t\tfac[i] = fac[i - 1] * i % MOD;\n\t\t\tinv[i] = MOD - inv[(int) (MOD % i)] * (MOD / i) % MOD;\n\t\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\n\t\t}\n\t}\n\t/*\n\t * static void hz_COMinit(long fac[], long finv[], long inv[],final int MAX,\n\t * final long MOD) { fac[0] = fac[1] = 1L; finv[0] = finv[1] = 1L; inv[1] =\n\t * 1L; for (int i = 2; i < MAX; i++){ fac[i] = (BigInteger.valueOf(fac[i -\n\t * 1]).multiply(BigInteger.valueOf(i)).mod(BigInteger.valueOf(MOD))).\n\t * longValue(); inv[i] =\n\t * (BigInteger.valueOf(MOD).subtract(BigInteger.valueOf(inv[(int)(MOD%i)]).\n\t * multiply(BigInteger.valueOf(MOD/i)).mod(BigInteger.valueOf(MOD)))).\n\t * longValue(); finv[i] = (BigInteger.valueOf(finv[i -\n\t * 1]).multiply(BigInteger.valueOf(inv[i])).mod(BigInteger.valueOf(MOD))).\n\t * longValue(); } }\n\t */\n\n\t/**\n\t * @Compute nCk(\u4e8c\u9805\u4fc2\u6570\u8a08\u7b97) mod. p\n\t * @param fac[]\n\t *            : n! mod. p\n\t * @param finv[]\n\t *            : (n!)^(-1) mod. p\n\t * @return :nCk(\u4e8c\u9805\u4fc2\u6570\u8a08\u7b97) mod. p\n\t */\n\tstatic long hz_COM(long fac[], long finv[], int n, int k, final long MOD) {\n\t\tif (n < k)\n\t\t\treturn 0;\n\t\tif (n < 0 || k < 0)\n\t\t\treturn 0;\n\t\treturn fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;\n\t}\n\t/*\n\t * static long hz_COM(long fac[],long finv[], int n, int k, final long MOD){\n\t * if (n < k) return 0; if (n < 0 || k < 0) return 0; return\n\t * BigInteger.valueOf(fac[n]) .multiply(BigInteger.valueOf(finv[k])\n\t * .multiply(BigInteger.valueOf(finv[n - k])) .mod(BigInteger.valueOf(MOD))\n\t * ) .mod(BigInteger.valueOf(MOD)).longValue(); }\n\t */\n\n\tstatic int hz_swap(int a, int b) {\n\t\tif (a >= b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t}\n\n\tstatic long hz_swap(long a, long b) {\n\t\tif (a >= b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t}\n\n\t// mod\u4e0a\u3067\u306e\u5dee\u5206\n\tstatic long hz_modSub(long a, long b, long mod) {\n\t\tlong v = a - b;\n\t\tif (v < 0)\n\t\t\tv += mod;\n\t\treturn v % mod;\n\t}\n\n\t// mod\u4e0a\u3067\u306e\u5272\u7b97\n\tstatic long hz_modDiv(long a, long b, long mod) {\n\t\treturn (a % mod) * hz_modInv(b, mod) % mod;\n\t}\n\n\t// \u9006\u5143\n\tstatic long hz_modInv(long a, long mod) {\n\t\treturn hz_modPow(a, mod - 2L, mod);\n\t}\n\n\t// mod\u4e0a\u3067\u306e\u7d2f\u4e57\n\tstatic long hz_modPow(long n, long k, long mod) {\n\n\t\tlong result = 1L;\n\n\t\t// k \u3092\u53f3\u30b7\u30d5\u30c8\u3057\u3064\u3064 n \u3092 2 \u4e57\u3057\u3066\u3044\u304f\n\t\twhile (k > 0L) {\n\t\t\t// k \u306e\u6700\u4e0b\u30d3\u30c3\u30c8\u304c 1 \u306a\u3089\u3001\u4eca\u306e n \u3092\u7b54\u3048\u306b\u639b\u3051\u308b\n\t\t\tif ((k & 1L) == 1L)\n\t\t\t\tresult = (result * n) % mod;\n\t\t\tn = n * n % mod;\n\t\t\tk >>= 1L;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// Union Find Tree\n\tstatic class HZ_UF {\n\n\t\tpublic int[] par;\n\t\tpublic int[] rank;\n\n\t\tpublic HZ_UF(int n) {\n\t\t\tthis.par = new int[n + 1];\n\t\t\tthis.rank = new int[n + 1];\n\n\t\t\tArrays.fill(par, -1);\n\t\t\tArrays.fill(rank, 0);\n\t\t}\n\n\t\tpublic void unite(int x, int y) {\n\t\t\tlink(root(x), root(y));\n\t\t}\n\n\t\tpublic boolean link(int x, int y) {\n\t\t\tif (x == y)\n\t\t\t\treturn false;\n\t\t\tif (rank[x] > rank[y]) {\n\t\t\t\tpar[x] += par[y];\n\t\t\t\tpar[y] = x;\n\t\t\t} else {\n\t\t\t\tpar[y] += par[x];\n\t\t\t\tpar[x] = y;\n\t\t\t\tif (rank[x] == rank[y])\n\t\t\t\t\trank[y]++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic boolean isSame(int x, int y) {\n\t\t\treturn root(x) == root(y);\n\t\t}\n\n\t\tpublic int root(int x) {\n\t\t\tif (par[x] < 0)\n\t\t\t\treturn x;\n\t\t\telse\n\t\t\t\treturn x = root(par[x]);\n\t\t}\n\n\t\tpublic int size(int x) {\n\t\t\treturn -par[root(x)];\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tsolve_abc178_b();\n\t}\n  \n  \tpublic static void solve_abc178_b() {\n\n\t\tFastScanner sc = new FastScanner(System.in);\n\t\t\n\t\tlong a = sc.nextLong();\n\t\tlong b = sc.nextLong();\n\t\tlong c = sc.nextLong();\n\t\tlong d = sc.nextLong();\n\t\t\n\t\tlong ans = a * c;\n\t\tans = Math.max(ans, a * d);\n\t\tans = Math.max(ans, b * c);\n\t\tans = Math.max(ans, b * d);\n\t\t\n\t\tSystem.out.println(ans);\n\t\t\n\n\t}\n}Gicen the following input:\n1 2 1 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "2\n",
        "predict": "2"
    }
}