1 import java.io.BufferedReader;
2 import java.io.IOException;
3 import java.io.InputStreamReader;
4 
5 import static java.lang.Integer.parseInt;
6 
7 /**
8  * Irreducible Fractionalization
9  */
10 public class Main {
11 
12 	public static void main(String[] args) throws IOException {
13 		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
14 		String line;
15 		String[] units;
16 
17 		int an, ad, bn, bd;
18 		an = 0; //非循環節分子
19 		ad = 1; //非循環節分母
20 		bn = 0; //循環節分子
21 		bd = 1; //循環節分母
22 
23 		line = br.readLine();
24 
25 		//
26 		units = line.split("[()]");
27 
28 		if (units.length == 2) {
29 			bn = parseInt(units[1]);
30 			bd = ((int) Math.pow(10, units[1].length())) - 1;
31 		}
32 
33 		//
34 		units = units[0].split("\\.");
35 
36 		if (units.length == 2) {
37 			bd *= (int) Math.pow(10, units[1].length());
38 			an = parseInt(units[0] + units[1]);
39 			ad = (int) Math.pow(10, units[1].length());
40 		} else {
41 			an = parseInt(units[0]);
42 		}
43 
44 		//
45 		int n, d, g;
46 		d = lcm(ad, bd);
47 		n = an * (d / ad) + bn * d / bd;
48 		g = gcd(n, d);
49 		n /= g;
50 		d /= g;
51 
52 		System.out.printf("%d/%d\n", n, d);
53 	}
54 
55 	static int gcd(int a, int b) {
56 		if (b == 0) return a;
57 		return gcd(b, a % b);
58 	}
59 
60 	static int lcm(int a, int b) {
61 		return a * (b / gcd(a, b));
62 	}
63 }
