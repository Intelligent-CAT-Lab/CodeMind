1 import java.util.*;
2 import java.util.stream.*;
3 import java.io.*;
4 import java.math.*;
5 
6 public class Main {
7 
8 	static void solve (FastScanner in, PrintWriter out, Methods ms) {
9 
10 		out.println(in.next().equals("ani")? "square1001" : "e869120");
11 
12 	}
13 
14 
15 
16 	public static void main(String[] args) {
17 		FastScanner in = new FastScanner(System.in);
18 		PrintWriter out = new PrintWriter(System.out);
19 		Methods ms = new Methods();
20 		solve(in, out, ms);
21 		in.close();
22 		out.close();
23 	}
24 
25 	static class Methods {
26 
27 		public void print (Object... ar) {System.out.println(Arrays.deepToString(ar));}
28 
29 		public void yesno (PrintWriter out, boolean b) {out.println(b?"Yes":"No");}
30 
31 		public void YESNO (PrintWriter out, boolean b) {out.println(b?"YES":"NO");}
32 
33 		public int max (int... ar) {Arrays.sort(ar); return ar[ar.length-1];}
34 
35 		public int min (int... ar) {Arrays.sort(ar); return ar[0];}
36 
37 		public long gcd (long a, long b) {return b>0?gcd(b,a%b):a;}
38 
39 		public long lcm (long a, long b) {return a/gcd(a,b)*b;}
40 
41 		public long factorial (int i) {
42 			if (i==1) return 1;
43 			else return i*factorial(i-1);
44 		}
45 
46 		public int manhat (int x1, int y1, int x2, int y2) {
47 			return Math.abs(x1-x2)+Math.abs(y1-y2);
48 		}
49 
50 		public double euclid (double x1, double y1, double x2, double y2) {
51 			return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
52 		}
53 
54 		public boolean isPrime (int n) {
55 			if (n==2) return true;
56 			if (n<2 || n%2==0) return false;
57 			for (int i=3; i<=Math.sqrt(n); i+=2) if(n%i==0) return false;
58 			return true;
59 		}
60 
61 	}
62 
63 	static class FastScanner {
64 
65 		private InputStream in;
66 		private byte[] buffer = new byte[1024];
67 		private  int length = 0, p = 0;
68 
69 		public FastScanner (InputStream stream) {
70 			in = stream;
71 		}
72 
73 		public boolean hasNextByte () {
74 			if (p < length) return true;
75 			else {
76 				p = 0;
77 				try {length = in.read(buffer);}
78 				catch (Exception e) {e.printStackTrace();}
79 				if (length <= 0) return false;
80 			}
81 			return true;
82 		}
83 
84 		public int readByte () {
85 			if (hasNextByte() == true) return buffer[p++];
86 			return -1;
87 		}
88 
89 		public boolean isPrintable (int n) {return 33<=n&&n<=126;}
90 
91 		public void skip () {
92 			while (hasNextByte() && !isPrintable(buffer[p])) p++;
93 		}
94 
95 		public boolean hasNext () {skip(); return hasNextByte();}
96 
97 		public String next () {
98 			if (!hasNext()) throw new NoSuchElementException();
99 			StringBuilder sb = new StringBuilder();
100 			int t = readByte();
101 			while (isPrintable(t)) {
102 				sb.appendCodePoint(t);
103 				t = readByte();
104 			}
105 			return sb.toString();
106 		}
107 
108 		public String[] nextArray (int n) {
109 			String[] ar = new String[n];
110 			for (int i=0; i<n; i++) ar[i] = next();
111 			return ar;
112 		}
113 
114 		public int nextInt () {return Math.toIntExact(nextLong());}
115 
116 		public int[] nextIntArray (int n) {
117 			int[] ar = new int[n];
118 			for (int i=0; i<n; i++) ar[i] = nextInt();
119 			return ar;
120 		}
121 
122 		public long nextLong () {
123 			if (!hasNext()) throw new NoSuchElementException();
124 			boolean minus = false;
125 			int temp = readByte();
126 			if (temp == '-') {
127 				minus = true;
128 				temp = readByte();
129 			}
130 			if (temp<'0' || '9'<temp) throw new NumberFormatException();
131 			long n = 0;
132 			while (isPrintable(temp)) {
133 				if ('0'<=temp && temp<='9') {
134 					n *= 10;
135 					n += temp - '0';
136 				}
137 				else throw new NumberFormatException();
138 				temp = readByte();
139 			}
140 			return minus? -n : n;
141 		}
142 
143 		public long[] nextLongArray (int n) {
144 			long[] ar = new long[n];
145 			for (int i=0; i<n; i++) ar[i] = nextLong();
146 			return ar;
147 		}
148 
149 		public double nextDouble () {
150 			return Double.parseDouble(next());
151 		}
152 
153 		public double[] nextDoubleArray (int n) {
154 			double[] ar = new double[n];
155 			for (int i=0; i<n; i++) ar[i] = nextDouble();
156 			return ar;
157 		}
158 
159 		public void close () {
160 			try {in.close();}
161 			catch(Exception e){}
162 		}
163 
164 	}
165 
166 }
