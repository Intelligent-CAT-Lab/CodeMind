{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author Jaynil\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        ERoaming solver = new ERoaming();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class ERoaming {\n        long[] fact;\n        long[] factinv;\n        long mod = 1000000007;\n        long n;\n\n        public void gen() {\n            fact = new long[(int) (n + 1)];\n            factinv = new long[(int) (n + 1)];\n            fact[0] = 1;\n            factinv[0] = Maths.power(fact[0], mod - 2, mod);\n            for (int i = 1; i <= n; i++) {\n                fact[i] = i * fact[i - 1];\n                fact[i] %= mod;\n                factinv[i] = Maths.power(fact[i], mod - 2, mod);\n            }\n        }\n\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            n = in.nextLong();\n            long k = in.nextLong();\n            if (k >= n) {\n                out.println(Maths.nCrs(n + n - 1, n - 1, mod));\n            } else {\n                long ans = 0;\n                gen();\n                for (int i = 0; i <= k; i++) {\n                    long up = fact[(int) n] * fact[(int) (n - 1)];\n                    up %= mod;\n                    long den1 = factinv[i] * factinv[i];\n                    den1 %= mod;\n                    long den2 = factinv[(int) n - i] * factinv[(int) n - i - 1];\n                    den2 %= mod;\n                    long den = den1 * den2;\n                    den %= mod;\n                    ans += up * den;\n                    ans %= mod;\n//                out.println((up*den)%mod);\n                }\n                out.println(ans);\n            }\n        }\n\n    }\n\n    static class Maths {\n        static long nCrs(long n, long r, long p) {\n            //r is small\n            long up = 1;\n            long down = 1;\n            for (long i = n - r + 1; i <= n; i++) {\n                up *= i;\n                up %= p;\n            }\n            for (long i = 1; i <= r; i++) {\n                down *= i;\n                down %= p;\n            }\n            return (up * power(down, p - 2, p)) % p;\n        }\n\n        static long power(long x, long y, long p) {\n            long res = 1;\n            x = x % p;\n            while (y > 0) {\n                if ((y & 1) == 1)\n                    res = (res * x) % p;\n                y = y >> 1;\n                x = (x * x) % p;\n            }\n            return res;\n        }\n\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n    }\n}\n\n\nWhat would be the output of the code execution given the following input:\n3 2\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "10\n",
        "predict": "The output of the code execution with the given input would be:\n10\nEND-OF-OUTPUT"
    }
}