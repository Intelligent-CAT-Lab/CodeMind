{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringJoiner;\nimport java.util.StringTokenizer;\nimport java.util.function.IntUnaryOperator;\nimport java.util.function.LongUnaryOperator;\n\npublic class Main {\n    static In in = new In();\n    static Out out = new Out();\n    static long mod = 1000000007;\n    static int iinf = 0xfffffff;\n    static long inf = 0xfffffffffffffffL;\n\n    void solve() {\n        long ai = in.nextInt();\n        long ao = in.nextInt();\n        long at = in.nextInt();\n        long aj = in.nextInt();\n        long al = in.nextInt();\n        long as = in.nextInt();\n        long az = in.nextInt();\n        long ans = 0;\n        ans += ao;\n        if (ai % 2 + aj % 2 + al % 2 == 3) {\n            ans += ai + aj + al;\n        } else if (ai % 2 + aj % 2 + al % 2 == 2) {\n            if (ai != 0 && aj != 0 && al != 0) {\n                ans += ai + aj + al - 1;\n            } else {\n                ans += ai + aj + al - 2;\n            }\n        } else if (ai % 2 + aj % 2 + al % 2 == 1) {\n            ans += ai + aj + al - 1;\n        } else {\n            ans += ai + aj + al;\n        }\n        out.println(ans);\n    }\n\n    public static void main(String[]$) {\n        new Main().solve();\n        out.flush();\n    }\n}\n\nclass In {\n    private BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 0x10000);\n    private StringTokenizer tokenizer;\n\n    String next() {\n        try {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                tokenizer = new StringTokenizer(reader.readLine());\n            }\n        } catch (IOException ignored) {\n        }\n        return tokenizer.nextToken();\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    char[][] nextCharArray(int n, int m) {\n        char[][] a = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            a[i] = next().toCharArray();\n        }\n        return a;\n    }\n\n    int[] nextIntArray(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    int[] nextIntArray(int n, IntUnaryOperator op) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = op.applyAsInt(nextInt());\n        }\n        return a;\n    }\n\n    long[] nextLongArray(int n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    long[] nextLongArray(int n, LongUnaryOperator op) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = op.applyAsLong(nextLong());\n        }\n        return a;\n    }\n}\n\nclass Out {\n    private PrintWriter out = new PrintWriter(System.out);\n    boolean autoFlush = false;\n\n    void println(Object... a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (Object obj : a) {\n            joiner.add(String.valueOf(obj));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void println(int[] a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (int i : a) {\n            joiner.add(Integer.toString(i));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void println(long[] a) {\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (long i : a) {\n            joiner.add(Long.toString(i));\n        }\n        out.println(joiner);\n        if (autoFlush) {\n            out.flush();\n        }\n    }\n\n    void flush() {\n        out.flush();\n    }\n}\nGicen the following input:\n2 1 1 0 0 0 0\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "3\n",
        "predict": "3\nEND-OF-OUTPUT"
    }
}