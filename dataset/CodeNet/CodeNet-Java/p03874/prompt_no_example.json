{
    "0": {
        "prompt": "Consider the following code:\n\npublic class Main {\n  private static void solve() {\n    System.out.println(solve(nl()));\n  }\n\n  private static String solve(long k) {\n    int m = \"FESTIVAL\".length();\n\n    int n = 600;\n    int l = m - 1;\n    long[][] dp = new long[n + 1][l + 1];\n    for (int i = 0; i < n; i++) {\n      dp[i][0] = 1;\n      for (int j = 0; j < l; j++) {\n        for (int p = 0; p <= i; p++) {\n          for (int q = 0; q <= j; q++) {\n            dp[i + 1][j + 1] += dp[p][q];\n          }\n        }\n      }\n    }\n\n    long[] a = new long[n + 1];\n    for (int i = n; i >= 1; i--) {\n      a[i] = k / dp[i][l];\n      k -= a[i] * dp[i][l];\n    }\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= n; i++) {\n      sb.append(\"FESTIVA\");\n      for (int j = 0; j < a[i]; j++) {\n        sb.append(\"L\");\n      }\n    }\n    return sb.toString();\n  }\n\n\n\n  private static long check(String s) {\n    String t = \"FESTIVAL\";\n    int m = t.length();\n    int[] map = new int[26];\n    for (int i = 0; i < m; i++) {\n      map[t.charAt(i) - 'A'] = i;\n    }\n\n    int n = s.length();\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++) {\n      a[i] = map[s.charAt(i) - 'A'];\n    }\n\n    long[][] dp = new long[n + 1][m + 1];\n    dp[0][0] = 1;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j <= m; j++) {\n        dp[i + 1][j] = dp[i][j];\n      }\n      dp[i + 1][a[i] + 1] += dp[i][a[i]];\n    }\n\n    return dp[n][m];\n  }\n\n  public static void main(String[] args) {\n    new Thread(null, new Runnable() {\n      @Override\n      public void run() {\n        long start = System.currentTimeMillis();\n        String debug = args.length > 0 ? args[0] : null;\n        if (debug != null) {\n          try {\n            is = java.nio.file.Files.newInputStream(java.nio.file.Paths.get(debug));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n        reader = new java.io.BufferedReader(new java.io.InputStreamReader(is), 32768);\n        solve();\n        out.flush();\n        tr((System.currentTimeMillis() - start) + \"ms\");\n      }\n    }, \"\", 64000000).start();\n  }\n\n  private static java.io.InputStream is = System.in;\n  private static java.io.PrintWriter out = new java.io.PrintWriter(System.out);\n  private static java.util.StringTokenizer tokenizer = null;\n  private static java.io.BufferedReader reader;\n\n  public static String next() {\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n      try {\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return tokenizer.nextToken();\n  }\n\n  private static double nd() {\n    return Double.parseDouble(next());\n  }\n\n  private static long nl() {\n    return Long.parseLong(next());\n  }\n\n  private static int[] na(int n) {\n    int[] a = new int[n];\n    for (int i = 0; i < n; i++)\n      a[i] = ni();\n    return a;\n  }\n\n  private static char[] ns() {\n    return next().toCharArray();\n  }\n\n  private static long[] nal(int n) {\n    long[] a = new long[n];\n    for (int i = 0; i < n; i++)\n      a[i] = nl();\n    return a;\n  }\n\n  private static int[][] ntable(int n, int m) {\n    int[][] table = new int[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[i][j] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int[][] nlist(int n, int m) {\n    int[][] table = new int[m][n];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        table[j][i] = ni();\n      }\n    }\n    return table;\n  }\n\n  private static int ni() {\n    return Integer.parseInt(next());\n  }\n\n  private static void tr(Object... o) {\n    if (is != System.in)\n      System.out.println(java.util.Arrays.deepToString(o));\n  }\n}\nGicen the following input:\n7\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "FESSSSSSSTIVAL\n"
    }
}