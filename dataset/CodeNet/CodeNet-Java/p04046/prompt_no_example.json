{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author Silviase\n */\npublic class Main {\n\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    Scanner in = new Scanner(inputStream);\n    PrintWriter out = new PrintWriter(outputStream);\n    ABC042DIrohaandaGrid solver = new ABC042DIrohaandaGrid();\n    solver.solve(1, in, out);\n    out.close();\n  }\n\n  static class ABC042DIrohaandaGrid {\n\n    public void solve(int testNumber, Scanner in, PrintWriter out) {\n      int h = in.nextInt();\n      int w = in.nextInt();\n      int a = in.nextInt();\n      int b = in.nextInt();\n      ModComb mc = new ModComb(200005);\n      mc.makeFac();\n      ModInt res = new ModInt(0);\n      for (int i = 0; i < h - a; i++) {\n        res = res.add(mc.combFac(b - 1 + i, i).mul(mc.combFac(w - b - 1 + h - 1 - i, h - 1 - i)));\n      }\n      out.println(res.toString());\n    }\n\n  }\n\n  static class ModInt {\n\n    private static int MOD = 1000000007;\n    long x;\n\n    ModInt(long l) {\n      this.x = l % MOD;\n    }\n\n    ModInt add(ModInt mi) {\n      return new ModInt(this.x + mi.x);\n    }\n\n    ModInt mul(long i) {\n      return new ModInt(this.x * i);\n    }\n\n    ModInt mul(ModInt mi) {\n      return new ModInt(this.x * mi.x);\n    }\n\n    ModInt pow(int p) {\n      ModInt res = new ModInt(1);\n      ModInt tmp = this;\n      while (p > 0) {\n        if ((p & 1) == 1) {\n          res = res.mul(tmp);\n        }\n        tmp = tmp.mul(tmp);\n        p /= 2;\n      }\n      return res;\n    }\n\n    ModInt inv() {\n      return this.pow(MOD - 2);\n    }\n\n    public String toString() {\n      return Integer.toString((int) this.x);\n    }\n\n  }\n\n  static class ModComb {\n\n    int size;\n    ModInt[] fac;\n    ModInt[] inv;\n\n    ModComb(int n) {\n      size = n;\n      fac = new ModInt[n + 1];\n      inv = new ModInt[n + 1];\n    }\n\n    void makeFac() {\n      for (int i = 0; i <= size; i++) {\n        if (i == 0) {\n          fac[i] = new ModInt(1);\n        } else {\n          fac[i] = fac[i - 1].mul(i);\n        }\n        inv[i] = fac[i].inv();\n      }\n\n\n    }\n\n    ModInt combFac(int n, int k) {\n      if (n < k) {\n        return new ModInt(0);\n      }\n      return fac[n].mul(inv[k]).mul(inv[n - k]);\n    }\n\n  }\n}\n\nGicen the following input:\n2 3 1 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "2\n"
    }
}