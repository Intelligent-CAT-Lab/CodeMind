1 import java.io.OutputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.Scanner;
6 
7 /**
8  * Built using CHelper plug-in Actual solution is at the top
9  *
10  * @author Silviase
11  */
12 public class Main {
13 
14   public static void main(String[] args) {
15     InputStream inputStream = System.in;
16     OutputStream outputStream = System.out;
17     Scanner in = new Scanner(inputStream);
18     PrintWriter out = new PrintWriter(outputStream);
19     ABC042DIrohaandaGrid solver = new ABC042DIrohaandaGrid();
20     solver.solve(1, in, out);
21     out.close();
22   }
23 
24   static class ABC042DIrohaandaGrid {
25 
26     public void solve(int testNumber, Scanner in, PrintWriter out) {
27       int h = in.nextInt();
28       int w = in.nextInt();
29       int a = in.nextInt();
30       int b = in.nextInt();
31       ModComb mc = new ModComb(200005);
32       mc.makeFac();
33       ModInt res = new ModInt(0);
34       for (int i = 0; i < h - a; i++) {
35         res = res.add(mc.combFac(b - 1 + i, i).mul(mc.combFac(w - b - 1 + h - 1 - i, h - 1 - i)));
36       }
37       out.println(res.toString());
38     }
39 
40   }
41 
42   static class ModInt {
43 
44     private static int MOD = 1000000007;
45     long x;
46 
47     ModInt(long l) {
48       this.x = l % MOD;
49     }
50 
51     ModInt add(ModInt mi) {
52       return new ModInt(this.x + mi.x);
53     }
54 
55     ModInt mul(long i) {
56       return new ModInt(this.x * i);
57     }
58 
59     ModInt mul(ModInt mi) {
60       return new ModInt(this.x * mi.x);
61     }
62 
63     ModInt pow(int p) {
64       ModInt res = new ModInt(1);
65       ModInt tmp = this;
66       while (p > 0) {
67         if ((p & 1) == 1) {
68           res = res.mul(tmp);
69         }
70         tmp = tmp.mul(tmp);
71         p /= 2;
72       }
73       return res;
74     }
75 
76     ModInt inv() {
77       return this.pow(MOD - 2);
78     }
79 
80     public String toString() {
81       return Integer.toString((int) this.x);
82     }
83 
84   }
85 
86   static class ModComb {
87 
88     int size;
89     ModInt[] fac;
90     ModInt[] inv;
91 
92     ModComb(int n) {
93       size = n;
94       fac = new ModInt[n + 1];
95       inv = new ModInt[n + 1];
96     }
97 
98     void makeFac() {
99       for (int i = 0; i <= size; i++) {
100         if (i == 0) {
101           fac[i] = new ModInt(1);
102         } else {
103           fac[i] = fac[i - 1].mul(i);
104         }
105         inv[i] = fac[i].inv();
106       }
107 
108 
109     }
110 
111     ModInt combFac(int n, int k) {
112       if (n < k) {
113         return new ModInt(0);
114       }
115       return fac[n].mul(inv[k]).mul(inv[n - k]);
116     }
117 
118   }
119 }
120 
