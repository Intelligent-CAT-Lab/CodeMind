{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        MyScan in = new MyScan(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskC {\n        public void solve(int testNumber, MyScan in, PrintWriter out) {\n            int i = in.nextInt();\n\n            long[] md = new long[i];\n\n            int rm = i - 2;\n            int lx = i - 2;\n            while (rm >= 0) {\n                md[lx + 1] = Util.c(rm, lx);\n                rm -= 2;\n                lx--;\n            }\n            long res = 0;\n            long prev = 0;\n            for (int m = 1; m < i; m++) {\n                long cur = Util.fact(m) * Util.fact(i - m - 1) % Util._m;\n                cur = cur * (md[m]) % Util._m;\n\n\n                res += (cur - prev + Util._m) * m % Util._m;\n                prev = cur;\n\n            }\n\n\n            out.println(res % Util._m);\n\n        }\n\n    }\n\n    static class MyScan {\n        private final InputStream in;\n        private byte[] inbuf = new byte[1024];\n        public int lenbuf = 0;\n        public int ptrbuf = 0;\n\n        public MyScan(InputStream in) {\n            this.in = in;\n        }\n\n        private int readByte() {\n            if (lenbuf == -1) throw new InputMismatchException();\n            if (ptrbuf >= lenbuf) {\n                ptrbuf = 0;\n                try {\n                    lenbuf = in.read(inbuf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (lenbuf <= 0) return -1;\n            }\n            return inbuf[ptrbuf++];\n        }\n\n        public int nextInt() {\n            int num = 0, b;\n            boolean minus = false;\n            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\n            if (b == '-') {\n                minus = true;\n                b = readByte();\n            }\n\n            while (true) {\n                if (b >= '0' && b <= '9') {\n                    num = num * 10 + (b - '0');\n                } else {\n                    return minus ? -num : num;\n                }\n                b = readByte();\n            }\n        }\n\n    }\n\n    static class Util {\n        public static final long M07 = 1000_000_007;\n        public static long _m = M07;\n        private static long[] fact;\n        private static long[] inv;\n        private static long[] ifact;\n\n        public static void l() {\n            fact = new long[1000001];\n            inv = new long[1000001];\n            ifact = new long[1000001];\n            for (int s = 0; s < 2; s++) {\n                fact[s] = 1;\n                ifact[s] = 1;\n                inv[s] = 1;\n            }\n            inv[0] = 0;\n            for (int i = 2; i < inv.length; i++) {\n                inv[i] = (_m - (_m / i) * inv[(int) (_m % i)] % _m) % _m;\n            }\n            for (int i = 2; i < fact.length; i++) {\n                fact[i] = i * fact[i - 1] % _m;\n                ifact[i] = inv[i] * ifact[i - 1] % _m;\n            }\n        }\n\n        public static long c(int a, int b) {\n            if (fact == null) l();\n            return ifact[a] * ifact[b - a] % _m * fact[b] % _m;\n        }\n\n        public static long fact(int a) {\n            if (fact == null) l();\n            return fact[a];\n        }\n\n    }\n}\n\nGicen the following input:\n4\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "16\n"
    }
}