1 import java.util.*;
2 import java.io.*;
3 
4 public class Main {
5 
6 	static void solve (FastScanner in, PrintWriter out, Methods ms) {
7 
8 		int a = in.nextInt(), b = in.nextInt();
9 		System.out.println(Math.max(1, (b+a-1)/a));
10 
11 	}
12 
13 
14 
15 	public static void main (String[] args) {
16 		FastScanner in = new FastScanner(System.in);
17 		PrintWriter out = new PrintWriter(System.out);
18 		Methods ms = new Methods();
19 		solve(in, out, ms);
20 		in.close();
21 		out.close();
22 	}
23 
24 	static class Methods {
25 
26 		public void print (Object... ar) {System.out.println(Arrays.deepToString(ar));}
27 
28 		public int max (int... ar) {Arrays.sort(ar); return ar[ar.length-1];}
29 
30 		public int min (int... ar) {Arrays.sort(ar); return ar[0];}
31 
32 		public long gcd (long a, long b) {return b>0?gcd(b,a%b):a;}
33 
34 		public long lcm (long a, long b) {return a/gcd(a,b)*b;}
35 
36 		public long factorial (int i) {
37 			if (i==1) return 1;
38 			else return i*factorial(i-1);
39 		}
40 
41 		public int manhat (int x1, int y1, int x2, int y2) {
42 			return Math.abs(x1-x2)+Math.abs(y1-y2);
43 		}
44 
45 		public double euclid (double x1, double y1, double x2, double y2) {
46 			return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
47 		}
48 
49 		public boolean isPrime (int n) {
50 			if (n==2) return true;
51 			if (n<2 || n%2==0) return false;
52 			for (int i=3; i<=Math.sqrt(n); i+=2) if(n%i==0) return false;
53 			return true;
54 		}
55 
56 	}
57 
58 	static class FastScanner {
59 
60 		private InputStream in;
61 		private byte[] buffer = new byte[1024];
62 		private  int length = 0, p = 0;
63 
64 		public FastScanner (InputStream stream) {
65 			in = stream;
66 		}
67 
68 		public boolean hasNextByte () {
69 			if (p < length) return true;
70 			else {
71 				p = 0;
72 				try {length = in.read(buffer);}
73 				catch (Exception e) {e.printStackTrace();}
74 				if (length <= 0) return false;
75 			}
76 			return true;
77 		}
78 
79 		public int readByte () {
80 			if (hasNextByte() == true) return buffer[p++];
81 			return -1;
82 		}
83 
84 		public boolean isPrintable (int n) {return 33<=n&&n<=126;}
85 
86 		public void skip () {
87 			while (hasNextByte() && !isPrintable(buffer[p])) p++;
88 		}
89 
90 		public boolean hasNext () {skip(); return hasNextByte();}
91 
92 		public String next () {
93 			if (!hasNext()) throw new NoSuchElementException();
94 			StringBuilder sb = new StringBuilder();
95 			int t = readByte();
96 			while (isPrintable(t)) {
97 				sb.appendCodePoint(t);
98 				t = readByte();
99 			}
100 			return sb.toString();
101 		}
102 
103 		public String[] nextArray (int n) {
104 			String[] ar = new String[n];
105 			for (int i=0; i<n; i++) ar[i] = next();
106 			return ar;
107 		}
108 
109 		public int nextInt () {return Math.toIntExact(nextLong());}
110 
111 		public int[] nextIntArray (int n) {
112 			int[] ar = new int[n];
113 			for (int i=0; i<n; i++) ar[i] = nextInt();
114 			return ar;
115 		}
116 
117 		public long nextLong () {
118 			if (!hasNext()) throw new NoSuchElementException();
119 			boolean minus = false;
120 			int temp = readByte();
121 			if (temp == '-') {
122 				minus = true;
123 				temp = readByte();
124 			}
125 			if (temp<'0' || '9'<temp) throw new NumberFormatException();
126 			long n = 0;
127 			while (isPrintable(temp)) {
128 				if ('0'<=temp && temp<='9') {
129 					n *= 10;
130 					n += temp - '0';
131 				}
132 				else throw new NumberFormatException();
133 				temp = readByte();
134 			}
135 			return minus? -n : n;
136 		}
137 
138 		public long[] nextLongArray (int n) {
139 			long[] ar = new long[n];
140 			for (int i=0; i<n; i++) ar[i] = nextLong();
141 			return ar;
142 		}
143 
144 		public double nextDouble () {
145 			return Double.parseDouble(next());
146 		}
147 
148 		public double[] nextDoubleArray (int n) {
149 			double[] ar = new double[n];
150 			for (int i=0; i<n; i++) ar[i] = nextDouble();
151 			return ar;
152 		}
153 
154 		public void close () {
155 			try {in.close();}
156 			catch(Exception e){}
157 		}
158 
159 	}
160 
161 }
