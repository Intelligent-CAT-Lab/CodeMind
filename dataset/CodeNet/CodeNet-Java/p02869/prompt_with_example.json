{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n    static int N, K;\n\n    public static void main(String[] args) {\n        FastScanner sc = new FastScanner(System.in);\n        N = sc.nextInt();\n        K = sc.nextInt();\n\n        int[][] ans = solve();\n        if( ans != null ) {\n            PrintWriter pw = new PrintWriter(System.out);\n            for (int[] each : ans) {\n                pw.print(each[0]);\n                pw.print(\" \");\n                pw.print(each[1]);\n                pw.print(\" \");\n                pw.print(each[2]);\n                pw.println();\n            }\n            pw.flush();\n        } else {\n            System.out.println(-1);\n        }\n    }\n\n    static int[][] solve() {\n        // \u3068\u308a\u3042\u3048\u305a\u5e73\u5747\u7684\u306b\u5272\u308a\u632f\u308b\n        int avg = K + K+N+N-1;\n        int[][] abi = new int[N][3];\n        for (int i = 0; i < N; i++) {\n            int a = K+i;\n            int b = avg - a;\n            abi[i][0] = a;\n            abi[i][1] = b;\n        }\n\n        // a+b\u304c+1\u305a\u3064\u3055\u308c\u3066\u3044\u304f\u3088\u3046\u306b\u52a0\u5de5\u3059\u308b\n        // N=7(8)\u306e\u5834\u5408 -2, 0, +2, -3, -1, +1, +3 \u307f\u305f\u3044\u306a\u6c17\u6301\u3061\n        //    (0, 13) (1, 12) (2, 11) (3, 10) (4, 9) (5, 8) (6, 7)\n        // -> (3, 10) (0, 13) (4, 9) (1, 12) (5, 8) (2, 11) (6, 7)\n        // -> (3, 7) (0, 11) (4, 8) (1, 12) (5, 9) (2, 13) (6, 10)\n        // -> 10, 11, 12, 13, 14, 15, 16\n        int n;\n        if( N % 2 == 1 ) {\n            n = N;\n        } else {\n            n = N-1;\n            abi[N-1][2] = Integer.MAX_VALUE;\n        }\n\n        // debug(\"n\", n);\n\n        if( (n/2)%2 == 0) {\n            // n=9\u306b\u5bfe\u3057\u3066\n            // -4 -2 0 2 4\n            int eve = -(n/2); // n=9\u306b\u5bfe\u3057\u3066-4\n            int eveTime = n/2+1;\n            for (int i = 0; i < eveTime; i++) {\n                abi[i][2] = eve;\n                eve += 2;\n            }\n            // -3 -1 1 3\n            int odd = -(n/2) + 1;\n            int oddTime = n/2;\n            for (int i = 0; i < oddTime; i++) {\n                abi[i+eveTime][2] = odd;\n                odd += 2;\n            }\n\n        } else {\n            // n=11\u306b\u305f\u3044\u3057\u3066\n            // -4 -2 0 2 4\n            int eve = -(n/2) + 1;\n            int eveTime = n/2;\n            for (int i = 0; i < eveTime; i++) {\n                abi[i][2] = eve;\n                eve += 2;\n            }\n            // -5 -3 1 1 3 5\n            int odd = -n/2;\n            int oddTime = n/2+1;\n            for (int i = 0; i < oddTime; i++) {\n                abi[i+eveTime][2] = odd;\n                odd += 2;\n            }\n        }\n\n        Arrays.sort(abi, Comparator.comparingInt(a -> a[2]) );\n        for (int i = 0; i < n; i++) {\n            abi[i][1] += abi[i][2];\n        }\n\n        int[][] ans = new int[N][3];\n        for (int i = 0; i < N; i++) {\n            int c = K+N+N+i;\n            ans[i][0] = abi[i][0];\n            ans[i][1] = abi[i][1];\n            ans[i][2] = c;\n        }\n\n        // debug(ans);\n\n        // \u5168\u90e8\u6e80\u305f\u3057\u3066\u3044\u305f\u3089ok\n        for (int i = 0; i < N; i++) {\n            if( ans[i][0] + ans[i][1] > ans[i][2] ) {\n                return null;\n            }\n        }\n        return ans;\n    }\n\n    @SuppressWarnings(\"unused\")\n    static class FastScanner {\n        private BufferedReader reader;\n        private StringTokenizer tokenizer;\n\n        FastScanner(InputStream in) {\n            reader = new BufferedReader(new InputStreamReader(in));\n            tokenizer = null;\n        }\n\n        String next() {\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        String nextLine() {\n            if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    return reader.readLine();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken(\"\\n\");\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        int[] nextIntArray(int n) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) a[i] = nextInt();\n            return a;\n        }\n\n        int[] nextIntArray(int n, int delta) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) a[i] = nextInt() + delta;\n            return a;\n        }\n\n        long[] nextLongArray(int n) {\n            long[] a = new long[n];\n            for (int i = 0; i < n; i++) a[i] = nextLong();\n            return a;\n        }\n    }\n\n    static void writeLines(int[] as) {\n        PrintWriter pw = new PrintWriter(System.out);\n        for (int a : as) pw.println(a);\n        pw.flush();\n    }\n\n    static void writeLines(long[] as) {\n        PrintWriter pw = new PrintWriter(System.out);\n        for (long a : as) pw.println(a);\n        pw.flush();\n    }\n\n    static void writeSingleLine(int[] as) {\n        PrintWriter pw = new PrintWriter(System.out);\n        for (int i = 0; i < as.length; i++) {\n            if (i != 0) pw.print(\" \");\n            pw.print(as[i]);\n        }\n        pw.println();\n        pw.flush();\n    }\n\n    static int max(int... as) {\n        int max = Integer.MIN_VALUE;\n        for (int a : as) max = Math.max(a, max);\n        return max;\n    }\n\n    static int min(int... as) {\n        int min = Integer.MAX_VALUE;\n        for (int a : as) min = Math.min(a, min);\n        return min;\n    }\n\n    static void debug(Object... args) {\n        StringJoiner j = new StringJoiner(\" \");\n        for (Object arg : args) {\n            if (arg == null) j.add(\"null\");\n            else if (arg instanceof int[]) j.add(Arrays.toString((int[]) arg));\n            else if (arg instanceof long[]) j.add(Arrays.toString((long[]) arg));\n            else if (arg instanceof double[]) j.add(Arrays.toString((double[]) arg));\n            else if (arg instanceof Object[]) j.add(Arrays.toString((Object[]) arg));\n            else j.add(arg.toString());\n        }\n        System.err.println(j.toString());\n    }\n\n    static void printSingleLine(int[] array) {\n        PrintWriter pw = new PrintWriter(System.out);\n        for (int i = 0; i < array.length; i++) {\n            if (i != 0) pw.print(\" \");\n            pw.print(array[i]);\n        }\n        pw.println();\n        pw.flush();\n    }\n\n    static int lowerBound(int[] array, int value) {\n        int lo = 0, hi = array.length, mid;\n        while (lo < hi) {\n            mid = (hi + lo) / 2;\n            if (array[mid] < value) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;\n    }\n\n    static int upperBound(int[] array, int value) {\n        int lo = 0, hi = array.length, mid;\n        while (lo < hi) {\n            mid = (hi + lo) / 2;\n            if (array[mid] <= value) lo = mid + 1;\n            else hi = mid;\n        }\n        return lo;\n    }\n}\nGicen the following input:\n1 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "1 2 3\n"
    }
}