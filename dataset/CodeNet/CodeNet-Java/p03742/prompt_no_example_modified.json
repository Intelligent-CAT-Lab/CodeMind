{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.util.*;\nimport java.util.Map.Entry;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@SuppressWarnings(\"unused\")\npublic class Main {\n    FastScanner in = new FastScanner(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    final int MOD = (int)1e9+7;\n    void printlnYN(boolean b){out.println((b ? \"Brown\" : \"Alice\"));}\n\n    boolean[][] dp = new boolean[100][100], visited = new boolean[100][100];\n\n    //System.out.println();\u306f\u3064\u304b\u308f\u306a\u3044\uff01\uff01\n    void solve() throws Exception{\n        long X = in.nextLong(), Y = in.nextLong();\n        /*\n        for(int i = 0; i <= 10; i++){\n            for(int j = 0; j <= 10; j++){\n                boolean b = dfs(i, j);\n                out.print((b ? \"O\" : \"X\") + \" \");\n            }\n            out.println();\n        }\n        */\n\n        printlnYN(Math.abs(X-Y) <= 1);\n    }\n\n    boolean dfs(int x, int y){\n        if(visited[x][y]) return dp[x][y];\n        if(x <= 1 && y <= 1){\n            dp[x][y] = false;\n            visited[x][y] = true;\n            return false;\n        }\n\n        for(int i = 2; i <= x; i += 2){\n            if(!dfs(x-i, y+i/2)){\n                dp[x][y] = true;\n                visited[x][y] = true;\n                return true;\n            }\n        }\n\n        for(int i = 2; i <= y; i += 2){\n            if(!dfs(x+i/2, y-i)){\n                dp[x][y] = true;\n                visited[x][y] = true;\n                return true;\n            }\n        }\n\n        dp[x][y] = false;\n        visited[x][y] = true;\n        return false;\n    }\n\n    public static void main(String[] args) throws Exception {\n        new Main().m();\n    }\n\n    void m() throws Exception {\n        solve();\n        out.flush();\n    }\n\n    class FastScanner {\n        Reader input;\n\n        FastScanner() {this(System.in);}\n        FastScanner(InputStream stream) {this.input = new BufferedReader(new InputStreamReader(stream));}\n\n        int nextInt() {return (int) nextLong();}\n\n        long nextLong() {\n            try {\n                int sign = 1;\n                int b = input.read();\n                while ((b < '0' || '9' < b) && b != '-' && b != '+') {\n                    b = input.read();\n                }\n                if (b == '-') {\n                    sign = -1;\n                    b = input.read();\n                } else if (b == '+') {\n                    b = input.read();\n                }\n                long ret = b - '0';\n                while (true) {\n                    b = input.read();\n                    if (b < '0' || '9' < b) return ret * sign;\n                    ret *= 10;\n                    ret += b - '0';\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                return -1;\n            }\n        }\n\n        double nextDouble() {\n            try {\n                double sign = 1;\n                int b = input.read();\n                while ((b < '0' || '9' < b) && b != '-' && b != '+') {\n                    b = input.read();\n                }\n                if (b == '-') {\n                    sign = -1;\n                    b = input.read();\n                } else if (b == '+') {\n                    b = input.read();\n                }\n                double ret = b - '0';\n                while (true) {\n                    b = input.read();\n                    if (b < '0' || '9' < b) break;\n                    ret *= 10;\n                    ret += b - '0';\n                }\n                if (b != '.') return sign * ret;\n                double div = 1;\n                b = input.read();\n                while ('0' <= b && b <= '9') {\n                    ret *= 10;\n                    ret += b - '0';\n                    div *= 10;\n                    b = input.read();\n                }\n                return sign * ret / div;\n            } catch (IOException e) {\n                e.printStackTrace();\n                return Double.NaN;\n            }\n        }\n\n        char nextChar() {\n            try {\n                int b = input.read();\n                while (Character.isWhitespace(b)) {\n                    b = input.read();\n                }\n                return (char) b;\n            } catch (IOException e) {\n                e.printStackTrace();\n                return 0;\n            }\n        }\n\n        String nextStr() {\n            try {\n                StringBuilder sb = new StringBuilder();\n                int b = input.read();\n                while (Character.isWhitespace(b)) {\n                    b = input.read();\n                }\n                while (b != -1 && !Character.isWhitespace(b)) {\n                    sb.append((char) b);\n                    b = input.read();\n                }\n                return sb.toString();\n            } catch (IOException e) {\n                e.printStackTrace();\n                return \"\";\n            }\n        }\n\n        public int[] nextIntArray(int n) {\n            int[] res = new int[n];\n            for (int i = 0; i < n; i++) {\n                res[i] = nextInt();\n            }\n            return res;\n        }\n\n        public int[] nextIntArrayDec(int n) {\n            int[] res = new int[n];\n            for (int i = 0; i < n; i++) {\n                res[i] = nextInt() - 1;\n            }\n            return res;\n        }\n\n        public int[] nextIntArray1Index(int n) {\n            int[] res = new int[n + 1];\n            for (int i = 0; i < n; i++) {\n                res[i + 1] = nextInt();\n            }\n            return res;\n        }\n\n        public long[] nextLongArray(int n) {\n            long[] res = new long[n];\n            for (int i = 0; i < n; i++) {\n                res[i] = nextLong();\n            }\n            return res;\n        }\n\n        public long[] nextLongArrayDec(int n) {\n            long[] res = new long[n];\n            for (int i = 0; i < n; i++) {\n                res[i] = nextLong() - 1;\n            }\n            return res;\n        }\n\n        public long[] nextLongArray1Index(int n) {\n            long[] res = new long[n + 1];\n            for (int i = 0; i < n; i++) {\n                res[i + 1] = nextLong();\n            }\n            return res;\n        }\n\n        public double[] nextDoubleArray(int n) {\n            double[] res = new double[n];\n            for (int i = 0; i < n; i++) {\n                res[i] = nextDouble();\n            }\n            return res;\n        }\n    }\n}\n/* end Main */\nWhat would be the output of the code execution given the following input:\n2 1\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "Brown\n"
    }
}