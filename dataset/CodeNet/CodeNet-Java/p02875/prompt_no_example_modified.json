{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in Actual solution is at the top\n *\n * @author ilyakor\n */\npublic class Main {\n\n  public static void main(String[] args) {\n    InputStream inputStream = System.in;\n    OutputStream outputStream = System.out;\n    InputReader in = new InputReader(inputStream);\n    OutputWriter out = new OutputWriter(outputStream);\n    TaskC solver = new TaskC();\n    solver.solve(1, in, out);\n    out.close();\n  }\n\n  static class TaskC {\n\n    static final int mod = 998244353;\n\n    public void solve(int testNumber, InputReader in, OutputWriter out) {\n      // d = new HashMap<>();\n      // {\n      //     int p3 = 1;\n      //     for (int n = 1; n <= 5; ++n) {\n      //         p3 *= 9;\n      //         a = new char[2 * n];\n      //         int cur = calc(0, 2 * n);\n      //         out.printLine(n + \" \" + cur + \" \" + (p3 - cur) / 2);\n      //     }\n      // }\n      int n = in.nextInt() / 2;\n      long res = 7;\n      int p2 = 8;\n      long num = 1;\n      long den = 2;\n      for (int i = 1; i < n; ++i) {\n        res *= 9L;\n        if (i > 1) {\n          long inc = p2;\n          inc *= num;\n          inc %= mod;\n          inc *= IntegerUtils.pow((int) den, mod - 2, mod);\n          inc %= mod;\n          res += inc;\n        }\n        res %= mod;\n        p2 = (p2 * 2) % mod;\n        {\n          int k = i;\n          num *= 2 * k;\n          num %= mod;\n          num *= 2 * k + 1;\n          num %= mod;\n          if (k > 1) {\n            den *= k - 1;\n          }\n          den %= mod;\n          den *= k + 2;\n          den %= mod;\n        }\n      }\n      out.printLine(res);\n    }\n\n  }\n\n  static class IntegerUtils {\n\n    public static int pow(long x, long y, int mod) {\n      x %= mod;\n      long res = 1;\n      while (y > 0) {\n        if (y % 2 == 1) {\n          --y;\n          res = (res * x) % mod;\n        } else {\n          y /= 2;\n          x = (x * x) % mod;\n        }\n      }\n      return (int) (res % mod);\n    }\n\n  }\n\n  static class OutputWriter {\n\n    private final PrintWriter writer;\n\n    public OutputWriter(OutputStream outputStream) {\n      writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n    }\n\n    public OutputWriter(Writer writer) {\n      this.writer = new PrintWriter(writer);\n    }\n\n    public void print(Object... objects) {\n      for (int i = 0; i < objects.length; i++) {\n        if (i != 0) {\n          writer.print(' ');\n        }\n        writer.print(objects[i]);\n      }\n    }\n\n    public void printLine(Object... objects) {\n      print(objects);\n      writer.println();\n    }\n\n    public void close() {\n      writer.close();\n    }\n\n  }\n\n  static class InputReader {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[10000];\n    private int cur;\n    private int count;\n\n    public InputReader(InputStream stream) {\n      this.stream = stream;\n    }\n\n    public static boolean isSpace(int c) {\n      return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    public int read() {\n      if (count == -1) {\n        throw new InputMismatchException();\n      }\n      try {\n        if (cur >= count) {\n          cur = 0;\n          count = stream.read(buffer);\n          if (count <= 0) {\n            return -1;\n          }\n        }\n      } catch (IOException e) {\n        throw new InputMismatchException();\n      }\n      return buffer[cur++];\n    }\n\n    public int readSkipSpace() {\n      int c;\n      do {\n        c = read();\n      } while (isSpace(c));\n      return c;\n    }\n\n    public int nextInt() {\n      int sgn = 1;\n      int c = readSkipSpace();\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      int res = 0;\n      do {\n        if (c < '0' || c > '9') {\n          throw new InputMismatchException();\n        }\n        res = res * 10 + c - '0';\n        c = read();\n      } while (!isSpace(c));\n      res *= sgn;\n      return res;\n    }\n\n  }\n}\n\n\nWhat would be the output of the code execution given the following input:\n2\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "7\n"
    }
}