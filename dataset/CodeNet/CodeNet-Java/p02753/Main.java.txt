1 /*
2  *  author : Atul Anand   
3  *  created on : Tue Mar 31 2020
4  */
5 
6 import java.io.*;
7 import java.util.*;
8 
9 public class Main{
10 
11     public static void main(String[] args) throws IOException {
12         String S = in.next();
13         if(S.charAt(0) == S.charAt(1) && S.charAt(1) == S.charAt(2)){
14             println("No");
15         }
16         else{
17             println("Yes");
18         }    
19         in.close();
20         out.close();
21     }
22 
23     static int MIN = Integer.MIN_VALUE;
24     static int MAX = Integer.MAX_VALUE;
25     static Reader in = new Reader();
26     static PrintWriter out = new PrintWriter(System.out);
27 
28     static void read(int arr[], int N) throws IOException { 
29     	for(int i = 0; i < N; i++){ 
30     		arr[i] = in.nextInt(); 
31     	} 
32     }
33     
34     static void read(long arr[], int N) throws IOException { 
35     	for(int i = 0; i < N; i++){ 
36     		arr[i] = in.nextLong(); 
37     	} 
38     }
39     
40     static void read(String arr[], int N) throws IOException { 
41     	for(int i = 0; i < N; i++){ 
42     		arr[i] = in.next(); 
43     	} 
44     }
45     
46     static void print(Object O) {  
47     	out.print(O); 
48     }
49     
50     static void println(Object O) { 
51     	out.println(O); 
52     }
53     
54     static void println(int arr[]) { 
55     	for(int i = 0; i < arr.length; i++){ 
56     		print(arr[i]+" "); 
57     	} 
58     	println(""); 
59     }
60 
61     static void println(int arr[][]) { 
62     	for(int i = 0; i < arr.length; i++){ 
63     		println(arr[i]); 
64     	}
65     }
66     
67     static void debug(Object O) { 
68     	System.out.println(O); 
69     }
70 }
71 
72 class Reader {
73     BufferedReader reader;
74     StringTokenizer tokenizer;
75 
76     Reader() {
77         reader = new BufferedReader(new InputStreamReader(System.in));
78         tokenizer = new StringTokenizer("");
79     }
80 
81     String next() throws IOException {
82         while (!tokenizer.hasMoreTokens() ) { 
83             tokenizer = new StringTokenizer(reader.readLine()); 
84         }
85         return tokenizer.nextToken();
86     }
87 
88     int nextInt() throws IOException { 
89         return Integer.parseInt(next()); 
90     }
91     
92     double nextDouble() throws IOException { 
93         return Double.parseDouble(next());
94     }
95     
96     long nextLong() throws IOException { 
97         return Long.parseLong(next()); 
98     }
99     
100     String nextLine() throws IOException { 
101         return reader.readLine(); 
102     }
103     
104     void close() throws IOException { 
105         reader.close(); 
106     }
107 }