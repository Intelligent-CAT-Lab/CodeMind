1 import java.util.*;
2 import java.io.*;
3 import java.lang.*;
4 import java.math.*;
5 public class Main {
6     public static void main(String[] args) throws Exception {
7         BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
8         PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
9         String s = bf.readLine();
10         int n = s.length();
11         Set<String> abc = new HashSet<String>();
12         abc.add("abc");
13         abc.add("acb");
14         abc.add("bac");
15         abc.add("bca");
16         abc.add("cab");
17         abc.add("cba");
18         int diff = 0;
19         for(int i=0; i<n-1; i++) {
20           if(s.charAt(i) != s.charAt(i+1)) diff++;
21         }
22         if(n <= 2) {
23           if(s.charAt(0) == s.charAt(1)) out.println(1);
24           else out.println(2);
25         }
26         else if(abc.contains(s)) out.println("3");
27         else if(diff == 0){
28           out.println("1");
29 
30         }
31         else {
32         int mod = 998244353;
33         long[][][] dp = new long[n][3][3]; // 0, 1, 2 as last remainder;
34         long[][][] dp_no_dpl = new long[n][3][3]; // a, b, c as last digit; 0, 1, 2 as last remainder
35         long ans = 1;
36         for(int i=0; i<n-1; i++) {
37           if(s.charAt(i) == s.charAt(i+1)) ans = 0;
38         }
39         int sum = 0;
40         for(int i=0; i<n; i++) {
41           sum += (s.charAt(i)-'a');
42           sum %= 3;
43         }
44         dp[0][0][0] = 1;
45         dp[0][1][1] = 1;
46         dp[0][2][2] = 1;
47         dp_no_dpl[0][0][0] = 1;
48         dp_no_dpl[0][1][1] = 1;
49         dp_no_dpl[0][2][2] = 1;
50         for(int i=1; i<n; i++) {
51           for(int j=0; j<3; j++) {
52             dp_no_dpl[i][0][j] += dp_no_dpl[i-1][1][(j+3-0)%3];
53             dp_no_dpl[i][0][j] += dp_no_dpl[i-1][2][(j+3-0)%3];
54             dp_no_dpl[i][1][j] += dp_no_dpl[i-1][0][(j+3-1)%3];
55             dp_no_dpl[i][1][j] += dp_no_dpl[i-1][2][(j+3-1)%3];
56             dp_no_dpl[i][2][j] += dp_no_dpl[i-1][0][(j+3-2)%3];
57             dp_no_dpl[i][2][j] += dp_no_dpl[i-1][1][(j+3-2)%3];
58 
59             for(int k=0; k<3; k++) dp_no_dpl[i][k][j] %= mod;
60           }
61         }
62 
63         ans += exp(3, n-1, mod) + mod;
64         ans += 1L*3*mod - dp_no_dpl[n-1][0][sum] - dp_no_dpl[n-1][1][sum] - dp_no_dpl[n-1][2][sum];
65         ans %= mod;
66         out.println(ans);
67         }
68         //
69         // int n = Integer.parseInt(bf.readLine());
70         // StringTokenizer st = new StringTokenizer(bf.readLine());
71         // int[] a = new int[n];
72         // for(int i=0; i<n; i++) a[i] =  Integer.parseInt(st.nextToken());
73 
74         out.close(); System.exit(0);
75     }
76 
77     public static int exp(int base, int e, int mod) {
78       if(e == 0) return 1;
79       if(e == 1) return base;
80       int val = exp(base, e/2, mod);
81       int ans = (int)(1L*val*val % mod);
82       if(e % 2 == 1)
83         ans = (int)(1L*ans*base % mod);
84       return ans;
85     }
86 }
