{
    "0": {
        "prompt": "Consider the following code:\n// package atcoder.arc.arc061;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.InputMismatchException;\n\n/**\n * Created by hama_du on 2016/09/11.\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputReader in = new InputReader(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int x = in.nextInt();\n        int y = in.nextInt();\n        int z = in.nextInt();\n        int B = Math.min(y, z);\n        int C = Math.max(y, z);\n        prec(1000000);\n\n        long[] pow3 = new long[1000000];\n        pow3[0] = 1;\n        for (int i = 1 ; i < pow3.length; i++) {\n            pow3[i] = pow3[i-1] * 3 % MOD;\n        }\n        \n        long[] ans = new long[x+y+z+2];\n        long last = 0;\n        for (int l = x+1 ; l <= x+y+z+1 ; l++) {\n            int space = l-2;\n            long base = comb(space, x-1);\n            int row = space-(x-1);\n            if (row == 0) {\n                last = 1;\n            } else if (row <= B) {\n                last = (last * 2) % MOD;\n            } else if (row <= C) {\n                last = (last * 2 - comb(row-1, B) + MOD) % MOD;\n            } else {\n                int d = (row-1)-C;\n                last = (last * 2 - comb(row-1, B) - comb(row-1, d) + MOD + MOD) % MOD;\n            }\n            ans[l] = base * last % MOD * pow3[x+y+z+1-l] % MOD;\n        }\n\n        long sum = 0;\n        for (int i = 0; i < ans.length ; i++) {\n            sum += ans[i];\n        }\n        out.println(sum % MOD);\n        out.flush();\n    }\n\n    static final int MOD = 1000000007;\n\n    static long pow(long a, long x) {\n        long res = 1;\n        while (x > 0) {\n            if (x % 2 != 0) {\n            res = (res * a) % MOD;\n            }\n            a = (a * a) % MOD;\n            x /= 2;\n        }\n        return res;\n    }\n\n    static long inv(long a) {\n        return pow(a, MOD - 2) % MOD;\n    }\n\n    static long[] _fact;\n    static long[] _invfact;\n    static long comb(long ln, long lr) {\n        int n = (int)ln;\n        int r = (int)lr;\n        if (n < 0 || r < 0 || r > n) {\n            return 0;\n        }\n        if (r > n / 2) {\n            r = n - r;\n        }\n        return (((_fact[n] * _invfact[n - r]) % MOD) * _invfact[r]) % MOD;\n    }\n\n    static void prec(int n) {\n        _fact = new long[n + 1];\n        _invfact = new long[n + 1];\n        _fact[0] = 1;\n        _invfact[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            _fact[i] = _fact[i - 1] * i % MOD;\n            _invfact[i] = inv(_fact[i]);\n        }\n    }\n\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        private int[] nextInts(int n) {\n            int[] ret = new int[n];\n            for (int i = 0; i < n; i++) {\n                ret[i] = nextInt();\n            }\n            return ret;\n        }\n\n\n        private int[][] nextIntTable(int n, int m) {\n            int[][] ret = new int[n][m];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    ret[i][j] = nextInt();\n                }\n            }\n            return ret;\n        }\n\n        private long[] nextLongs(int n) {\n            long[] ret = new long[n];\n            for (int i = 0; i < n; i++) {\n                ret[i] = nextLong();\n            }\n            return ret;\n        }\n\n        private long[][] nextLongTable(int n, int m) {\n            long[][] ret = new long[n][m];\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    ret[i][j] = nextLong();\n                }\n            }\n            return ret;\n        }\n\n        private double[] nextDoubles(int n) {\n            double[] ret = new double[n];\n            for (int i = 0; i < n; i++) {\n                ret[i] = nextDouble();\n            }\n            return ret;\n        }\n\n        private int next() {\n            if (numChars == -1)\n                throw new InputMismatchException();\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0)\n                    return -1;\n            }\n            return buf[curChar++];\n        }\n\n        public char nextChar() {\n            int c = next();\n            while (isSpaceChar(c))\n                c = next();\n            if ('a' <= c && c <= 'z') {\n                return (char) c;\n            }\n            if ('A' <= c && c <= 'Z') {\n                return (char) c;\n            }\n            throw new InputMismatchException();\n        }\n\n        public String nextToken() {\n            int c = next();\n            while (isSpaceChar(c))\n                c = next();\n            StringBuilder res = new StringBuilder();\n            do {\n                res.append((char) c);\n                c = next();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public int nextInt() {\n            int c = next();\n            while (isSpaceChar(c))\n                c = next();\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = next();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9')\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c-'0';\n                c = next();\n            } while (!isSpaceChar(c));\n            return res*sgn;\n        }\n\n        public long nextLong() {\n            int c = next();\n            while (isSpaceChar(c))\n                c = next();\n            long sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = next();\n            }\n            long res = 0;\n            do {\n                if (c < '0' || c > '9')\n                    throw new InputMismatchException();\n                res *= 10;\n                res += c-'0';\n                c = next();\n            } while (!isSpaceChar(c));\n            return res*sgn;\n        }\n\n        public double nextDouble() {\n            return Double.valueOf(nextToken());\n        }\n\n        public boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n        }\n    }\n\n    static void debug(Object... o) {\n        System.err.println(Arrays.deepToString(o));\n    }\n}\nGicen the following input:\n1 1 1\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "17\n",
        "predict": "0\nEND-OF-OUTPUT"
    }
}