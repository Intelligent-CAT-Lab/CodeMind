1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.*;
6 
7 public class Main {
8     static InputStream is;
9     static PrintWriter out;
10     static String INPUT = "";
11 
12     static void solve()
13     {
14         String s = ns();
15         int l = s.length();
16 
17         if (l % 2 == 0 ^ s.charAt(0) == s.charAt(l - 1)) {
18             out.println("Second");
19         } else {
20             out.println("First");
21         }
22     }
23 
24     public static void main(String[] args) throws Exception
25     {
26         long S = System.currentTimeMillis();
27         is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
28         out = new PrintWriter(System.out);
29 
30         solve();
31         out.flush();
32         long G = System.currentTimeMillis();
33         tr(G-S+"ms");
34     }
35 
36     private static boolean eof()
37     {
38         if(lenbuf == -1)return true;
39                     int lptr = ptrbuf;
40                     while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
41 
42                     try {
43                         is.mark(1000);
44                         while(true){
45                             int b = is.read();
46                             if(b == -1){
47                                 is.reset();
48                                 return true;
49                             }else if(!isSpaceChar(b)){
50                     is.reset();
51                     return false;
52                 }
53             }
54         } catch (IOException e) {
55             return true;
56         }
57     }
58 
59     private static byte[] inbuf = new byte[1024];
60     static int lenbuf = 0, ptrbuf = 0;
61 
62     private static int readByte()
63     {
64         if(lenbuf == -1)throw new InputMismatchException();
65         if(ptrbuf >= lenbuf){
66             ptrbuf = 0;
67             try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
68             if(lenbuf <= 0)return -1;
69         }
70         return inbuf[ptrbuf++];
71     }
72 
73     private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
74 
75     private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
76 
77     private static double nd() { return Double.parseDouble(ns()); }
78     private static char nc() { return (char)skip(); }
79 
80     private static String ns()
81     {
82         int b = skip();
83         StringBuilder sb = new StringBuilder();
84         while(!(isSpaceChar(b))){
85             sb.appendCodePoint(b);
86             b = readByte();
87         }
88         return sb.toString();
89     }
90 
91     private static char[] ns(int n)
92     {
93         char[] buf = new char[n];
94         int b = skip(), p = 0;
95         while(p < n && !(isSpaceChar(b))){
96             buf[p++] = (char)b;
97             b = readByte();
98         }
99         return n == p ? buf : Arrays.copyOf(buf, p);
100     }
101 
102     private static char[][] nm(int n, int m)
103     {
104         char[][] map = new char[n][];
105         for(int i = 0;i < n;i++)map[i] = ns(m);
106         return map;
107     }
108 
109     private static int[] na(int n)
110     {
111         int[] a = new int[n];
112         for(int i = 0;i < n;i++)a[i] = ni();
113         return a;
114     }
115 
116     private static int ni()
117     {
118         int num = 0, b;
119         boolean minus = false;
120         while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
121         if(b == '-'){
122             minus = true;
123             b = readByte();
124         }
125 
126         while(true){
127             if(b >= '0' && b <= '9'){
128                 num = num * 10 + (b - '0');
129             }else{
130                 return minus ? -num : num;
131             }
132             b = readByte();
133         }
134     }
135 
136     private static long nl()
137     {
138         long num = 0;
139         int b;
140         boolean minus = false;
141         while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
142         if(b == '-'){
143             minus = true;
144             b = readByte();
145         }
146 
147         while(true){
148             if(b >= '0' && b <= '9'){
149                 num = num * 10 + (b - '0');
150             }else{
151                 return minus ? -num : num;
152             }
153             b = readByte();
154         }
155     }
156 
157     private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
158 }
