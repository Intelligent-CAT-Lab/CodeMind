1 /*
2 ......................................................................................................................................
3 .....................................  ________ ____ __________________________________________ .....................................
4 ..................................... /  _____/|    |   \      \__    ___/\_   _____/\______   \.....................................
5 ...................................../   \  ___|    |   /   |   \|    |    |    __)_  |       _/.....................................
6 .....................................\    \_\  \    |  /    |    \    |    |        \ |    |   \.....................................
7 ..................................... \______  /______/\____|__  /____|   /_______  / |____|_  /.....................................
8 .....................................        \/                \/                 \/         \/ .....................................
9 ......................................................................................................................................
10 .............................................................,;'';:...................................................................
11 ........................................................+@@@@@@@@@@@@@@'..............................................................
12 .....................................................#@@@##############@@@:...........................................................
13 ...................................................@@@####################@@,.........................................................
14 .................................................@@#########################@@........................................................
15 ...............................................:@############################@@.......................................................
16 ..............................................@@######@@@#';;'#@@@############@@:.....................................................
17 .............................................@#####@@,````````````,@@###########@:....................................................
18 ............................................@####@;``````````````````+@##########@....................................................
19 ...........................................@###@:``````````````````````#@########@@...................................................
20 ..........................................@####``````````````````````````@########@@..................................................
21 .........................................###@.````````````````````````````@########@+.................................................
22 .........................................@#@```````````````````````````````#########@.................................................
23 ........................................@#@`````````````````````````````````########@@................................................
24 .......................................,@@```````````````````````````````````@#######@:...............................................
25 .......................................@@`````````````````````````````````````@#######@...............................................
26 .......................................@:````````````````````#@@'``````````````@######@+..............................................
27 ......................................#@```````````````````@@@@@@@#````````````########@..............................................
28 ......................................@```````````````````@@@@@@@@@@````````````@######@+.............................................
29 ......................................@``````````````````@@@@@@@+   +```````````+#######@.............................................
30 .....................................;:``````````````````@@@@@@@    @````````````@######@'............................................
31 .....................................@``````````````````:@@@@@@@    @````````````@#######@............................................
32 .....................................@```,@@@#``````````;@@@@@@@    @````````````:#######@:...........................................
33 .....................................@``@@@@@@@@````````.@@@@@@@#  ,#`````````````@#######@...........................................
34 .....................................@`@@@@@@@+'@````````@@@@@@@@@@@``````````````@#######@...........................................
35 .....................................@,@@@@@@   ,```:+:``:@@@@@@@@@.``````````````@########@..........................................
36 .....................................#@@@@@@@  ;@@#;,,,@``:@@@@@@@````````````````#########@..........................................
37 .....................................+@@@@@@@@',,,,,,,,;,```.'+;``````````````````'########@;.........................................
38 .....................................'@@@@',,,,,,,,,,,,,@`````````````````````````:#########@.........................................
39 ....................................:@#,,,,,:;;;;;:,,,,,@`````````````````````````.#########@.........................................
40 .................................:@#@@@@#++';;;;;;;;;;;;@``````````````````````````##########+........................................
41 ...............................#@#+;;;;;;;;;;;;;;;;;;;;':``````````````````````````##########@........................................
42 ....................................,@#@@@@@#+'';;;;;+@#```````````````````````````##########@........................................
43 .....................................@``````````.,,,.``````````````````````````````############.......................................
44 .....................................@`````````````````````````````````````````````#######+'+#@.......................................
45 .....................................@`````````````````````````````````````````````##########'@.......................................
46 .....................................#`````````````````````````````````````````````############@#.....................................
47 .....................................:.````````````````````````````````````````````##############@,...................................
48 ......................................+```````````````````````````````````````````.###############@#..................................
49 ......................................@```````````````````````````````````````````.################@@.................................
50 ......................................@```````````````````````````````````````````.###+##############@................................
51 ......................................@```````````````````````````````````````````.###+###############@...............................
52 ......................................',``````````````````````````````````````````.####'##############@@..............................
53 .......................................@```````````````````````````````````````````#####+##############@:.............................
54 .......................................@```````````````````````````````````````````#####'###############@.............................
55 .......................................@```````````````````````````````````````````######'################............................
56 .......................................#,``````````````````````````````````````````#######'##############@............................
57 ........................................@``````````````````````````````````````````@######++##############+...........................
58 ........................................@``````````````````````````````````````````@#######'##############@...........................
59 ........................................@``````````````````````````````````````````@########'#############@...........................
60 .......................................@#'`````````````````````````````````````````@#########'##############..........................
61 .......................................@#@`````````````````````````````````````````+#########+'############@..........................
62 ......................................@##@`````````````````````````````````````````.##########+'###########@..........................
63 ......................................@##@:`````````````````````````````````````````###########+'###########..........................
64 .....................................:@###@`````````````````````````````````````````@###########+'+#########,.........................
65 .....................................@####@`````````````````````````````````````````@#############''########..........................
66 .....................................@####@.````````````````````````````````````````;##############+'######@..........................
67 .....................................@#####@`````````````````````````````````````````################@@@###+..........................
68 .....................................@#####@`````````````````````````````````````````@###############@..;;............................
69 ....................................,@#####@.````````````````````````````````````````+################'...............................
70 ....................................:#######@`````````````````````````````````````````################@...............................
71 ....................................:#######@`````````````````````````````````````````@###############@...............................
72 ....................................,@#######,````````````````````````````````````````:###############@...............................
73 .....................................@######@@`````````````````````````````````````````@##############@...............................
74 .....................................@######@@`````````````````````````````````````````+##############@...............................
75 .....................................@#####@,;;`````````````````````````````````````````@#############@...............................
76 .....................................@####@@..@`````````````````````````````````````````+#############@...............................
77 .....................................,####@...@``````````````````````````````````````````@############+...............................
78 ......................................@##@.....@`````````````````````````````````````````:###########@,...............................
79 .......................................@+......@``````````````````````````````````````````@##########@................................
80 ...............................................:#``````````````````````````````````````````##########@................................
81 ................................................@``````````````````````````````````````````+########@,................................
82 ................................................'+``````````````````````````````````````````@#######@.................................
83 .................................................@```````````````````````````````````````````@#####@:.................................
84 .................................................'#``````````````````````````````````````````.#####@..................................
85 ..................................................@```````````````````````````````````````````;###@...................................
86 ...................................................@```````````````````````````````````````````+#@'...................................
87 ...................................................'#```````````````````````````````````````````@#....................................
88 ....................................................##`````````````````````````````````````````@#.....................................
89 .....................................................#@```````````````````````````````````````@+......................................
90 ......................................................:@;```````````````````````````````````;@,.......................................
91 .......................................................;@@'```````````````````````````````:@@+;.......................................
92 .......................................................@,,'@@'``````````````````````````@@@,,,@.......................................
93 ......................................................@,,,,,,'@@@@;````````````````.+@@@;,,,,,@.......................................
94 ......................................................#@+@,,,,,,,,+@@@@@@@@@@@@@@@@@;,,,,,'@@@........................................
95 .........................................................+,,,#',,@@..............@,,,,,,,,@...........................................
96 ..........................................................@@@,#@@,...............:+,,,'@,,@...........................................
97 ..................................................................................@,,,@.##............................................
98 ...................................................................................@;@................................................
99 ....................................................................................:.................................................
100 ......................................................................................................................................
101 ......................................................................................................................................
102  */
103 import java.io.IOException;
104 import java.io.InputStream;
105 import java.math.BigInteger;
106 import java.util.*;
107 import java.util.List;
108 import java.util.stream.Collectors;
109 import java.util.stream.IntStream;
110 import java.util.stream.Stream;
111 
112 import static java.lang.Math.max;
113 import static java.lang.Math.min;
114 import static java.lang.Math.pow;
115 import static java.lang.Math.abs;
116 
117 import static java.lang.String.format;
118 
119 
120 public class Main {
121     final static int INF = Integer.MAX_VALUE>>1;
122     final static int MOD = 1_000_000_007;
123     final static int[] dx4 = { 0, 1, 0, -1 };
124     final static int[] dy4 = { 1, 0, -1, 0 };
125     final static int[] dx8 = {0, 1, 1,  1,  0, -1, -1, -1};
126     final static int[] dy8 = {1, 1, 0, -1, -1, -1, 0, 1};
127     public static void main(String[] args) {
128         Scanner sc=new Scanner();
129         int n=sc.nextInt();
130         int k=sc.nextInt();
131         long ans=0;
132         for (long b = k+1; b <= n; b++) {
133             ans+=(n/b)*(b-k)+max(0,(n%b)-k+1)-((k==0)?1:0);
134         }
135         put(ans);
136 
137     }
138 
139 
140     public static void print(Object object){
141         System.out.print(object);
142     }
143     public static void put(Object object) {
144         System.out.println(object);
145     }
146     public static void put(){
147         System.out.println();
148     }
149 
150     public static void printE(Object object){
151         System.err.print("DEBUG:"+object);
152     }
153     public static void putE(Object object){
154         System.err.println("DEBUG:"+object);
155     }
156     public static void putE(){
157         System.err.println("DEBUG:");
158     }
159 
160     public static void print(String format,Object... args){
161         System.out.print(String.format(format,args));
162     }
163     public static void put(String format,Object... args) {
164         System.out.println(String.format(format,args));
165     }
166     public static void printE(String format,Object... args){
167         System.err.print("DEBUG:"+String.format(format,args));
168     }
169     public static void putE(String format,Object... args){
170         System.err.println("DEBUG:"+String.format(format,args));
171     }
172 
173     final static private class Scanner {
174         private final InputStream in = System.in;
175         private final byte[] buffer = new byte[1024];
176         private int ptr = 0;
177         private int buflen = 0;
178 
179         private boolean hasNextByte() {
180             if (ptr < buflen) {
181                 return true;
182             } else {
183                 ptr = 0;
184                 try {
185                     buflen = in.read(buffer);
186                 } catch (IOException e) {
187                     e.printStackTrace();
188                 }
189                 if (buflen <= 0) {
190                     return false;
191                 }
192             }
193             return true;
194         }
195 
196         private int readByte() {
197             if (hasNextByte())
198                 return buffer[ptr++];
199             else
200                 return -1;
201         }
202 
203         private boolean isPrintableChar(int c) {
204             return 33 <= c && c <= 126;
205         }
206 
207         public boolean hasNext() {
208             while (hasNextByte() && !isPrintableChar(buffer[ptr]))
209                 ptr++;
210             return hasNextByte();
211         }
212 
213         public String next() {
214             if (!hasNext())
215                 throw new NoSuchElementException();
216             StringBuilder sb = new StringBuilder();
217             int b = readByte();
218             while (isPrintableChar(b)) {
219                 sb.appendCodePoint(b);
220                 b = readByte();
221             }
222             return sb.toString();
223         }
224 
225         public long nextLong() {
226             if (!hasNext())
227                 throw new NoSuchElementException();
228             long n = 0;
229             boolean minus = false;
230             int b = readByte();
231             if (b == '-') {
232                 minus = true;
233                 b = readByte();
234             }
235             if (b < '0' || '9' < b) {
236                 throw new NumberFormatException();
237             }
238             while (true) {
239                 if ('0' <= b && b <= '9') {
240                     n *= 10;
241                     n += b - '0';
242                 } else if (b == -1 || !isPrintableChar(b)) {
243                     return minus ? -n : n;
244                 } else {
245                     throw new NumberFormatException();
246                 }
247                 b = readByte();
248             }
249         }
250 
251         public int nextInt() {
252             long nl = nextLong();
253             if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
254                 throw new NumberFormatException();
255             return (int) nl;
256         }
257 
258         public double nextDouble() {
259             return Double.parseDouble(next());
260         }
261     }
262     final static private class FixedIntPair {
263         final public int x, y;
264         final static public FixedIntPair ZEROS=new FixedIntPair(0,0);
265         FixedIntPair(int x, int y) {
266             this.x = x;
267             this.y = y;
268         }
269         public static double distance(FixedIntPair fip1,FixedIntPair fip2){
270             double x = (double) fip1.x - fip2.x;
271             double y = (double) fip1.y - fip2.y;
272             return Math.sqrt(x*x+y*y);
273         }
274 
275         @Override
276         public int hashCode() {
277             return x+y;
278         }
279 
280         @Override
281         public boolean equals(Object obj) {
282             boolean result=super.equals(obj);
283             if(obj.getClass()!=this.getClass()){
284                 return false;
285             }
286             FixedIntPair pair=(FixedIntPair) obj;
287             if(this.x==pair.x&&this.y==pair.y) return true;
288             return false;
289         }
290 
291         @Override
292         public String toString() {
293             return String.format(FixedIntPair.class.getSimpleName()+":(%d,%d)", x, y);
294         }
295     }
296     final static private class FixedLongPair {
297         final public long x, y;
298         final static public FixedLongPair ZEROS=new FixedLongPair(0,0);
299         FixedLongPair(long x, long y) {
300             this.x = x;
301             this.y = y;
302         }
303         public static double distance(FixedLongPair flp1,FixedLongPair flp2){
304             double x = (double) flp1.x - flp2.x;
305             double y = (double) flp1.y - flp2.y;
306             return Math.sqrt(x*x+y*y);
307         }
308 
309         @Override
310         public int hashCode() {
311             return (int)x+(int)y;
312         }
313 
314         @Override
315         public boolean equals(Object obj) {
316             boolean result=super.equals(obj);
317             if(obj.getClass()!=this.getClass()){
318                 return false;
319             }
320             FixedLongPair pair=(FixedLongPair)obj;
321             if(this.x==pair.x&&this.y==pair.y) return true;
322             return false;
323         }
324 
325         @Override
326         public String toString() {
327             return String.format(FixedLongPair.class.getSimpleName()+":(%d,%d)", x, y);
328         }
329     }
330     final static private class Binary{
331         public static String toZeroPadding(int i){
332             return String.format("%"+Integer.toBinaryString(-1).length()+"s",Integer.toBinaryString(i)).replace(' ','0');
333         }
334         public static String toZeroPadding(long i){
335             return String.format("%"+Long.toBinaryString(-1).length()+"s",Long.toBinaryString(i)).replace(' ','0');
336         }
337     }
338 
339     final static private class Util {
340         static long gcd(long a,long b){
341             //最大公約数　
342             if(a%b==0)return b;
343             return gcd(b,a%b);
344         }
345         static long lcm(long a,long b){
346             //最小公倍数
347             long gcd=gcd(a,b);
348             long result=b/gcd;
349             return a*result;
350         }
351         static <T extends Comparable<T>> Map<T,Integer> count(List<T> list){
352             //副作用
353             Collections.sort(list);
354             Map<T,Integer> result=new HashMap<>();
355             int l=0,r=0;
356             while(l<list.size()){
357                 while(r<list.size()-1&&list.get(r).equals(r+1)){
358                     r++;
359                 }
360                 result.put(list.get(r),r-l+1);
361                 r++;
362                 l=r;
363             }
364             return result;
365 
366         }
367         static Map<Integer,Integer> count(int[] array){
368             //副作用
369             Arrays.sort(array);
370             Map<Integer,Integer> result=new HashMap<>();
371             int l=0,r=0;
372             while(l<array.length){
373                 while(r<array.length-1&&array[r]==array[r+1]){
374                     r++;
375                 }
376                 result.put(array[l],r-l+1);
377                 r++;
378                 l=r;
379             }
380             return result;
381         }
382         static <T> String toStringBWS(Iterable<T> iterable){
383             Iterator<T> ite=iterable.iterator();
384             return toStringBWS(ite);
385         }
386         static <T> String toStringBWS(Iterator<T> ite){
387             StringBuilder sb=new StringBuilder();
388             sb.append(ite.next());
389             while(ite.hasNext()){
390                 sb.append(" ");
391                 sb.append(ite.next());
392             }
393             return sb.toString();
394         }
395         static long factoringInPrimeNumbers(long n,int[] a){
396             //素因数分解
397             for(int i=2;n>1&&i< a.length;i++){
398                 while(n%i==0){
399                     a[i]++;
400                     n/=i;
401                 }
402             }
403             return n;
404 
405         }
406         static boolean isValidCell(int i,int j,int h,int w){
407             return i>=0&&i<h&&j>=0&&j<w;
408         }
409     }
410 }
