{
    "0": {
        "prompt": "Consider the following code:\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author kessido\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        ESequenceGrowingHard solver = new ESequenceGrowingHard();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class ESequenceGrowingHard {\n        private long MOD;\n        private int k;\n        private int n;\n        private long[][] numberOfSequencesOfSizeIwithElementBiggerThenJ = new long[301][301];\n        private long[][] sumValue = new long[301][301];\n        private long[][] nChK = new long[301][301];\n\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            n = in.NextInt();\n            k = in.NextInt();\n            MOD = in.NextLong();\n            nChK = MathExtentions.preComputeNChooseK_MOD_Mod(n, MOD);\n            for (int j = k; j >= 0; j--) {\n                numberOfSequencesOfSizeIwithElementBiggerThenJ[0][j] = 1 % MOD;\n                numberOfSequencesOfSizeIwithElementBiggerThenJ[1][j] = (k - j) % MOD;\n            }\n            sumValue[0][k] = 1;\n            sumValue[1][k] = 0;\n\n            for (int j = k - 1; j >= 0; j--) {\n                sumValue[0][j] = (sumValue[0][j + 1] + numberOfSequencesOfSizeIwithElementBiggerThenJ[0][j]) % MOD;\n                sumValue[1][j] = (sumValue[1][j + 1] + numberOfSequencesOfSizeIwithElementBiggerThenJ[1][j]) % MOD;\n            }\n\n            for (int i = 2; i <= n; i++) {\n                for (int j = k - 1; j >= 0; j--) {\n                    long res = 0;\n                    for (int sizeToTheLeft = 0; sizeToTheLeft < i; sizeToTheLeft++) {\n                        long optionLeft = sumValue[sizeToTheLeft][j + 1];\n                        long optionRight = numberOfSequencesOfSizeIwithElementBiggerThenJ[i - 1 - sizeToTheLeft][j];\n                        long optionToAddToEachSide = nChK[i - 1][sizeToTheLeft];\n                        res = (res + ((((optionLeft * optionRight) % MOD) * optionToAddToEachSide) % MOD)) % MOD;\n                    }\n                    numberOfSequencesOfSizeIwithElementBiggerThenJ[i][j] = res;\n                    sumValue[i][j] = (sumValue[i][j + 1] + res) % MOD;\n                }\n            }\n            out.println(numberOfSequencesOfSizeIwithElementBiggerThenJ[n][0]);\n        }\n\n    }\n\n    static class InputReader {\n        BufferedReader reader;\n        StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine(), \" \\t\\n\\r\\f,\");\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int NextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public long NextLong() {\n            return Long.parseLong(next());\n        }\n\n    }\n\n    static class MathExtentions {\n        public static long[][] preComputeNChooseK_MOD_Mod(final int maxn, final long MOD) {\n            long[][] res = new long[maxn + 1][];\n            for (int i = 0; i <= maxn; i++) {\n                res[i] = new long[i + 1];\n                res[i][0] = 1;\n                res[i][i] = 1;\n            }\n            for (int i = 2; i < maxn; i++) {\n                for (int j = 1; j <= i >> 1; j++) {\n                    final long ress = (res[i - 1][j] + res[i - 1][j - 1]) % MOD;\n                    res[i][j] = ress;\n                    res[i][i - j] = ress;\n                }\n            }\n            return res;\n        }\n\n    }\n}\n\n\nWhat would be the output of the code execution given the following input:\n2 2 100\n \nPrint the answer and end your response with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "5\n"
    }
}