some text, as header of the file, sleep 1s 
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
Initializing jdb ...
> 
VM Started: No frames on the current call stack

main[1] > 
Step completed: "thread=main", Main.main(), line=20 bci=0
20    			input = new FileInputStream("input.txt");

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=21 bci=10
21    			output = new FileOutputStream("output.txt");

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
main[1] > 
Step completed: "thread=main", Main.main(), line=25 bci=20
25    		}

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
main[1] > 
Step completed: "thread=main", Main.main(), line=26 bci=32
26    		Kattio io = new Kattio(input, output);

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
main[1] > 
Step completed: "thread=main", Kattio.<init>(), line=173 bci=0
173    		super(new BufferedOutputStream(o));

main[1] Method arguments:
i = instance of java.io.FileInputStream(id=444)
o = instance of java.io.FileOutputStream(id=445)
Local variables:
main[1] > 
Step completed: "thread=main", Kattio.<init>(), line=174 bci=12
174    		r = new BufferedReader(new InputStreamReader(i));

main[1] Method arguments:
i = instance of java.io.FileInputStream(id=444)
o = instance of java.io.FileOutputStream(id=445)
Local variables:
main[1] > 
Step completed: "thread=main", Kattio.<init>(), line=175 bci=31
175    	}

main[1] Method arguments:
i = instance of java.io.FileInputStream(id=444)
o = instance of java.io.FileOutputStream(id=445)
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=26 bci=41
26    		Kattio io = new Kattio(input, output);

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
main[1] > 
Step completed: "thread=main", Main.main(), line=27 bci=42
27    		(new Solve(io)).main();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Solve.<init>(), line=58 bci=0
58    	Solve(Kattio io) {

main[1] Method arguments:
io = instance of Kattio(id=452)
Local variables:
main[1] > 
Step completed: "thread=main", Solve.<init>(), line=59 bci=4
59    		this.io = io;

main[1] Method arguments:
io = instance of Kattio(id=452)
Local variables:
main[1] > 
Step completed: "thread=main", Solve.<init>(), line=60 bci=9
60    	}

main[1] Method arguments:
io = instance of Kattio(id=452)
Local variables:
main[1] > 
Step completed: "thread=main", Main.main(), line=27 bci=50
27    		(new Solve(io)).main();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Solve.main(), line=126 bci=0
126    		n=io.getInt();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.getInt(), line=182 bci=0
182    		return Integer.parseInt(nextToken());

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=218 bci=0
218    		String ans = peekToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=203 bci=0
203    		if (token == null)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=205 bci=7
205    				while (st == null || !st.hasMoreTokens()) {

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=206 bci=24
206    					line = r.readLine();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=207 bci=35
207    					if (line == null)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=209 bci=44
209    					st = new StringTokenizer(line);

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=205 bci=7
205    				while (st == null || !st.hasMoreTokens()) {

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=211 bci=62
211    				token = st.nextToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=213 bci=73
213    			}

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=214 bci=77
214    		return token;

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=218 bci=4
218    		String ans = peekToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=219 bci=5
219    		token = null;

main[1] Method arguments:
Local variables:
ans = "2"
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=220 bci=10
220    		return ans;

main[1] Method arguments:
Local variables:
ans = "2"
main[1] > 
Step completed: "thread=main", Kattio.getInt(), line=182 bci=4
182    		return Integer.parseInt(nextToken());

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=126 bci=8
126    		n=io.getInt();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=127 bci=11
127    		n*=2;

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=128 bci=21
128    		k=io.getInt();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.getInt(), line=182 bci=0
182    		return Integer.parseInt(nextToken());

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=218 bci=0
218    		String ans = peekToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=203 bci=0
203    		if (token == null)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=205 bci=7
205    				while (st == null || !st.hasMoreTokens()) {

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=211 bci=62
211    				token = st.nextToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=213 bci=73
213    			}

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.peekToken(), line=214 bci=77
214    		return token;

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=218 bci=4
218    		String ans = peekToken();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=219 bci=5
219    		token = null;

main[1] Method arguments:
Local variables:
ans = "0"
main[1] > 
Step completed: "thread=main", Kattio.nextToken(), line=220 bci=10
220    		return ans;

main[1] Method arguments:
Local variables:
ans = "0"
main[1] > 
Step completed: "thread=main", Kattio.getInt(), line=182 bci=4
182    		return Integer.parseInt(nextToken());

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=128 bci=29
128    		k=io.getInt();

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=129 bci=32
129    		a = new int[k+1];

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=130 bci=44
130    		b = new int[k+1];

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=131 bci=56
131    		f = new int[n+1];

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=133 bci=68
133    		Arrays.fill(f, 0);

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=135 bci=76
135    		for (int i=1; i<=k; i++)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=143 bci=142
143    		for (int i=1; i<=n; i++)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=144 bci=152
144    			f[i]+=f[i-1];

main[1] Method arguments:
Local variables:
i = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=143 bci=169
143    		for (int i=1; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=144 bci=152
144    			f[i]+=f[i-1];

main[1] Method arguments:
Local variables:
i = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=143 bci=169
143    		for (int i=1; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=144 bci=152
144    			f[i]+=f[i-1];

main[1] Method arguments:
Local variables:
i = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=143 bci=169
143    		for (int i=1; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=144 bci=152
144    			f[i]+=f[i-1];

main[1] Method arguments:
Local variables:
i = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=143 bci=169
143    		for (int i=1; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=146 bci=175
146    		dp = new Long[n+1][n+1];

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=195
148    		for (int i=0; i<=n; i++)

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=149 bci=205
149    			Arrays.fill(dp[i], new Long("-1"));

main[1] Method arguments:
Local variables:
i = 0
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=223
148    		for (int i=0; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 0
main[1] > 
Step completed: "thread=main", Solve.main(), line=149 bci=205
149    			Arrays.fill(dp[i], new Long("-1"));

main[1] Method arguments:
Local variables:
i = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=223
148    		for (int i=0; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=149 bci=205
149    			Arrays.fill(dp[i], new Long("-1"));

main[1] Method arguments:
Local variables:
i = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=223
148    		for (int i=0; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=149 bci=205
149    			Arrays.fill(dp[i], new Long("-1"));

main[1] Method arguments:
Local variables:
i = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=223
148    		for (int i=0; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=149 bci=205
149    			Arrays.fill(dp[i], new Long("-1"));

main[1] Method arguments:
Local variables:
i = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=148 bci=223
148    		for (int i=0; i<=n; i++)

main[1] Method arguments:
Local variables:
i = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=151 bci=229
151    		memoWaysToPair = new Long[n+1];

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=152 bci=242
152    		Arrays.fill(memoWaysToPair, new Long("-1"));

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=154 bci=258
154    		Long res = new Long(0);

main[1] No local variables
main[1] > 
Step completed: "thread=main", Solve.main(), line=155 bci=267
155    		for (int x=1; x<=n; x++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=277
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
y = 1
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
y = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
y = 1
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 1
y = 1
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 1
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=67 bci=28
67    		if (x%2==1) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=68 bci=35
68    			memoWaysToPair[x]=new Long(0);

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=76 bci=101
76    		return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 1
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 1
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 1
y = 1
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
y = 1
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=67 bci=28
67    		if (x%2==1) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=68 bci=35
68    			memoWaysToPair[x]=new Long(0);

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=76 bci=101
76    		return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=456)
x = 1
y = 1
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 2
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 2
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 1
y = 2
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 2
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=67 bci=28
67    		if (x%2==1) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=70 bci=52
70    		if (x==0)

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=73 bci=73
73    			memoWaysToPair[x]=waysToPair(x-2)*(x-1)%mod;

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=67 bci=28
67    		if (x%2==1) 

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=70 bci=52
70    		if (x==0)

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=71 bci=56
71    			memoWaysToPair[x]=new Long(1);

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=76 bci=101
76    		return memoWaysToPair[x];

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=73 bci=85
73    			memoWaysToPair[x]=waysToPair(x-2)*(x-1)%mod;

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=76 bci=101
76    		return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 2
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 2
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 1
y = 2
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 2
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=458)
x = 1
y = 2
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=149
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=166
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=169
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=194
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=203
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=220
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
z = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 1
y = 3
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 4
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 4
notPairedOutSideXY = 0
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 1
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=67 bci=28
67    		if (x%2==1) 

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=70 bci=52
70    		if (x==0)

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=73 bci=73
73    			memoWaysToPair[x]=waysToPair(x-2)*(x-1)%mod;

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=73 bci=85
73    			memoWaysToPair[x]=waysToPair(x-2)*(x-1)%mod;

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=76 bci=101
76    		return memoWaysToPair[x];

main[1] Method arguments:
x = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=149
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=166
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=169
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
notPairedinZY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=194
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
notPairedinZY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=203
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
notPairedinZY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=220
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=149
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=166
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=169
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 1
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=194
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=203
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=220
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
z = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 1
y = 4
Local variables:
notPairedinXY = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 4
notPairedOutSideXY = 0
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 0
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=459)
x = 1
y = 4
notPairedOutSideXY = 0
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 1
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=155 bci=358
155    		for (int x=1; x<=n; x++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=277
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 2
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 2
y = 2
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 2
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 2
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 2
y = 2
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 2
y = 2
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 3
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 3
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 2
y = 3
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 3
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 3
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 2
y = 3
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 2
y = 3
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 3
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=460)
x = 2
y = 3
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 2
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 2
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 2
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=149
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=115 bci=166
115    			int notPairedinZY = (y-(z+1)+1)-paired(z+1,y);

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=169
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 2
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=194
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=116 bci=203
116    			dp[x][y]=(dp[x][y]-caldp(x,z)*waysToPair(notPairedinZY)+mod*mod)%mod;

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
notPairedinZY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=220
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
z = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 2
y = 4
Local variables:
notPairedinXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
notPairedOutSideXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=155 bci=358
155    		for (int x=1; x<=n; x++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=277
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 3
y = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 3
y = 3
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 3
y = 3
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 3
y = 3
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 3
y = 3
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 3
y = 3
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 4
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 4
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 3
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 3
y = 4
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 3
y = 4
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 3
y = 4
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 3
y = 4
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 3
y = 4
Local variables:
notPairedinXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 4
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 2
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=461)
x = 3
y = 4
notPairedOutSideXY = 2
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 3
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=155 bci=358
155    		for (int x=1; x<=n; x++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=277
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=287
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=158 bci=312
158    				int notPairedOutSideXY = (n-(y-x+1))-(f[n]-paired(x,y));

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=316
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=92 bci=0
92    		if (!dp[x][y].equals(new Long("-1"))) return dp[x][y];

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=32
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.paired(), line=82 bci=0
82    		return f[y]-f[x-1];

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=94 bci=43
94    		int notPairedinXY = (y-x+1)-paired(x,y);

main[1] Method arguments:
x = 4
y = 4
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=98 bci=45
98    		for (int i=1; i<=k; i++)

main[1] Method arguments:
x = 4
y = 4
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=125
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 4
y = 4
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 1
Local variables:
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=109 bci=137
109    		dp[x][y]=waysToPair(notPairedinXY);

main[1] Method arguments:
x = 4
y = 4
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=113 bci=138
113    		for (int z=x+1; z<y; z++)

main[1] Method arguments:
x = 4
y = 4
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.caldp(), line=121 bci=226
121    		return dp[x][y];

main[1] Method arguments:
x = 4
y = 4
Local variables:
notPairedinXY = 1
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=326
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=64 bci=0
64    		if (!memoWaysToPair[x].equals(new Long("-1"))) 

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.waysToPair(), line=65 bci=21
65    			return memoWaysToPair[x];

main[1] Method arguments:
x = 3
Local variables:
main[1] > 
Step completed: "thread=main", Solve.main(), line=159 bci=335
159    				res=(res+caldp(x,y)*waysToPair(notPairedOutSideXY)%mod)%mod;

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
notPairedOutSideXY = 3
main[1] > 
Step completed: "thread=main", Solve.main(), line=156 bci=352
156    			for (int y=x; y<=n; y++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
y = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=155 bci=358
155    		for (int x=1; x<=n; x++)

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
x = 4
main[1] > 
Step completed: "thread=main", Solve.main(), line=162 bci=364
162    		io.print(res);

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
main[1] > 
Step completed: "thread=main", Solve.main(), line=163 bci=372
163    	}

main[1] Method arguments:
Local variables:
res = instance of java.lang.Long(id=462)
main[1] > 
Step completed: "thread=main", Main.main(), line=28 bci=53
28    		io.close();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=30 bci=57
30    		if (input instanceof FileInputStream)

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=32 bci=64
32    				input.close();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=35 bci=68
35    			}

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=36 bci=73
36    		if (output instanceof FileOutputStream)

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=38 bci=80
38    				output.close();

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=41 bci=84
41    			}

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > 
Step completed: "thread=main", Main.main(), line=42 bci=89
42    	}

main[1] Method arguments:
args = instance of java.lang.String[0] (id=443)
Local variables:
input = instance of java.io.FileInputStream(id=444)
output = instance of java.io.FileOutputStream(id=445)
io = instance of Kattio(id=452)
main[1] > No default thread specified: use the "thread" command first.
> 
The application exited
