1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.Arrays;
6 import java.util.InputMismatchException;
7 
8 public class Main {
9 	static InputStream is;
10 	static PrintWriter out;
11 	static String INPUT = "";
12 	
13 	static void solve()
14 	{
15 		int mod = 998244353;
16 		int n = ni(), K = ni();
17 		long ans = 0;
18 		{
19 			long[] dp = new long[K];
20 			dp[0] = 1;
21 			for(int i = 0;i < n;i++){
22 				long[] ndp = new long[K];
23 				for(int j = 0;j < K;j++){
24 					for(int k = 0;k < 3 && j+k < K;k++){
25 						ndp[j+k] += dp[j];
26 						ndp[j+k] %= mod;
27 					}
28 				}
29 				dp = ndp;
30 			}
31 			for(long v : dp)ans += v;
32 		}
33 //		tr(ans);
34 		// 2   2
35 		int[][] fif = enumFIF(10000, mod);
36 		for(int s = K+1;s < 2*K-1;s+=2){
37 			int u = s-K;
38 			if(u % 2 == 1)u++;
39 			int two = u/2 + (s-(K-1)) / 2;
40 			// s-two*2
41 			for(int i = (s-two*2+1)/2;i <= s-two*2;i++){
42 //				tr(i, s-two*2, two, s, C(i, s-two*2-i, mod, fif) * C(n, i+two, mod, fif));
43 				ans += C(i, s-two*2-i, mod, fif) * C(n, i+two, mod, fif);
44 				ans %= mod;
45 			}
46 		}
47 		if(K % 2 == 1){
48 			ans += pow(2, n, mod);
49 			{
50 				long[] dp = new long[K];
51 				dp[0] = 1;
52 				for(int i = 0;i < n;i++){
53 					long[] ndp = new long[K];
54 					for(int j = 0;j < K;j++){
55 						for(int k = 0;k < 2 && j+k < K;k++){
56 							ndp[j+k] += dp[j];
57 							ndp[j+k] %= mod;
58 						}
59 					}
60 					dp = ndp;
61 				}
62 				for(long v : dp)ans -= v;
63 			}
64 		}
65 		ans %= mod;
66 		if(ans < 0)ans += mod;
67 		out.println(ans);
68 	}
69 	
70 	public static long C(int n, int r, int mod, int[][] fif) {
71 		if (n < 0 || r < 0 || r > n)
72 			return 0;
73 		return (long) fif[0][n] * fif[1][r] % mod * fif[1][n - r] % mod;
74 	}
75 
76 	
77 	public static int[][] enumFIF(int n, int mod) {
78 		int[] f = new int[n + 1];
79 		int[] invf = new int[n + 1];
80 		f[0] = 1;
81 		for (int i = 1; i <= n; i++) {
82 			f[i] = (int) ((long) f[i - 1] * i % mod);
83 		}
84 		long a = f[n];
85 		long b = mod;
86 		long p = 1, q = 0;
87 		while (b > 0) {
88 			long c = a / b;
89 			long d;
90 			d = a;
91 			a = b;
92 			b = d % b;
93 			d = p;
94 			p = q;
95 			q = d - c * q;
96 		}
97 		invf[n] = (int) (p < 0 ? p + mod : p);
98 		for (int i = n - 1; i >= 0; i--) {
99 			invf[i] = (int) ((long) invf[i + 1] * (i + 1) % mod);
100 		}
101 		return new int[][] { f, invf };
102 	}
103 
104 	
105 	public static long pow(long a, long n, long mod) {
106 		//		a %= mod;
107 		long ret = 1;
108 		int x = 63 - Long.numberOfLeadingZeros(n);
109 		for (; x >= 0; x--) {
110 			ret = ret * ret % mod;
111 			if (n << 63 - x < 0)
112 				ret = ret * a % mod;
113 		}
114 		return ret;
115 	}
116 
117 	
118 	public static void main(String[] args) throws Exception
119 	{
120 		long S = System.currentTimeMillis();
121 		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
122 		out = new PrintWriter(System.out);
123 		
124 		solve();
125 		out.flush();
126 		long G = System.currentTimeMillis();
127 		tr(G-S+"ms");
128 	}
129 	
130 	private static boolean eof()
131 	{
132 		if(lenbuf == -1)return true;
133 		int lptr = ptrbuf;
134 		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
135 		
136 		try {
137 			is.mark(1000);
138 			while(true){
139 				int b = is.read();
140 				if(b == -1){
141 					is.reset();
142 					return true;
143 				}else if(!isSpaceChar(b)){
144 					is.reset();
145 					return false;
146 				}
147 			}
148 		} catch (IOException e) {
149 			return true;
150 		}
151 	}
152 	
153 	private static byte[] inbuf = new byte[1024];
154 	static int lenbuf = 0, ptrbuf = 0;
155 	
156 	private static int readByte()
157 	{
158 		if(lenbuf == -1)throw new InputMismatchException();
159 		if(ptrbuf >= lenbuf){
160 			ptrbuf = 0;
161 			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
162 			if(lenbuf <= 0)return -1;
163 		}
164 		return inbuf[ptrbuf++];
165 	}
166 	
167 	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
168 //	private static boolean isSpaceChar(int c) { return !(c >= 32 && c <= 126); }
169 	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
170 	
171 	private static double nd() { return Double.parseDouble(ns()); }
172 	private static char nc() { return (char)skip(); }
173 	
174 	private static String ns()
175 	{
176 		int b = skip();
177 		StringBuilder sb = new StringBuilder();
178 		while(!(isSpaceChar(b))){
179 			sb.appendCodePoint(b);
180 			b = readByte();
181 		}
182 		return sb.toString();
183 	}
184 	
185 	private static char[] ns(int n)
186 	{
187 		char[] buf = new char[n];
188 		int b = skip(), p = 0;
189 		while(p < n && !(isSpaceChar(b))){
190 			buf[p++] = (char)b;
191 			b = readByte();
192 		}
193 		return n == p ? buf : Arrays.copyOf(buf, p);
194 	}
195 	
196 	private static char[][] nm(int n, int m)
197 	{
198 		char[][] map = new char[n][];
199 		for(int i = 0;i < n;i++)map[i] = ns(m);
200 		return map;
201 	}
202 	
203 	private static int[] na(int n)
204 	{
205 		int[] a = new int[n];
206 		for(int i = 0;i < n;i++)a[i] = ni();
207 		return a;
208 	}
209 	
210 	private static int ni()
211 	{
212 		int num = 0, b;
213 		boolean minus = false;
214 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
215 		if(b == '-'){
216 			minus = true;
217 			b = readByte();
218 		}
219 		
220 		while(true){
221 			if(b >= '0' && b <= '9'){
222 				num = num * 10 + (b - '0');
223 			}else{
224 				return minus ? -num : num;
225 			}
226 			b = readByte();
227 		}
228 	}
229 	
230 	private static long nl()
231 	{
232 		long num = 0;
233 		int b;
234 		boolean minus = false;
235 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
236 		if(b == '-'){
237 			minus = true;
238 			b = readByte();
239 		}
240 		
241 		while(true){
242 			if(b >= '0' && b <= '9'){
243 				num = num * 10 + (b - '0');
244 			}else{
245 				return minus ? -num : num;
246 			}
247 			b = readByte();
248 		}
249 	}
250 	
251 	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
252 }
