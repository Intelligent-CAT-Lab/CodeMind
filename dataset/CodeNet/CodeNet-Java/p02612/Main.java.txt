1 import java.io.OutputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.StringTokenizer;
6 import java.io.IOException;
7 import java.io.BufferedReader;
8 import java.io.InputStreamReader;
9 import java.io.InputStream;
10 
11 /**
12  * Built using CHelper plug-in
13  * Actual solution is at the top
14  *
15  * @author shivam
16  */
17 public class Main {
18     public static void main(String[] args) {
19         InputStream inputStream = System.in;
20         OutputStream outputStream = System.out;
21         InputReader in = new InputReader(inputStream);
22         PrintWriter out = new PrintWriter(outputStream);
23         TaskA solver = new TaskA();
24         solver.solve(1, in, out);
25         out.close();
26     }
27 
28     static class TaskA {
29         public void solve(int testNumber, InputReader in, PrintWriter out) {
30             int n = in.nextInt();
31             int x = n / 1000;
32             int y = n % 1000;
33             if (y == 0) out.println(0);
34             else {
35                 int ans = 1000 * (x + 1) - n;
36                 out.println(ans);
37             }
38         }
39 
40     }
41 
42     static class InputReader {
43         public BufferedReader reader;
44         public StringTokenizer tokenizer;
45 
46         public InputReader(InputStream stream) {
47             reader = new BufferedReader(new InputStreamReader(stream), 32768);
48             tokenizer = null;
49         }
50 
51         public String next() {
52             while (tokenizer == null || !tokenizer.hasMoreTokens()) {
53                 try {
54                     tokenizer = new StringTokenizer(reader.readLine());
55                 } catch (IOException e) {
56                     throw new RuntimeException(e);
57                 }
58             }
59             return tokenizer.nextToken();
60         }
61 
62         public int nextInt() {
63             return Integer.parseInt(next());
64         }
65 
66     }
67 }
68 
