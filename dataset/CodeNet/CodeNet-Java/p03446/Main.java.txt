1 import java.io.*;
2 import java.math.BigInteger;
3 import java.util.*;
4 
5 public class Main {
6 
7 	void submit() {
8 		int a = nextInt();
9 		int b = nextInt();
10 		int c = nextInt();
11 		int d = nextInt();
12 		int e = nextInt();
13 		int f = nextInt();
14 
15 		if (d % a != 0 || e % b != 0 || f % c != 0) {
16 			out.println(0);
17 			return;
18 		}
19 
20 		int p = d / a;
21 		int q = e / b;
22 		int r = f / c;
23 
24 		int[][] dp = new int[p + 1][q + 1];
25 		dp[p][q] = 1;
26 
27 		int ans = 0;
28 
29 		for (int x = p - 1; x >= 1; x--) {
30 			for (int y = q - 1; y >= 1; y--) {
31 				dp[x][y] = (int) ((long) ways[p][x] * ways[q][y] % P
32 						* pow(c, (p - x) * (q - y)) % P);
33 
34 				for (int xb = x; xb <= p; xb++) {
35 					for (int yb = y; yb <= q; yb++) {
36 						if (xb + yb == x + y) {
37 							continue;
38 						}
39 						dp[x][y] -= (int) ((long) dp[xb][yb] * ways[xb][x] % P
40 								* ways[yb][y] % P);
41 						if (dp[x][y] < 0) {
42 							dp[x][y] += P;
43 						}
44 					}
45 				}
46 
47 				int foo = pow(b, x);
48 				int bar = pow(a, y);
49 
50 				int delta = 0;
51 
52 				delta += pow(Math.floorMod(foo + bar - 1, P), r);
53 				if (delta >= P) {
54 					delta -= P;
55 				}
56 
57 				delta -= pow(foo, r);
58 				if (delta < 0) {
59 					delta += P;
60 				}
61 
62 				delta -= pow(bar, r);
63 				if (delta < 0) {
64 					delta += P;
65 				}
66 
67 				delta++;
68 				if (delta >= P) {
69 					delta -= P;
70 				}
71 
72 				delta = (int) ((long) delta * dp[x][y] % P);
73 				ans += delta;
74 				if (ans >= P) {
75 					ans -= P;
76 				}
77 			}
78 		}
79 
80 		ans += (int) ((long) pow(one2D(a, p, b, q), r) * pow(a * b, r - 1) % P);
81 		if (ans >= P) {
82 			ans -= P;
83 		}
84 
85 		ans += (int) ((long) pow(one2D(b, q, c, r), p) * pow(b * c, p - 1) % P);
86 		if (ans >= P) {
87 			ans -= P;
88 		}
89 
90 		ans += (int) ((long) pow(one2D(c, r, a, p), q) * pow(c * a, q - 1) % P); // LOOOOOOOOOOOOOOL
91 		if (ans >= P) {
92 			ans -= P;
93 		}
94 
95 		ans -= pow(a, q * r - 1);
96 		if (ans < 0) {
97 			ans += P;
98 		}
99 
100 		ans -= pow(b, r * p - 1);
101 		if (ans < 0) {
102 			ans += P;
103 		}
104 
105 		ans -= pow(c, p * q - 1);
106 		if (ans < 0) {
107 			ans += P;
108 		}
109 
110 		ans++;
111 		if (ans >= P) {
112 			ans -= P;
113 		}
114 		ans = (int) ((long) ans * a % P * b % P * c % P);
115 
116 		out.println(ans);
117 	}
118 
119 	int one2D(int a, int p, int b, int q) {
120 		return Math.floorMod(pow(b, p - 1) + pow(a, q - 1) - 1, P);
121 	}
122 
123 	int pow(int a, int b) {
124 		int ret = 1;
125 		for (; b > 0; b >>= 1) {
126 			if ((b & 1) == 1) {
127 				ret = (int) ((long) ret * a % P);
128 			}
129 			a = (int) ((long) a * a % P);
130 		}
131 		return ret;
132 	}
133 
134 	static final int C = 110;
135 	static final int P = BigInteger.TEN.pow(9).intValueExact() + 7;
136 	int[][] ways;
137 
138 	void preCalc() {
139 		ways = new int[C][];
140 		for (int i = 0; i < C; i++) {
141 			ways[i] = new int[i + 1];
142 			ways[i][0] = ways[i][i] = 1;
143 			for (int j = 1; j < i; j++) {
144 				ways[i][j] = (ways[i - 1][j] + ways[i - 1][j - 1]) % P;
145 			}
146 		}
147 	}
148 
149 	void stress() {
150 
151 	}
152 
153 	void test() {
154 
155 	}
156 
157 	Main() throws IOException {
158 		br = new BufferedReader(new InputStreamReader(System.in));
159 		out = new PrintWriter(System.out);
160 		preCalc();
161 		submit();
162 		// stress();
163 		// test();
164 		out.close();
165 	}
166 
167 	static final Random rng = new Random();
168 
169 	static int rand(int l, int r) {
170 		return l + rng.nextInt(r - l + 1);
171 	}
172 
173 	public static void main(String[] args) throws IOException {
174 		new Main();
175 	}
176 
177 	BufferedReader br;
178 	PrintWriter out;
179 	StringTokenizer st;
180 
181 	String nextToken() {
182 		while (st == null || !st.hasMoreTokens()) {
183 			try {
184 				st = new StringTokenizer(br.readLine());
185 			} catch (IOException e) {
186 				throw new RuntimeException(e);
187 			}
188 		}
189 		return st.nextToken();
190 	}
191 
192 	String nextString() {
193 		try {
194 			return br.readLine();
195 		} catch (IOException e) {
196 			throw new RuntimeException(e);
197 		}
198 	}
199 
200 	int nextInt() {
201 		return Integer.parseInt(nextToken());
202 	}
203 
204 	long nextLong() {
205 		return Long.parseLong(nextToken());
206 	}
207 
208 	double nextDouble() {
209 		return Double.parseDouble(nextToken());
210 	}
211 }
