1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.*;
4  
5 public class Main implements Runnable {
6 	
7     public static void main(String[] args) {
8     	new Thread(null, new Main(), "", 16 * 1024 * 1024).start();
9     }
10     
11     public void run() {
12         FastScanner sc = new FastScanner();
13         
14         int n = sc.nextInt();
15         int k = sc.nextInt();
16         
17         Combinatrics c = new Combinatrics(k);
18 
19     	System.out.println(c.combination(k, n));
20     }
21 }
22 
23 
24 
25 class Combinatrics {
26 	
27 	static long mod = 1000000007; //逆元を取るので素数前提
28 	static long[] fact; //階乗のテーブル
29 	static long[] inv;	//逆元のテーブル
30 	static long[] finv; //階乗の逆元のテーブル
31 	
32 	public Combinatrics(int n){
33 		fact = new long[n+1];
34 		inv = new long[n+1];
35 		finv = new long[n+1];
36 	    fact[0] = fact[1] = 1;
37 	    finv[0] = finv[1] = 1;
38 	    inv[1] = 1;
39 	    for(int i=2;i<n+1; i++){
40 	        fact[i] = fact[i-1] * i % mod;
41 	        inv[i] = mod - inv[(int)mod%i] * (mod / i) % mod;
42 	        finv[i] = finv[i-1] * inv[i] % mod;
43 	    }
44 	}
45 	
46 	//逆元
47 	int inv(int n){
48 		return (int)inv[n];
49 	}
50 	
51 	//n!
52 	int factorial(int n){
53 		return (int)fact[n];
54 	}
55 	
56 	//n!の逆元
57 	int factInv(int n){
58 		return (int)finv[n];
59 	}
60 	
61 	//nCr（n個からr個選ぶ）
62     int combination(int n, int r) {
63         if(n<r|| r<0){
64         	return 0;
65         }
66         return (int)(fact[n]*finv[r]%mod*finv[n-r]%mod);
67     }
68 
69     //nPr (=n*(n-1)*...*(n-r+1))（n個からr個選んで並べる）
70     int permutation(int n, int r) {
71         if(n<r || r<0){
72         	return 0;
73         }
74         return (int)(fact[n]*finv[n-r]%mod);
75     }
76 
77     //nHr (=n+r-1Cr)（n個から重複を許してk個とる）
78     //（テーブルがn+r-1まで必要な事に注意！）
79     int homogeneous(int n, int r) {
80         if(n==0 && r==0){
81         	return 1;
82         }
83         return combination(n+r-1,r);
84     }
85 
86 }
87 
88 class FastScanner {
89 	private final InputStream in = System.in;
90 	private final byte[] buffer = new byte[1024];
91 	private int ptr = 0;
92 	private int buflen = 0;
93 	private boolean hasNextByte() {
94 		if (ptr < buflen) {
95 			return true;
96 		} else {
97 			ptr = 0;
98 			try {
99 				buflen = in.read(buffer);
100 			} catch (IOException e) {
101 				e.printStackTrace();
102 			}
103 			if (buflen <= 0) {
104 				return false;
105 			}
106 		}
107 		return true;
108 	}
109 	private int readByte() {
110 		if (hasNextByte())
111 			return buffer[ptr++];
112 		else
113 			return -1;
114 	}
115 	private static boolean isPrintableChar(int c) {
116 		return 33 <= c && c <= 126;
117 	}
118 	public boolean hasNext() {
119 		while (hasNextByte() && !isPrintableChar(buffer[ptr]))
120 			ptr++;
121 		return hasNextByte();
122 	}
123 	public String next() {
124 		if (!hasNext())
125 			throw new NoSuchElementException();
126 		StringBuilder sb = new StringBuilder();
127 		int b = readByte();
128 		while (isPrintableChar(b)) {
129 			sb.appendCodePoint(b);
130 			b = readByte();
131 		}
132 		return sb.toString();
133 	}
134 	public long nextLong() {
135 		if (!hasNext())
136 			throw new NoSuchElementException();
137 		long n = 0;
138 		boolean minus = false;
139 		int b = readByte();
140 		if (b == '-') {
141 			minus = true;
142 			b = readByte();
143 		}
144 		if (b < '0' || '9' < b) {
145 			throw new NumberFormatException();
146 		}
147 		while (true) {
148 			if ('0' <= b && b <= '9') {
149 				n *= 10;
150 				n += b - '0';
151 			} else if (b == -1 || !isPrintableChar(b)) {
152 				return minus ? -n : n;
153 			} else {
154 				throw new NumberFormatException();
155 			}
156 			b = readByte();
157 		}
158 	}
159 	public int nextInt() {
160 		long nl = nextLong();
161 		if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
162 			throw new NumberFormatException();
163 		return (int) nl;
164 	}
165 	public int[] nextIntArray(int n){
166 		int[] a = new int[n];
167 		for(int i=0;i<n;i++){
168 			a[i] = nextInt();
169 		}
170 		return a;
171 	}
172 	public Integer[] nextIntegerArray(int n){
173 		Integer[] a = new Integer[n];
174 		for(int i=0;i<n;i++){
175 			a[i] = nextInt();
176 		}
177 		return a;
178 	}
179 	public double nextDouble() {
180 		return Double.parseDouble(next());
181 	}
182 }
