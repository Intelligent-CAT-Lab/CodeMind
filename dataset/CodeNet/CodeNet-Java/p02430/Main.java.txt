1 import java.util.*;
2 import java.io.*;
3 
4 public class Main {
5 
6 	void solve (FastScanner in, PrintWriter out, Methods ms) {
7 		
8 		int n = in.nextInt(), k = in.nextInt();
9 		
10 		for (int bit=0; bit<(1<<n); bit++) {
11 			if (Integer.bitCount(bit) != k) continue;
12 			out.print(bit+":");
13 			for (int j=0; j<n; j++) {
14 				if (((bit>>j) & 1) == 1) {
15 					out.print(" "+j);
16 				}
17 			}
18 			out.println();
19 		}
20 		
21 	}
22 
23 
24 
25 	public static void main(String[] args) {
26 		Main main = new Main();
27 		FastScanner in = new FastScanner(System.in);
28 		PrintWriter out = new PrintWriter(System.out);
29 		Methods ms = new Methods();
30 		main.solve(in, out, ms);
31 		in.close();
32 		out.close();
33 	}
34 
35 	static class Methods {
36 
37 		public void print (Object... ar) {System.out.println(Arrays.deepToString(ar));}
38 
39 		public void yesno (PrintWriter out, boolean b) {out.println(b?"Yes":"No");}
40 
41 		public void YESNO (PrintWriter out, boolean b) {out.println(b?"YES":"NO");}
42 
43 		public int max (int... ar) {Arrays.sort(ar); return ar[ar.length-1];}
44 
45 		public int min (int... ar) {Arrays.sort(ar); return ar[0];}
46 
47 	}
48 
49 	static class FastScanner {
50 
51 		private InputStream in;
52 		private byte[] buffer = new byte[1024];
53 		private  int length = 0, p = 0;
54 
55 		public FastScanner (InputStream stream) {
56 			in = stream;
57 		}
58 
59 		public boolean hasNextByte () {
60 			if (p < length) return true;
61 			else {
62 				p = 0;
63 				try {length = in.read(buffer);}
64 				catch (Exception e) {e.printStackTrace();}
65 				if (length <= 0) return false;
66 			}
67 			return true;
68 		}
69 
70 		public int readByte () {
71 			if (hasNextByte() == true) return buffer[p++];
72 			return -1;
73 		}
74 
75 		public boolean isPrintable (int n) {return 33<=n&&n<=126;}
76 
77 		public void skip () {
78 			while (hasNextByte() && !isPrintable(buffer[p])) p++;
79 		}
80 
81 		public boolean hasNext () {skip(); return hasNextByte();}
82 
83 		public String next () {
84 			if (!hasNext()) throw new NoSuchElementException();
85 			StringBuilder sb = new StringBuilder();
86 			int t = readByte();
87 			while (isPrintable(t)) {
88 				sb.appendCodePoint(t);
89 				t = readByte();
90 			}
91 			return sb.toString();
92 		}
93 
94 		public String[] nextArray (int n) {
95 			String[] ar = new String[n];
96 			for (int i=0; i<n; i++) ar[i] = next();
97 			return ar;
98 		}
99 
100 		public int nextInt () {return Math.toIntExact(nextLong());}
101 
102 		public int[] nextIntArray (int n) {
103 			int[] ar = new int[n];
104 			for (int i=0; i<n; i++) ar[i] = nextInt();
105 			return ar;
106 		}
107 
108 		public long nextLong () {
109 			if (!hasNext()) throw new NoSuchElementException();
110 			boolean minus = false;
111 			int temp = readByte();
112 			if (temp == '-') {
113 				minus = true;
114 				temp = readByte();
115 			}
116 			if (temp<'0' || '9'<temp) throw new NumberFormatException();
117 			long n = 0;
118 			while (isPrintable(temp)) {
119 				if ('0'<=temp && temp<='9') {
120 					n *= 10;
121 					n += temp - '0';
122 				}
123 				else throw new NumberFormatException();
124 				temp = readByte();
125 			}
126 			return minus? -n : n;
127 		}
128 
129 		public long[] nextLongArray (int n) {
130 			long[] ar = new long[n];
131 			for (int i=0; i<n; i++) ar[i] = nextLong();
132 			return ar;
133 		}
134 
135 		public double nextDouble () {
136 			return Double.parseDouble(next());
137 		}
138 
139 		public double[] nextDoubleArray (int n) {
140 			double[] ar = new double[n];
141 			for (int i=0; i<n; i++) ar[i] = nextDouble();
142 			return ar;
143 		}
144 
145 		public void close () {
146 			try {in.close();}
147 			catch(Exception e){}
148 		}
149 
150 	}
151 
152 }
