{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\n//package BeginnerContest142;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static long MODULO = (long)1e9+7;\n\n    public static long gcd(long n, long m){\n        if(m == 0) return n;\n        return gcd(m, n % m);\n    }\n\n\n    public static HashSet<Long> factors(long n){ // returns a list of the prime factors of the number n\n        HashSet<Long> fact = new HashSet<>();\n        fact.add(1L);\n        for(long i = 2; i*i <= n; i++){\n            while(n % i == 0){\n                fact.add(i);\n                n/=i;\n            }\n        }\n        if(n > 1)\n            fact.add(n);\n        return fact;\n    }\n    // can also use sieve of eratosthenes for precomputing prime\n\n    public static void main(String[] args) throws IOException {\n        FastReader sc = new FastReader();\n        PrintWriter pw = new PrintWriter(System.out);\n        long a = sc.nextLong();\n        long b = sc.nextLong();\n        pw.println(factors(gcd(a,b)).size());\n        //pw.println(factors(gcd(a,b)));\n        pw.close();\n    }\n\n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastReader() {\n            br = new BufferedReader(new\n                    InputStreamReader(System.in));\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n}Gicen the following input:\n12 18\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "3\n"
    }
}