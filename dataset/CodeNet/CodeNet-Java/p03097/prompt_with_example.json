{
    "0": {
        "prompt": "Instructions: You will be presented a piece of Java code and its input. You need to print the output of the code.\nFor example:\nConsider the following code:\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scan=new Scanner(System.in);\n        int X =scan.nextInt();\n        switch(X%7){\n            case 4:\n                System.out.println(\"mon\");\n                break;\n            case 5:\n                System.out.println(\"tue\");\n                break;\n            case 6:\n                System.out.println(\"wed\");\n                break;\n            case 0:\n                System.out.println(\"thu\");\n                break;\n            case 1:\n                System.out.println(\"fri\");\n                break;\n            case 2:\n                System.out.println(\"sat\");\n                break;\n            case 3:\n                System.out.println(\"sun\");\n                break;    \n        }\n        \n    }\n\n}\n\nGien the following input:\n4\nPrint only the output of the code, ends with END-OF-OUTPUT:\nmon\nEND-OF-OUTPUT",
        "status": "NAN"
    },
    "1": {
        "prompt": "Consider the following code:\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n  private static int dropBit(int n, int index) {\n    int higher = (n >> (index + 1)) << index;\n    int lower = (n & ((1 << index) - 1));\n//    System.err.printf(\"n: %d, index: %d, higher: %d, lower: %d\\n\", n, index, higher, lower);\n    return higher | lower;\n  }\n  \n  private static int insertBit(int n, int index, int v) {\n    int higher = ((n >> index) << (index + 1));\n    int lower = (n & ((1 << index) - 1));\n    return higher | lower | v;\n  }\n  \n  private static List<Integer> solveSub(int n, int a, int b) {\n//    System.err.printf(\"n: %d, a: %d, b: %d\\n\", n, a, b);\n    if (n == 1) {\n      if (a != b) {\n        return Arrays.asList(a, b);\n      } else {\n        return null;\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      int aBit = (a >> i) & 1;\n      int bBit = (b >> i) & 1;\n      if (aBit != bBit) {\n        int aDash = dropBit(a, i);\n        int bDash = dropBit(b, i);\n//        System.err.printf(\"i: %d, aDash: %d, bDash: %d\\n\", i, aDash, bDash);\n        int c = aDash ^ 1;\n        List<Integer> path1 = solveSub(n - 1, aDash, c);\n        List<Integer> path2 = solveSub(n - 1, c, bDash);\n        if (path1 != null && path2 != null) {\n          List<Integer> path = new ArrayList<>();\n          for (int v : path1) {\n            path.add(insertBit(v, i, aBit << i));\n          }\n          for (int v : path2) {\n            path.add(insertBit(v, i, bBit << i));\n          }\n          return path;\n        }\n        return null;\n      }\n    }\n    return null;\n  }\n  \n  private static List<String> solve(int n, int a, int b) {\n    List<Integer> path = solveSub(n, a, b);\n    if (path == null) {\n      return Arrays.asList(\"NO\");\n    }\n    StringBuffer sb = new StringBuffer();\n    sb.append(path.get(0));\n    for (int i = 1; i < path.size(); i++) {\n      sb.append(\" \");\n      sb.append(path.get(i));\n    }\n    return Arrays.asList(\"YES\", sb.toString());\n  }\n  \n  private static void execute(ContestReader reader, PrintWriter out) {\n    int n = reader.nextInt();\n    int a = reader.nextInt();\n    int b = reader.nextInt();\n    for (String line : solve(n, a, b)) {\n      out.println(line);\n    }\n  }\n  \n  public static void main(String[] args) {\n    ContestReader reader = new ContestReader(System.in);\n    PrintWriter out = new PrintWriter(System.out);\n    execute(reader, out);\n    out.flush();\n  }\n}\n\nclass ContestReader {\n  private BufferedReader reader;\n  private StringTokenizer tokenizer;\n  \n  ContestReader(InputStream in) {\n    reader = new BufferedReader(new InputStreamReader(in));\n  }\n  \n  public String next() {\n    while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n      try {\n        tokenizer = new java.util.StringTokenizer(reader.readLine());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return tokenizer.nextToken();\n  }\n  \n  public int nextInt() {\n    return Integer.parseInt(next());\n  }\n  \n  public long nextLong() {\n    return Long.parseLong(next());\n  }\n  \n  public double nextDouble() {\n    return Double.parseDouble(next());\n  }\n  \n  public String[] next(int n) {\n    String[] array = new String[n];\n    for (int i = 0; i < n; i++) {\n      array[i] = next();\n    }\n    return array;\n  }\n  \n  public int[] nextInt(int n) {\n    int[] array = new int[n];\n    for (int i = 0; i < n; i++) {\n      array[i] = nextInt();\n    }\n    return array;\n  }\n  \n  public long[] nextLong(int n) {\n    long[] array = new long[n];\n    for (int i = 0; i < n; i++) {\n      array[i] = nextLong();\n    }\n    return array;\n  }\n  \n  public double[] nextDouble(int n) {\n    double[] array = new double[n];\n    for (int i = 0; i < n; i++) {\n      array[i] = nextDouble();\n    }\n    return array;\n  }\n  \n  public char[] nextCharArray() {\n    return next().toCharArray();\n  }\n  \n  public int[][] nextInt(int n, int m) {\n    int[][] matrix = new int[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        matrix[i][j] = nextInt();\n      }\n    }\n    return matrix;\n  }\n  \n  public long[][] nextLong(int n, int m) {\n    long[][] matrix = new long[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        matrix[i][j] = nextLong();\n      }\n    }\n    return matrix;\n  }\n  \n  public double[][] nextDouble(int n, int m) {\n    double[][] matrix = new double[n][m];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        matrix[i][j] = nextDouble();\n      }\n    }\n    return matrix;\n  }\n  \n  public char[][] nextCharArray(int n) {\n    char[][] matrix = new char[n][];\n    for (int i = 0; i < n; i++) {\n      matrix[i] = next().toCharArray();\n    }\n    return matrix;\n  }\n}\nGicen the following input:\n2 1 3\nPrint only the output of the code, ends with \"END-OF-OUTPUT\":",
        "status": "NAN",
        "gorund_truth": "YES\n1 0 2 3\n"
    }
}