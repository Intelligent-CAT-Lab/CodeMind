1 import java.io.IOException;
2 import java.io.InputStream;
3 import java.util.ArrayList;
4 import java.util.HashMap;
5 import java.util.HashSet;
6 import java.util.List;
7 import java.util.Map;
8 import java.util.Optional;
9 import java.util.Set;
10 import java.util.stream.IntStream;
11 
12 public class Main {
13 	public static void main(String[] args) {
14 		Main main = new Main();
15 		main.solve();
16 	}
17 
18 	private void solve() {
19 		Scanner sc = new Scanner(System.in);
20 		int A = sc.nextInt();
21 		int B = sc.nextInt();
22 		int H = sc.nextInt();
23 		int M = sc.nextInt();
24 		double a_x = 1.0 * A * Math.sin(Math.PI * 2 * (H * 60 + M) / 720);
25 		double b_x = 1.0 * B * Math.sin(Math.PI * 2 * M / 60);
26 		double a_y = 1.0 * A * Math.cos(Math.PI * 2 * (H * 60 + M) / 720);
27 		double b_y = 1.0 * B * Math.cos(Math.PI * 2 * M / 60);
28 		System.out.println(Math.sqrt((a_x - b_x) * (a_x - b_x) + (a_y - b_y) * (a_y - b_y)));
29 	}
30 
31 	class Scanner {
32 		private InputStream in;
33 		private byte[] buffer = new byte[1024];
34 		private int index;
35 		private int length;
36 
37 		public Scanner(InputStream in) {
38 			this.in = in;
39 		}
40 
41 		private boolean isPrintableChar(int c) {
42 			return '!' <= c && c <= '~';
43 		}
44 
45 		private boolean isDigit(int c) {
46 			return '0' <= c && c <= '9';
47 		}
48 
49 		private boolean hasNextByte() {
50 			if (index < length) {
51 				return true;
52 			} else {
53 				try {
54 					length = in.read(buffer);
55 					index = 0;
56 				} catch (IOException e) {
57 					e.printStackTrace();
58 				}
59 				return length > 0;
60 			}
61 		}
62 
63 		private boolean hasNext() {
64 			while (hasNextByte() && !isPrintableChar(buffer[index])) {
65 				index++;
66 			}
67 			return hasNextByte();
68 		}
69 
70 		private int readByte() {
71 			return hasNextByte() ? buffer[index++] : -1;
72 		}
73 
74 		public String next() {
75 			if (!hasNext()) {
76 				throw new RuntimeException("no input");
77 			}
78 			StringBuilder sb = new StringBuilder();
79 			int b = readByte();
80 			while (isPrintableChar(b)) {
81 				sb.appendCodePoint(b);
82 				b = readByte();
83 			}
84 			return sb.toString();
85 		}
86 
87 		public long nextLong() {
88 			if (!hasNext()) {
89 				throw new RuntimeException("no input");
90 			}
91 			long value = 0L;
92 			boolean minus = false;
93 			int b = readByte();
94 			if (b == '-') {
95 				minus = true;
96 				b = readByte();
97 			}
98 			while (isPrintableChar(b)) {
99 				if (isDigit(b)) {
100 					value = value * 10 + (b - '0');
101 				}
102 				b = readByte();
103 			}
104 			return minus ? -value : value;
105 		}
106 
107 		public int nextInt() {
108 			return (int)nextLong();
109 		}
110 
111 		public double nextDouble() {
112 			return Double.parseDouble(next());
113 		}
114 	}
115 
116 	interface CombCalculator {
117 		long comb(int n, int m);
118 	}
119 
120 	interface MobiusFunction {
121 		int get(int n);
122 	}
123 
124 	/**
125 	 * メビウス関数をエラトステネスの篩っぽく前計算するクラスです。
126 	 * 計算量はO(1)で、前計算でO(N logN)です。
127 	 */
128 	class SieveMobiusFunction implements MobiusFunction {
129 		int size;
130 		int[] mobiusFunctionValues;
131 
132 		public SieveMobiusFunction(int size) {
133 			this.size = size;
134 			mobiusFunctionValues = new int[size];
135 
136 			mobiusFunctionValues[0] = 0;
137 			mobiusFunctionValues[1] = 1;
138 			for (int i = 2; i < size; i++) {
139 				mobiusFunctionValues[i] = 1;
140 			}
141 			for (int i = 2; i * i < size; i++) {
142 				for (int k = 1; i * i * k < size; k++) {
143 					mobiusFunctionValues[i * i * k] *= 0;
144 				}
145 			}
146 
147 			for (int i = 2; i < size; i++) {
148 				if (mobiusFunctionValues[i] == 1) {
149 					for (int k = 1; i * k < size; k++) {
150 						mobiusFunctionValues[i * k] *= -2;
151 					}
152 				}
153 				if (mobiusFunctionValues[i] > 1) {
154 					mobiusFunctionValues[i] = 1;
155 				}
156 				if (mobiusFunctionValues[i] < -1) {
157 					mobiusFunctionValues[i] = -1;
158 				}
159 			}
160 		}
161 
162 		@Override
163 		public int get(int n) {
164 			if (n > size) {
165 				throw new RuntimeException("n is greater than size.");
166 			}
167 			if (n < 0) {
168 				return 0;
169 			}
170 			return mobiusFunctionValues[n];
171 		}
172 	}
173 
174 	/**
175 	 * メビウス関数を定義通り計算するクラスです。
176 	 * 計算量はO(logN)です。
177 	 */
178 	class PrimeFactorizationMobiusFunction implements MobiusFunction {
179 		@Override
180 		public int get(int n) {
181 			if (n <= 0) {
182 				return 0;
183 			}
184 			if (n == 1) {
185 				return 1;
186 			}
187 			int num = 0;
188 			for (int i = 2; i < n; i++) {
189 				if (n % i == 0) {
190 					n /= i;
191 					num++;
192 					if (n % i == 0) {
193 						return 0;
194 					}
195 				}
196 			}
197 			return num % 2 == 0 ? -1 : 1;
198 		}
199 	}
200 
201 	/**
202 	 * 組み合わせ計算を階乗の値で行うクラスです(MOD対応)
203 	 * 階乗とその逆元は前計算してテーブルに格納します。
204 	 * C(N, N) % M の計算量は O(1)、 前計算でO(max(N, logM))です。
205 	 * sizeを1e8より大きい値で実行するとMLEの危険性があります。
206 	 * また素数以外のMODには対応していません(逆元の計算に素数の剰余環の性質を利用しているため)。
207 	 */
208 	class FactorialTableCombCalculator implements CombCalculator {
209 		int size;
210 		long[] factorialTable;
211 		long[] inverseFactorialTable;
212 		long mod;
213 
214 		public FactorialTableCombCalculator(int size, long mod) {
215 			this.size = size;
216 			factorialTable = new long[size + 1];
217 			inverseFactorialTable = new long[size + 1];
218 			this.mod = mod;
219 
220 			factorialTable[0] = 1L;
221 			for (int i = 1; i <= size; i++) {
222 				factorialTable[i] = (factorialTable[i - 1] * i) % mod;
223 			}
224 			inverseFactorialTable[size] = inverse(factorialTable[size], mod);
225 			for (int i = size - 1; i >= 0; i--) {
226 				inverseFactorialTable[i] = (inverseFactorialTable[i + 1] * (i + 1)) % mod;
227 			}
228 		}
229 
230 		private long inverse(long n, long mod) {
231 			return pow(n, mod - 2, mod);
232 		}
233 
234 		private long pow(long n, long p, long mod) {
235 			if (p == 0) {
236 				return 1L;
237 			}
238 			long half = pow(n, p / 2, mod);
239 			long ret = (half * half) % mod;
240 			if (p % 2 == 1) {
241 				ret = (ret * n) % mod;
242 			}
243 			return ret;
244 		}
245 
246 		@Override
247 		public long comb(int n, int m) {
248 			if (n > size) {
249 				throw new RuntimeException("n is greater than size.");
250 			}
251 			if (n < 0 || m < 0 || n < m) {
252 				return 0L;
253 			}
254 			return (((factorialTable[n] * inverseFactorialTable[m]) % mod) * inverseFactorialTable[n - m]) % mod;
255 		}
256 	}
257 
258 	/**
259 	 * 組み合わせ計算をテーブルで実装したクラスです(MOD対応)
260 	 * 前計算でO(N^2), combはO(1)で実行できます
261 	 * sizeを2 * 1e4より大きい値で実行するとMLEの危険性があります
262 	 */
263 	class TableCombCalculator implements CombCalculator {
264 		long[][] table;
265 		int size;
266 
267 		public TableCombCalculator(int size, long mod) {
268 			this.size = size;
269 			table = new long[size + 1][];
270 
271 			table[0] = new long[1];
272 			table[0][0] = 1L;
273 			for (int n = 1; n <= size; n++) {
274 				table[n] = new long[n + 1];
275 				table[n][0] = 1L;
276 				for (int m = 1; m < n; m++) {
277 					table[n][m] = (table[n - 1][m - 1] + table[n - 1][m]) % mod;
278 				}
279 				table[n][n] = 1L;
280 			}
281 		}
282 
283 		@Override
284 		public long comb(int n, int m) {
285 			if (n > size) {
286 				throw new RuntimeException("n is greater than size.");
287 			}
288 			if (n < 0 || m < 0 || n < m) {
289 				return 0L;
290 			}
291 			return table[n][m];
292 		}
293 	}
294 
295 	interface Graph {
296 		void link(int from, int to, long cost);
297 		Optional<Long> getCost(int from, int to);
298 		int getVertexNum();
299 	}
300 
301 	interface FlowResolver {
302 		long maxFlow(int from, int to);
303 	}
304 
305 	/**
306 	 * グラフの行列による実装
307 	 * 接点数の大きいグラフで使うとMLEで死にそう
308 	 */
309 	class ArrayGraph implements Graph {
310 		private Long[][] costArray;
311 		private int vertexNum;
312 
313 		public ArrayGraph(int n) {
314 			costArray = new Long[n][];
315 			for (int i = 0; i < n; i++) {
316 				costArray[i] = new Long[n];
317 			}
318 			vertexNum = n;
319 		}
320 
321 		@Override
322 		public void link(int from, int to, long cost) {
323 			costArray[from][to] = new Long(cost);
324 		}
325 
326 		@Override
327 		public Optional<Long> getCost(int from, int to) {
328 			return Optional.ofNullable(costArray[from][to]);
329 		}
330 
331 		@Override
332 		public int getVertexNum() {
333 			return vertexNum;
334 		}
335 	}
336 
337 	/**
338 	 * DFS(深さ優先探索)による実装
339 	 * 計算量はO(E*MaxFlow)のはず (E:辺の数, MaxFlow:最大フロー)
340 	 */
341 	class DfsFlowResolver implements FlowResolver {
342 		private Graph graph;
343 		public DfsFlowResolver(Graph graph) {
344 			this.graph = graph;
345 		}
346 
347 		/**
348 		 * 最大フロー(最小カット)を求める
349 		 * @param from 始点(source)のID
350 		 * @param to 終点(target)のID
351 		 * @return 最大フロー(最小カット)
352 		 */
353 		public long maxFlow(int from, int to) {
354 			long sum = 0L;
355 			long currentFlow;
356 			do {
357 				currentFlow = flow(from, to, Long.MAX_VALUE / 3, new boolean[graph.getVertexNum()]);
358 				sum += currentFlow;
359 			} while (currentFlow > 0);
360 			return sum;
361 		}
362 
363 		/**
364 		 * フローの実行 グラフの更新も行う
365 		 * @param from 現在いる節点のID
366 		 * @param to 終点(target)のID
367 		 * @param current_flow ここまでの流量
368 		 * @param passed 既に通った節点か否かを格納した配列
369 		 * @return 終点(target)に流した流量/戻りのグラフの流量
370 		 */
371 		private long flow(int from, int to, long current_flow, boolean[] passed) {
372 			passed[from] = true;
373 			if (from == to) {
374 				return current_flow;
375 			}
376 			for (int id = 0; id < graph.getVertexNum(); id++) {
377 				if (passed[id]) {
378 					continue;
379 				}
380 				Optional<Long> cost = graph.getCost(from, id);
381 				if (cost.orElse(0L) > 0) {
382 					long nextFlow = current_flow < cost.get() ? current_flow : cost.get();
383 					long returnFlow = flow(id, to, nextFlow, passed);
384 					if (returnFlow > 0) {
385 						graph.link(from, id, cost.get() - returnFlow);
386 						graph.link(id, from, graph.getCost(id, from).orElse(0L) + returnFlow);
387 						return returnFlow;
388 					}
389 				}
390 			}
391 			return 0L;
392 		}
393 	}
394 
395 	/**
396 	 * 1-indexedのBIT配列
397 	 */
398 	class BinaryIndexedTree {
399 		private long[] array;
400 
401 		public BinaryIndexedTree(int size) {
402 			this.array = new long[size + 1];
403 		}
404 
405 		/**
406 		 * 指定した要素に値を加算する
407 		 * 計算量はO(logN)
408 		 * @param index 加算する要素の添字
409 		 * @param value 加算する量
410 		 */
411 		public void add(int index, long value) {
412 			for (int i = index; i < array.length; i += (i & -i)) {
413 				array[i] += value;
414 			}
415 		}
416 
417 		/**
418 		 * 1〜指定した要素までの和を取得する
419 		 * 計算量はO(logN)
420 		 * @param index 和の終端となる要素の添字
421 		 * @return 1〜indexまでの和
422 		 */
423 		public long getSum(int index) {
424 			long sum = 0L;
425 			for (int i = index; i > 0; i -= (i & -i)) {
426 				sum += array[i];
427 			}
428 			return sum;
429 		}
430 	}
431 
432 	/**
433 	 * 1-indexedの2次元BIT配列
434 	 */
435 	class BinaryIndexedTree2D {
436 		private long[][] array;
437 
438 		public BinaryIndexedTree2D(int size1, int size2) {
439 			this.array = new long[size1 + 1][];
440 			for (int i = 1; i <= size1; i++) {
441 				this.array[i] = new long[size2 + 1];
442 			}
443 		}
444 
445 		/**
446 		 * 指定した要素に値を加算する
447 		 * 計算量はO(logN * logN)
448 		 * @param index1 加算する要素の1次元目の添字
449 		 * @param index2 加算する要素の2次元目の添字
450 		 * @param value 加算する量
451 		 */
452 		public void add(int index1, int index2, long value) {
453 			for (int i1 = index1; i1 < array.length; i1 += (i1 & -i1)) {
454 				for (int i2 = index2; i2 < array.length; i2 += (i2 & -i2)) {
455 					array[i1][i2] += value;
456 				}
457 			}
458 		}
459 
460 		/**
461 		 * (1,1)〜指定した要素までの矩形和を取得する
462 		 * 計算量はO(logN * logN)
463 		 * @param index1 和の終端となる要素の1次元目の添字
464 		 * @param index2 和の終端となる要素の2次元目の添字
465 		 * @return (1,1)〜(index1,index2)までの矩形和
466 		 */
467 		public long getSum(int index1, int index2) {
468 			long sum = 0L;
469 			for (int i1 = index1; i1 > 0; i1 -= (i1 & -i1)) {
470 				for (int i2 = index2; i2 > 0; i2 -= (i2 & -i2)) {
471 					sum += array[i1][i2];
472 				}
473 			}
474 			return sum;
475 		}
476 	}
477 
478 	interface UnionFind {
479 		void union(int A, int B);
480 		boolean judge(int A, int B);
481 		Set<Integer> getSet(int id);
482 	}
483 
484 	/**
485 	 * ArrayUnionFindの拡張
486 	 * MapSetで根の添字から根にぶら下がる頂点の集合が取得できるようにした
487 	 * getSetメソッドをO(logN * logN)に落とせているはず
488 	 * ただしunionメソッドは2倍の計算量になっているので注意(オーダーは変わらないはず)
489 	 */
490 	class SetUnionFind extends ArrayUnionFind {
491 		Map<Integer, Set<Integer>> map;
492 		public SetUnionFind(int size) {
493 			super(size);
494 			map = new HashMap<>();
495 			for (int i = 0; i < size; i++) {
496 				map.put(i, new HashSet<>());
497 				map.get(i).add(i);
498 			}
499 		}
500 
501 		@Override
502 		protected void unionTo(int source, int dest) {
503 			super.unionTo(source, dest);
504 			map.get(dest).addAll(map.get(source));
505 		}
506 
507 		@Override
508 		public Set<Integer> getSet(int id) {
509 			return map.get(root(id));
510 		}
511 	}
512 
513 	/**
514 	 * 配列によるUnionFindの実装
515 	 * getSetメソッドはO(NlogN)なのでTLEに注意
516 	 */
517 	class ArrayUnionFind implements UnionFind {
518 		int[] parent;
519 		int[] rank;
520 		int size;
521 		public ArrayUnionFind(int size) {
522 			parent = new int[size];
523 			for (int i = 0; i < size; i++) {
524 				parent[i] = i;
525 			}
526 			rank = new int[size];
527 			this.size = size;
528 		}
529 
530 		@Override
531 		public void union(int A, int B) {
532 			int rootA = root(A);
533 			int rootB = root(B);
534 			if (rootA != rootB) {
535 				if (rank[rootA] < rank[rootB]) {
536 					unionTo(rootA, rootB);
537 				} else {
538 					unionTo(rootB, rootA);
539 					if (rank[rootA] == rank[rootB]) {
540 						rank[rootA]++;
541 					}
542 				}
543 			}
544 		}
545 
546 		protected void unionTo(int source, int dest) {
547 			parent[source] = dest;
548 		}
549 
550 		@Override
551 		public boolean judge(int A, int B) {
552 			return root(A) == root(B);
553 		}
554 
555 		@Override
556 		public Set<Integer> getSet(int id) {
557 			Set<Integer> set = new HashSet<>();
558 			IntStream.range(0, size).filter(i -> judge(i, id)).forEach(set::add);
559 			return set;
560 		}
561 
562 		protected int root(int id) {
563 			if (parent[id] == id) {
564 				return id;
565 			}
566 			parent[id] = root(parent[id]);
567 			return parent[id];
568 		}
569 	}
570 
571 	/**
572 	 * 素数のユーティリティ
573 	 */
574 	class PrimeNumberUtils {
575 		boolean[] isPrimeArray;
576 		List<Integer> primes;
577 
578 		/**
579 		 * 素数判定の上限となる値を指定してユーティリティを初期化
580 		 * @param limit 素数判定の上限(この値以上が素数であるか判定しない)
581 		 */
582 		public PrimeNumberUtils(int limit) {
583 			if (limit > 10000000) {
584 				System.err.println("上限の値が高すぎるため素数ユーティリティの初期化でTLEする可能性が大変高いです");
585 			}
586 			primes = new ArrayList<>();
587 			isPrimeArray = new boolean[limit];
588 			if (limit > 2) {
589 				primes.add(2);
590 				isPrimeArray[2] = true;
591 			}
592 
593 			for (int i = 3; i < limit; i += 2) {
594 				if (isPrime(i, primes)) {
595 					primes.add(i);
596 					isPrimeArray[i] = true;
597 				}
598 			}
599 		}
600 
601 		public List<Integer> getPrimeNumberList() {
602 			return primes;
603 		}
604 
605 		public boolean isPrime(int n) {
606 			return isPrimeArray[n];
607 		}
608 
609 		private boolean isPrime(int n, List<Integer> primes) {
610 			for (int prime : primes) {
611 				if (n % prime == 0) {
612 					return false;
613 				}
614 				if (prime > Math.sqrt(n)) {
615 					break;
616 				}
617 			}
618 			return true;
619 		}
620 	}
621 
622 	interface BitSet {
623 		void set(int index, boolean bit);
624 		boolean get(int index);
625 		void shiftRight(int num);
626 		void shiftLeft(int num);
627 		void or(BitSet bitset);
628 		void and(BitSet bitset);
629 	}
630 
631 	/**
632 	 * Longの配列によるBitSetの実装
633 	 * get/setはO(1)
634 	 * shift/or/andはO(size / 64)
635 	 */
636 	class LongBit implements BitSet {
637 		long[] bitArray;
638 
639 		public LongBit(int size) {
640 			bitArray = new long[((size + 63) / 64)];
641 		}
642 
643 		@Override
644 		public void set(int index, boolean bit) {
645 			int segment = index / 64;
646 			int inIndex = index % 64;
647 			if (bit) {
648 				bitArray[segment] |= 1L << inIndex;
649 			} else {
650 				bitArray[segment] &= ~(1L << inIndex);
651 			}
652 		}
653 
654 		@Override
655 		public boolean get(int index) {
656 			int segment = index / 64;
657 			int inIndex = index % 64;
658 			return (bitArray[segment] & (1L << inIndex)) != 0L;
659 		}
660 
661 		@Override
662 		public void shiftRight(int num) {
663 			int shiftSeg = num / 64;
664 			int shiftInI = num % 64;
665 			for (int segment = 0; segment < bitArray.length; segment++) {
666 				int sourceSeg = segment + shiftSeg;
667 				if (sourceSeg < bitArray.length) {
668 					bitArray[segment] = bitArray[sourceSeg] >>> shiftInI;
669 					if (shiftInI > 0 && sourceSeg + 1 < bitArray.length) {
670 						bitArray[segment] |= bitArray[sourceSeg + 1] << (64 - shiftInI);
671 					}
672 				} else {
673 					bitArray[segment] = 0L;
674 				}
675 			}
676 		}
677 
678 		@Override
679 		public void shiftLeft(int num) {
680 			int shiftSeg = num / 64;
681 			int shiftInI = num % 64;
682 			for (int segment = bitArray.length - 1; segment >= 0; segment--) {
683 				int sourceSeg = segment - shiftSeg;
684 				if (sourceSeg >= 0) {
685 					bitArray[segment] = bitArray[sourceSeg] << shiftInI;
686 					if (shiftInI > 0 && sourceSeg > 0) {
687 						bitArray[segment] |= bitArray[sourceSeg - 1] >>> (64 - shiftInI);
688 					}
689 				} else {
690 					bitArray[segment] = 0L;
691 				}
692 			}
693 		}
694 
695 		public long getLong(int segment) {
696 			return bitArray[segment];
697 		}
698 
699 		@Override
700 		public void or(BitSet bitset) {
701 			if (!(bitset instanceof LongBit)) {
702 				return;
703 			}
704 			for (int segment = 0; segment < bitArray.length; segment++) {
705 				bitArray[segment] |= ((LongBit)bitset).getLong(segment);
706 			}
707 		}
708 
709 		@Override
710 		public void and(BitSet bitset) {
711 			if (!(bitset instanceof LongBit)) {
712 				return;
713 			}
714 			for (int segment = 0; segment < bitArray.length; segment++) {
715 				bitArray[segment] &= ((LongBit)bitset).getLong(segment);
716 			}
717 		}
718 	}
719 
720 }