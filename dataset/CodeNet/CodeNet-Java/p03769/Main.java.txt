1 import java.io.ByteArrayInputStream;
2 import java.io.IOException;
3 import java.io.InputStream;
4 import java.io.PrintWriter;
5 import java.util.ArrayList;
6 import java.util.Arrays;
7 import java.util.InputMismatchException;
8 import java.util.List;
9 
10 public class Main {
11 	static InputStream is;
12 	static PrintWriter out;
13 	static String INPUT = "";
14 	
15 	static void solve()
16 	{
17 		long n = nl();
18 		List<Integer> perm = permutationWhoseNumberOfIncreasingSequenceIsK(n);
19 		out.println(perm.size()*2);
20 		for(int i = 1;i <= perm.size();i++){
21 			if(i > 1)out.print(" ");
22 			out.print(i);
23 		}
24 		for(int i = 0;i < perm.size();i++){
25 			out.print(" ");
26 			out.print(perm.get(i)+1);
27 		}
28 		out.println();
29 	}
30 	
31 	public static List<Integer> permutationWhoseNumberOfIncreasingSequenceIsK(long K)
32 	{
33 		long cur = Long.highestOneBit(K+1)-1;
34 		List<Integer> list = new ArrayList<>();
35 		for(int i = 0;i < Long.bitCount(cur);i++){
36 			list.add(i);
37 		}
38 		int p = Long.bitCount(cur);
39 		for(int d = Long.bitCount(cur)-1;d >= 0;d--){
40 			long x = 1L<<d;
41 			if(cur + x <= K){
42 				cur += x;
43 				list.add(d, p++);
44 			}
45 		}
46 		return list;
47 	}
48 	
49 	public static void main(String[] args) throws Exception
50 	{
51 		long S = System.currentTimeMillis();
52 		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
53 		out = new PrintWriter(System.out);
54 		
55 		solve();
56 		out.flush();
57 		long G = System.currentTimeMillis();
58 		tr(G-S+"ms");
59 	}
60 	
61 	private static boolean eof()
62 	{
63 		if(lenbuf == -1)return true;
64 		int lptr = ptrbuf;
65 		while(lptr < lenbuf)if(!isSpaceChar(inbuf[lptr++]))return false;
66 		
67 		try {
68 			is.mark(1000);
69 			while(true){
70 				int b = is.read();
71 				if(b == -1){
72 					is.reset();
73 					return true;
74 				}else if(!isSpaceChar(b)){
75 					is.reset();
76 					return false;
77 				}
78 			}
79 		} catch (IOException e) {
80 			return true;
81 		}
82 	}
83 	
84 	private static byte[] inbuf = new byte[1024];
85 	static int lenbuf = 0, ptrbuf = 0;
86 	
87 	private static int readByte()
88 	{
89 		if(lenbuf == -1)throw new InputMismatchException();
90 		if(ptrbuf >= lenbuf){
91 			ptrbuf = 0;
92 			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
93 			if(lenbuf <= 0)return -1;
94 		}
95 		return inbuf[ptrbuf++];
96 	}
97 	
98 	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
99 //	private static boolean isSpaceChar(int c) { return !(c >= 32 && c <= 126); }
100 	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
101 	
102 	private static double nd() { return Double.parseDouble(ns()); }
103 	private static char nc() { return (char)skip(); }
104 	
105 	private static String ns()
106 	{
107 		int b = skip();
108 		StringBuilder sb = new StringBuilder();
109 		while(!(isSpaceChar(b))){
110 			sb.appendCodePoint(b);
111 			b = readByte();
112 		}
113 		return sb.toString();
114 	}
115 	
116 	private static char[] ns(int n)
117 	{
118 		char[] buf = new char[n];
119 		int b = skip(), p = 0;
120 		while(p < n && !(isSpaceChar(b))){
121 			buf[p++] = (char)b;
122 			b = readByte();
123 		}
124 		return n == p ? buf : Arrays.copyOf(buf, p);
125 	}
126 	
127 	private static char[][] nm(int n, int m)
128 	{
129 		char[][] map = new char[n][];
130 		for(int i = 0;i < n;i++)map[i] = ns(m);
131 		return map;
132 	}
133 	
134 	private static int[] na(int n)
135 	{
136 		int[] a = new int[n];
137 		for(int i = 0;i < n;i++)a[i] = ni();
138 		return a;
139 	}
140 	
141 	private static int ni()
142 	{
143 		int num = 0, b;
144 		boolean minus = false;
145 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
146 		if(b == '-'){
147 			minus = true;
148 			b = readByte();
149 		}
150 		
151 		while(true){
152 			if(b >= '0' && b <= '9'){
153 				num = num * 10 + (b - '0');
154 			}else{
155 				return minus ? -num : num;
156 			}
157 			b = readByte();
158 		}
159 	}
160 	
161 	private static long nl()
162 	{
163 		long num = 0;
164 		int b;
165 		boolean minus = false;
166 		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
167 		if(b == '-'){
168 			minus = true;
169 			b = readByte();
170 		}
171 		
172 		while(true){
173 			if(b >= '0' && b <= '9'){
174 				num = num * 10 + (b - '0');
175 			}else{
176 				return minus ? -num : num;
177 			}
178 			b = readByte();
179 		}
180 	}
181 	
182 	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
183 }
