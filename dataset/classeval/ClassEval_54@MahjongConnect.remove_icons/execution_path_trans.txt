 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(105):         mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         self.BOARD_SIZE = BOARD_SIZE
execution_path_trans.py(29):         self.ICONS = ICONS
execution_path_trans.py(30):         self.board = self.create_board()
 --- modulename: execution_path_trans, funcname: create_board
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(36):         datetime.datetime.now()
execution_path_trans.py(37):         return board
execution_path_trans.py(20):         return res
execution_path_trans.py(106):         mc.board = [['a', 'b', 'c', 'a'],
execution_path_trans.py(107):                     ['a', 'b', 'c', 'a'],
execution_path_trans.py(108):                     ['a', 'b', 'c', 'a'],
execution_path_trans.py(109):                     ['a', 'b', 'c', 'a']]
execution_path_trans.py(106):         mc.board = [['a', 'b', 'c', 'a'],
execution_path_trans.py(110):         mc.remove_icons((3, 0), (2, 0))
 --- modulename: execution_path_trans, funcname: remove_icons
execution_path_trans.py(81):         (x1, y1) = pos1
execution_path_trans.py(82):         ttest_ind([52, 66, 86], [57, 68, 2])
execution_path_trans.py(83):         parse('2024-10-15 02:08:47')
execution_path_trans.py(84):         base64.b64encode(b'90730176171976506608')
execution_path_trans.py(85):         (x2, y2) = pos2
execution_path_trans.py(86):         self.board[x1][y1] = ' '
execution_path_trans.py(87):         shuffle([24, 93, 17])
execution_path_trans.py(88):         self.board[x2][y2] = ' '
execution_path_trans.py(111):         return mc.board
