 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(55):             snake = Snake(100, 100, 1, (51, 51))
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.length = 1
execution_path.py(12):         self.SCREEN_WIDTH = SCREEN_WIDTH
execution_path.py(13):         self.SCREEN_HEIGHT = SCREEN_HEIGHT
execution_path.py(14):         self.BLOCK_SIZE = BLOCK_SIZE
execution_path.py(15):         self.positions = [((SCREEN_WIDTH / 2), (SCREEN_HEIGHT / 2))]
execution_path.py(16):         self.score = 0
execution_path.py(17):         self.food_position = food_position
execution_path.py(56):             snake.move((-1, 0))
 --- modulename: execution_path, funcname: move
execution_path.py(20):         cur = self.positions[0]
execution_path.py(21):         x, y = direction
execution_path.py(24):             ((cur[0] + (x * self.BLOCK_SIZE)) % self.SCREEN_WIDTH),
execution_path.py(25):             (cur[1] + (y * self.BLOCK_SIZE)) % self.SCREEN_HEIGHT,
execution_path.py(23):         new = (
execution_path.py(28):         if new == self.food_position:
execution_path.py(31):         if len(self.positions) > 2 and new in self.positions[2:]:
execution_path.py(34):             self.positions.insert(0, new)
execution_path.py(35):             if len(self.positions) > self.length:
execution_path.py(36):                 self.positions.pop()
execution_path.py(57):             snake.reset()
 --- modulename: execution_path, funcname: reset
execution_path.py(44):         self.length = 1
execution_path.py(45):         self.positions = [((self.SCREEN_WIDTH / 2), (self.SCREEN_HEIGHT / 2))]
execution_path.py(46):         self.score = 0
execution_path.py(47):         self.random_food_position()
 --- modulename: execution_path, funcname: random_food_position
execution_path.py(39):         while self.food_position in self.positions:
execution_path.py(58):             return snake.length,snake.positions[0],snake.score
