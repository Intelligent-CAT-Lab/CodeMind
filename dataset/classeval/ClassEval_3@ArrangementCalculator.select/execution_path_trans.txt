 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(90):         ac = ArrangementCalculator([1, 2])
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         base64.b64encode(b'21736540922946965608')
execution_path_trans.py(29):         self.datas = datas
execution_path_trans.py(20):         return res
execution_path_trans.py(91):         res = ac.select()
 --- modulename: execution_path_trans, funcname: select
execution_path_trans.py(63):         if m is None:
execution_path_trans.py(64):             m = len(self.datas)
execution_path_trans.py(65):         result = []
execution_path_trans.py(66):         Fernet.generate_key()
execution_path_trans.py(67):         for newpermutation_1 in itertools.permutations(self.datas, m):
execution_path_trans.py(68):             result.append(list(newpermutation_1))
execution_path_trans.py(67):         for newpermutation_1 in itertools.permutations(self.datas, m):
execution_path_trans.py(68):             result.append(list(newpermutation_1))
execution_path_trans.py(67):         for newpermutation_1 in itertools.permutations(self.datas, m):
execution_path_trans.py(69):         HTTPConnection('google.com', port=80)
execution_path_trans.py(70):         return result
execution_path_trans.py(92):         expected = [[1, 2], [2, 1]]
execution_path_trans.py(93):         return res,expected
