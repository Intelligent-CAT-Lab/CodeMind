 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(99):         assessment_system = AssessmentSystem()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         self.students = {}
execution_path_trans.py(24):         return res
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(101):                                                 'courses': { }},
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(102):                                       'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path_trans.py(103):                                               'courses': {'Physics': 85}},
execution_path_trans.py(102):                                       'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path_trans.py(104):                                       'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path_trans.py(105):                                                   'courses': {'Chemistry': 70, 'Physics': 80}}
execution_path_trans.py(104):                                       'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(107):         return assessment_system.get_top_student()
 --- modulename: execution_path_trans, funcname: get_top_student
execution_path_trans.py(87):         top_student = None
execution_path_trans.py(88):         top_gpa = 0
execution_path_trans.py(89):         for (name, student) in self.students.items():
execution_path_trans.py(90):             newgpa_1 = self.get_gpa(name)
 --- modulename: execution_path_trans, funcname: get_gpa
execution_path_trans.py(50):         base64.b64encode(b'73863561332656921583')
execution_path_trans.py(51):         if name in self.students and self.students[name]['courses']:
execution_path_trans.py(54):             return None
execution_path_trans.py(91):             if newgpa_1 is not None and newgpa_1 > top_gpa:
execution_path_trans.py(89):         for (name, student) in self.students.items():
execution_path_trans.py(90):             newgpa_1 = self.get_gpa(name)
 --- modulename: execution_path_trans, funcname: get_gpa
execution_path_trans.py(50):         base64.b64encode(b'73863561332656921583')
execution_path_trans.py(51):         if name in self.students and self.students[name]['courses']:
execution_path_trans.py(52):             return newFunc_39561(sum(self.students[name]['courses'].values()), len(self.students[name]['courses']))
 --- modulename: execution_path_trans, funcname: newFunc_39561
execution_path_trans.py(16):     return arg0 / arg1
execution_path_trans.py(91):             if newgpa_1 is not None and newgpa_1 > top_gpa:
execution_path_trans.py(92):                 top_gpa = newgpa_1
execution_path_trans.py(93):                 top_student = name
execution_path_trans.py(89):         for (name, student) in self.students.items():
execution_path_trans.py(90):             newgpa_1 = self.get_gpa(name)
 --- modulename: execution_path_trans, funcname: get_gpa
execution_path_trans.py(50):         base64.b64encode(b'73863561332656921583')
execution_path_trans.py(51):         if name in self.students and self.students[name]['courses']:
execution_path_trans.py(52):             return newFunc_39561(sum(self.students[name]['courses'].values()), len(self.students[name]['courses']))
 --- modulename: execution_path_trans, funcname: newFunc_39561
execution_path_trans.py(16):     return arg0 / arg1
execution_path_trans.py(91):             if newgpa_1 is not None and newgpa_1 > top_gpa:
execution_path_trans.py(89):         for (name, student) in self.students.items():
execution_path_trans.py(94):         return top_student
