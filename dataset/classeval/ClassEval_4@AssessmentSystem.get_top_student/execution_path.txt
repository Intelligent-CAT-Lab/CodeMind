 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(54):             assessment_system = AssessmentSystem()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.students = {}
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(56):                                                     'courses': { }},
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(57):                                           'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path.py(58):                                                   'courses': {'Physics': 85}},
execution_path.py(57):                                           'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path.py(59):                                           'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path.py(60):                                                       'courses': {'Chemistry': 70, 'Physics': 80}}
execution_path.py(59):                                           'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(62):             return assessment_system.get_top_student()
 --- modulename: execution_path, funcname: get_top_student
execution_path.py(44):         top_student = None
execution_path.py(45):         top_gpa = 0
execution_path.py(46):         for name, student in self.students.items():
execution_path.py(47):             gpa = self.get_gpa(name)
 --- modulename: execution_path, funcname: get_gpa
execution_path.py(18):         if name in self.students and self.students[name]['courses']:
execution_path.py(21):             return None
execution_path.py(48):             if gpa is not None and gpa > top_gpa:
execution_path.py(46):         for name, student in self.students.items():
execution_path.py(47):             gpa = self.get_gpa(name)
 --- modulename: execution_path, funcname: get_gpa
execution_path.py(18):         if name in self.students and self.students[name]['courses']:
execution_path.py(19):             return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])
execution_path.py(48):             if gpa is not None and gpa > top_gpa:
execution_path.py(49):                 top_gpa = gpa
execution_path.py(50):                 top_student = name
execution_path.py(46):         for name, student in self.students.items():
execution_path.py(47):             gpa = self.get_gpa(name)
 --- modulename: execution_path, funcname: get_gpa
execution_path.py(18):         if name in self.students and self.students[name]['courses']:
execution_path.py(19):             return sum(self.students[name]['courses'].values()) / len(self.students[name]['courses'])
execution_path.py(48):             if gpa is not None and gpa > top_gpa:
execution_path.py(46):         for name, student in self.students.items():
execution_path.py(51):         return top_student
