 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(80):             mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.BOARD_SIZE = BOARD_SIZE
execution_path.py(12):         self.ICONS = ICONS
execution_path.py(13):         self.board = self.create_board()
 --- modulename: execution_path, funcname: create_board
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(17):         return board
execution_path.py(81):             mc.board = [[' ', ' ', ' ', ' '],
execution_path.py(82):                         ['a', ' ', ' ', ' '],
execution_path.py(83):                         [' ', ' ', ' ', ' '],
execution_path.py(84):                         [' ', ' ', ' ', ' ']]
execution_path.py(81):             mc.board = [[' ', ' ', ' ', ' '],
execution_path.py(85):             res = mc.is_game_over()
 --- modulename: execution_path, funcname: is_game_over
execution_path.py(74):         for row in self.board:
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
execution_path.py(74):         for row in self.board:
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(75):             if any(icon != ' ' for icon in row):
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(76):                 return False
execution_path.py(86):             return res
