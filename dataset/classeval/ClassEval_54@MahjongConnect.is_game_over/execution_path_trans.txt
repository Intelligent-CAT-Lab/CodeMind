 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(105):         mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         self.BOARD_SIZE = BOARD_SIZE
execution_path_trans.py(29):         self.ICONS = ICONS
execution_path_trans.py(30):         self.board = self.create_board()
 --- modulename: execution_path_trans, funcname: create_board
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(36):         datetime.datetime.now()
execution_path_trans.py(37):         return board
execution_path_trans.py(20):         return res
execution_path_trans.py(106):         mc.board = [[' ', ' ', ' ', ' '],
execution_path_trans.py(107):                     ['a', ' ', ' ', ' '],
execution_path_trans.py(108):                     [' ', ' ', ' ', ' '],
execution_path_trans.py(109):                     [' ', ' ', ' ', ' ']]
execution_path_trans.py(106):         mc.board = [[' ', ' ', ' ', ' '],
execution_path_trans.py(110):         res = mc.is_game_over()
 --- modulename: execution_path_trans, funcname: is_game_over
execution_path_trans.py(91):         LoopChecker152 = 723
execution_path_trans.py(92):         LoopChecker252 = 722
execution_path_trans.py(93):         time.sleep(0.22)
execution_path_trans.py(94):         for LoopIndexOut in range(LoopChecker152 // LoopChecker252):
execution_path_trans.py(95):             for row in self.board:
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
execution_path_trans.py(95):             for row in self.board:
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(96):                 if any((icon != ' ' for icon in row)):
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(97):                     return False
execution_path_trans.py(111):         return res
