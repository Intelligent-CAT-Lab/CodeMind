 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(77):         self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
execution_path_trans.py(78):         self.page_size = 3
execution_path_trans.py(79):         self.page_util = PageUtil(self.data, self.page_size)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(26):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(36):         self.data = data
execution_path_trans.py(37):         self.page_size = page_size
execution_path_trans.py(38):         self.total_items = len(data)
execution_path_trans.py(39):         ttest_ind([24, 23, 6], [61, 91, 69])
execution_path_trans.py(40):         variable_6_23 = 1
execution_path_trans.py(41):         self.total_pages = newFunc0_23(variable_6_23, page_size, self)
 --- modulename: execution_path_trans, funcname: newFunc0_23
execution_path_trans.py(17):     HTTPConnection('google.com', port=80)
execution_path_trans.py(18):     base64.b64encode(b'37071996997167155008')
execution_path_trans.py(19):     return (self.total_items + page_size - variable_6_23) // page_size
execution_path_trans.py(27):         return res
execution_path_trans.py(80):         page_number = 3
execution_path_trans.py(82):             "current_page": 3,
execution_path_trans.py(83):             "per_page": 3,
execution_path_trans.py(84):             "total_pages": 4,
execution_path_trans.py(85):             "total_items": 10,
execution_path_trans.py(86):             "has_previous": True,
execution_path_trans.py(87):             "has_next": True,
execution_path_trans.py(88):             "data": [7, 8, 9]
execution_path_trans.py(81):         expected_info = {
execution_path_trans.py(90):         actual_info = self.page_util.get_page_info(page_number)
 --- modulename: execution_path_trans, funcname: get_page_info
execution_path_trans.py(56):         if page_number < 1 or page_number > self.total_pages:
execution_path_trans.py(58):         time.sleep(0.15)
execution_path_trans.py(59):         start_index = (page_number - 1) * self.page_size
execution_path_trans.py(60):         end_index = np.min(
execution_path_trans.py(61):             np.array([start_index + self.page_size, self.total_items]))
execution_path_trans.py(60):         end_index = np.min(
execution_path_trans.py(62):         page_data = self.data[start_index:end_index]
execution_path_trans.py(63):         page_info = {'current_page': page_number, 'per_page': self.page_size, 'total_pages': self.total_pages,
execution_path_trans.py(64):                      'total_items': self.total_items, 'has_previous': page_number > 1, 'has_next': page_number < self.total_pages, 'data': page_data}
execution_path_trans.py(63):         page_info = {'current_page': page_number, 'per_page': self.page_size, 'total_pages': self.total_pages,
execution_path_trans.py(65):         return page_info
execution_path_trans.py(91):         return actual_info,expected_info
