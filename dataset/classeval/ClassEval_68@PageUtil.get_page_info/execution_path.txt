 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(54):             self.data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
execution_path.py(55):             self.page_size = 3
execution_path.py(56):             self.page_util = PageUtil(self.data, self.page_size)
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.data = data
execution_path.py(9):         self.page_size = page_size
execution_path.py(10):         self.total_items = len(data)
execution_path.py(11):         self.total_pages = (self.total_items + page_size - 1) // page_size
execution_path.py(57):             page_number = 3
execution_path.py(59):                 "current_page": 3,
execution_path.py(60):                 "per_page": 3,
execution_path.py(61):                 "total_pages": 4,
execution_path.py(62):                 "total_items": 10,
execution_path.py(63):                 "has_previous": True,
execution_path.py(64):                 "has_next": True,
execution_path.py(65):                 "data": [7, 8, 9]
execution_path.py(58):             expected_info = {
execution_path.py(67):             actual_info = self.page_util.get_page_info(page_number)
 --- modulename: execution_path, funcname: get_page_info
execution_path.py(22):         if page_number < 1 or page_number > self.total_pages:
execution_path.py(25):         start_index = (page_number - 1) * self.page_size
execution_path.py(26):         end_index = min(start_index + self.page_size, self.total_items)
execution_path.py(27):         page_data = self.data[start_index:end_index]
execution_path.py(30):             "current_page": page_number,
execution_path.py(31):             "per_page": self.page_size,
execution_path.py(32):             "total_pages": self.total_pages,
execution_path.py(33):             "total_items": self.total_items,
execution_path.py(34):             "has_previous": page_number > 1,
execution_path.py(35):             "has_next": page_number < self.total_pages,
execution_path.py(36):             "data": page_data
execution_path.py(29):         page_info = {
execution_path.py(38):         return page_info
execution_path.py(68):             return actual_info,expected_info
