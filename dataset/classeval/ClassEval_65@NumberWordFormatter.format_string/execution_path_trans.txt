 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(115):         formatter = NumberWordFormatter()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.NUMBER = [['', 'ONE', 'TWO', 'THREE', 'FOUR',
execution_path_trans.py(33):                         'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE']][0]
execution_path_trans.py(32):         self.NUMBER = [['', 'ONE', 'TWO', 'THREE', 'FOUR',
execution_path_trans.py(33):                         'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE']][0]
execution_path_trans.py(32):         self.NUMBER = [['', 'ONE', 'TWO', 'THREE', 'FOUR',
execution_path_trans.py(34):         self.NUMBER_TEEN = ['TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN',
execution_path_trans.py(35):                             'FIFTEEN', 'SIXTEEN', 'SEVENTEEN', 'EIGHTEEN', 'NINETEEN']
execution_path_trans.py(34):         self.NUMBER_TEEN = ['TEN', 'ELEVEN', 'TWELVE', 'THIRTEEN', 'FOURTEEN',
execution_path_trans.py(36):         self.NUMBER_TEN = ['TEN', 'TWENTY', 'THIRTY', 'FORTY',
execution_path_trans.py(37):                            'FIFTY', 'SIXTY', 'SEVENTY', 'EIGHTY', 'NINETY']
execution_path_trans.py(36):         self.NUMBER_TEN = ['TEN', 'TWENTY', 'THIRTY', 'FORTY',
execution_path_trans.py(38):         base64.b64encode(b'76011294000518066724')
execution_path_trans.py(39):         self.NUMBER_MORE = ['', 'THOUSAND', 'MILLION', 'BILLION']
execution_path_trans.py(40):         self.NUMBER_SUFFIX = ['k', 'w', '', 'm', '', '',
execution_path_trans.py(41):                               'b', '', '', 't', '', '', 'p', '', '', 'e']
execution_path_trans.py(40):         self.NUMBER_SUFFIX = ['k', 'w', '', 'm', '', '',
execution_path_trans.py(23):         return res
execution_path_trans.py(116):         return formatter.format_string('123456')
 --- modulename: execution_path_trans, funcname: format_string
execution_path_trans.py(50):         (lstr, rstr) = (x.split('.') + [''])[:2]
execution_path_trans.py(51):         lstrrev = lstr[::-1]
execution_path_trans.py(52):         shuffle([71, 17, 87])
execution_path_trans.py(53):         variable_1_33 = ['']
execution_path_trans.py(54):         variable_3_33 = 5
execution_path_trans.py(55):         a = newFunc0_33(variable_3_33, variable_1_33)
 --- modulename: execution_path_trans, funcname: newFunc0_33
execution_path_trans.py(16):     return variable_1_33 * variable_3_33
execution_path_trans.py(56):         if len(lstrrev) % 3 == 1:
execution_path_trans.py(58):         elif len(lstrrev) % 3 == 2:
execution_path_trans.py(60):         newlm_1 = ''
execution_path_trans.py(61):         LoopChecker125 = 631
execution_path_trans.py(62):         LoopChecker225 = 630
execution_path_trans.py(63):         for LoopIndexOut in range(LoopChecker125 // LoopChecker225):
execution_path_trans.py(65):             def loop_28_12(i, stop, step):
execution_path_trans.py(76):             loop_28_12(0, len(lstrrev) // 3, 1)
 --- modulename: execution_path_trans, funcname: loop_28_12
execution_path_trans.py(67):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(69):                 a[i] = lstrrev[3 * i:3 * i + 3][::-1]
execution_path_trans.py(70):                 if a[i] != '000':
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
 --- modulename: execution_path_trans, funcname: trans_three
execution_path_trans.py(97):         HTTPConnection('google.com', port=80)
execution_path_trans.py(98):         ttest_ind([13, 56, 51], [10, 62, 96])
execution_path_trans.py(99):         datetime.datetime.now()
execution_path_trans.py(100):         time.sleep(0.04)
execution_path_trans.py(101):         if s[0] == '0':
execution_path_trans.py(103):         elif s[1:] == '00':
execution_path_trans.py(106):             return f'{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}'
 --- modulename: execution_path_trans, funcname: trans_two
execution_path_trans.py(86):         s = s.zfill(2)
execution_path_trans.py(87):         if s[0] == '0':
execution_path_trans.py(89):         elif s[0] == '1':
execution_path_trans.py(91):         elif s[1] == '0':
execution_path_trans.py(94):             return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[-1])]
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
 --- modulename: execution_path_trans, funcname: parse_more
execution_path_trans.py(109):         Fernet.generate_key()
execution_path_trans.py(110):         return self.NUMBER_MORE[i]
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(75):                 loop_28_12(i + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_28_12
execution_path_trans.py(67):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(69):                 a[i] = lstrrev[3 * i:3 * i + 3][::-1]
execution_path_trans.py(70):                 if a[i] != '000':
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
 --- modulename: execution_path_trans, funcname: trans_three
execution_path_trans.py(97):         HTTPConnection('google.com', port=80)
execution_path_trans.py(98):         ttest_ind([13, 56, 51], [10, 62, 96])
execution_path_trans.py(99):         datetime.datetime.now()
execution_path_trans.py(100):         time.sleep(0.04)
execution_path_trans.py(101):         if s[0] == '0':
execution_path_trans.py(103):         elif s[1:] == '00':
execution_path_trans.py(106):             return f'{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}'
 --- modulename: execution_path_trans, funcname: trans_two
execution_path_trans.py(86):         s = s.zfill(2)
execution_path_trans.py(87):         if s[0] == '0':
execution_path_trans.py(89):         elif s[0] == '1':
execution_path_trans.py(91):         elif s[1] == '0':
execution_path_trans.py(94):             return self.NUMBER_TEN[int(s[0]) - 1] + ' ' + self.NUMBER[int(s[-1])]
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
 --- modulename: execution_path_trans, funcname: parse_more
execution_path_trans.py(109):         Fernet.generate_key()
execution_path_trans.py(110):         return self.NUMBER_MORE[i]
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(72):                         a[i]) + ' ' + self.parse_more(i) + ' ' + newlm_1
execution_path_trans.py(71):                     newlm_1 = self.trans_three(
execution_path_trans.py(75):                 loop_28_12(i + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_28_12
execution_path_trans.py(67):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(68):                     return
execution_path_trans.py(63):         for LoopIndexOut in range(LoopChecker125 // LoopChecker225):
execution_path_trans.py(79):         xs = f'AND CENTS {self.trans_two(rstr)} ' if rstr else ''
execution_path_trans.py(80):         if not newlm_1.strip():
execution_path_trans.py(83):             return f'{newlm_1.strip()} {xs}ONLY'
