 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(69):             formatter = NumberWordFormatter()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.NUMBER = ["", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE"]
execution_path.py(9):         self.NUMBER_TEEN = ["TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN",
execution_path.py(12):         self.NUMBER_TEN = ["TEN", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY"]
execution_path.py(13):         self.NUMBER_MORE = ["", "THOUSAND", "MILLION", "BILLION"]
execution_path.py(14):         self.NUMBER_SUFFIX = ["k", "w", "", "m", "", "", "b", "", "", "t", "", "", "p", "", "", "e"]
execution_path.py(70):             return formatter.format_string('123456')
 --- modulename: execution_path, funcname: format_string
execution_path.py(23):         lstr, rstr = (x.split('.') + [''])[:2]
execution_path.py(24):         lstrrev = lstr[::-1]
execution_path.py(25):         a = [''] * 5
execution_path.py(27):         if len(lstrrev) % 3 == 1:
execution_path.py(29):         elif len(lstrrev) % 3 == 2:
execution_path.py(32):         lm = ""
execution_path.py(33):         for i in range(len(lstrrev) // 3):
execution_path.py(34):             a[i] = lstrrev[3 * i:3 * i + 3][::-1]
execution_path.py(35):             if a[i] != "000":
execution_path.py(36):                 lm = self.trans_three(a[i]) + " " + self.parse_more(i) + " " + lm
 --- modulename: execution_path, funcname: trans_three
execution_path.py(58):         if s[0] == "0":
execution_path.py(60):         elif s[1:] == "00":
execution_path.py(63):             return f"{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}"
 --- modulename: execution_path, funcname: trans_two
execution_path.py(47):         s = s.zfill(2)
execution_path.py(48):         if s[0] == "0":
execution_path.py(50):         elif s[0] == "1":
execution_path.py(52):         elif s[1] == "0":
execution_path.py(55):             return self.NUMBER_TEN[int(s[0]) - 1] + " " + self.NUMBER[int(s[-1])]
 --- modulename: execution_path, funcname: parse_more
execution_path.py(66):         return self.NUMBER_MORE[i]
execution_path.py(33):         for i in range(len(lstrrev) // 3):
execution_path.py(34):             a[i] = lstrrev[3 * i:3 * i + 3][::-1]
execution_path.py(35):             if a[i] != "000":
execution_path.py(36):                 lm = self.trans_three(a[i]) + " " + self.parse_more(i) + " " + lm
 --- modulename: execution_path, funcname: trans_three
execution_path.py(58):         if s[0] == "0":
execution_path.py(60):         elif s[1:] == "00":
execution_path.py(63):             return f"{self.NUMBER[int(s[0])]} HUNDRED AND {self.trans_two(s[1:])}"
 --- modulename: execution_path, funcname: trans_two
execution_path.py(47):         s = s.zfill(2)
execution_path.py(48):         if s[0] == "0":
execution_path.py(50):         elif s[0] == "1":
execution_path.py(52):         elif s[1] == "0":
execution_path.py(55):             return self.NUMBER_TEN[int(s[0]) - 1] + " " + self.NUMBER[int(s[-1])]
 --- modulename: execution_path, funcname: parse_more
execution_path.py(66):         return self.NUMBER_MORE[i]
execution_path.py(33):         for i in range(len(lstrrev) // 3):
execution_path.py(40):         xs = f"AND CENTS {self.trans_two(rstr)} " if rstr else ""
execution_path.py(41):         if not lm.strip():
execution_path.py(44):             return f"{lm.strip()} {xs}ONLY"
