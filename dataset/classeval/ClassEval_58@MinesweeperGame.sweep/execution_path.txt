 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(73):             minesweeper_game = MinesweeperGame(3, 1)
 --- modulename: execution_path, funcname: __init__
execution_path.py(10):         self.n = n
execution_path.py(11):         self.k = k
execution_path.py(12):         self.minesweeper_map = self.generate_mine_sweeper_map()
 --- modulename: execution_path, funcname: generate_mine_sweeper_map
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(17):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path.py(18):         for num in range(self.k):
execution_path.py(19):             x = random.randint(0, self.n-1)
execution_path.py(20):             y = random.randint(0, self.n-1)
execution_path.py(21):             arr[y][x] = 'X'
execution_path.py(22):             if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-1):
execution_path.py(23):                 if arr[y][x+1] != 'X':
execution_path.py(24):                     arr[y][x+1] += 1
execution_path.py(25):             if (x >=1 and x <= self.n-1) and (y >= 0 and y <= self.n-1):
execution_path.py(28):             if (x >= 1 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
execution_path.py(32):             if (x >= 0 and x <= self.n-2) and (y >= 1 and y <= self.n-1):
execution_path.py(35):             if (x >= 0 and x <= self.n-1) and (y >= 1 and y <= self.n-1):
execution_path.py(39):             if (x >=0 and x <= self.n-2) and (y >= 0 and y <= self.n-2):
execution_path.py(40):                 if arr[y+1][x+1] != 'X':
execution_path.py(41):                     arr[y+1][x+1] += 1
execution_path.py(42):             if (x >= 1 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
execution_path.py(45):             if (x >= 0 and x <= self.n-1) and (y >= 0 and y <= self.n-2):
execution_path.py(46):                 if arr[y+1][x] != 'X':
execution_path.py(47):                     arr[y+1][x] += 1
execution_path.py(18):         for num in range(self.k):
execution_path.py(48):         return arr
execution_path.py(13):         self.player_map = self.generate_playerMap()
 --- modulename: execution_path, funcname: generate_playerMap
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(51):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path.py(52):         return arr
execution_path.py(14):         self.score = 0
execution_path.py(74):             minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
execution_path.py(75):             minesweeper_game.player_map = [['-', '-', '-'], ['-', '-', '-'], ['-', '-', '-']]
execution_path.py(76):             return minesweeper_game.sweep(0, 0),minesweeper_game.score
 --- modulename: execution_path, funcname: sweep
execution_path.py(63):         if (self.minesweeper_map[x][y] == 'X'):
execution_path.py(64):             return False
