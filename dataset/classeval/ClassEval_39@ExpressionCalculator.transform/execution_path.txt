 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(119):             self.expression_calculator = ExpressionCalculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(13):         self.postfix_stack = deque()
execution_path.py(14):         self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]
execution_path.py(120):             result = self.expression_calculator.transform("2 + 3 * 4")
 --- modulename: execution_path, funcname: transform
execution_path.py(99):         expression = re.sub(r"\s+", "", expression)
execution_path.py(100):         expression = re.sub(r"=$", "", expression)
execution_path.py(101):         arr = list(expression)
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(104):             if c == '-':
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(104):             if c == '-':
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(104):             if c == '-':
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(104):             if c == '-':
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(104):             if c == '-':
execution_path.py(103):         for i, c in enumerate(arr):
execution_path.py(112):         if arr[0] == '~' and (len(arr) > 1 and arr[1] == '('):
execution_path.py(116):             return "".join(arr)
execution_path.py(121):             return result
