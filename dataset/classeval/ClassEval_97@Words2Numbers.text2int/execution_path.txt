 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(82):             w2n = Words2Numbers()
 --- modulename: execution_path, funcname: __init__
execution_path.py(9):         self.numwords = {}
execution_path.py(10):         self.units = [
execution_path.py(15):         self.tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
execution_path.py(16):         self.scales = ["hundred", "thousand", "million", "billion", "trillion"]
execution_path.py(18):         self.numwords["and"] = (1, 0)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(26):         self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
execution_path.py(27):         self.ordinal_endings = [('ieth', 'y'), ('th', '')]
execution_path.py(83):             return w2n.text2int('one million and eleven')
 --- modulename: execution_path, funcname: text2int
execution_path.py(30):         textnum = textnum.replace('-', ' ')
execution_path.py(32):         current = result = 0
execution_path.py(33):         curstring = ""
execution_path.py(34):         onnumber = False
execution_path.py(35):         for word in textnum.split():
execution_path.py(36):             if word in self.ordinal_words:
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(45):                 if word not in self.numwords:
execution_path.py(52):                     scale, increment = self.numwords[word]
execution_path.py(53):                     current = current * scale + increment
execution_path.py(54):                     if scale > 100:
execution_path.py(57):                     onnumber = True
execution_path.py(35):         for word in textnum.split():
execution_path.py(36):             if word in self.ordinal_words:
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(45):                 if word not in self.numwords:
execution_path.py(52):                     scale, increment = self.numwords[word]
execution_path.py(53):                     current = current * scale + increment
execution_path.py(54):                     if scale > 100:
execution_path.py(55):                         result += current
execution_path.py(56):                         current = 0
execution_path.py(57):                     onnumber = True
execution_path.py(35):         for word in textnum.split():
execution_path.py(36):             if word in self.ordinal_words:
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(45):                 if word not in self.numwords:
execution_path.py(52):                     scale, increment = self.numwords[word]
execution_path.py(53):                     current = current * scale + increment
execution_path.py(54):                     if scale > 100:
execution_path.py(57):                     onnumber = True
execution_path.py(35):         for word in textnum.split():
execution_path.py(36):             if word in self.ordinal_words:
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(42):                     if word.endswith(ending):
execution_path.py(41):                 for ending, replacement in self.ordinal_endings:
execution_path.py(45):                 if word not in self.numwords:
execution_path.py(52):                     scale, increment = self.numwords[word]
execution_path.py(53):                     current = current * scale + increment
execution_path.py(54):                     if scale > 100:
execution_path.py(57):                     onnumber = True
execution_path.py(35):         for word in textnum.split():
execution_path.py(59):         if onnumber:
execution_path.py(60):             curstring += repr(result + current)
execution_path.py(62):         return curstring
