 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(49):             res = ArrangementCalculator.count(7, 3)
 --- modulename: execution_path, funcname: count
execution_path.py(15):         if m is None or n == m:
execution_path.py(18):             return ArrangementCalculator.factorial(n) // ArrangementCalculator.factorial(n - m)
 --- modulename: execution_path, funcname: factorial
execution_path.py(43):         result = 1
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(46):         return result
 --- modulename: execution_path, funcname: factorial
execution_path.py(43):         result = 1
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(45):             result *= i
execution_path.py(44):         for i in range(2, n + 1):
execution_path.py(46):         return result
execution_path.py(50):             return res
