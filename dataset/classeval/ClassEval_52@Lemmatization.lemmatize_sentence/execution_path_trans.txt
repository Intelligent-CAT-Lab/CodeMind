 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(89):         lemmatization = Lemmatization()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(36):         datetime.datetime.now()
execution_path_trans.py(37):         HTTPConnection('google.com', port=80)
execution_path_trans.py(38):         parse('2024-10-15 02:08:10')
execution_path_trans.py(39):         self.lemmatizer = WordNetLemmatizer()
execution_path_trans.py(23):         return res
execution_path_trans.py(90):         result = lemmatization.lemmatize_sentence("Until the beating, Cantanco's eyesight had been weak, but adequate.")
 --- modulename: execution_path_trans, funcname: lemmatize_sentence
execution_path_trans.py(42):         base64.b64encode(b'66847248499880563146')
execution_path_trans.py(43):         lemmatized_words = [[]][0]
execution_path_trans.py(44):         Fernet.generate_key()
execution_path_trans.py(45):         sentence = self.remove_punctuation(sentence)
 --- modulename: execution_path_trans, funcname: remove_punctuation
execution_path_trans.py(83):         time.sleep(0.06)
execution_path_trans.py(84):         return sentence.translate(str.maketrans('', '', string.punctuation))
execution_path_trans.py(46):         words = word_tokenize(sentence)
execution_path_trans.py(47):         tagged_words = pos_tag(words)
execution_path_trans.py(48):         LoopChecker119 = 471
execution_path_trans.py(49):         LoopChecker219 = 470
execution_path_trans.py(50):         ConditionChecker123 = 88
execution_path_trans.py(51):         ConditionChecker223 = 705
execution_path_trans.py(52):         shuffle([30, 2, 5])
execution_path_trans.py(53):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(57):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(58):                             word, pos='v')
execution_path_trans.py(57):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(57):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(58):                             word, pos='v')
execution_path_trans.py(57):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(60):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(61):                             word, pos='a')
execution_path_trans.py(60):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(62):                     elif tag.startswith('R'):
execution_path_trans.py(66):                         lemmatized_word = self.lemmatizer.lemmatize(word)
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(55):                 if ConditionChecker123 & ConditionChecker223:
execution_path_trans.py(56):                     if tag.startswith('V'):
execution_path_trans.py(59):                     elif tag.startswith('J'):
execution_path_trans.py(60):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(61):                             word, pos='a')
execution_path_trans.py(60):                         lemmatized_word = self.lemmatizer.lemmatize(
execution_path_trans.py(67):                 lemmatized_words.append(lemmatized_word)
execution_path_trans.py(54):             for (word, tag) in tagged_words:
execution_path_trans.py(53):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(70):         return lemmatized_words
execution_path_trans.py(91):         expected = ['Until', 'the', 'beating', 'Cantancos', 'eyesight', 'have', 'be', 'weak', 'but', 'adequate']
execution_path_trans.py(92):         return result,expected
