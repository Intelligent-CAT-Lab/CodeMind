 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(84):             htmlutil = HtmlUtil()
 --- modulename: execution_path, funcname: __init__
execution_path.py(15):         self.SPACE_MARK = '-SPACE-'
execution_path.py(16):         self.JSON_MARK = '-JSON-'
execution_path.py(17):         self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
execution_path.py(18):         self.URL_MARK = '-URL-'
execution_path.py(19):         self.NUMBER_MARK = '-NUMBER-'
execution_path.py(20):         self.TRACE_MARK = '-TRACE-'
execution_path.py(21):         self.COMMAND_MARK = '-COMMAND-'
execution_path.py(22):         self.COMMENT_MARK = '-COMMENT-'
execution_path.py(23):         self.CODE_MARK = '-CODE-'
execution_path.py(85):             res = htmlutil.extract_code_from_html_text('''
 --- modulename: execution_path, funcname: extract_code_from_html_text
execution_path.py(67):         text_with_code_tag = self.format_line_html_text(html_text)
 --- modulename: execution_path, funcname: format_line_html_text
execution_path.py(30):         if html_text is None or len(html_text) == 0:
execution_path.py(32):         soup = BeautifulSoup(html_text, 'lxml')
execution_path.py(34):         code_tag = soup.find_all(name=['pre', 'blockquote'])
execution_path.py(35):         for tag in code_tag:
execution_path.py(36):             tag.string = self.CODE_MARK
execution_path.py(35):         for tag in code_tag:
execution_path.py(36):             tag.string = self.CODE_MARK
execution_path.py(35):         for tag in code_tag:
execution_path.py(38):         ul_ol_group = soup.find_all(name=['ul', 'ol'])
execution_path.py(39):         for ul_ol_item in ul_ol_group:
execution_path.py(50):         p_group = soup.find_all(name=['p'])
execution_path.py(51):         for p_item in p_group:
execution_path.py(52):             p_item_text = p_item.get_text().strip()
execution_path.py(53):             if p_item_text:
execution_path.py(54):                 if p_item_text[-1] in string.punctuation:
execution_path.py(55):                     p_item.string = p_item_text
execution_path.py(56):                     continue
execution_path.py(51):         for p_item in p_group:
execution_path.py(52):             p_item_text = p_item.get_text().strip()
execution_path.py(53):             if p_item_text:
execution_path.py(54):                 if p_item_text[-1] in string.punctuation:
execution_path.py(55):                     p_item.string = p_item_text
execution_path.py(56):                     continue
execution_path.py(51):         for p_item in p_group:
execution_path.py(63):         clean_text = gensim.utils.decode_htmlentities(soup.get_text())
execution_path.py(64):         return self.__format_line_feed(clean_text)
 --- modulename: execution_path, funcname: __format_line_feed
execution_path.py(27):         return re.sub(re.compile(r'\n+'), '\n', text)
execution_path.py(69):         if self.CODE_MARK not in text_with_code_tag:
execution_path.py(72):         code_index_start = 0
execution_path.py(73):         soup = BeautifulSoup(html_text, 'lxml')
execution_path.py(74):         code_tag = soup.find_all(name=['pre', 'blockquote'])
execution_path.py(75):         code_count = text_with_code_tag.count(self.CODE_MARK)
execution_path.py(76):         code_list = []
execution_path.py(77):         for code_index in range(code_index_start, code_index_start + code_count):
execution_path.py(78):             code = code_tag[code_index].get_text()
execution_path.py(79):             if code:
execution_path.py(80):                 code_list.append(code)
execution_path.py(77):         for code_index in range(code_index_start, code_index_start + code_count):
execution_path.py(78):             code = code_tag[code_index].get_text()
execution_path.py(79):             if code:
execution_path.py(80):                 code_list.append(code)
execution_path.py(77):         for code_index in range(code_index_start, code_index_start + code_count):
execution_path.py(81):         return code_list
execution_path.py(97):             return res
