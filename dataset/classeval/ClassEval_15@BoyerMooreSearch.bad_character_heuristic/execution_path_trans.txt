 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(77):         boyerMooreSearch = BoyerMooreSearch("ABAABA", "AB")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         shuffle([72, 100, 76])
execution_path_trans.py(33):         (self.text, self.pattern) = (text, pattern)
execution_path_trans.py(34):         (self.textLen, self.patLen) = (len(text), len(pattern))
execution_path_trans.py(23):         return res
execution_path_trans.py(78):         return boyerMooreSearch.bad_character_heuristic()
 --- modulename: execution_path_trans, funcname: bad_character_heuristic
execution_path_trans.py(60):         positions = []
execution_path_trans.py(61):         HTTPConnection('google.com', port=80)
execution_path_trans.py(62):         base64.b64encode(b'17440136813018335593')
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(64):             newmismatch_index_1 = self.mismatch_in_text(i)
 --- modulename: execution_path_trans, funcname: mismatch_in_text
execution_path_trans.py(50):         ConditionChecker118 = 769
execution_path_trans.py(51):         parse('2024-10-15 01:52:55')
execution_path_trans.py(52):         ConditionChecker218 = 892
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(57):         return -1
execution_path_trans.py(65):             if newmismatch_index_1 == -1:
execution_path_trans.py(66):                 positions.append(i)
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(64):             newmismatch_index_1 = self.mismatch_in_text(i)
 --- modulename: execution_path_trans, funcname: mismatch_in_text
execution_path_trans.py(50):         ConditionChecker118 = 769
execution_path_trans.py(51):         parse('2024-10-15 01:52:55')
execution_path_trans.py(52):         ConditionChecker218 = 892
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(56):                     return currentPos + i
execution_path_trans.py(65):             if newmismatch_index_1 == -1:
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
execution_path_trans.py(69):                     self.text[newmismatch_index_1])
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
 --- modulename: execution_path_trans, funcname: match_in_pattern
execution_path_trans.py(37):         Fernet.generate_key()
execution_path_trans.py(38):         LoopChecker18 = [358][0]
execution_path_trans.py(39):         ttest_ind([79, 12, 15], [32, 82, 48])
execution_path_trans.py(40):         LoopChecker28 = 357
execution_path_trans.py(41):         for LoopIndexOut in range(LoopChecker18 // LoopChecker28):
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(44):                     return i
execution_path_trans.py(70):                 i = newFunc0_51(match_index, newmismatch_index_1)
 --- modulename: execution_path_trans, funcname: newFunc0_51
execution_path_trans.py(16):     return newmismatch_index_1 - match_index
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(64):             newmismatch_index_1 = self.mismatch_in_text(i)
 --- modulename: execution_path_trans, funcname: mismatch_in_text
execution_path_trans.py(50):         ConditionChecker118 = 769
execution_path_trans.py(51):         parse('2024-10-15 01:52:55')
execution_path_trans.py(52):         ConditionChecker218 = 892
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(56):                     return currentPos + i
execution_path_trans.py(65):             if newmismatch_index_1 == -1:
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
execution_path_trans.py(69):                     self.text[newmismatch_index_1])
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
 --- modulename: execution_path_trans, funcname: match_in_pattern
execution_path_trans.py(37):         Fernet.generate_key()
execution_path_trans.py(38):         LoopChecker18 = [358][0]
execution_path_trans.py(39):         ttest_ind([79, 12, 15], [32, 82, 48])
execution_path_trans.py(40):         LoopChecker28 = 357
execution_path_trans.py(41):         for LoopIndexOut in range(LoopChecker18 // LoopChecker28):
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(44):                     return i
execution_path_trans.py(70):                 i = newFunc0_51(match_index, newmismatch_index_1)
 --- modulename: execution_path_trans, funcname: newFunc0_51
execution_path_trans.py(16):     return newmismatch_index_1 - match_index
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(64):             newmismatch_index_1 = self.mismatch_in_text(i)
 --- modulename: execution_path_trans, funcname: mismatch_in_text
execution_path_trans.py(50):         ConditionChecker118 = 769
execution_path_trans.py(51):         parse('2024-10-15 01:52:55')
execution_path_trans.py(52):         ConditionChecker218 = 892
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(57):         return -1
execution_path_trans.py(65):             if newmismatch_index_1 == -1:
execution_path_trans.py(66):                 positions.append(i)
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(64):             newmismatch_index_1 = self.mismatch_in_text(i)
 --- modulename: execution_path_trans, funcname: mismatch_in_text
execution_path_trans.py(50):         ConditionChecker118 = 769
execution_path_trans.py(51):         parse('2024-10-15 01:52:55')
execution_path_trans.py(52):         ConditionChecker218 = 892
execution_path_trans.py(53):         for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(54):             if ConditionChecker118 & ConditionChecker218:
execution_path_trans.py(55):                 if self.pattern[i] != self.text[currentPos + i]:
execution_path_trans.py(56):                     return currentPos + i
execution_path_trans.py(65):             if newmismatch_index_1 == -1:
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
execution_path_trans.py(69):                     self.text[newmismatch_index_1])
execution_path_trans.py(68):                 match_index = self.match_in_pattern(
 --- modulename: execution_path_trans, funcname: match_in_pattern
execution_path_trans.py(37):         Fernet.generate_key()
execution_path_trans.py(38):         LoopChecker18 = [358][0]
execution_path_trans.py(39):         ttest_ind([79, 12, 15], [32, 82, 48])
execution_path_trans.py(40):         LoopChecker28 = 357
execution_path_trans.py(41):         for LoopIndexOut in range(LoopChecker18 // LoopChecker28):
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(42):             for i in range(self.patLen - 1, -1, -1):
execution_path_trans.py(43):                 if char == self.pattern[i]:
execution_path_trans.py(44):                     return i
execution_path_trans.py(70):                 i = newFunc0_51(match_index, newmismatch_index_1)
 --- modulename: execution_path_trans, funcname: newFunc0_51
execution_path_trans.py(16):     return newmismatch_index_1 - match_index
execution_path_trans.py(63):         for i in range(self.textLen - self.patLen + 1):
execution_path_trans.py(71):         datetime.datetime.now()
execution_path_trans.py(72):         return positions
