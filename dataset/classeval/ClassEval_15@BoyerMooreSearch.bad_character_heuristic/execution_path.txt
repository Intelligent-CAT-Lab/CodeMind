 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(35):             boyerMooreSearch = BoyerMooreSearch("ABAABA", "AB")
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.text, self.pattern = text, pattern
execution_path.py(9):         self.textLen, self.patLen = len(text), len(pattern)
execution_path.py(36):             return boyerMooreSearch.bad_character_heuristic()
 --- modulename: execution_path, funcname: bad_character_heuristic
execution_path.py(24):         positions = []
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(26):             mismatch_index = self.mismatch_in_text(i)
 --- modulename: execution_path, funcname: mismatch_in_text
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(21):         return -1
execution_path.py(27):             if mismatch_index == -1:
execution_path.py(28):                 positions.append(i)
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(26):             mismatch_index = self.mismatch_in_text(i)
 --- modulename: execution_path, funcname: mismatch_in_text
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(20):                 return currentPos + i
execution_path.py(27):             if mismatch_index == -1:
execution_path.py(30):                 match_index = self.match_in_pattern(self.text[mismatch_index])
 --- modulename: execution_path, funcname: match_in_pattern
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(14):                 return i
execution_path.py(31):                 i = (mismatch_index - match_index)
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(26):             mismatch_index = self.mismatch_in_text(i)
 --- modulename: execution_path, funcname: mismatch_in_text
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(20):                 return currentPos + i
execution_path.py(27):             if mismatch_index == -1:
execution_path.py(30):                 match_index = self.match_in_pattern(self.text[mismatch_index])
 --- modulename: execution_path, funcname: match_in_pattern
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(14):                 return i
execution_path.py(31):                 i = (mismatch_index - match_index)
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(26):             mismatch_index = self.mismatch_in_text(i)
 --- modulename: execution_path, funcname: mismatch_in_text
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(21):         return -1
execution_path.py(27):             if mismatch_index == -1:
execution_path.py(28):                 positions.append(i)
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(26):             mismatch_index = self.mismatch_in_text(i)
 --- modulename: execution_path, funcname: mismatch_in_text
execution_path.py(18):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(19):             if self.pattern[i] != self.text[currentPos + i]:
execution_path.py(20):                 return currentPos + i
execution_path.py(27):             if mismatch_index == -1:
execution_path.py(30):                 match_index = self.match_in_pattern(self.text[mismatch_index])
 --- modulename: execution_path, funcname: match_in_pattern
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(12):         for i in range(self.patLen - 1, -1, -1):
execution_path.py(13):             if char == self.pattern[i]:
execution_path.py(14):                 return i
execution_path.py(31):                 i = (mismatch_index - match_index)
execution_path.py(25):         for i in range(self.textLen - self.patLen + 1):
execution_path.py(32):         return positions
