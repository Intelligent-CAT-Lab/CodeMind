 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(43):             interpolation = Interpolation()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         pass
execution_path.py(44):             return interpolation.interpolate_1d([1, 6, 4], [1, 7, 5], [2, 3])
 --- modulename: execution_path, funcname: interpolate_1d
execution_path.py(12):         y_interp = []
execution_path.py(13):         for xi in x_interp:
execution_path.py(14):             for i in range(len(x) - 1):
execution_path.py(15):                 if x[i] <= xi <= x[i+1]:
execution_path.py(16):                     yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
execution_path.py(17):                     y_interp.append(yi)
execution_path.py(18):                     break
execution_path.py(13):         for xi in x_interp:
execution_path.py(14):             for i in range(len(x) - 1):
execution_path.py(15):                 if x[i] <= xi <= x[i+1]:
execution_path.py(16):                     yi = y[i] + (y[i+1] - y[i]) * (xi - x[i]) / (x[i+1] - x[i])
execution_path.py(17):                     y_interp.append(yi)
execution_path.py(18):                     break
execution_path.py(13):         for xi in x_interp:
execution_path.py(19):         return y_interp
