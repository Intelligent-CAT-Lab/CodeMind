 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(147):         res1, res2 = MetricsCalculator2.map([([1, 0, 1, 1], 4), ([0, 1, 0, 0], 4)])
 --- modulename: execution_path_trans, funcname: map
execution_path_trans.py(97):         base64.b64encode(b'05502704168273831855')
execution_path_trans.py(98):         if type(data) != list and type(data) != tuple:
execution_path_trans.py(101):         if len(data) == 0:
execution_path_trans.py(103):         if type(data) == tuple:
execution_path_trans.py(122):         if type(data) == list:
execution_path_trans.py(123):             separate_result = []
execution_path_trans.py(124):             for (sub_list, total_num) in data:
execution_path_trans.py(125):                 sub_list = np.array(sub_list)
execution_path_trans.py(126):                 if total_num == 0:
execution_path_trans.py(129):                     newranking_array_1 = 1.0 / \
execution_path_trans.py(130):                         (np.array(list(range(len(sub_list)))) + 1)
execution_path_trans.py(129):                     newranking_array_1 = 1.0 / \
execution_path_trans.py(131):                     right_ranking_list = []
execution_path_trans.py(132):                     count = 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(137):                             right_ranking_list.append(count)
execution_path_trans.py(138):                             count += 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(135):                             right_ranking_list.append(0)
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(137):                             right_ranking_list.append(count)
execution_path_trans.py(138):                             count += 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(137):                             right_ranking_list.append(count)
execution_path_trans.py(138):                             count += 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(140):                                 newranking_array_1) / total_num
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(140):                                 newranking_array_1) / total_num
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(141):                 separate_result.append(ap)
execution_path_trans.py(124):             for (sub_list, total_num) in data:
execution_path_trans.py(125):                 sub_list = np.array(sub_list)
execution_path_trans.py(126):                 if total_num == 0:
execution_path_trans.py(129):                     newranking_array_1 = 1.0 / \
execution_path_trans.py(130):                         (np.array(list(range(len(sub_list)))) + 1)
execution_path_trans.py(129):                     newranking_array_1 = 1.0 / \
execution_path_trans.py(131):                     right_ranking_list = []
execution_path_trans.py(132):                     count = 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(135):                             right_ranking_list.append(0)
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(137):                             right_ranking_list.append(count)
execution_path_trans.py(138):                             count += 1
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(135):                             right_ranking_list.append(0)
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(134):                         if t == 0:
execution_path_trans.py(135):                             right_ranking_list.append(0)
execution_path_trans.py(133):                     for t in sub_list:
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(140):                                 newranking_array_1) / total_num
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(140):                                 newranking_array_1) / total_num
execution_path_trans.py(139):                     ap = np.sum(np.array(right_ranking_list) *
execution_path_trans.py(141):                 separate_result.append(ap)
execution_path_trans.py(124):             for (sub_list, total_num) in data:
execution_path_trans.py(142):             return (np.mean(separate_result), separate_result)
execution_path_trans.py(148):         return res1,res2
