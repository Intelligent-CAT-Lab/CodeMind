 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(108):             res1, res2 = MetricsCalculator2.map([([1, 0, 1, 1], 4), ([0, 1, 0, 0], 4)])
 --- modulename: execution_path, funcname: map
execution_path.py(58):         if type(data) != list and type(data) != tuple:
execution_path.py(61):         if len(data) == 0:
execution_path.py(63):         if type(data) == tuple:
execution_path.py(83):         if type(data) == list:
execution_path.py(84):             separate_result = []
execution_path.py(85):             for (sub_list, total_num) in data:
execution_path.py(86):                 sub_list = np.array(sub_list)
execution_path.py(88):                 if total_num == 0:
execution_path.py(91):                     ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
execution_path.py(93):                     right_ranking_list = []
execution_path.py(94):                     count = 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(99):                             right_ranking_list.append(count)
execution_path.py(100):                             count += 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(97):                             right_ranking_list.append(0)
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(99):                             right_ranking_list.append(count)
execution_path.py(100):                             count += 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(99):                             right_ranking_list.append(count)
execution_path.py(100):                             count += 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(102):                     ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
execution_path.py(104):                 separate_result.append(ap)
execution_path.py(85):             for (sub_list, total_num) in data:
execution_path.py(86):                 sub_list = np.array(sub_list)
execution_path.py(88):                 if total_num == 0:
execution_path.py(91):                     ranking_array = 1.0 / (np.array(list(range(len(sub_list)))) + 1)
execution_path.py(93):                     right_ranking_list = []
execution_path.py(94):                     count = 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(97):                             right_ranking_list.append(0)
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(99):                             right_ranking_list.append(count)
execution_path.py(100):                             count += 1
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(97):                             right_ranking_list.append(0)
execution_path.py(95):                     for t in sub_list:
execution_path.py(96):                         if t == 0:
execution_path.py(97):                             right_ranking_list.append(0)
execution_path.py(95):                     for t in sub_list:
execution_path.py(102):                     ap = np.sum(np.array(right_ranking_list) * ranking_array) / total_num
execution_path.py(104):                 separate_result.append(ap)
execution_path.py(85):             for (sub_list, total_num) in data:
execution_path.py(105):             return np.mean(separate_result), separate_result
execution_path.py(109):             return res1,res2
