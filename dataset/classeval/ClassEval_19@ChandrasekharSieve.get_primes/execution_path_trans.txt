 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(36):             cs = ChandrasekharSieve(15)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(8):         self.n = n
execution_path_trans.py(9):         self.primes = self.generate_primes()
 --- modulename: execution_path_trans, funcname: generate_primes
execution_path_trans.py(12):         if self.n < 2:
execution_path_trans.py(15):         sieve = [True] * (self.n + 1)
execution_path_trans.py(16):         sieve[0] = sieve[1] = False
execution_path_trans.py(18):         p = 2
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(20):             if sieve[p]:
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(23):             p += 1
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(20):             if sieve[p]:
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(23):             p += 1
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(25):         primes = []
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(30):         return primes
execution_path_trans.py(37):             cs.generate_primes()
 --- modulename: execution_path_trans, funcname: generate_primes
execution_path_trans.py(12):         if self.n < 2:
execution_path_trans.py(15):         sieve = [True] * (self.n + 1)
execution_path_trans.py(16):         sieve[0] = sieve[1] = False
execution_path_trans.py(18):         p = 2
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(20):             if sieve[p]:
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(23):             p += 1
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(20):             if sieve[p]:
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(22):                     sieve[i] = False
execution_path_trans.py(21):                 for i in range(p * p, self.n + 1, p):
execution_path_trans.py(23):             p += 1
execution_path_trans.py(19):         while p * p <= self.n:
execution_path_trans.py(25):         primes = []
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(28):                 primes.append(i)
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(27):             if sieve[i]:
execution_path_trans.py(26):         for i in range(2, self.n + 1):
execution_path_trans.py(30):         return primes
execution_path_trans.py(38):             res = cs.get_primes()
 --- modulename: execution_path_trans, funcname: get_primes
execution_path_trans.py(33):         return self.primes
execution_path_trans.py(39):             return res
