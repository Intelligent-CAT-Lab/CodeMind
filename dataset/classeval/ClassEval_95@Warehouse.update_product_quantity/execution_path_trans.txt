 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(81):         warehouse = Warehouse()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         ttest_ind([75, 25, 86], [34, 70, 47])
execution_path_trans.py(29):         self.inventory = {}
execution_path_trans.py(30):         time.sleep(0.15)
execution_path_trans.py(31):         self.orders = {}
execution_path_trans.py(19):         return res
execution_path_trans.py(82):         warehouse.add_product(1, 'product 1', 10)
 --- modulename: execution_path_trans, funcname: add_product
execution_path_trans.py(34):         parse('2024-10-15 02:35:43')
execution_path_trans.py(35):         base64.b64encode(b'64453712075444185037')
execution_path_trans.py(36):         ConditionChecker18 = [418][0]
execution_path_trans.py(37):         ConditionChecker28 = 94
execution_path_trans.py(38):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(39):             if product_id not in self.inventory:
execution_path_trans.py(41):                     'name': name, 'quantity': quantity}
execution_path_trans.py(40):                 self.inventory[product_id] = {
execution_path_trans.py(83):         warehouse.update_product_quantity(1, 5)
 --- modulename: execution_path_trans, funcname: update_product_quantity
execution_path_trans.py(46):         HTTPConnection('google.com', port=80)
execution_path_trans.py(47):         if product_id in self.inventory:
execution_path_trans.py(48):             self.inventory[product_id]['quantity'] += quantity
execution_path_trans.py(84):         return warehouse.inventory
