 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(85):         sql = SQLGenerator('table1')
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(26):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(37):         self.table_name = table_name
execution_path_trans.py(27):         return res
execution_path_trans.py(86):         result = sql.select(['field1'], "field2 = value1, field3 = value2")
 --- modulename: execution_path_trans, funcname: select
execution_path_trans.py(40):         ConditionChecker17 = [582][0]
execution_path_trans.py(41):         ConditionChecker27 = 347
execution_path_trans.py(42):         if ConditionChecker17 & ConditionChecker27:
execution_path_trans.py(43):             if newfields_1 is None:
execution_path_trans.py(46):                 newfields_1 = ', '.join(newfields_1)
execution_path_trans.py(47):         sql = f'SELECT {newfields_1} FROM {self.table_name}'
execution_path_trans.py(48):         if condition is not None:
execution_path_trans.py(49):             sql += f' WHERE {condition}'
execution_path_trans.py(50):         return newFunc_4897(sql, ';')
 --- modulename: execution_path_trans, funcname: newFunc_4897
execution_path_trans.py(16):     return arg0 + arg1
execution_path_trans.py(87):         return result
