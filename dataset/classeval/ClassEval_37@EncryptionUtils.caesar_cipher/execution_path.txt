 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(59):             encryption_utils = EncryptionUtils("key")
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.key = key
execution_path.py(60):             return encryption_utils.caesar_cipher('abcxyz', 27)
 --- modulename: execution_path, funcname: caesar_cipher
execution_path.py(11):         ciphertext = ""
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(13):             if char.isalpha():
execution_path.py(14):                 if char.isupper():
execution_path.py(17):                     ascii_offset = 97
execution_path.py(18):                 shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
execution_path.py(19):                 ciphertext += shifted_char
execution_path.py(12):         for char in plaintext:
execution_path.py(22):         return ciphertext
