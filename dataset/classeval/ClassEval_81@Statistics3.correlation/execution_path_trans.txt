 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(109):         statistics3 = Statistics3()
execution_path_trans.py(110):         return statistics3.correlation([1, 1, 1], [2, 2, 2])
 --- modulename: execution_path_trans, funcname: correlation
execution_path_trans.py(54):         n = len(x)
execution_path_trans.py(55):         mean_x = newFunc0_39(n, x, sum)
 --- modulename: execution_path_trans, funcname: newFunc0_39
execution_path_trans.py(17):     return sum(x) / n
execution_path_trans.py(56):         mean_y = sum(y) / n
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
execution_path_trans.py(58):                         for (xi, yi) in zip(x, y)))
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
execution_path_trans.py(58):                         for (xi, yi) in zip(x, y)))
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
execution_path_trans.py(58):                         for (xi, yi) in zip(x, y)))
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
execution_path_trans.py(58):                         for (xi, yi) in zip(x, y)))
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(57):         numerator = sum(((xi - mean_x) * (yi - mean_y)
execution_path_trans.py(59):         denominator = math.sqrt(
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(60):             sum(((xi - mean_x) ** 2 for xi in x)) * sum(((yi - mean_y) ** 2 for yi in y)))
execution_path_trans.py(59):         denominator = math.sqrt(
execution_path_trans.py(61):         if denominator == 0:
execution_path_trans.py(62):             return None
