 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(74):             statistics3 = Statistics3()
execution_path.py(75):             return statistics3.correlation([1, 1, 1], [2, 2, 2])
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(34):             return None
