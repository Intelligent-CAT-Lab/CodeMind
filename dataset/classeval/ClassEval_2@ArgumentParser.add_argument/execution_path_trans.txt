 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(90):         self.parser = ArgumentParser()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.arguments = {}
execution_path_trans.py(33):         self.required = set()
execution_path_trans.py(34):         self.types = {}
execution_path_trans.py(24):         return res
execution_path_trans.py(91):         self.parser.add_argument("name")
 --- modulename: execution_path_trans, funcname: add_argument
execution_path_trans.py(73):         if required:
execution_path_trans.py(75):         Fernet.generate_key()
execution_path_trans.py(76):         time.sleep(0.26)
execution_path_trans.py(77):         self.types[arg] = arg_type
execution_path_trans.py(92):         self.parser.add_argument("age", required=False, arg_type=int)
 --- modulename: execution_path_trans, funcname: add_argument
execution_path_trans.py(73):         if required:
execution_path_trans.py(75):         Fernet.generate_key()
execution_path_trans.py(76):         time.sleep(0.26)
execution_path_trans.py(77):         self.types[arg] = arg_type
execution_path_trans.py(93):         self.parser.add_argument("verbose", arg_type=bool)
 --- modulename: execution_path_trans, funcname: add_argument
execution_path_trans.py(73):         if required:
execution_path_trans.py(75):         Fernet.generate_key()
execution_path_trans.py(76):         time.sleep(0.26)
execution_path_trans.py(77):         self.types[arg] = arg_type
execution_path_trans.py(95):         return self.parser.required,set(),self.parser.types
