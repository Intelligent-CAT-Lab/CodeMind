 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(43):             interpolation = Interpolation()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         pass
execution_path.py(44):             return interpolation.interpolate_2d([1, 2, 3], [1, 2, 3], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1.5, 2.5], [1.5, 2.5])
 --- modulename: execution_path, funcname: interpolate_2d
execution_path.py(23):         z_interp = []
execution_path.py(24):         for xi, yi in zip(x_interp, y_interp):
execution_path.py(25):             for i in range(len(x) - 1):
execution_path.py(26):                 if x[i] <= xi <= x[i+1]:
execution_path.py(27):                     for j in range(len(y) - 1):
execution_path.py(28):                         if y[j] <= yi <= y[j+1]:
execution_path.py(29):                             z00 = z[i][j]
execution_path.py(30):                             z01 = z[i][j+1]
execution_path.py(31):                             z10 = z[i+1][j]
execution_path.py(32):                             z11 = z[i+1][j+1]
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(34):                                   z10 * (xi - x[i]) * (y[j+1] - yi) +
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(35):                                   z01 * (x[i+1] - xi) * (yi - y[j]) +
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(36):                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(36):                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(37):                             z_interp.append(zi)
execution_path.py(38):                             break
execution_path.py(39):                     break
execution_path.py(24):         for xi, yi in zip(x_interp, y_interp):
execution_path.py(25):             for i in range(len(x) - 1):
execution_path.py(26):                 if x[i] <= xi <= x[i+1]:
execution_path.py(25):             for i in range(len(x) - 1):
execution_path.py(26):                 if x[i] <= xi <= x[i+1]:
execution_path.py(27):                     for j in range(len(y) - 1):
execution_path.py(28):                         if y[j] <= yi <= y[j+1]:
execution_path.py(27):                     for j in range(len(y) - 1):
execution_path.py(28):                         if y[j] <= yi <= y[j+1]:
execution_path.py(29):                             z00 = z[i][j]
execution_path.py(30):                             z01 = z[i][j+1]
execution_path.py(31):                             z10 = z[i+1][j]
execution_path.py(32):                             z11 = z[i+1][j+1]
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(34):                                   z10 * (xi - x[i]) * (y[j+1] - yi) +
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(35):                                   z01 * (x[i+1] - xi) * (yi - y[j]) +
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(36):                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(36):                                   z11 * (xi - x[i]) * (yi - y[j])) / ((x[i+1] - x[i]) * (y[j+1] - y[j]))
execution_path.py(33):                             zi = (z00 * (x[i+1] - xi) * (y[j+1] - yi) +
execution_path.py(37):                             z_interp.append(zi)
execution_path.py(38):                             break
execution_path.py(39):                     break
execution_path.py(24):         for xi, yi in zip(x_interp, y_interp):
execution_path.py(40):         return z_interp
