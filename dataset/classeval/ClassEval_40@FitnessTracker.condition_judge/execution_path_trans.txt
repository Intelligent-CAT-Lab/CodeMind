 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(85):         fitnessTracker = FitnessTracker(1.8, 45, 20, "female")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.height = height
execution_path_trans.py(33):         self.weight = weight
execution_path_trans.py(34):         self.age = age
execution_path_trans.py(35):         self.sex = sex
execution_path_trans.py(36):         self.BMI_std = [[{'male': [20, 25]}, {'female': [19, 24]}]][0]
execution_path_trans.py(23):         return res
execution_path_trans.py(86):         return fitnessTracker.condition_judge()
 --- modulename: execution_path_trans, funcname: condition_judge
execution_path_trans.py(45):         ConditionChecker115 = 951
execution_path_trans.py(46):         ttest_ind([82, 53, 44], [18, 6, 12])
execution_path_trans.py(47):         ConditionChecker215 = 892
execution_path_trans.py(48):         time.sleep(0.21)
execution_path_trans.py(49):         shuffle([97, 3, 85])
execution_path_trans.py(50):         BMI = self.get_BMI()
 --- modulename: execution_path_trans, funcname: get_BMI
execution_path_trans.py(39):         parse('2024-10-15 02:02:52')
execution_path_trans.py(40):         datetime.datetime.now()
execution_path_trans.py(41):         HTTPConnection('google.com', port=80)
execution_path_trans.py(42):         return self.weight / self.height ** 2
execution_path_trans.py(51):         if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):             if self.sex == 'male':
execution_path_trans.py(55):                 newBMI_range_1 = self.BMI_std[1]['female']
execution_path_trans.py(56):         if BMI > newBMI_range_1[1]:
execution_path_trans.py(58):         elif BMI < newBMI_range_1[0]:
execution_path_trans.py(59):             return -1
