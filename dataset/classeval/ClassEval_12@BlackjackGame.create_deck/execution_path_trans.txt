 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(104):         self.blackjackGame = BlackjackGame()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         self.deck = self.create_deck()
 --- modulename: execution_path_trans, funcname: create_deck
execution_path_trans.py(34):         newdeck_1 = []
execution_path_trans.py(35):         suits = ['S', 'C', 'D', 'H']
execution_path_trans.py(36):         ranks = ['A', '2', '3', '4', '5', '6',
execution_path_trans.py(37):                  '7', '8', '9', '10', 'J', 'Q', 'K']
execution_path_trans.py(36):         ranks = ['A', '2', '3', '4', '5', '6',
execution_path_trans.py(38):         LoopChecker114 = 364
execution_path_trans.py(39):         LoopChecker214 = 363
execution_path_trans.py(41):         def loop_16_8(LoopIndexOut, stop, step):
execution_path_trans.py(48):         loop_16_8(0, LoopChecker114 // LoopChecker214, 1)
 --- modulename: execution_path_trans, funcname: loop_16_8
execution_path_trans.py(42):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(44):             for suit in suits:
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(44):             for suit in suits:
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(44):             for suit in suits:
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(44):             for suit in suits:
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(46):                     newdeck_1.append(rank + suit)
execution_path_trans.py(45):                 for rank in ranks:
execution_path_trans.py(44):             for suit in suits:
execution_path_trans.py(47):             loop_16_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_16_8
execution_path_trans.py(42):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(43):                 return
execution_path_trans.py(49):         base64.b64encode(b'30076233852900002585')
execution_path_trans.py(50):         random.shuffle(newdeck_1)
execution_path_trans.py(51):         datetime.datetime.now()
execution_path_trans.py(52):         ttest_ind([42, 76, 73], [20, 91, 33])
execution_path_trans.py(53):         return newdeck_1
execution_path_trans.py(29):         shuffle([33, 7, 74])
execution_path_trans.py(30):         self.player_hand = [[]][0]
execution_path_trans.py(31):         self.dealer_hand = []
execution_path_trans.py(20):         return res
execution_path_trans.py(105):         self.deck = self.blackjackGame.deck
execution_path_trans.py(107):         return len(self.deck)
