 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(44):             sql = SQLGenerator('table1')
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.table_name = table_name
execution_path.py(45):             result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',
execution_path.py(46):                                  'field4': 'new_value4'}, "field5 = value1")
execution_path.py(45):             result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',
execution_path.py(46):                                  'field4': 'new_value4'}, "field5 = value1")
execution_path.py(45):             result = sql.update({'field1': 'new_value1', 'field2': 'new_value2', 'field3': 'new_value3',
 --- modulename: execution_path, funcname: update
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
execution_path.py(27):         set_clause = ", ".join([f"{field} = '{value}'" for field, value in data.items()])
execution_path.py(28):         sql = f"UPDATE {self.table_name} SET {set_clause} WHERE {condition}"
execution_path.py(29):         return sql + ";"
execution_path.py(47):             return result
