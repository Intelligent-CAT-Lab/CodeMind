 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(47):             warehouse = Warehouse()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.inventory = {}  # Product ID: Product
execution_path.py(9):         self.orders = {}  # Order ID: Order
execution_path.py(48):             warehouse.add_product(1, 'product 5', 100)
 --- modulename: execution_path, funcname: add_product
execution_path.py(12):         if product_id not in self.inventory:
execution_path.py(13):             self.inventory[product_id] = {'name': name, 'quantity': quantity}
execution_path.py(49):             warehouse.create_order(1, 1, 10)
 --- modulename: execution_path, funcname: create_order
execution_path.py(28):         if self.get_product_quantity(product_id) >= quantity:
 --- modulename: execution_path, funcname: get_product_quantity
execution_path.py(22):         if product_id in self.inventory:
execution_path.py(23):             return self.inventory[product_id]['quantity']
execution_path.py(29):             self.update_product_quantity(product_id, -quantity)
 --- modulename: execution_path, funcname: update_product_quantity
execution_path.py(18):         if product_id in self.inventory:
execution_path.py(19):             self.inventory[product_id]['quantity'] += quantity
execution_path.py(30):             self.orders[order_id] = {'product_id': product_id, 'quantity': quantity, 'status': 'Shipped'}
execution_path.py(50):             return warehouse.track_order(1)
 --- modulename: execution_path, funcname: track_order
execution_path.py(41):         if order_id in self.orders:
execution_path.py(42):             return self.orders[order_id]['status']
