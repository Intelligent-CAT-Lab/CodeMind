 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(66):             self.file_path = "test_example.docx"
execution_path_trans.py(67):             self.handler = DocFileHandler(self.file_path)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(13):         self.file_path = file_path
execution_path_trans.py(68):             doc = Document()
execution_path_trans.py(69):             doc.add_paragraph("Initial content")
execution_path_trans.py(70):             doc.save(self.file_path)
execution_path_trans.py(71):             text_content = self.handler.read_text()
 --- modulename: execution_path_trans, funcname: read_text
execution_path_trans.py(16):         doc = Document(self.file_path)
execution_path_trans.py(17):         text = []
execution_path_trans.py(18):         for paragraph in doc.paragraphs:
execution_path_trans.py(19):             text.append(paragraph.text)
execution_path_trans.py(18):         for paragraph in doc.paragraphs:
execution_path_trans.py(20):         return "\n".join(text)
execution_path_trans.py(72):             expected_content = "Initial content"
execution_path_trans.py(73):             new_content = "New content 1"
execution_path_trans.py(74):             self.handler.write_text(new_content)
 --- modulename: execution_path_trans, funcname: write_text
execution_path_trans.py(23):         try:
execution_path_trans.py(24):             doc = Document()
execution_path_trans.py(25):             paragraph = doc.add_paragraph()
execution_path_trans.py(26):             run = paragraph.add_run(content)
execution_path_trans.py(27):             font = run.font
execution_path_trans.py(28):             font.size = Pt(font_size)
execution_path_trans.py(29):             alignment_value = self._get_alignment_value(alignment)
 --- modulename: execution_path_trans, funcname: _get_alignment_value
execution_path_trans.py(59):             'left': WD_PARAGRAPH_ALIGNMENT.LEFT,
execution_path_trans.py(60):             'center': WD_PARAGRAPH_ALIGNMENT.CENTER,
execution_path_trans.py(61):             'right': WD_PARAGRAPH_ALIGNMENT.RIGHT
execution_path_trans.py(58):         alignment_options = {
execution_path_trans.py(63):         return alignment_options.get(alignment.lower(), WD_PARAGRAPH_ALIGNMENT.LEFT)
execution_path_trans.py(30):             paragraph.alignment = alignment_value
execution_path_trans.py(31):             doc.save(self.file_path)
execution_path_trans.py(32):             return True
execution_path_trans.py(75):             text_content = self.handler.read_text()
 --- modulename: execution_path_trans, funcname: read_text
execution_path_trans.py(16):         doc = Document(self.file_path)
execution_path_trans.py(17):         text = []
execution_path_trans.py(18):         for paragraph in doc.paragraphs:
execution_path_trans.py(19):             text.append(paragraph.text)
execution_path_trans.py(18):         for paragraph in doc.paragraphs:
execution_path_trans.py(20):         return "\n".join(text)
execution_path_trans.py(76):             heading = "Test Heading 1"
execution_path_trans.py(77):             self.handler.add_heading(heading)
 --- modulename: execution_path_trans, funcname: add_heading
execution_path_trans.py(37):         try:
execution_path_trans.py(38):             doc = Document(self.file_path)
execution_path_trans.py(39):             doc.add_heading(heading, level)
execution_path_trans.py(40):             doc.save(self.file_path)
execution_path_trans.py(41):             return True
execution_path_trans.py(78):             doc = Document(self.file_path)
execution_path_trans.py(79):             headings = [p.text for p in doc.paragraphs if p.style.name.startswith('Heading')]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(79):             headings = [p.text for p in doc.paragraphs if p.style.name.startswith('Heading')]
execution_path_trans.py(79):             headings = [p.text for p in doc.paragraphs if p.style.name.startswith('Heading')]
execution_path_trans.py(79):             headings = [p.text for p in doc.paragraphs if p.style.name.startswith('Heading')]
execution_path_trans.py(80):             data = [['Name', 'Age']]
execution_path_trans.py(81):             self.handler.add_table(data)
 --- modulename: execution_path_trans, funcname: add_table
execution_path_trans.py(46):         try:
execution_path_trans.py(47):             doc = Document(self.file_path)
execution_path_trans.py(48):             table = doc.add_table(rows=len(data), cols=len(data[0]))
execution_path_trans.py(49):             for i, row in enumerate(data):
execution_path_trans.py(50):                 for j, cell_value in enumerate(row):
execution_path_trans.py(51):                     table.cell(i, j).text = str(cell_value)
execution_path_trans.py(50):                 for j, cell_value in enumerate(row):
execution_path_trans.py(51):                     table.cell(i, j).text = str(cell_value)
execution_path_trans.py(50):                 for j, cell_value in enumerate(row):
execution_path_trans.py(49):             for i, row in enumerate(data):
execution_path_trans.py(52):             doc.save(self.file_path)
execution_path_trans.py(53):             return True
execution_path_trans.py(82):             doc = Document(self.file_path)
execution_path_trans.py(83):             table = doc.tables[0]
execution_path_trans.py(84):             if os.path.exists(self.file_path):
execution_path_trans.py(85):                 os.remove(self.file_path)
execution_path_trans.py(86):             return text_content,expected_content,text_content,new_content,heading,headings,len(table.rows),len(table.columns)
