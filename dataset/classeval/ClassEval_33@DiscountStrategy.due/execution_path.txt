 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(41):             customer = {'name': 'John Doe', 'fidelity': 900}
execution_path.py(42):             cart = [{'product': 'product1', 'quantity': 10, 'price': 20.0},
execution_path.py(43):                     {'product': 'product2', 'quantity': 5, 'price': 10.0}]
execution_path.py(42):             cart = [{'product': 'product1', 'quantity': 10, 'price': 20.0},
execution_path.py(44):             order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.customer = customer
execution_path.py(9):         self.cart = cart
execution_path.py(10):         self.promotion = promotion
execution_path.py(11):         self.__total = self.total()
 --- modulename: execution_path, funcname: total
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
execution_path.py(15):         return self.__total
execution_path.py(45):             expected_due = 250.0
execution_path.py(46):             actual_due = order.due()
 --- modulename: execution_path, funcname: due
execution_path.py(18):         if self.promotion is None:
execution_path.py(21):             discount = self.promotion(self)
 --- modulename: execution_path, funcname: FidelityPromo
execution_path.py(26):         return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0
execution_path.py(22):         return self.__total - discount
execution_path.py(47):             return actual_due,expected_due
