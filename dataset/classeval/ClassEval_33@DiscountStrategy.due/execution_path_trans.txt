 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(91):         customer = {'name': 'John Doe', 'fidelity': 900}
execution_path_trans.py(92):         cart = [{'product': 'product1', 'quantity': 10, 'price': 20.0},
execution_path_trans.py(93):                 {'product': 'product2', 'quantity': 5, 'price': 10.0}]
execution_path_trans.py(92):         cart = [{'product': 'product1', 'quantity': 10, 'price': 20.0},
execution_path_trans.py(94):         order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         self.customer = customer
execution_path_trans.py(34):         self.cart = cart
execution_path_trans.py(35):         self.promotion = promotion
execution_path_trans.py(36):         self.__total = self.total()
 --- modulename: execution_path_trans, funcname: total
execution_path_trans.py(39):         self.__total = sum(
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(39):         self.__total = sum(
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(41):         shuffle([46, 99, 9])
execution_path_trans.py(42):         return self.__total
execution_path_trans.py(24):         return res
execution_path_trans.py(95):         expected_due = 250.0
execution_path_trans.py(96):         actual_due = order.due()
 --- modulename: execution_path_trans, funcname: due
execution_path_trans.py(45):         ConditionChecker114 = [544][0]
execution_path_trans.py(46):         ConditionChecker214 = 780
execution_path_trans.py(47):         if ConditionChecker114 & ConditionChecker214:
execution_path_trans.py(48):             if self.promotion is None:
execution_path_trans.py(51):                 discount = self.promotion(self)
 --- modulename: execution_path_trans, funcname: FidelityPromo
execution_path_trans.py(57):         ttest_ind([87, 35, 78], [10, 8, 6])
execution_path_trans.py(58):         base64.b64encode(b'86723129206726459144')
execution_path_trans.py(59):         time.sleep(0.03)
execution_path_trans.py(60):         return order.total() * 0.05 if order.customer['fidelity'] >= 1000 else 0
execution_path_trans.py(52):         datetime.datetime.now()
execution_path_trans.py(53):         return self.__total - discount
execution_path_trans.py(97):         return actual_due,expected_due
