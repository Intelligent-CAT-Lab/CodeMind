 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(53):             agf = AccessGatewayFilter()
 --- modulename: execution_path, funcname: __init__
execution_path.py(13):         pass
execution_path.py(54):             request = {'path': '/abc', 'method': 'POST',
execution_path.py(56):                            'Authorization': {'user': {'name': 'user1', 'level': 5, 'address': 'address1'},
execution_path.py(57):                                              'jwt': 'user1' + str(datetime.date.today())}}}
execution_path.py(56):                            'Authorization': {'user': {'name': 'user1', 'level': 5, 'address': 'address1'},
execution_path.py(55):                        'headers': {
execution_path.py(54):             request = {'path': '/abc', 'method': 'POST',
execution_path.py(58):             res = agf.filter(request)
 --- modulename: execution_path, funcname: filter
execution_path.py(16):         request_uri = request['path']
execution_path.py(17):         method = request['method']
execution_path.py(19):         if self.is_start_with(request_uri):
 --- modulename: execution_path, funcname: is_start_with
execution_path.py(32):         start_with = ["/api", '/login']
execution_path.py(33):         for s in start_with:
execution_path.py(34):             if request_uri.startswith(s):
execution_path.py(33):         for s in start_with:
execution_path.py(34):             if request_uri.startswith(s):
execution_path.py(33):         for s in start_with:
execution_path.py(36):         return False
execution_path.py(22):         try:
execution_path.py(23):             token = self.get_jwt_user(request)
 --- modulename: execution_path, funcname: get_jwt_user
execution_path.py(39):         token = request['headers']['Authorization']
execution_path.py(40):         user = token['user']
execution_path.py(41):         if token['jwt'].startswith(user['name']):
execution_path.py(42):             jwt_str_date = token['jwt'].split(user['name'])[1]
execution_path.py(43):             jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
execution_path.py(44):             if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
execution_path.py(46):         return token
execution_path.py(24):             user = token['user']
execution_path.py(25):             if user['level'] > 2:
execution_path.py(26):                 self.set_current_user_info_and_log(user)
 --- modulename: execution_path, funcname: set_current_user_info_and_log
execution_path.py(49):         host = user['address']
execution_path.py(50):         logging.log(msg=user['name'] + host + str(datetime.datetime.now()), level=1)
execution_path.py(27):                 return True
execution_path.py(59):             return res
