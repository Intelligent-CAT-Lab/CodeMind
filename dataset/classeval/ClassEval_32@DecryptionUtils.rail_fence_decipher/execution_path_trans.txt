 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(111):         d = DecryptionUtils('key')
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         ttest_ind([10, 83, 92], [3, 87, 12])
execution_path_trans.py(33):         self.key = key
execution_path_trans.py(24):         return res
execution_path_trans.py(112):         return d.rail_fence_decipher('Hoo!el,Wrdl l', 4)
 --- modulename: execution_path_trans, funcname: rail_fence_decipher
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(82):                  for _ in range(rails)]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(82):                  for _ in range(rails)]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(82):                  for _ in range(rails)]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(82):                  for _ in range(rails)]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(82):                  for _ in range(rails)]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(81):         fence = [['\n' for _ in range(len(encrypted_text))]
execution_path_trans.py(83):         direction = -1
execution_path_trans.py(84):         (row, col) = (0, 0)
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(87):                 direction = -direction
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(87):                 direction = -direction
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(87):                 direction = -direction
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(87):                 direction = -direction
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(86):             if row == 0 or row == rails - 1:
execution_path_trans.py(87):                 direction = -direction
execution_path_trans.py(88):             fence[row][col] = ''
execution_path_trans.py(89):             col += 1
execution_path_trans.py(90):             row += direction
execution_path_trans.py(85):         for _ in range(len(encrypted_text)):
execution_path_trans.py(91):         index = 0
execution_path_trans.py(92):         for i in range(rails):
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(92):         for i in range(rails):
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(92):         for i in range(rails):
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(92):         for i in range(rails):
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(95):                     fence[i][j] = encrypted_text[index]
execution_path_trans.py(96):                     index += 1
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(94):                 if fence[i][j] == '':
execution_path_trans.py(93):             for j in range(len(encrypted_text)):
execution_path_trans.py(92):         for i in range(rails):
execution_path_trans.py(97):         plain_text = ''
execution_path_trans.py(98):         direction = -1
execution_path_trans.py(99):         (row, col) = (0, 0)
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(102):                 direction = -direction
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(102):                 direction = -direction
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(102):                 direction = -direction
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(102):                 direction = -direction
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(101):             if row == 0 or row == rails - 1:
execution_path_trans.py(102):                 direction = -direction
execution_path_trans.py(103):             plain_text += fence[row][col]
execution_path_trans.py(104):             col += 1
execution_path_trans.py(105):             row += direction
execution_path_trans.py(100):         for _ in range(len(encrypted_text)):
execution_path_trans.py(106):         return plain_text
