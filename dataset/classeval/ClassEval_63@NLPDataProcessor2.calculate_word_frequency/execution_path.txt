 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(35):             self.processor = NLPDataProcessor2()
execution_path.py(36):             words_list = [['hello', 'world'], ['this', 'is', 'a', 'test'], ['hello', 'world', 'this', 'is', 'another', 'test'],
execution_path.py(37):                           ['hello', 'hello', 'world']]
execution_path.py(36):             words_list = [['hello', 'world'], ['this', 'is', 'a', 'test'], ['hello', 'world', 'this', 'is', 'another', 'test'],
execution_path.py(38):             expected_output = {'hello': 4, 'world': 3, 'this': 2, 'is': 2, 'test': 2}
execution_path.py(39):             return self.processor.calculate_word_frequency(words_list),expected_output
 --- modulename: execution_path, funcname: calculate_word_frequency
execution_path.py(22):         word_frequency = Counter()
execution_path.py(23):         for words in words_list:
execution_path.py(24):             word_frequency.update(words)
execution_path.py(23):         for words in words_list:
execution_path.py(24):             word_frequency.update(words)
execution_path.py(23):         for words in words_list:
execution_path.py(24):             word_frequency.update(words)
execution_path.py(23):         for words in words_list:
execution_path.py(24):             word_frequency.update(words)
execution_path.py(23):         for words in words_list:
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(25):         sorted_word_frequency = dict(sorted(word_frequency.items(), key=lambda x: x[1], reverse=True))
execution_path.py(26):         top_5_word_frequency = dict(list(sorted_word_frequency.items())[:5])
execution_path.py(27):         return top_5_word_frequency
