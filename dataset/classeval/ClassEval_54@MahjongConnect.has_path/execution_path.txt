 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(80):             mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.BOARD_SIZE = BOARD_SIZE
execution_path.py(12):         self.ICONS = ICONS
execution_path.py(13):         self.board = self.create_board()
 --- modulename: execution_path, funcname: create_board
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(16):         board = [[random.choice(self.ICONS) for _ in range(self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]
execution_path.py(17):         return board
execution_path.py(81):             mc.board = [['a', 'b', 'c', 'a'],
execution_path.py(82):                         ['a', 'b', 'c', 'a'],
execution_path.py(83):                         ['a', 'b', 'c', 'a'],
execution_path.py(84):                         ['a', 'b', 'c', 'a']]
execution_path.py(81):             mc.board = [['a', 'b', 'c', 'a'],
execution_path.py(85):             res = mc.has_path((0, 0), (1, 1))
 --- modulename: execution_path, funcname: has_path
execution_path.py(44):         visited = set()
execution_path.py(45):         stack = [pos1]
execution_path.py(47):         while stack:
execution_path.py(48):             current_pos = stack.pop()
execution_path.py(49):             if current_pos == pos2:
execution_path.py(52):             if current_pos in visited:
execution_path.py(55):             visited.add(current_pos)
execution_path.py(56):             x, y = current_pos
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(63):                         stack.append((new_x, new_y))
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(47):         while stack:
execution_path.py(48):             current_pos = stack.pop()
execution_path.py(49):             if current_pos == pos2:
execution_path.py(52):             if current_pos in visited:
execution_path.py(55):             visited.add(current_pos)
execution_path.py(56):             x, y = current_pos
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(63):                         stack.append((new_x, new_y))
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(47):         while stack:
execution_path.py(48):             current_pos = stack.pop()
execution_path.py(49):             if current_pos == pos2:
execution_path.py(52):             if current_pos in visited:
execution_path.py(55):             visited.add(current_pos)
execution_path.py(56):             x, y = current_pos
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(63):                         stack.append((new_x, new_y))
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(47):         while stack:
execution_path.py(48):             current_pos = stack.pop()
execution_path.py(49):             if current_pos == pos2:
execution_path.py(52):             if current_pos in visited:
execution_path.py(55):             visited.add(current_pos)
execution_path.py(56):             x, y = current_pos
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(60):                 new_x, new_y = x + dx, y + dy
execution_path.py(61):                 if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path.py(62):                     if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path.py(59):             for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path.py(47):         while stack:
execution_path.py(65):         return False
execution_path.py(86):             return res
