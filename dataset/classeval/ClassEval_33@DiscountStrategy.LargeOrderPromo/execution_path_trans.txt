 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(91):         customer = {'name': 'John Doe', 'fidelity': 1200}
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(92):         cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path_trans.py(93):         order = DiscountStrategy(customer, cart, DiscountStrategy.LargeOrderPromo)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         self.customer = customer
execution_path_trans.py(34):         self.cart = cart
execution_path_trans.py(35):         self.promotion = promotion
execution_path_trans.py(36):         self.__total = self.total()
 --- modulename: execution_path_trans, funcname: total
execution_path_trans.py(39):         self.__total = sum(
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(39):         self.__total = sum(
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(41):         shuffle([46, 99, 9])
execution_path_trans.py(42):         return self.__total
execution_path_trans.py(24):         return res
execution_path_trans.py(94):         expected_discount = 0
execution_path_trans.py(95):         actual_discount = order.promotion(order)
 --- modulename: execution_path_trans, funcname: LargeOrderPromo
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
 --- modulename: execution_path_trans, funcname: <setcomp>
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(86):         return order.total() * 0.07 if len({newitem_1['product'] for newitem_1 in order.cart}) >= 10 else 0
execution_path_trans.py(96):         return actual_discount,expected_discount
