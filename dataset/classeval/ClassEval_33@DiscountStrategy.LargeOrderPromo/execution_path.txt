 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(41):             customer = {'name': 'John Doe', 'fidelity': 1200}
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(42):             cart = [{'product': f'product{i}', 'quantity': 1, 'price': 10.0} for i in range(5)]
execution_path.py(43):             order = DiscountStrategy(customer, cart, DiscountStrategy.LargeOrderPromo)
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.customer = customer
execution_path.py(9):         self.cart = cart
execution_path.py(10):         self.promotion = promotion
execution_path.py(11):         self.__total = self.total()
 --- modulename: execution_path, funcname: total
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(14):         self.__total = sum(item['quantity'] * item['price'] for item in self.cart)
execution_path.py(15):         return self.__total
execution_path.py(44):             expected_discount = 0
execution_path.py(45):             actual_discount = order.promotion(order)
 --- modulename: execution_path, funcname: LargeOrderPromo
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
 --- modulename: execution_path, funcname: <setcomp>
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(38):         return order.total() * 0.07 if len({item['product'] for item in order.cart}) >= 10 else 0
execution_path.py(46):             return actual_discount,expected_discount
