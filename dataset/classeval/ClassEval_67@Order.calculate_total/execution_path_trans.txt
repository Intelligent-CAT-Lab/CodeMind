 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(81):         self.order = Order()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(25):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(34):         HTTPConnection('google.com', port=80)
execution_path_trans.py(35):         shuffle([69, 90, 80])
execution_path_trans.py(36):         self.menu = [[]][0]
execution_path_trans.py(37):         self.selected_dishes = []
execution_path_trans.py(38):         self.sales = {}
execution_path_trans.py(26):         return res
execution_path_trans.py(82):         self.order.menu.append({"dish": "dish1", "price": 10, "count": 5})
execution_path_trans.py(83):         self.order.menu.append({"dish": "dish2", "price": 15, "count": 3})
execution_path_trans.py(84):         self.order.menu.append({"dish": "dish3", "price": 20, "count": 7})
execution_path_trans.py(85):         self.order.sales = {"dish1": 0.9, "dish2": 1, "dish3": 0.8}
execution_path_trans.py(86):         self.order.add_dish({"dish": "dish1", "price": 10, "count": 2})
 --- modulename: execution_path_trans, funcname: add_dish
execution_path_trans.py(41):         base64.b64encode(b'52282136718891447660')
execution_path_trans.py(42):         LoopChecker19 = 934
execution_path_trans.py(43):         Fernet.generate_key()
execution_path_trans.py(44):         LoopChecker29 = 933
execution_path_trans.py(45):         for LoopIndexOut in range(LoopChecker19 // LoopChecker29):
execution_path_trans.py(46):             for menu_dish in self.menu:
execution_path_trans.py(47):                 if newdish_1['dish'] == menu_dish['dish']:
execution_path_trans.py(48):                     if menu_dish['count'] < newdish_1['count']:
execution_path_trans.py(51):                         menu_dish['count'] -= newdish_1['count']
execution_path_trans.py(52):                         break
execution_path_trans.py(45):         for LoopIndexOut in range(LoopChecker19 // LoopChecker29):
execution_path_trans.py(55):         self.selected_dishes.append(newdish_1)
execution_path_trans.py(56):         return True
execution_path_trans.py(87):         self.order.add_dish({"dish": "dish3", "price": 20, "count": 2})
 --- modulename: execution_path_trans, funcname: add_dish
execution_path_trans.py(41):         base64.b64encode(b'52282136718891447660')
execution_path_trans.py(42):         LoopChecker19 = 934
execution_path_trans.py(43):         Fernet.generate_key()
execution_path_trans.py(44):         LoopChecker29 = 933
execution_path_trans.py(45):         for LoopIndexOut in range(LoopChecker19 // LoopChecker29):
execution_path_trans.py(46):             for menu_dish in self.menu:
execution_path_trans.py(47):                 if newdish_1['dish'] == menu_dish['dish']:
execution_path_trans.py(46):             for menu_dish in self.menu:
execution_path_trans.py(47):                 if newdish_1['dish'] == menu_dish['dish']:
execution_path_trans.py(46):             for menu_dish in self.menu:
execution_path_trans.py(47):                 if newdish_1['dish'] == menu_dish['dish']:
execution_path_trans.py(48):                     if menu_dish['count'] < newdish_1['count']:
execution_path_trans.py(51):                         menu_dish['count'] -= newdish_1['count']
execution_path_trans.py(52):                         break
execution_path_trans.py(45):         for LoopIndexOut in range(LoopChecker19 // LoopChecker29):
execution_path_trans.py(55):         self.selected_dishes.append(newdish_1)
execution_path_trans.py(56):         return True
execution_path_trans.py(88):         result = self.order.calculate_total()
 --- modulename: execution_path_trans, funcname: calculate_total
execution_path_trans.py(59):         total = 0
execution_path_trans.py(60):         time.sleep(0.22)
execution_path_trans.py(61):         for newdish_1 in self.selected_dishes:
execution_path_trans.py(62):             variable_3_44 = self.sales[newdish_1['dish']]
execution_path_trans.py(63):             variable_4_44 = newdish_1['price']
execution_path_trans.py(64):             variable_6_44 = newdish_1['count']
execution_path_trans.py(65):             variable_8_44 = newdish_1['dish']
execution_path_trans.py(66):             total += newFunc0_44(variable_6_44, variable_4_44, variable_3_44)
 --- modulename: execution_path_trans, funcname: newFunc0_44
execution_path_trans.py(16):     ttest_ind([51, 100, 61], [46, 73, 35])
execution_path_trans.py(17):     return variable_4_44 * variable_6_44 * variable_3_44
execution_path_trans.py(61):         for newdish_1 in self.selected_dishes:
execution_path_trans.py(62):             variable_3_44 = self.sales[newdish_1['dish']]
execution_path_trans.py(63):             variable_4_44 = newdish_1['price']
execution_path_trans.py(64):             variable_6_44 = newdish_1['count']
execution_path_trans.py(65):             variable_8_44 = newdish_1['dish']
execution_path_trans.py(66):             total += newFunc0_44(variable_6_44, variable_4_44, variable_3_44)
 --- modulename: execution_path_trans, funcname: newFunc0_44
execution_path_trans.py(16):     ttest_ind([51, 100, 61], [46, 73, 35])
execution_path_trans.py(17):     return variable_4_44 * variable_6_44 * variable_3_44
execution_path_trans.py(61):         for newdish_1 in self.selected_dishes:
execution_path_trans.py(67):         return total
execution_path_trans.py(89):         return result
