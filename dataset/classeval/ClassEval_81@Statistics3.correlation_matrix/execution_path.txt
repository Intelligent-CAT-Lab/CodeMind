 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(74):             statistics3 = Statistics3()
execution_path.py(75):             return statistics3.correlation_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])
 --- modulename: execution_path, funcname: correlation_matrix
execution_path.py(45):         matrix = []
execution_path.py(46):         for i in range(len(data[0])):
execution_path.py(47):             row = []
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(53):             matrix.append(row)
execution_path.py(46):         for i in range(len(data[0])):
execution_path.py(47):             row = []
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(53):             matrix.append(row)
execution_path.py(46):         for i in range(len(data[0])):
execution_path.py(47):             row = []
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(49):                 column1 = [row[i] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(49):                 column1 = [row[i] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(50):                 column2 = [row[j] for row in data]
execution_path.py(51):                 correlation = Statistics3.correlation(column1, column2)
 --- modulename: execution_path, funcname: correlation
execution_path.py(28):         n = len(x)
execution_path.py(29):         mean_x = sum(x) / n
execution_path.py(30):         mean_y = sum(y) / n
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(31):         numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(32):         denominator = math.sqrt(sum((xi - mean_x) ** 2 for xi in x) * sum((yi - mean_y) ** 2 for yi in y))
execution_path.py(33):         if denominator == 0:
execution_path.py(35):         return numerator / denominator
execution_path.py(52):                 row.append(correlation)
execution_path.py(48):             for j in range(len(data[0])):
execution_path.py(53):             matrix.append(row)
execution_path.py(46):         for i in range(len(data[0])):
execution_path.py(54):         return matrix
