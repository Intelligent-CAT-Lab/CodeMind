 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(60):             sender = EmailClient('sender@example.com', 100)
 --- modulename: execution_path, funcname: __init__
execution_path.py(10):         self.addr = addr
execution_path.py(11):         self.capacity = capacity
execution_path.py(12):         self.inbox = []
execution_path.py(61):             receiver = EmailClient('receiver@example.com', 50)
 --- modulename: execution_path, funcname: __init__
execution_path.py(10):         self.addr = addr
execution_path.py(11):         self.capacity = capacity
execution_path.py(12):         self.inbox = []
execution_path.py(62):             receiver.inbox = [{'size': 10}, {'size': 20}, {'size': 15}]
execution_path.py(63):             return receiver.clear_inbox(50)
 --- modulename: execution_path, funcname: clear_inbox
execution_path.py(51):         if len(self.addr) == 0:
execution_path.py(53):         freed_space = 0
execution_path.py(54):         while freed_space < size and self.inbox:
execution_path.py(55):             email = self.inbox[0]
execution_path.py(56):             freed_space += email['size']
execution_path.py(57):             del self.inbox[0]
execution_path.py(54):         while freed_space < size and self.inbox:
execution_path.py(55):             email = self.inbox[0]
execution_path.py(56):             freed_space += email['size']
execution_path.py(57):             del self.inbox[0]
execution_path.py(54):         while freed_space < size and self.inbox:
execution_path.py(55):             email = self.inbox[0]
execution_path.py(56):             freed_space += email['size']
execution_path.py(57):             del self.inbox[0]
execution_path.py(54):         while freed_space < size and self.inbox:
