 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(92):         vendingMachine = VendingMachine()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(31):         self.inventory = {}
execution_path_trans.py(32):         shuffle([72, 17, 25])
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         parse('2024-10-15 02:35:13')
execution_path_trans.py(35):         self.balance = 0
execution_path_trans.py(19):         return res
execution_path_trans.py(93):         vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}, 'Pizza': {'price': 1.25, 'quantity': 10}}
execution_path_trans.py(94):         return vendingMachine.display_items()
 --- modulename: execution_path_trans, funcname: display_items
execution_path_trans.py(74):         if not self.inventory:
execution_path_trans.py(77):             items = []
execution_path_trans.py(79):             def loop_45_12(LoopIndexOut, stop, step):
execution_path_trans.py(86):             loop_45_12(0, LoopChecker139 // LoopChecker239, 1)
 --- modulename: execution_path_trans, funcname: loop_45_12
execution_path_trans.py(80):                 if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(82):                 for (newitem_name_1, item_info) in self.inventory.items():
execution_path_trans.py(83):                     items.append(
execution_path_trans.py(84):                         f"{newitem_name_1} - ${item_info['price']} [{item_info['quantity']}]")
execution_path_trans.py(83):                     items.append(
execution_path_trans.py(82):                 for (newitem_name_1, item_info) in self.inventory.items():
execution_path_trans.py(83):                     items.append(
execution_path_trans.py(84):                         f"{newitem_name_1} - ${item_info['price']} [{item_info['quantity']}]")
execution_path_trans.py(83):                     items.append(
execution_path_trans.py(82):                 for (newitem_name_1, item_info) in self.inventory.items():
execution_path_trans.py(85):                 loop_45_12(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_45_12
execution_path_trans.py(80):                 if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(81):                     return
execution_path_trans.py(87):             return '\n'.join(items)
