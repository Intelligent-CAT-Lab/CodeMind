 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(48):             calc = CombinationCalculator(["A", "B"])
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.datas = datas
execution_path.py(49):             return calc.select_all()
 --- modulename: execution_path, funcname: select_all
execution_path.py(31):         result = []
execution_path.py(32):         for i in range(1, len(self.datas) + 1):
execution_path.py(33):             result.extend(self.select(i))
 --- modulename: execution_path, funcname: select
execution_path.py(26):         result = []
execution_path.py(27):         self._select(0, [None] * m, 0, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(44):             resultList[resultIndex] = self.datas[i]
execution_path.py(45):             self._select(i + 1, resultList, resultIndex + 1, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(40):             result.append(resultList.copy())
execution_path.py(41):             return
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(44):             resultList[resultIndex] = self.datas[i]
execution_path.py(45):             self._select(i + 1, resultList, resultIndex + 1, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(40):             result.append(resultList.copy())
execution_path.py(41):             return
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(28):         return result
execution_path.py(32):         for i in range(1, len(self.datas) + 1):
execution_path.py(33):             result.extend(self.select(i))
 --- modulename: execution_path, funcname: select
execution_path.py(26):         result = []
execution_path.py(27):         self._select(0, [None] * m, 0, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(44):             resultList[resultIndex] = self.datas[i]
execution_path.py(45):             self._select(i + 1, resultList, resultIndex + 1, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(44):             resultList[resultIndex] = self.datas[i]
execution_path.py(45):             self._select(i + 1, resultList, resultIndex + 1, result)
 --- modulename: execution_path, funcname: _select
execution_path.py(37):         resultLen = len(resultList)
execution_path.py(38):         resultCount = resultIndex + 1
execution_path.py(39):         if resultCount > resultLen:
execution_path.py(40):             result.append(resultList.copy())
execution_path.py(41):             return
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(43):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path.py(28):         return result
execution_path.py(32):         for i in range(1, len(self.datas) + 1):
execution_path.py(34):         return result
