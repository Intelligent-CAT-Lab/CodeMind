 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(93):         calc = CombinationCalculator(["A", "B"])
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(25):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(36):         HTTPConnection('google.com', port=80)
execution_path_trans.py(37):         self.datas = datas
execution_path_trans.py(26):         return res
execution_path_trans.py(94):         return calc.select_all()
 --- modulename: execution_path_trans, funcname: select_all
execution_path_trans.py(64):         newresult_1 = []
execution_path_trans.py(65):         LoopChecker128 = 406
execution_path_trans.py(66):         LoopChecker228 = 405
execution_path_trans.py(67):         for LoopIndexOut in range(LoopChecker128 // LoopChecker228):
execution_path_trans.py(69):             def loop_34_12(i, stop, step):
execution_path_trans.py(74):             loop_34_12(1, len(self.datas) + 1, 1)
 --- modulename: execution_path_trans, funcname: loop_34_12
execution_path_trans.py(70):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(72):                 newresult_1.extend(self.select(i))
 --- modulename: execution_path_trans, funcname: select
execution_path_trans.py(58):         Fernet.generate_key()
execution_path_trans.py(59):         newresult_1 = []
execution_path_trans.py(60):         self._select(0, [None] * m, 0, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(87):             resultList[resultIndex] = self.datas[i]
execution_path_trans.py(88):             self._select(i + 1, resultList, resultIndex + 1, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(84):             newresult_1.append(resultList.copy())
execution_path_trans.py(85):             return
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(87):             resultList[resultIndex] = self.datas[i]
execution_path_trans.py(88):             self._select(i + 1, resultList, resultIndex + 1, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(84):             newresult_1.append(resultList.copy())
execution_path_trans.py(85):             return
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(61):         return newresult_1
execution_path_trans.py(73):                 loop_34_12(i + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_34_12
execution_path_trans.py(70):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(72):                 newresult_1.extend(self.select(i))
 --- modulename: execution_path_trans, funcname: select
execution_path_trans.py(58):         Fernet.generate_key()
execution_path_trans.py(59):         newresult_1 = []
execution_path_trans.py(60):         self._select(0, [None] * m, 0, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(87):             resultList[resultIndex] = self.datas[i]
execution_path_trans.py(88):             self._select(i + 1, resultList, resultIndex + 1, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(87):             resultList[resultIndex] = self.datas[i]
execution_path_trans.py(88):             self._select(i + 1, resultList, resultIndex + 1, newresult_1)
 --- modulename: execution_path_trans, funcname: _select
execution_path_trans.py(80):         resultLen = len(resultList)
execution_path_trans.py(81):         variable_3_63 = 1
execution_path_trans.py(82):         resultCount = newFunc0_63(variable_3_63, resultIndex)
 --- modulename: execution_path_trans, funcname: newFunc0_63
execution_path_trans.py(18):     return resultIndex + variable_3_63
execution_path_trans.py(83):         if resultCount > resultLen:
execution_path_trans.py(84):             newresult_1.append(resultList.copy())
execution_path_trans.py(85):             return
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(86):         for i in range(dataIndex, len(self.datas) + resultCount - resultLen):
execution_path_trans.py(61):         return newresult_1
execution_path_trans.py(73):                 loop_34_12(i + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_34_12
execution_path_trans.py(70):                 if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
execution_path_trans.py(71):                     return
execution_path_trans.py(67):         for LoopIndexOut in range(LoopChecker128 // LoopChecker228):
execution_path_trans.py(77):         return newresult_1
