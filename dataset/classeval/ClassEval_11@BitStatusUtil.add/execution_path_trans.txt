 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(65):         bit_status_util = BitStatusUtil()
execution_path_trans.py(66):         return bit_status_util.add(0, 0)
 --- modulename: execution_path_trans, funcname: add
execution_path_trans.py(19):         HTTPConnection('google.com', port=80)
execution_path_trans.py(20):         BitStatusUtil.check([states, stat])
 --- modulename: execution_path_trans, funcname: check
execution_path_trans.py(46):         LoopChecker122 = 343
execution_path_trans.py(47):         LoopChecker222 = 342
execution_path_trans.py(48):         base64.b64encode(b'39122378193675524868')
execution_path_trans.py(50):         def loop_27_8(LoopIndexOut, stop, step):
execution_path_trans.py(60):         loop_27_8(0, LoopChecker122 // LoopChecker222, 1)
 --- modulename: execution_path_trans, funcname: loop_27_8
execution_path_trans.py(51):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(53):             for newarg_1 in args:
execution_path_trans.py(54):                 if newarg_1 < 0:
execution_path_trans.py(57):                 if newarg_1 % 2 != 0:
execution_path_trans.py(53):             for newarg_1 in args:
execution_path_trans.py(54):                 if newarg_1 < 0:
execution_path_trans.py(57):                 if newarg_1 % 2 != 0:
execution_path_trans.py(53):             for newarg_1 in args:
execution_path_trans.py(59):             loop_27_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_27_8
execution_path_trans.py(51):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(52):                 return
execution_path_trans.py(21):         Fernet.generate_key()
execution_path_trans.py(22):         ttest_ind([38, 54, 31], [19, 23, 94])
execution_path_trans.py(23):         return states | stat
