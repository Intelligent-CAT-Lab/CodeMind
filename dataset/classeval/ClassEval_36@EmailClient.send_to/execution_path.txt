 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(60):             sender = EmailClient('sender@example.com', 100)
 --- modulename: execution_path, funcname: __init__
execution_path.py(10):         self.addr = addr
execution_path.py(11):         self.capacity = capacity
execution_path.py(12):         self.inbox = []
execution_path.py(61):             receiver = EmailClient('receiver@example.com', 0)
 --- modulename: execution_path, funcname: __init__
execution_path.py(10):         self.addr = addr
execution_path.py(11):         self.capacity = capacity
execution_path.py(12):         self.inbox = []
execution_path.py(62):             return sender.send_to(receiver, 'Hello', 10)
 --- modulename: execution_path, funcname: send_to
execution_path.py(15):         if not recv.is_full_with_one_more_email(size):
 --- modulename: execution_path, funcname: is_full_with_one_more_email
execution_path.py(41):         occupied_size = self.get_occupied_size()
 --- modulename: execution_path, funcname: get_occupied_size
execution_path.py(45):         occupied_size = 0
execution_path.py(46):         for email in self.inbox:
execution_path.py(48):         return occupied_size
execution_path.py(42):         return True if occupied_size + size > self.capacity else False
execution_path.py(28):             self.clear_inbox(size)
 --- modulename: execution_path, funcname: clear_inbox
execution_path.py(51):         if len(self.addr) == 0:
execution_path.py(53):         freed_space = 0
execution_path.py(54):         while freed_space < size and self.inbox:
execution_path.py(29):             return False
