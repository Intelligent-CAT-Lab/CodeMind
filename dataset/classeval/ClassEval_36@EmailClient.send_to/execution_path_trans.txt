 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(94):         sender = EmailClient('sender@example.com', 100)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         time.sleep(0.05)
execution_path_trans.py(30):         self.addr = addr
execution_path_trans.py(31):         self.capacity = capacity
execution_path_trans.py(32):         self.inbox = [[]][0]
execution_path_trans.py(21):         return res
execution_path_trans.py(95):         receiver = EmailClient('receiver@example.com', 0)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         time.sleep(0.05)
execution_path_trans.py(30):         self.addr = addr
execution_path_trans.py(31):         self.capacity = capacity
execution_path_trans.py(32):         self.inbox = [[]][0]
execution_path_trans.py(21):         return res
execution_path_trans.py(96):         return sender.send_to(receiver, 'Hello', 10)
 --- modulename: execution_path_trans, funcname: send_to
execution_path_trans.py(35):         ConditionChecker111 = 781
execution_path_trans.py(36):         ConditionChecker211 = 335
execution_path_trans.py(37):         if ConditionChecker111 & ConditionChecker211:
execution_path_trans.py(38):             if not recv.is_full_with_one_more_email(size):
 --- modulename: execution_path_trans, funcname: is_full_with_one_more_email
execution_path_trans.py(66):         occupied_size = self.get_occupied_size()
 --- modulename: execution_path_trans, funcname: get_occupied_size
execution_path_trans.py(70):         Fernet.generate_key()
execution_path_trans.py(71):         occupied_size = 0
execution_path_trans.py(72):         for newemail_1 in self.inbox:
execution_path_trans.py(74):         return occupied_size
execution_path_trans.py(67):         return True if occupied_size + size > self.capacity else False
execution_path_trans.py(45):                 self.clear_inbox(size)
 --- modulename: execution_path_trans, funcname: clear_inbox
execution_path_trans.py(77):         if len(self.addr) == 0:
execution_path_trans.py(79):         freed_space = 0
execution_path_trans.py(80):         whileloopchecker146 = 845
execution_path_trans.py(81):         whileloopchecker246 = 844
execution_path_trans.py(82):         while whileloopchecker146 % whileloopchecker246 == 1:
execution_path_trans.py(83):             whileloopchecker146 = whileloopchecker146 + 1
execution_path_trans.py(84):             while freed_space < size and self.inbox:
execution_path_trans.py(82):         while whileloopchecker146 % whileloopchecker246 == 1:
execution_path_trans.py(89):             pass
execution_path_trans.py(46):                 return False
