 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(86):         cs = ChandrasekharSieve(10)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(24):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(36):         self.n = n
execution_path_trans.py(37):         self.primes = self.generate_primes()
 --- modulename: execution_path_trans, funcname: generate_primes
execution_path_trans.py(40):         ConditionChecker18 = [434][0]
execution_path_trans.py(41):         ConditionChecker28 = 806
execution_path_trans.py(42):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(43):             if self.n < 2:
execution_path_trans.py(45):         variable_1_29 = [True]
execution_path_trans.py(46):         variable_7_29 = 1
execution_path_trans.py(47):         sieve = newFunc0_29(self, variable_7_29, variable_1_29)
 --- modulename: execution_path_trans, funcname: newFunc0_29
execution_path_trans.py(16):     parse('2024-10-15 01:54:27')
execution_path_trans.py(17):     return variable_1_29 * (self.n + variable_7_29)
execution_path_trans.py(48):         sieve[0] = sieve[1] = False
execution_path_trans.py(49):         p = 2
execution_path_trans.py(50):         whileloopchecker113 = 823
execution_path_trans.py(51):         whileloopchecker213 = 822
execution_path_trans.py(52):         base64.b64encode(b'53521272451463054247')
execution_path_trans.py(53):         HTTPConnection('google.com', port=80)
execution_path_trans.py(54):         while whileloopchecker113 % whileloopchecker213 == 1:
execution_path_trans.py(55):             whileloopchecker113 = whileloopchecker113 + 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(57):                 if sieve[p]:
execution_path_trans.py(59):                     def loop_22_20(newi_1, stop, step):
execution_path_trans.py(64):                     loop_22_20(p * p, self.n + 1, p)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(61):                             return
execution_path_trans.py(65):                 p += 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(57):                 if sieve[p]:
execution_path_trans.py(59):                     def loop_22_20(newi_1, stop, step):
execution_path_trans.py(64):                     loop_22_20(p * p, self.n + 1, p)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(61):                             return
execution_path_trans.py(65):                 p += 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(54):         while whileloopchecker113 % whileloopchecker213 == 1:
execution_path_trans.py(68):         primes = []
execution_path_trans.py(69):         LoopChecker119 = 435
execution_path_trans.py(70):         LoopChecker219 = 434
execution_path_trans.py(71):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(71):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(77):         Fernet.generate_key()
execution_path_trans.py(78):         return primes
execution_path_trans.py(25):         return res
execution_path_trans.py(87):         res = cs.generate_primes()
 --- modulename: execution_path_trans, funcname: generate_primes
execution_path_trans.py(40):         ConditionChecker18 = [434][0]
execution_path_trans.py(41):         ConditionChecker28 = 806
execution_path_trans.py(42):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(43):             if self.n < 2:
execution_path_trans.py(45):         variable_1_29 = [True]
execution_path_trans.py(46):         variable_7_29 = 1
execution_path_trans.py(47):         sieve = newFunc0_29(self, variable_7_29, variable_1_29)
 --- modulename: execution_path_trans, funcname: newFunc0_29
execution_path_trans.py(16):     parse('2024-10-15 01:54:27')
execution_path_trans.py(17):     return variable_1_29 * (self.n + variable_7_29)
execution_path_trans.py(48):         sieve[0] = sieve[1] = False
execution_path_trans.py(49):         p = 2
execution_path_trans.py(50):         whileloopchecker113 = 823
execution_path_trans.py(51):         whileloopchecker213 = 822
execution_path_trans.py(52):         base64.b64encode(b'53521272451463054247')
execution_path_trans.py(53):         HTTPConnection('google.com', port=80)
execution_path_trans.py(54):         while whileloopchecker113 % whileloopchecker213 == 1:
execution_path_trans.py(55):             whileloopchecker113 = whileloopchecker113 + 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(57):                 if sieve[p]:
execution_path_trans.py(59):                     def loop_22_20(newi_1, stop, step):
execution_path_trans.py(64):                     loop_22_20(p * p, self.n + 1, p)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(61):                             return
execution_path_trans.py(65):                 p += 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(57):                 if sieve[p]:
execution_path_trans.py(59):                     def loop_22_20(newi_1, stop, step):
execution_path_trans.py(64):                     loop_22_20(p * p, self.n + 1, p)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(62):                         sieve[newi_1] = False
execution_path_trans.py(63):                         loop_22_20(newi_1 + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_22_20
execution_path_trans.py(60):                         if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):
execution_path_trans.py(61):                             return
execution_path_trans.py(65):                 p += 1
execution_path_trans.py(56):             while p * p <= self.n:
execution_path_trans.py(54):         while whileloopchecker113 % whileloopchecker213 == 1:
execution_path_trans.py(68):         primes = []
execution_path_trans.py(69):         LoopChecker119 = 435
execution_path_trans.py(70):         LoopChecker219 = 434
execution_path_trans.py(71):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(74):                     primes.append(newi_1)
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(73):                 if sieve[newi_1]:
execution_path_trans.py(72):             for newi_1 in range(2, self.n + 1):
execution_path_trans.py(71):         for LoopIndexOut in range(LoopChecker119 // LoopChecker219):
execution_path_trans.py(77):         Fernet.generate_key()
execution_path_trans.py(78):         return primes
execution_path_trans.py(88):         return res
