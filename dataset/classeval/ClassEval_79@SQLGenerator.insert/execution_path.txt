 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(44):             sql = SQLGenerator('table1')
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.table_name = table_name
execution_path.py(45):             result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',
execution_path.py(46):                                  'field5': 'value5'})
execution_path.py(45):             result = sql.insert({'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4',
 --- modulename: execution_path, funcname: insert
execution_path.py(21):         fields = ", ".join(data.keys())
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(22):         values = ", ".join([f"'{value}'" for value in data.values()])
execution_path.py(23):         sql = f"INSERT INTO {self.table_name} ({fields}) VALUES ({values})"
execution_path.py(24):         return sql + ";"
execution_path.py(47):             return result
