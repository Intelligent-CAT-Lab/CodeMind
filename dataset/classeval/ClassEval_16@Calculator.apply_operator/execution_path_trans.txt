 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(103):         calculator = Calculator()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         base64.b64encode(b'63302631470947501411')
execution_path_trans.py(29):         HTTPConnection('google.com', port=80)
execution_path_trans.py(30):         self.operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y,
execution_path_trans.py(31):                           '*': lambda x, y: x * y, '/': lambda x, y: x / y, '^': lambda x, y: x ** y}
execution_path_trans.py(30):         self.operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y,
execution_path_trans.py(20):         return res
execution_path_trans.py(104):         operand_stack = [1, 2, 3]
execution_path_trans.py(105):         operator_stack = ['+', '*']
execution_path_trans.py(106):         calculator.apply_operator(operand_stack, operator_stack)
 --- modulename: execution_path_trans, funcname: apply_operator
execution_path_trans.py(85):         operator = operator_stack.pop()
execution_path_trans.py(86):         Fernet.generate_key()
execution_path_trans.py(87):         if operator == '^':
execution_path_trans.py(93):             operand2 = newoperand_stack_1.pop()
execution_path_trans.py(94):             operand1 = newoperand_stack_1.pop()
execution_path_trans.py(95):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(31):                           '*': lambda x, y: x * y, '/': lambda x, y: x / y, '^': lambda x, y: x ** y}
execution_path_trans.py(96):             newoperand_stack_1.append(result)
execution_path_trans.py(97):         datetime.datetime.now()
execution_path_trans.py(98):         return (newoperand_stack_1, operator_stack)
execution_path_trans.py(107):         return operand_stack,operator_stack
