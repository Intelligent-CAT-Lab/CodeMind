 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(79):             calculator = Calculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(9):             '+': lambda x, y: x + y,
execution_path.py(10):             '-': lambda x, y: x - y,
execution_path.py(11):             '*': lambda x, y: x * y,
execution_path.py(12):             '/': lambda x, y: x / y,
execution_path.py(13):             '^': lambda x, y: x ** y
execution_path.py(8):         self.operators = {
execution_path.py(80):             operand_stack = [1, 2, 3]
execution_path.py(81):             operator_stack = ['+', '*']
execution_path.py(82):             calculator.apply_operator(operand_stack, operator_stack)
 --- modulename: execution_path, funcname: apply_operator
execution_path.py(65):         operator = operator_stack.pop()
execution_path.py(66):         if operator == '^':
execution_path.py(72):             operand2 = operand_stack.pop()
execution_path.py(73):             operand1 = operand_stack.pop()
execution_path.py(74):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(11):             '*': lambda x, y: x * y,
execution_path.py(75):             operand_stack.append(result)
execution_path.py(76):         return operand_stack, operator_stack
execution_path.py(83):             return operand_stack,operator_stack
