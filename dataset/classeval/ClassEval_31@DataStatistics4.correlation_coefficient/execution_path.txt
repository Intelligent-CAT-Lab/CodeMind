 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(55):             return DataStatistics4.correlation_coefficient([1, 2, 3], [1, 2, 4])
 --- modulename: execution_path, funcname: correlation_coefficient
execution_path.py(12):         n = len(data1)
execution_path.py(13):         mean1 = sum(data1) / n
execution_path.py(14):         mean2 = sum(data2) / n
execution_path.py(16):         numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(16):         numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(16):         numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(16):         numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(16):         numerator = sum((data1[i] - mean1) * (data2[i] - mean2) for i in range(n))
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(17):         denominator = math.sqrt(sum((data1[i] - mean1) ** 2 for i in range(n))) * math.sqrt(sum((data2[i] - mean2) ** 2 for i in range(n)))
execution_path.py(19):         return numerator / denominator if denominator != 0 else 0
