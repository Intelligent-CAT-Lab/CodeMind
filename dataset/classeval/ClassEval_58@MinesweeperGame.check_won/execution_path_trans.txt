 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(104):         minesweeper_game = MinesweeperGame(3, 1)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(25):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(34):         self.n = n
execution_path_trans.py(35):         self.k = k
execution_path_trans.py(36):         self.minesweeper_map = self.generate_mine_sweeper_map()
 --- modulename: execution_path_trans, funcname: generate_mine_sweeper_map
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(41):         arr = [[0 for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(42):         LoopChecker114 = 307
execution_path_trans.py(43):         LoopChecker214 = 306
execution_path_trans.py(44):         for LoopIndexOut in range(LoopChecker114 // LoopChecker214):
execution_path_trans.py(45):             for num in range(self.k):
execution_path_trans.py(46):                 x = random.randint(0, self.n - 1)
execution_path_trans.py(47):                 y = random.randint(0, self.n - 1)
execution_path_trans.py(48):                 arr[y][x] = 'X'
execution_path_trans.py(49):                 if (x >= 0 and x <= self.n - 2) and (y >= 0 and y <= self.n - 1):
execution_path_trans.py(50):                     if arr[y][x + 1] != 'X':
execution_path_trans.py(51):                         arr[y][x + 1] += 1
execution_path_trans.py(52):                 if (x >= 1 and x <= self.n - 1) and (y >= 0 and y <= self.n - 1):
execution_path_trans.py(55):                 if (x >= 1 and x <= self.n - 1) and (y >= 1 and y <= self.n - 1):
execution_path_trans.py(58):                 if (x >= 0 and x <= self.n - 2) and (y >= 1 and y <= self.n - 1):
execution_path_trans.py(59):                     if arr[y - 1][x + 1] != 'X':
execution_path_trans.py(60):                         arr[y - 1][x + 1] += 1
execution_path_trans.py(61):                 if (x >= 0 and x <= self.n - 1) and (y >= 1 and y <= self.n - 1):
execution_path_trans.py(62):                     if arr[y - 1][x] != 'X':
execution_path_trans.py(63):                         arr[y - 1][x] += 1
execution_path_trans.py(64):                 if (x >= 0 and x <= self.n - 2) and (y >= 0 and y <= self.n - 2):
execution_path_trans.py(67):                 if (x >= 1 and x <= self.n - 1) and (y >= 0 and y <= self.n - 2):
execution_path_trans.py(70):                 if (x >= 0 and x <= self.n - 1) and (y >= 0 and y <= self.n - 2):
execution_path_trans.py(45):             for num in range(self.k):
execution_path_trans.py(44):         for LoopIndexOut in range(LoopChecker114 // LoopChecker214):
execution_path_trans.py(75):         return arr
execution_path_trans.py(37):         self.player_map = self.generate_playerMap()
 --- modulename: execution_path_trans, funcname: generate_playerMap
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(78):         arr = [['-' for row in range(self.n)] for column in range(self.n)]
execution_path_trans.py(79):         return arr
execution_path_trans.py(38):         self.score = [0][0]
execution_path_trans.py(26):         return res
execution_path_trans.py(105):         minesweeper_game.minesweeper_map = [['X', 1, 0], [1, 1, 0], [0, 0, 0]]
execution_path_trans.py(106):         minesweeper_game.player_map = [['-', '-', '-'], ['-', 1, '-'], ['-', '-', '-']]
execution_path_trans.py(107):         return minesweeper_game.check_won(minesweeper_game.player_map)
 --- modulename: execution_path_trans, funcname: check_won
execution_path_trans.py(82):         for newi_1 in range(self.n):
execution_path_trans.py(83):             for j in range(self.n):
execution_path_trans.py(84):                 if map[newi_1][j] == '-' and self.minesweeper_map[newi_1][j] != 'X':
execution_path_trans.py(83):             for j in range(self.n):
execution_path_trans.py(84):                 if map[newi_1][j] == '-' and self.minesweeper_map[newi_1][j] != 'X':
execution_path_trans.py(85):                     return False
