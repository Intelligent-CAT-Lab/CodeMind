 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(65):         ss = SplitSentence()
execution_path_trans.py(66):         cnt = ss.process_text_file("Mr. Smith is a teacher. Yes 1 2 3 4 5 6.")
 --- modulename: execution_path_trans, funcname: process_text_file
execution_path_trans.py(43):         sentences = self.split_sentences(sentences_string)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(21):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: split_sentences
execution_path_trans.py(30):         sentences = re.split(
execution_path_trans.py(31):             '(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s', sentences_string)
execution_path_trans.py(30):         sentences = re.split(
execution_path_trans.py(32):         HTTPConnection('google.com', port=80)
execution_path_trans.py(33):         shuffle([98, 5, 14])
execution_path_trans.py(34):         return sentences
execution_path_trans.py(22):         return res
execution_path_trans.py(44):         newmax_count_1 = [0][0]
execution_path_trans.py(45):         parse('2024-10-15 02:15:17')
execution_path_trans.py(46):         LoopChecker117 = 512
execution_path_trans.py(47):         ttest_ind([63, 56, 41], [77, 72, 28])
execution_path_trans.py(48):         LoopChecker217 = 511
execution_path_trans.py(49):         ConditionChecker122 = 986
execution_path_trans.py(50):         ConditionChecker222 = 93
execution_path_trans.py(51):         for LoopIndexOut in range(LoopChecker117 // LoopChecker217):
execution_path_trans.py(52):             for sentence in sentences:
execution_path_trans.py(53):                 count = self.count_words(sentence)
 --- modulename: execution_path_trans, funcname: count_words
execution_path_trans.py(37):         sentence = re.sub('[^a-zA-Z\\s]', '', sentence)
execution_path_trans.py(38):         base64.b64encode(b'14610593935627885269')
execution_path_trans.py(39):         words = sentence.split()
execution_path_trans.py(40):         return len(words)
execution_path_trans.py(54):                 if ConditionChecker122 & ConditionChecker222:
execution_path_trans.py(55):                     if count > newmax_count_1:
execution_path_trans.py(56):                         newmax_count_1 = count
execution_path_trans.py(52):             for sentence in sentences:
execution_path_trans.py(53):                 count = self.count_words(sentence)
 --- modulename: execution_path_trans, funcname: count_words
execution_path_trans.py(37):         sentence = re.sub('[^a-zA-Z\\s]', '', sentence)
execution_path_trans.py(38):         base64.b64encode(b'14610593935627885269')
execution_path_trans.py(39):         words = sentence.split()
execution_path_trans.py(40):         return len(words)
execution_path_trans.py(54):                 if ConditionChecker122 & ConditionChecker222:
execution_path_trans.py(55):                     if count > newmax_count_1:
execution_path_trans.py(52):             for sentence in sentences:
execution_path_trans.py(51):         for LoopIndexOut in range(LoopChecker117 // LoopChecker217):
execution_path_trans.py(59):         Fernet.generate_key()
execution_path_trans.py(60):         return newmax_count_1
execution_path_trans.py(67):         return cnt
