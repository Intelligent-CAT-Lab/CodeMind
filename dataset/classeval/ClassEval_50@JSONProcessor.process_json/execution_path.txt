 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(41):             self.processor = JSONProcessor()
execution_path.py(43):                 "key1": "value1",
execution_path.py(44):                 "key2": "value2",
execution_path.py(45):                 "key3": "value3"
execution_path.py(42):             self.test_data = {
execution_path.py(47):             self.file_path = "test.json"
execution_path.py(48):             with open(self.file_path, 'w') as file:
execution_path.py(49):                 json.dump(self.test_data, file)
execution_path.py(48):             with open(self.file_path, 'w') as file:
execution_path.py(50):             remove_key = "nonexistent_key"
execution_path.py(51):             self.processor.process_json(self.file_path, remove_key)
 --- modulename: execution_path, funcname: process_json
execution_path.py(30):         data = self.read_json(file_path)
 --- modulename: execution_path, funcname: read_json
execution_path.py(12):         if not os.path.exists(file_path):
execution_path.py(14):         try:
execution_path.py(15):             with open(file_path, 'r') as file:
execution_path.py(16):                 data = json.load(file)
execution_path.py(15):             with open(file_path, 'r') as file:
execution_path.py(17):             return data
execution_path.py(31):         if data == 0 or data == -1:
execution_path.py(33):         if remove_key in data:
execution_path.py(38):             return 0
execution_path.py(52):             with open(self.file_path, 'r') as file:
execution_path.py(53):                 processed_data = json.load(file)
execution_path.py(52):             with open(self.file_path, 'r') as file:
execution_path.py(54):             return processed_data,self.test_data
