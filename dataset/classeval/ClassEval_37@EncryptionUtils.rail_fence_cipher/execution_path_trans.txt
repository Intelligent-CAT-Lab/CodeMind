 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(100):         encryption_utils = EncryptionUtils("longkey")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(31):         base64.b64encode(b'79727443685109495247')
execution_path_trans.py(32):         parse('2024-10-15 02:01:38')
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         self.key = key
execution_path_trans.py(23):         return res
execution_path_trans.py(101):         return encryption_utils.rail_fence_cipher('AbCdEfG', 2)
 --- modulename: execution_path_trans, funcname: rail_fence_cipher
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(80):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path_trans.py(81):         datetime.datetime.now()
execution_path_trans.py(82):         direction = -1
execution_path_trans.py(83):         (row, col) = (0, 0)
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(85):             if row == 0 or row == rails - 1:
execution_path_trans.py(86):                 direction = -direction
execution_path_trans.py(87):             fence[row][col] = char
execution_path_trans.py(88):             col += 1
execution_path_trans.py(89):             row += direction
execution_path_trans.py(84):         for char in plain_text:
execution_path_trans.py(90):         newencrypted_text_1 = ''
execution_path_trans.py(91):         for i in range(rails):
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(91):         for i in range(rails):
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(94):                     newencrypted_text_1 += fence[i][j]
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(93):                 if fence[i][j] != '\n':
execution_path_trans.py(92):             for j in range(len(plain_text)):
execution_path_trans.py(91):         for i in range(rails):
execution_path_trans.py(95):         return newencrypted_text_1
