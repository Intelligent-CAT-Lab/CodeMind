 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(59):             encryption_utils = EncryptionUtils("longkey")
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.key = key
execution_path.py(60):             return encryption_utils.rail_fence_cipher('AbCdEfG', 2)
 --- modulename: execution_path, funcname: rail_fence_cipher
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(38):         fence = [['\n' for _ in range(len(plain_text))] for _ in range(rails)]
execution_path.py(39):         direction = -1
execution_path.py(40):         row, col = 0, 0
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(43):             if row == 0 or row == rails-1:
execution_path.py(44):                 direction = -direction
execution_path.py(46):             fence[row][col] = char
execution_path.py(47):             col += 1
execution_path.py(48):             row += direction
execution_path.py(42):         for char in plain_text:
execution_path.py(50):         encrypted_text = ''
execution_path.py(51):         for i in range(rails):
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(51):         for i in range(rails):
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(54):                     encrypted_text += fence[i][j]
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(53):                 if fence[i][j] != '\n':
execution_path.py(52):             for j in range(len(plain_text)):
execution_path.py(51):         for i in range(rails):
execution_path.py(56):         return encrypted_text
