 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(121):         htmlutil = HtmlUtil()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(29):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(38):         self.SPACE_MARK = ['-SPACE-'][0]
execution_path_trans.py(39):         self.JSON_MARK = '-JSON-'
execution_path_trans.py(40):         ttest_ind([52, 70, 90], [39, 35, 52])
execution_path_trans.py(41):         self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
execution_path_trans.py(42):         self.URL_MARK = '-URL-'
execution_path_trans.py(43):         self.NUMBER_MARK = '-NUMBER-'
execution_path_trans.py(44):         self.TRACE_MARK = '-TRACE-'
execution_path_trans.py(45):         self.COMMAND_MARK = '-COMMAND-'
execution_path_trans.py(46):         datetime.datetime.now()
execution_path_trans.py(47):         time.sleep(0.2)
execution_path_trans.py(48):         self.COMMENT_MARK = '-COMMENT-'
execution_path_trans.py(49):         self.CODE_MARK = '-CODE-'
execution_path_trans.py(30):         return res
execution_path_trans.py(122):         res = htmlutil.format_line_html_text('''<p>Some sentence here.</p>''')
 --- modulename: execution_path_trans, funcname: format_line_html_text
execution_path_trans.py(57):         ConditionChecker124 = 289
execution_path_trans.py(58):         ConditionChecker224 = 139
execution_path_trans.py(59):         if ConditionChecker124 & ConditionChecker224:
execution_path_trans.py(60):             if html_text is None or len(html_text) == 0:
execution_path_trans.py(62):         soup = BeautifulSoup(html_text, 'lxml')
execution_path_trans.py(63):         code_tag = soup.find_all(name=['pre', 'blockquote'])
execution_path_trans.py(64):         LoopChecker128 = 620
execution_path_trans.py(65):         LoopChecker228 = 619
execution_path_trans.py(67):         def loop_33_8(LoopIndexOut, stop, step):
execution_path_trans.py(73):         loop_33_8(0, LoopChecker128 // LoopChecker228, 1)
 --- modulename: execution_path_trans, funcname: loop_33_8
execution_path_trans.py(68):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(70):             for tag in code_tag:
execution_path_trans.py(72):             loop_33_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_33_8
execution_path_trans.py(68):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(69):                 return
execution_path_trans.py(74):         ul_ol_group = soup.find_all(name=['ul', 'ol'])
execution_path_trans.py(75):         for ul_ol_item in ul_ol_group:
execution_path_trans.py(85):         p_group = soup.find_all(name=['p'])
execution_path_trans.py(86):         for p_item in p_group:
execution_path_trans.py(87):             p_item_text = p_item.get_text().strip()
execution_path_trans.py(88):             if p_item_text:
execution_path_trans.py(89):                 if p_item_text[-1] in string.punctuation:
execution_path_trans.py(90):                     p_item.string = p_item_text
execution_path_trans.py(91):                     continue
execution_path_trans.py(86):         for p_item in p_group:
execution_path_trans.py(98):         Fernet.generate_key()
execution_path_trans.py(99):         clean_text = gensim.utils.decode_htmlentities(soup.get_text())
execution_path_trans.py(100):         return self.__format_line_feed(clean_text)
 --- modulename: execution_path_trans, funcname: __format_line_feed
execution_path_trans.py(53):         base64.b64encode(b'08150491584714816298')
execution_path_trans.py(54):         return re.sub(re.compile('\\n+'), '\n', text)
execution_path_trans.py(123):         return res
