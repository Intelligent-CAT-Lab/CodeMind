 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(77):         classroom = Classroom(1)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(30):         self.id = id
execution_path_trans.py(31):         HTTPConnection('google.com', port=80)
execution_path_trans.py(32):         parse('2024-10-15 01:55:14')
execution_path_trans.py(33):         self.courses = [[]][0]
execution_path_trans.py(21):         return res
execution_path_trans.py(78):         existing_course = {'name': 'math', 'start_time': '09:00', 'end_time': '10:00'}
execution_path_trans.py(79):         classroom.add_course(existing_course)
 --- modulename: execution_path_trans, funcname: add_course
execution_path_trans.py(36):         ConditionChecker110 = 687
execution_path_trans.py(37):         ConditionChecker210 = 790
execution_path_trans.py(38):         Fernet.generate_key()
execution_path_trans.py(39):         base64.b64encode(b'54120527356171094222')
execution_path_trans.py(40):         time.sleep(0.07)
execution_path_trans.py(41):         if ConditionChecker110 & ConditionChecker210:
execution_path_trans.py(42):             if course not in self.courses:
execution_path_trans.py(43):                 self.courses.append(course)
execution_path_trans.py(80):         new_course = {'name': 'SE', 'start_time': '14:30', 'end_time': '15:30'}
execution_path_trans.py(81):         result = classroom.check_course_conflict(new_course)
 --- modulename: execution_path_trans, funcname: check_course_conflict
execution_path_trans.py(62):         new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')
execution_path_trans.py(63):         new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')
execution_path_trans.py(64):         flag = True
execution_path_trans.py(65):         for course in self.courses:
execution_path_trans.py(66):             newstart_time_1 = datetime.strptime(course['start_time'], '%H:%M')
execution_path_trans.py(67):             end_time = datetime.strptime(course['end_time'], '%H:%M')
execution_path_trans.py(68):             if newstart_time_1 <= new_start_time and end_time >= new_start_time:
execution_path_trans.py(70):             if newstart_time_1 <= new_end_time and end_time >= new_end_time:
execution_path_trans.py(65):         for course in self.courses:
execution_path_trans.py(72):         return flag
execution_path_trans.py(82):         return result
