 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(47):             classroom = Classroom(1)
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.id = id
execution_path.py(12):         self.courses = []
execution_path.py(48):             existing_course = {'name': 'math', 'start_time': '09:00', 'end_time': '10:00'}
execution_path.py(49):             classroom.add_course(existing_course)
 --- modulename: execution_path, funcname: add_course
execution_path.py(16):         if course not in self.courses:
execution_path.py(17):             self.courses.append(course)
execution_path.py(50):             new_course = {'name': 'SE', 'start_time': '14:30', 'end_time': '15:30'}
execution_path.py(51):             result = classroom.check_course_conflict(new_course)
 --- modulename: execution_path, funcname: check_course_conflict
execution_path.py(33):         new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')
execution_path.py(34):         new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')
execution_path.py(36):         flag = True
execution_path.py(37):         for course in self.courses:
execution_path.py(38):             start_time = datetime.strptime(course['start_time'], '%H:%M')
execution_path.py(39):             end_time = datetime.strptime(course['end_time'], '%H:%M')
execution_path.py(40):             if start_time <= new_start_time and end_time >= new_start_time:
execution_path.py(42):             if start_time <= new_end_time and end_time >= new_end_time:
execution_path.py(37):         for course in self.courses:
execution_path.py(44):         return flag
execution_path.py(52):             return result
