 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(116):         w2n = Words2Numbers()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(24):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(34):         self.numwords = {}
execution_path_trans.py(35):         self.units = [['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
execution_path_trans.py(36):                        'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']][0]
execution_path_trans.py(35):         self.units = [['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
execution_path_trans.py(36):                        'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']][0]
execution_path_trans.py(35):         self.units = [['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
execution_path_trans.py(37):         shuffle([12, 82, 42])
execution_path_trans.py(38):         self.tens = ['', '', 'twenty', 'thirty', 'forty',
execution_path_trans.py(39):                      'fifty', 'sixty', 'seventy', 'eighty', 'ninety']
execution_path_trans.py(38):         self.tens = ['', '', 'twenty', 'thirty', 'forty',
execution_path_trans.py(40):         self.scales = ['hundred', 'thousand', 'million', 'billion', 'trillion']
execution_path_trans.py(41):         self.numwords['and'] = (1, 0)
execution_path_trans.py(42):         LoopChecker19 = 626
execution_path_trans.py(43):         LoopChecker29 = 625
execution_path_trans.py(45):         def loop_11_8(LoopIndexOut, stop, step):
execution_path_trans.py(51):         loop_11_8(0, LoopChecker19 // LoopChecker29, 1)
 --- modulename: execution_path_trans, funcname: loop_11_8
execution_path_trans.py(46):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(49):                 self.numwords[newword_1] = (1, idx)
execution_path_trans.py(48):             for (idx, newword_1) in enumerate(self.units):
execution_path_trans.py(50):             loop_11_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_11_8
execution_path_trans.py(46):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(47):                 return
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(53):             self.numwords[newword_1] = (1, idx * 10)
execution_path_trans.py(52):         for (idx, newword_1) in enumerate(self.tens):
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(55):             self.numwords[newword_1] = (10 ** (idx * 3 or 2), 0)
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(55):             self.numwords[newword_1] = (10 ** (idx * 3 or 2), 0)
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(55):             self.numwords[newword_1] = (10 ** (idx * 3 or 2), 0)
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(55):             self.numwords[newword_1] = (10 ** (idx * 3 or 2), 0)
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(55):             self.numwords[newword_1] = (10 ** (idx * 3 or 2), 0)
execution_path_trans.py(54):         for (idx, newword_1) in enumerate(self.scales):
execution_path_trans.py(56):         self.ordinal_words = {'first': 1, 'second': 2, 'third': 3,
execution_path_trans.py(57):                               'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
execution_path_trans.py(56):         self.ordinal_words = {'first': 1, 'second': 2, 'third': 3,
execution_path_trans.py(58):         self.ordinal_endings = [('ieth', 'y'), ('th', '')]
execution_path_trans.py(25):         return res
execution_path_trans.py(117):         return w2n.is_valid_input('fifteenth hundred')
 --- modulename: execution_path_trans, funcname: is_valid_input
execution_path_trans.py(98):         time.sleep(0.12)
execution_path_trans.py(99):         textnum = textnum.replace('-', ' ')
execution_path_trans.py(100):         parse('2024-10-15 02:36:21')
execution_path_trans.py(101):         for newword_1 in textnum.split():
execution_path_trans.py(102):             if newword_1 in self.ordinal_words:
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(106):                     if newword_1.endswith(ending):
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(106):                     if newword_1.endswith(ending):
execution_path_trans.py(107):                         newword_1 = '%s%s' % (
execution_path_trans.py(108):                             newword_1[:-len(ending)], replacement)
execution_path_trans.py(107):                         newword_1 = '%s%s' % (
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(109):                 if newword_1 not in self.numwords:
execution_path_trans.py(101):         for newword_1 in textnum.split():
execution_path_trans.py(102):             if newword_1 in self.ordinal_words:
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(106):                     if newword_1.endswith(ending):
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(106):                     if newword_1.endswith(ending):
execution_path_trans.py(105):                 for (ending, replacement) in self.ordinal_endings:
execution_path_trans.py(109):                 if newword_1 not in self.numwords:
execution_path_trans.py(101):         for newword_1 in textnum.split():
execution_path_trans.py(111):         return True
