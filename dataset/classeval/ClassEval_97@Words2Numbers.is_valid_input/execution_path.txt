 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(82):             w2n = Words2Numbers()
 --- modulename: execution_path, funcname: __init__
execution_path.py(9):         self.numwords = {}
execution_path.py(10):         self.units = [
execution_path.py(15):         self.tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
execution_path.py(16):         self.scales = ["hundred", "thousand", "million", "billion", "trillion"]
execution_path.py(18):         self.numwords["and"] = (1, 0)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(20):             self.numwords[word] = (1, idx)
execution_path.py(19):         for idx, word in enumerate(self.units):
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(22):             self.numwords[word] = (1, idx * 10)
execution_path.py(21):         for idx, word in enumerate(self.tens):
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(24):             self.numwords[word] = (10 ** (idx * 3 or 2), 0)
execution_path.py(23):         for idx, word in enumerate(self.scales):
execution_path.py(26):         self.ordinal_words = {'first': 1, 'second': 2, 'third': 3, 'fifth': 5, 'eighth': 8, 'ninth': 9, 'twelfth': 12}
execution_path.py(27):         self.ordinal_endings = [('ieth', 'y'), ('th', '')]
execution_path.py(83):             return w2n.is_valid_input('fifteenth hundred')
 --- modulename: execution_path, funcname: is_valid_input
execution_path.py(66):         textnum = textnum.replace('-', ' ')
execution_path.py(68):         for word in textnum.split():
execution_path.py(69):             if word in self.ordinal_words:
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(73):                     if word.endswith(ending):
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(73):                     if word.endswith(ending):
execution_path.py(74):                         word = "%s%s" % (word[:-len(ending)], replacement)
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(76):                 if word not in self.numwords:
execution_path.py(68):         for word in textnum.split():
execution_path.py(69):             if word in self.ordinal_words:
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(73):                     if word.endswith(ending):
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(73):                     if word.endswith(ending):
execution_path.py(72):                 for ending, replacement in self.ordinal_endings:
execution_path.py(76):                 if word not in self.numwords:
execution_path.py(68):         for word in textnum.split():
execution_path.py(79):         return True
