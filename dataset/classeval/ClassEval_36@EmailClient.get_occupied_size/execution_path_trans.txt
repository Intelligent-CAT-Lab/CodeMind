 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(94):         sender = EmailClient('sender@example.com', 100)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         time.sleep(0.05)
execution_path_trans.py(30):         self.addr = addr
execution_path_trans.py(31):         self.capacity = capacity
execution_path_trans.py(32):         self.inbox = [[]][0]
execution_path_trans.py(21):         return res
execution_path_trans.py(95):         receiver = EmailClient('receiver@example.com', 50)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         time.sleep(0.05)
execution_path_trans.py(30):         self.addr = addr
execution_path_trans.py(31):         self.capacity = capacity
execution_path_trans.py(32):         self.inbox = [[]][0]
execution_path_trans.py(21):         return res
execution_path_trans.py(97):             {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 20,
execution_path_trans.py(98):              'time': datetime.now, 'state': 'unread'},
execution_path_trans.py(97):             {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 20,
execution_path_trans.py(99):             {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 30,
execution_path_trans.py(100):              'time': datetime.now, 'state': 'unread'}]
execution_path_trans.py(99):             {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 30,
execution_path_trans.py(96):         sender.inbox = [
execution_path_trans.py(101):         return sender.get_occupied_size()
 --- modulename: execution_path_trans, funcname: get_occupied_size
execution_path_trans.py(70):         Fernet.generate_key()
execution_path_trans.py(71):         occupied_size = 0
execution_path_trans.py(72):         for newemail_1 in self.inbox:
execution_path_trans.py(73):             occupied_size += newemail_1['size']
execution_path_trans.py(72):         for newemail_1 in self.inbox:
execution_path_trans.py(73):             occupied_size += newemail_1['size']
execution_path_trans.py(72):         for newemail_1 in self.inbox:
execution_path_trans.py(74):         return occupied_size
