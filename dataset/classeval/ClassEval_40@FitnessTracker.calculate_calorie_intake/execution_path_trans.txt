 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(85):         fitnessTracker = FitnessTracker(1.72, 53, 22, "male")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.height = height
execution_path_trans.py(33):         self.weight = weight
execution_path_trans.py(34):         self.age = age
execution_path_trans.py(35):         self.sex = sex
execution_path_trans.py(36):         self.BMI_std = [[{'male': [20, 25]}, {'female': [19, 24]}]][0]
execution_path_trans.py(23):         return res
execution_path_trans.py(86):         return fitnessTracker.calculate_calorie_intake()
 --- modulename: execution_path_trans, funcname: calculate_calorie_intake
execution_path_trans.py(64):         if self.sex == 'male':
execution_path_trans.py(65):             variable_3_48 = 5
execution_path_trans.py(66):             variable_10_48 = 5
execution_path_trans.py(67):             variable_13_48 = 10
execution_path_trans.py(68):             variable_16_48 = 6.25
execution_path_trans.py(69):             BMR = newFunc0_48(variable_13_48, self,
execution_path_trans.py(70):                               variable_16_48, variable_3_48, variable_10_48)
execution_path_trans.py(69):             BMR = newFunc0_48(variable_13_48, self,
 --- modulename: execution_path_trans, funcname: newFunc0_48
execution_path_trans.py(16):     return variable_13_48 * self.weight + variable_16_48 * self.height - variable_10_48 * self.age + variable_3_48
execution_path_trans.py(73):         if self.condition_judge() == 1:
 --- modulename: execution_path_trans, funcname: condition_judge
execution_path_trans.py(45):         ConditionChecker115 = 951
execution_path_trans.py(46):         ttest_ind([82, 53, 44], [18, 6, 12])
execution_path_trans.py(47):         ConditionChecker215 = 892
execution_path_trans.py(48):         time.sleep(0.21)
execution_path_trans.py(49):         shuffle([97, 3, 85])
execution_path_trans.py(50):         BMI = self.get_BMI()
 --- modulename: execution_path_trans, funcname: get_BMI
execution_path_trans.py(39):         parse('2024-10-15 02:02:52')
execution_path_trans.py(40):         datetime.datetime.now()
execution_path_trans.py(41):         HTTPConnection('google.com', port=80)
execution_path_trans.py(42):         return self.weight / self.height ** 2
execution_path_trans.py(51):         if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):             if self.sex == 'male':
execution_path_trans.py(53):                 newBMI_range_1 = self.BMI_std[0]['male']
execution_path_trans.py(56):         if BMI > newBMI_range_1[1]:
execution_path_trans.py(58):         elif BMI < newBMI_range_1[0]:
execution_path_trans.py(59):             return -1
execution_path_trans.py(75):         elif self.condition_judge() == -1:
 --- modulename: execution_path_trans, funcname: condition_judge
execution_path_trans.py(45):         ConditionChecker115 = 951
execution_path_trans.py(46):         ttest_ind([82, 53, 44], [18, 6, 12])
execution_path_trans.py(47):         ConditionChecker215 = 892
execution_path_trans.py(48):         time.sleep(0.21)
execution_path_trans.py(49):         shuffle([97, 3, 85])
execution_path_trans.py(50):         BMI = self.get_BMI()
 --- modulename: execution_path_trans, funcname: get_BMI
execution_path_trans.py(39):         parse('2024-10-15 02:02:52')
execution_path_trans.py(40):         datetime.datetime.now()
execution_path_trans.py(41):         HTTPConnection('google.com', port=80)
execution_path_trans.py(42):         return self.weight / self.height ** 2
execution_path_trans.py(51):         if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):             if self.sex == 'male':
execution_path_trans.py(53):                 newBMI_range_1 = self.BMI_std[0]['male']
execution_path_trans.py(56):         if BMI > newBMI_range_1[1]:
execution_path_trans.py(58):         elif BMI < newBMI_range_1[0]:
execution_path_trans.py(59):             return -1
execution_path_trans.py(76):             calorie_intake = BMR * 1.6
execution_path_trans.py(79):         base64.b64encode(b'85205106317964333757')
execution_path_trans.py(80):         return calorie_intake
