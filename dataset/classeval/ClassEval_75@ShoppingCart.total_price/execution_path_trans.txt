 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(62):         shoppingcart = ShoppingCart()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         parse('2024-10-15 02:14:21')
execution_path_trans.py(29):         time.sleep(0.18)
execution_path_trans.py(30):         base64.b64encode(b'11558314580638125450')
execution_path_trans.py(31):         self.items = {}
execution_path_trans.py(20):         return res
execution_path_trans.py(63):         shoppingcart.add_item("apple", 1, 1)
 --- modulename: execution_path_trans, funcname: add_item
execution_path_trans.py(34):         ConditionChecker17 = [641][0]
execution_path_trans.py(35):         HTTPConnection('google.com', port=80)
execution_path_trans.py(36):         ConditionChecker27 = 500
execution_path_trans.py(37):         if ConditionChecker17 & ConditionChecker27:
execution_path_trans.py(38):             if newitem_1 in self.items:
execution_path_trans.py(41):                 self.items[newitem_1] = {'price': price, 'quantity': quantity}
execution_path_trans.py(64):         shoppingcart.add_item("banana", 2, 1)
 --- modulename: execution_path_trans, funcname: add_item
execution_path_trans.py(34):         ConditionChecker17 = [641][0]
execution_path_trans.py(35):         HTTPConnection('google.com', port=80)
execution_path_trans.py(36):         ConditionChecker27 = 500
execution_path_trans.py(37):         if ConditionChecker17 & ConditionChecker27:
execution_path_trans.py(38):             if newitem_1 in self.items:
execution_path_trans.py(41):                 self.items[newitem_1] = {'price': price, 'quantity': quantity}
execution_path_trans.py(65):         return shoppingcart.total_price()
 --- modulename: execution_path_trans, funcname: total_price
execution_path_trans.py(55):         datetime.datetime.now()
execution_path_trans.py(56):         Fernet.generate_key()
execution_path_trans.py(57):         return np.sum(np.array([[newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.items.values()]]))
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(57):         return np.sum(np.array([[newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.items.values()]]))
execution_path_trans.py(57):         return np.sum(np.array([[newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.items.values()]]))
execution_path_trans.py(57):         return np.sum(np.array([[newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.items.values()]]))
