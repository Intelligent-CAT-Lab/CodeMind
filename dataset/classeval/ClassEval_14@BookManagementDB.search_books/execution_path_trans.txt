 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(72):         self.db_name = "test.db"
execution_path_trans.py(73):         self.db = BookManagementDB(self.db_name)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(20):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         self.connection = sqlite3.connect(db_name)
execution_path_trans.py(30):         self.cursor = self.connection.cursor()
execution_path_trans.py(31):         self.create_table()
 --- modulename: execution_path_trans, funcname: create_table
execution_path_trans.py(34):         self.cursor.execute('\n            CREATE TABLE IF NOT EXISTS books (\n                id INTEGER PRIMARY KEY,\n                title TEXT,\n                author TEXT,\n                available INTEGER\n            )\n        ')
execution_path_trans.py(35):         ttest_ind([60, 5, 6], [93, 74, 69])
execution_path_trans.py(36):         self.connection.commit()
execution_path_trans.py(21):         return res
execution_path_trans.py(74):         self.connection = sqlite3.connect(self.db_name)
execution_path_trans.py(75):         self.cursor = self.connection.cursor()
execution_path_trans.py(77):         self.db.add_book("Book 1", "Author 1")
 --- modulename: execution_path_trans, funcname: add_book
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(40):             '\n            INSERT INTO books (title, author, available)\n            VALUES (?, ?, 1)\n        ', (title, author))
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(41):         datetime.datetime.now()
execution_path_trans.py(42):         self.connection.commit()
execution_path_trans.py(78):         self.db.add_book("Book 2", "Author 2")
 --- modulename: execution_path_trans, funcname: add_book
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(40):             '\n            INSERT INTO books (title, author, available)\n            VALUES (?, ?, 1)\n        ', (title, author))
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(41):         datetime.datetime.now()
execution_path_trans.py(42):         self.connection.commit()
execution_path_trans.py(79):         self.db.add_book("Book 3", "Author 3")
 --- modulename: execution_path_trans, funcname: add_book
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(40):             '\n            INSERT INTO books (title, author, available)\n            VALUES (?, ?, 1)\n        ', (title, author))
execution_path_trans.py(39):         self.cursor.execute(
execution_path_trans.py(41):         datetime.datetime.now()
execution_path_trans.py(42):         self.connection.commit()
execution_path_trans.py(80):         books = self.db.search_books()
 --- modulename: execution_path_trans, funcname: search_books
execution_path_trans.py(63):         time.sleep(0.11)
execution_path_trans.py(64):         HTTPConnection('google.com', port=80)
execution_path_trans.py(65):         self.cursor.execute('\n            SELECT * FROM books\n        ')
execution_path_trans.py(66):         Fernet.generate_key()
execution_path_trans.py(67):         newbooks_1 = self.cursor.fetchall()
execution_path_trans.py(68):         return newbooks_1
execution_path_trans.py(85):         return len(books),books[0][1],books[1][2],books[2][3]
