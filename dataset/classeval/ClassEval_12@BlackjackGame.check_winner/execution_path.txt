 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(61):             self.blackjackGame = BlackjackGame()
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.deck = self.create_deck()
 --- modulename: execution_path, funcname: create_deck
execution_path.py(16):         deck = []
execution_path.py(17):         suits = ['S', 'C', 'D', 'H']
execution_path.py(18):         ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
execution_path.py(19):         for suit in suits:
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(19):         for suit in suits:
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(19):         for suit in suits:
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(19):         for suit in suits:
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(21):                 deck.append(rank + suit)
execution_path.py(20):             for rank in ranks:
execution_path.py(19):         for suit in suits:
execution_path.py(22):         random.shuffle(deck)
execution_path.py(23):         return deck
execution_path.py(12):         self.player_hand = []
execution_path.py(13):         self.dealer_hand = []
execution_path.py(62):             player_hand = ['2S', '4S', '5S']
execution_path.py(63):             dealer_hand = ['2S', 'JS', 'QS']
execution_path.py(64):             return self.blackjackGame.check_winner(player_hand, dealer_hand)
 --- modulename: execution_path, funcname: check_winner
execution_path.py(43):         player_value = self.calculate_hand_value(player_hand)
 --- modulename: execution_path, funcname: calculate_hand_value
execution_path.py(26):         value = 0
execution_path.py(27):         num_aces = 0
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(31):                 value += int(rank)
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(31):                 value += int(rank)
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(31):                 value += int(rank)
execution_path.py(28):         for card in hand:
execution_path.py(37):         while value > 21 and num_aces > 0:
execution_path.py(40):         return value
execution_path.py(44):         dealer_value = self.calculate_hand_value(dealer_hand)
 --- modulename: execution_path, funcname: calculate_hand_value
execution_path.py(26):         value = 0
execution_path.py(27):         num_aces = 0
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(31):                 value += int(rank)
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(32):             elif rank in ['J', 'Q', 'K']:
execution_path.py(33):                 value += 10
execution_path.py(28):         for card in hand:
execution_path.py(29):             rank = card[:-1]
execution_path.py(30):             if rank.isdigit():
execution_path.py(32):             elif rank in ['J', 'Q', 'K']:
execution_path.py(33):                 value += 10
execution_path.py(28):         for card in hand:
execution_path.py(37):         while value > 21 and num_aces > 0:
execution_path.py(40):         return value
execution_path.py(45):         if player_value > 21 and dealer_value > 21:
execution_path.py(50):         elif player_value > 21:
execution_path.py(52):         elif dealer_value > 21:
execution_path.py(53):             return 'Player wins'
