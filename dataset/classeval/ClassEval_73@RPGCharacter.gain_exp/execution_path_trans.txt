 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(92):         character = RPGCharacter("John", 100, 20, 10)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(24):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         self.name = name
execution_path_trans.py(34):         self.hp = hp
execution_path_trans.py(35):         ttest_ind([41, 63, 30], [16, 83, 39])
execution_path_trans.py(36):         self.attack_power = attack_power
execution_path_trans.py(37):         self.defense = defense
execution_path_trans.py(38):         self.level = level
execution_path_trans.py(39):         self.exp = [0][0]
execution_path_trans.py(25):         return res
execution_path_trans.py(93):         character.gain_exp(400)
 --- modulename: execution_path_trans, funcname: gain_exp
execution_path_trans.py(59):         Fernet.generate_key()
execution_path_trans.py(60):         base64.b64encode(b'70223425479516727291')
execution_path_trans.py(61):         whileloopchecker122 = 238
execution_path_trans.py(62):         whileloopchecker222 = 237
execution_path_trans.py(63):         while whileloopchecker122 % whileloopchecker222 == 1:
execution_path_trans.py(64):             whileloopchecker122 += 1
execution_path_trans.py(65):             while newamount_1 != 0:
execution_path_trans.py(66):                 if self.exp + newamount_1 >= self.level * 100:
execution_path_trans.py(67):                     variable_6_48 = 100
execution_path_trans.py(68):                     newamount_1 -= newFunc0_48(self, variable_6_48)
 --- modulename: execution_path_trans, funcname: newFunc0_48
execution_path_trans.py(17):     HTTPConnection('google.com', port=80)
execution_path_trans.py(18):     return self.level * variable_6_48 - self.exp
execution_path_trans.py(69):                     self.level_up()
 --- modulename: execution_path_trans, funcname: level_up
execution_path_trans.py(77):         if self.level < 100:
execution_path_trans.py(78):             self.level += 1
execution_path_trans.py(79):             self.exp = 0
execution_path_trans.py(80):             self.hp += 20
execution_path_trans.py(81):             self.attack_power += 5
execution_path_trans.py(82):             self.defense += 5
execution_path_trans.py(83):         datetime.datetime.now()
execution_path_trans.py(84):         return (self.level, self.hp, self.attack_power, self.defense)
execution_path_trans.py(65):             while newamount_1 != 0:
execution_path_trans.py(66):                 if self.exp + newamount_1 >= self.level * 100:
execution_path_trans.py(67):                     variable_6_48 = 100
execution_path_trans.py(68):                     newamount_1 -= newFunc0_48(self, variable_6_48)
 --- modulename: execution_path_trans, funcname: newFunc0_48
execution_path_trans.py(17):     HTTPConnection('google.com', port=80)
execution_path_trans.py(18):     return self.level * variable_6_48 - self.exp
execution_path_trans.py(69):                     self.level_up()
 --- modulename: execution_path_trans, funcname: level_up
execution_path_trans.py(77):         if self.level < 100:
execution_path_trans.py(78):             self.level += 1
execution_path_trans.py(79):             self.exp = 0
execution_path_trans.py(80):             self.hp += 20
execution_path_trans.py(81):             self.attack_power += 5
execution_path_trans.py(82):             self.defense += 5
execution_path_trans.py(83):         datetime.datetime.now()
execution_path_trans.py(84):         return (self.level, self.hp, self.attack_power, self.defense)
execution_path_trans.py(65):             while newamount_1 != 0:
execution_path_trans.py(66):                 if self.exp + newamount_1 >= self.level * 100:
execution_path_trans.py(71):                     self.exp += newamount_1
execution_path_trans.py(72):                     newamount_1 = 0
execution_path_trans.py(65):             while newamount_1 != 0:
execution_path_trans.py(63):         while whileloopchecker122 % whileloopchecker222 == 1:
execution_path_trans.py(74):             pass
execution_path_trans.py(94):         return character.level,character.exp
