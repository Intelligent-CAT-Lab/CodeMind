 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(54):             assessment_system = AssessmentSystem()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.students = {}
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(56):                                                     'courses': {'Mathematics': 90, 'Science': 80}},
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(57):                                           'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path.py(58):                                                   'courses': {'Physics': 85}},
execution_path.py(57):                                           'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path.py(59):                                           'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path.py(60):                                                       'courses': {'Chemistry': 70,'Physics': None }}
execution_path.py(59):                                           'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path.py(55):             assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path.py(62):             return assessment_system.get_course_average('Physics')
 --- modulename: execution_path, funcname: get_course_average
execution_path.py(33):         total = 0
execution_path.py(34):         count = 0
execution_path.py(35):         for student in self.students.values():
execution_path.py(36):             if course in student['courses']:
execution_path.py(35):         for student in self.students.values():
execution_path.py(36):             if course in student['courses']:
execution_path.py(37):                 score = student['courses'][course]
execution_path.py(38):                 if score is not None:
execution_path.py(39):                     total += score
execution_path.py(40):                     count += 1
execution_path.py(35):         for student in self.students.values():
execution_path.py(36):             if course in student['courses']:
execution_path.py(37):                 score = student['courses'][course]
execution_path.py(38):                 if score is not None:
execution_path.py(35):         for student in self.students.values():
execution_path.py(41):         return total / count if count > 0 else None
