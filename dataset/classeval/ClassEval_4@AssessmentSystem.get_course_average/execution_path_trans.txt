 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(99):         assessment_system = AssessmentSystem()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         self.students = {}
execution_path_trans.py(24):         return res
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(101):                                                 'courses': {'Mathematics': 90, 'Science': 80}},
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(102):                                       'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path_trans.py(103):                                               'courses': {'Physics': 85}},
execution_path_trans.py(102):                                       'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics',
execution_path_trans.py(104):                                       'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path_trans.py(105):                                                   'courses': {'Chemistry': 70,'Physics': None }}
execution_path_trans.py(104):                                       'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry',
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics',
execution_path_trans.py(107):         return assessment_system.get_course_average('Physics')
 --- modulename: execution_path_trans, funcname: get_course_average
execution_path_trans.py(75):         time.sleep(0.17)
execution_path_trans.py(76):         total = 0
execution_path_trans.py(77):         count = 0
execution_path_trans.py(78):         for student in self.students.values():
execution_path_trans.py(79):             if course in student['courses']:
execution_path_trans.py(78):         for student in self.students.values():
execution_path_trans.py(79):             if course in student['courses']:
execution_path_trans.py(80):                 score = student['courses'][course]
execution_path_trans.py(81):                 if score is not None:
execution_path_trans.py(82):                     total = total + score
execution_path_trans.py(83):                     count += 1
execution_path_trans.py(78):         for student in self.students.values():
execution_path_trans.py(79):             if course in student['courses']:
execution_path_trans.py(80):                 score = student['courses'][course]
execution_path_trans.py(81):                 if score is not None:
execution_path_trans.py(78):         for student in self.students.values():
execution_path_trans.py(84):         return total / count if count > 0 else None
