 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(75):         b = BalancedBrackets("a(b{c]]")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         base64.b64encode(b'55176690429631291636')
execution_path_trans.py(30):         self.stack = [[]][0]
execution_path_trans.py(31):         self.left_brackets = ['(', '{', '[']
execution_path_trans.py(32):         self.right_brackets = [')', '}', ']']
execution_path_trans.py(33):         time.sleep(0.17)
execution_path_trans.py(34):         self.expr = expr
execution_path_trans.py(20):         return res
execution_path_trans.py(76):         return b.check_balanced_brackets()
 --- modulename: execution_path_trans, funcname: check_balanced_brackets
execution_path_trans.py(44):         ConditionChecker131 = 729
execution_path_trans.py(45):         ConditionChecker231 = 101
execution_path_trans.py(46):         self.clear_expr()
 --- modulename: execution_path_trans, funcname: clear_expr
execution_path_trans.py(37):         HTTPConnection('google.com', port=80)
execution_path_trans.py(38):         ttest_ind([86, 48, 52], [43, 7, 26])
execution_path_trans.py(39):         parse('2024-10-15 02:15:41')
execution_path_trans.py(40):         self.expr = ''.join(
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
execution_path_trans.py(40):         self.expr = ''.join(
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(41):             (c for c in self.expr if c in self.left_brackets or c in self.right_brackets))
execution_path_trans.py(47):         Fernet.generate_key()
execution_path_trans.py(48):         LoopChecker114 = 899
execution_path_trans.py(49):         LoopChecker214 = 898
execution_path_trans.py(50):         for LoopIndexOut in range(LoopChecker114 // LoopChecker214):
execution_path_trans.py(51):             for Brkt in self.expr:
execution_path_trans.py(52):                 if Brkt in self.left_brackets:
execution_path_trans.py(53):                     self.stack.append(Brkt)
execution_path_trans.py(51):             for Brkt in self.expr:
execution_path_trans.py(52):                 if Brkt in self.left_brackets:
execution_path_trans.py(53):                     self.stack.append(Brkt)
execution_path_trans.py(51):             for Brkt in self.expr:
execution_path_trans.py(52):                 if Brkt in self.left_brackets:
execution_path_trans.py(55):                     newCurrent_Brkt_1 = self.stack.pop()
execution_path_trans.py(56):                     if newCurrent_Brkt_1 == '(':
execution_path_trans.py(59):                     if newCurrent_Brkt_1 == '{':
execution_path_trans.py(60):                         if Brkt != '}':
execution_path_trans.py(61):                             return False
