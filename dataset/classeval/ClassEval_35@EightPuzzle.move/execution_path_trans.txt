 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(104):         self.initial_state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]
execution_path_trans.py(105):         self.eightPuzzle = EightPuzzle(self.initial_state)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(29):         time.sleep(0.04)
execution_path_trans.py(30):         base64.b64encode(b'13841753017116615184')
execution_path_trans.py(31):         self.initial_state = initial_state
execution_path_trans.py(32):         self.goal_state = [[[1, 2, 3], [4, 5, 6], [7, 8, 0]]][0]
execution_path_trans.py(20):         return res
execution_path_trans.py(106):         result = self.eightPuzzle.move(self.initial_state, 'left')
 --- modulename: execution_path_trans, funcname: move
execution_path_trans.py(46):         (i, j) = self.find_blank(state)
 --- modulename: execution_path_trans, funcname: find_blank
execution_path_trans.py(35):         LoopChecker18 = 718
execution_path_trans.py(36):         LoopChecker28 = 717
execution_path_trans.py(37):         for LoopIndexOut in range(LoopChecker18 // LoopChecker28):
execution_path_trans.py(38):             for i in range(3):
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(40):                     if state[i][j] == 0:
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(40):                     if state[i][j] == 0:
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(40):                     if state[i][j] == 0:
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(38):             for i in range(3):
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(40):                     if state[i][j] == 0:
execution_path_trans.py(39):                 for j in range(3):
execution_path_trans.py(40):                     if state[i][j] == 0:
execution_path_trans.py(41):                         return (i, j)
execution_path_trans.py(47):         new_state = [row[:] for row in state]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(47):         new_state = [row[:] for row in state]
execution_path_trans.py(47):         new_state = [row[:] for row in state]
execution_path_trans.py(47):         new_state = [row[:] for row in state]
execution_path_trans.py(47):         new_state = [row[:] for row in state]
execution_path_trans.py(48):         if direction == 'up':
execution_path_trans.py(51):         elif direction == 'down':
execution_path_trans.py(54):         elif direction == 'left':
execution_path_trans.py(56):              ) = (new_state[i][j - 1], new_state[i][j])
execution_path_trans.py(55):             (new_state[i][j], new_state[i][j - 1]
execution_path_trans.py(60):         return new_state
execution_path_trans.py(107):         expected = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]
execution_path_trans.py(108):         return result,expected
