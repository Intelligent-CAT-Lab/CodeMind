 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(66):             self.initial_state = [[2, 3, 4], [5, 0, 1], [6, 8, 7]]
execution_path.py(67):             self.eightPuzzle = EightPuzzle(self.initial_state)
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.initial_state = initial_state
execution_path.py(9):         self.goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
execution_path.py(68):             result = self.eightPuzzle.move(self.initial_state, 'left')
 --- modulename: execution_path, funcname: move
execution_path.py(18):         i, j = self.find_blank(state)
 --- modulename: execution_path, funcname: find_blank
execution_path.py(12):         for i in range(3):
execution_path.py(13):             for j in range(3):
execution_path.py(14):                 if state[i][j] == 0:
execution_path.py(13):             for j in range(3):
execution_path.py(14):                 if state[i][j] == 0:
execution_path.py(13):             for j in range(3):
execution_path.py(14):                 if state[i][j] == 0:
execution_path.py(13):             for j in range(3):
execution_path.py(12):         for i in range(3):
execution_path.py(13):             for j in range(3):
execution_path.py(14):                 if state[i][j] == 0:
execution_path.py(13):             for j in range(3):
execution_path.py(14):                 if state[i][j] == 0:
execution_path.py(15):                     return i, j
execution_path.py(19):         new_state = [row[:] for row in state]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(19):         new_state = [row[:] for row in state]
execution_path.py(19):         new_state = [row[:] for row in state]
execution_path.py(19):         new_state = [row[:] for row in state]
execution_path.py(19):         new_state = [row[:] for row in state]
execution_path.py(21):         if direction == 'up':
execution_path.py(23):         elif direction == 'down':
execution_path.py(25):         elif direction == 'left':
execution_path.py(26):             new_state[i][j], new_state[i][j - 1] = new_state[i][j - 1], new_state[i][j]
execution_path.py(30):         return new_state
execution_path.py(69):             expected = [[2, 3, 4], [0, 5, 1], [6, 8, 7]]
execution_path.py(70):             return result,expected
