 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(49):             self.registration_system = ClassRegistrationSystem()
 --- modulename: execution_path, funcname: __init__
execution_path.py(9):         self.students = []
execution_path.py(10):         self.students_registration_classes = {}
execution_path.py(50):             self.registration_system.students = [{"name": "John", "major": "Computer Science"},
execution_path.py(51):                                                     {"name": "Bob", "major": "Computer Science"},
execution_path.py(52):                                                     {"name": "Alice", "major": "Computer Science"},
execution_path.py(53):                                                     {"name": "Tom", "major": "Mathematics"},
execution_path.py(54):                                                     {"name": "Jerry", "major": "Mathematics"}]
execution_path.py(50):             self.registration_system.students = [{"name": "John", "major": "Computer Science"},
execution_path.py(55):             self.registration_system.students_registration_classes = {"John": ["Algorithms", "Data Structures"],
execution_path.py(56):                                                                       "Bob": ["Data Structures", "Algorithms",
execution_path.py(58):                                                                       "Alice": ["Data Structures", "Operating Systems",
execution_path.py(60):                                                                         "Tom": ["Calculus", "Linear Algebra"],
execution_path.py(61):                                                                         "Jerry": ["Linear Algebra", "Statistics"]}
execution_path.py(55):             self.registration_system.students_registration_classes = {"John": ["Algorithms", "Data Structures"],
execution_path.py(62):             cs_most_popular_class = self.registration_system.get_most_popular_class_in_major("Computer Science")
 --- modulename: execution_path, funcname: get_most_popular_class_in_major
execution_path.py(41):         class_list = []
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(44):                 class_list += self.students_registration_classes[student["name"]]
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(44):                 class_list += self.students_registration_classes[student["name"]]
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(44):                 class_list += self.students_registration_classes[student["name"]]
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(42):         for student in self.students:
execution_path.py(45):         most_popular_class = max(set(class_list), key=class_list.count)
execution_path.py(46):         return most_popular_class
execution_path.py(63):             math_most_popular_class = self.registration_system.get_most_popular_class_in_major("Mathematics")
 --- modulename: execution_path, funcname: get_most_popular_class_in_major
execution_path.py(41):         class_list = []
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(44):                 class_list += self.students_registration_classes[student["name"]]
execution_path.py(42):         for student in self.students:
execution_path.py(43):             if student["major"] == major:
execution_path.py(44):                 class_list += self.students_registration_classes[student["name"]]
execution_path.py(42):         for student in self.students:
execution_path.py(45):         most_popular_class = max(set(class_list), key=class_list.count)
execution_path.py(46):         return most_popular_class
execution_path.py(64):             return cs_most_popular_class,math_most_popular_class
