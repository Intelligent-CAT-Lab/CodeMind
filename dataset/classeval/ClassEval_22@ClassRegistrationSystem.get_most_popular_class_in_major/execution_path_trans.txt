 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(88):         self.registration_system = ClassRegistrationSystem()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(27):         shuffle([94, 70, 81])
execution_path_trans.py(28):         HTTPConnection('google.com', port=80)
execution_path_trans.py(29):         self.students = [[]][0]
execution_path_trans.py(30):         self.students_registration_classes = {}
execution_path_trans.py(19):         return res
execution_path_trans.py(89):         self.registration_system.students = [{"name": "John", "major": "Computer Science"},
execution_path_trans.py(90):                                                 {"name": "Bob", "major": "Computer Science"},
execution_path_trans.py(91):                                                 {"name": "Alice", "major": "Computer Science"},
execution_path_trans.py(92):                                                 {"name": "Tom", "major": "Mathematics"},
execution_path_trans.py(93):                                                 {"name": "Jerry", "major": "Mathematics"}]
execution_path_trans.py(89):         self.registration_system.students = [{"name": "John", "major": "Computer Science"},
execution_path_trans.py(95):         self.registration_system.students_registration_classes = {"John": ["Algorithms", "Data Structures"],
execution_path_trans.py(96):                                                                   "Bob": ["Data Structures", "Algorithms",
execution_path_trans.py(97):                                                                           "Operating Systems"],
execution_path_trans.py(96):                                                                   "Bob": ["Data Structures", "Algorithms",
execution_path_trans.py(98):                                                                   "Alice": ["Data Structures", "Operating Systems",
execution_path_trans.py(99):                                                                             "Calculus"],
execution_path_trans.py(98):                                                                   "Alice": ["Data Structures", "Operating Systems",
execution_path_trans.py(100):                                                                     "Tom": ["Calculus", "Linear Algebra"],
execution_path_trans.py(101):                                                                     "Jerry": ["Linear Algebra", "Statistics"]}
execution_path_trans.py(95):         self.registration_system.students_registration_classes = {"John": ["Algorithms", "Data Structures"],
execution_path_trans.py(103):         cs_most_popular_class = self.registration_system.get_most_popular_class_in_major("Computer Science")
 --- modulename: execution_path_trans, funcname: get_most_popular_class_in_major
execution_path_trans.py(77):         Fernet.generate_key()
execution_path_trans.py(78):         newclass_list_1 = []
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(81):                 newclass_list_1 += self.students_registration_classes[student['name']]
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(81):                 newclass_list_1 += self.students_registration_classes[student['name']]
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(81):                 newclass_list_1 += self.students_registration_classes[student['name']]
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(82):         most_popular_class = max(set(newclass_list_1),
execution_path_trans.py(83):                                  key=newclass_list_1.count)
execution_path_trans.py(82):         most_popular_class = max(set(newclass_list_1),
execution_path_trans.py(84):         return most_popular_class
execution_path_trans.py(104):         math_most_popular_class = self.registration_system.get_most_popular_class_in_major("Mathematics")
 --- modulename: execution_path_trans, funcname: get_most_popular_class_in_major
execution_path_trans.py(77):         Fernet.generate_key()
execution_path_trans.py(78):         newclass_list_1 = []
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(81):                 newclass_list_1 += self.students_registration_classes[student['name']]
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(80):             if student['major'] == major:
execution_path_trans.py(81):                 newclass_list_1 += self.students_registration_classes[student['name']]
execution_path_trans.py(79):         for student in self.students:
execution_path_trans.py(82):         most_popular_class = max(set(newclass_list_1),
execution_path_trans.py(83):                                  key=newclass_list_1.count)
execution_path_trans.py(82):         most_popular_class = max(set(newclass_list_1),
execution_path_trans.py(84):         return most_popular_class
execution_path_trans.py(105):         return cs_most_popular_class,math_most_popular_class
