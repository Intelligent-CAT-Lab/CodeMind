 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(48):             return KappaCalculator.kappa([[2, 2, 1], [1, 2, 1], [1, 1, 2]], 3)
 --- modulename: execution_path, funcname: kappa
execution_path.py(13):         dataMat = np.mat(testData)
execution_path.py(14):         P0 = 0.0
execution_path.py(15):         for i in range(k):
execution_path.py(16):             P0 += dataMat[i, i] * 1.0
execution_path.py(15):         for i in range(k):
execution_path.py(16):             P0 += dataMat[i, i] * 1.0
execution_path.py(15):         for i in range(k):
execution_path.py(16):             P0 += dataMat[i, i] * 1.0
execution_path.py(15):         for i in range(k):
execution_path.py(17):         xsum = np.sum(dataMat, axis=1)
execution_path.py(18):         ysum = np.sum(dataMat, axis=0)
execution_path.py(19):         sum = np.sum(dataMat)
execution_path.py(20):         Pe = float(ysum * xsum) / sum / sum
execution_path.py(21):         P0 = float(P0 / sum * 1.0)
execution_path.py(22):         cohens_coefficient = float((P0 - Pe) / (1 - Pe))
execution_path.py(23):         return cohens_coefficient
