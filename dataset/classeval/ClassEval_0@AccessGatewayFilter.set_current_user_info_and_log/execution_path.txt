 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(55):             agf = AccessGatewayFilter()
 --- modulename: execution_path, funcname: __init__
execution_path.py(15):         pass
execution_path.py(56):             request = {'path': '/api/data', 'method': 'GET'}
execution_path.py(57):             res = agf.filter(request)
 --- modulename: execution_path, funcname: filter
execution_path.py(18):         request_uri = request['path']
execution_path.py(19):         method = request['method']
execution_path.py(21):         if self.is_start_with(request_uri):
 --- modulename: execution_path, funcname: is_start_with
execution_path.py(34):         start_with = ["/api", '/login']
execution_path.py(35):         for s in start_with:
execution_path.py(36):             if request_uri.startswith(s):
execution_path.py(37):                 return True
execution_path.py(22):             return True
execution_path.py(58):             request_uri = '/api/data'
execution_path.py(59):             res = agf.is_start_with(request_uri)
 --- modulename: execution_path, funcname: is_start_with
execution_path.py(34):         start_with = ["/api", '/login']
execution_path.py(35):         for s in start_with:
execution_path.py(36):             if request_uri.startswith(s):
execution_path.py(37):                 return True
execution_path.py(61):                 'headers': {'Authorization': {'user': {'name': 'user1'}, 'jwt': 'user1' + str(datetime.date.today())}}}
execution_path.py(60):             request = {
execution_path.py(62):             res = agf.get_jwt_user(request)
 --- modulename: execution_path, funcname: get_jwt_user
execution_path.py(41):         token = request['headers']['Authorization']
execution_path.py(42):         user = token['user']
execution_path.py(43):         if token['jwt'].startswith(user['name']):
execution_path.py(44):             jwt_str_date = token['jwt'].split(user['name'])[1]
execution_path.py(45):             jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
execution_path.py(46):             if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
execution_path.py(48):         return token
execution_path.py(63):             return res,res,res
 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(55):             agf = AccessGatewayFilter()
 --- modulename: execution_path, funcname: __init__
execution_path.py(15):         pass
execution_path.py(56):             request = {'path': '/api/data', 'method': 'GET'}
execution_path.py(57):             res = agf.filter(request)
 --- modulename: execution_path, funcname: filter
execution_path.py(18):         request_uri = request['path']
execution_path.py(19):         method = request['method']
execution_path.py(21):         if self.is_start_with(request_uri):
 --- modulename: execution_path, funcname: is_start_with
execution_path.py(34):         start_with = ["/api", '/login']
execution_path.py(35):         for s in start_with:
execution_path.py(36):             if request_uri.startswith(s):
execution_path.py(37):                 return True
execution_path.py(22):             return True
execution_path.py(58):             request_uri = '/api/data'
execution_path.py(59):             res = agf.is_start_with(request_uri)
 --- modulename: execution_path, funcname: is_start_with
execution_path.py(34):         start_with = ["/api", '/login']
execution_path.py(35):         for s in start_with:
execution_path.py(36):             if request_uri.startswith(s):
execution_path.py(37):                 return True
execution_path.py(61):                 'headers': {'Authorization': {'user': {'name': 'user1'}, 'jwt': 'user1' + str(datetime.date.today())}}}
execution_path.py(60):             request = {
execution_path.py(62):             res = agf.get_jwt_user(request)
 --- modulename: execution_path, funcname: get_jwt_user
execution_path.py(41):         token = request['headers']['Authorization']
execution_path.py(42):         user = token['user']
execution_path.py(43):         if token['jwt'].startswith(user['name']):
execution_path.py(44):             jwt_str_date = token['jwt'].split(user['name'])[1]
execution_path.py(45):             jwt_date = datetime.datetime.strptime(jwt_str_date, "%Y-%m-%d")
execution_path.py(46):             if datetime.datetime.today() - jwt_date >= datetime.timedelta(days=3):
execution_path.py(48):         return token
execution_path.py(63):             return res,res,res
