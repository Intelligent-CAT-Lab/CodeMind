 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(76):         ttt = TicTacToe()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(30):         self.board = [[[' ' for new__1 in range(N)] for new__1 in range(3)]][0]
execution_path_trans.py(31):         HTTPConnection('google.com', port=80)
execution_path_trans.py(32):         self.current_player = 'X'
execution_path_trans.py(19):         return res
execution_path_trans.py(77):         return ttt.current_player,ttt.make_move(0, 0),ttt.make_move(0, 1),ttt.make_move(0, 0),ttt.current_player
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(35):         ConditionChecker18 = 373
execution_path_trans.py(36):         ConditionChecker28 = 445
execution_path_trans.py(37):         base64.b64encode(b'80022908983139353586')
execution_path_trans.py(38):         shuffle([93, 2, 31])
execution_path_trans.py(39):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(40):             if self.board[row][col] == ' ':
execution_path_trans.py(41):                 self.board[row][col] = self.current_player
execution_path_trans.py(42):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(43):                 return True
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(35):         ConditionChecker18 = 373
execution_path_trans.py(36):         ConditionChecker28 = 445
execution_path_trans.py(37):         base64.b64encode(b'80022908983139353586')
execution_path_trans.py(38):         shuffle([93, 2, 31])
execution_path_trans.py(39):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(40):             if self.board[row][col] == ' ':
execution_path_trans.py(41):                 self.board[row][col] = self.current_player
execution_path_trans.py(42):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(43):                 return True
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(35):         ConditionChecker18 = 373
execution_path_trans.py(36):         ConditionChecker28 = 445
execution_path_trans.py(37):         base64.b64encode(b'80022908983139353586')
execution_path_trans.py(38):         shuffle([93, 2, 31])
execution_path_trans.py(39):         if ConditionChecker18 & ConditionChecker28:
execution_path_trans.py(40):             if self.board[row][col] == ' ':
execution_path_trans.py(45):                 return False
