 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(44):             self.gomokuGame = GomokuGame(10)
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.board_size = board_size
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
 --- modulename: execution_path, funcname: <listcomp>
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(9):         self.board = [[' ' for _ in range(board_size)] for _ in range(board_size)]
execution_path.py(10):         self.current_player = 'X'
execution_path.py(45):             moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(47):                 self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path, funcname: make_move
execution_path.py(13):         if self.board[row][col] == ' ':
execution_path.py(14):             self.board[row][col] = self.current_player
execution_path.py(15):             self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path.py(16):             return True
execution_path.py(46):             for move in moves:
execution_path.py(48):             return self.gomokuGame._check_five_in_a_row(5, 5, (1, 0))
 --- modulename: execution_path, funcname: _check_five_in_a_row
execution_path.py(30):         dx, dy = direction
execution_path.py(31):         count = 1
execution_path.py(32):         symbol = self.board[row][col]
execution_path.py(33):         for i in range(1, 5):
execution_path.py(34):             new_row = row + dx * i
execution_path.py(35):             new_col = col + dy * i
execution_path.py(36):             if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
execution_path.py(38):             if self.board[new_row][new_col] != symbol:
execution_path.py(39):                 return False
