 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(85):         self.gomokuGame = GomokuGame(10)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(24):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         shuffle([95, 37, 6])
execution_path_trans.py(34):         HTTPConnection('google.com', port=80)
execution_path_trans.py(35):         self.board_size = board_size
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(37):                        for _ in range(board_size)]][0]
execution_path_trans.py(36):         self.board = [[[' ' for _ in range(board_size)]
execution_path_trans.py(38):         ttest_ind([31, 71, 80], [27, 40, 45])
execution_path_trans.py(39):         self.current_player = 'X'
execution_path_trans.py(25):         return res
execution_path_trans.py(86):         moves = [(5, 5), (0, 0), (5, 4), (0, 1), (5, 3), (0, 2), (5, 2), (0, 3), (5, 1)]
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(88):             self.gomokuGame.make_move(move[0], move[1])
 --- modulename: execution_path_trans, funcname: make_move
execution_path_trans.py(42):         ConditionChecker19 = 297
execution_path_trans.py(43):         datetime.datetime.now()
execution_path_trans.py(44):         base64.b64encode(b'23600340188451558334')
execution_path_trans.py(45):         ConditionChecker29 = 396
execution_path_trans.py(46):         if ConditionChecker19 & ConditionChecker29:
execution_path_trans.py(47):             if self.board[row][col] == ' ':
execution_path_trans.py(48):                 self.board[row][col] = self.current_player
execution_path_trans.py(49):                 self.current_player = 'O' if self.current_player == 'X' else 'X'
execution_path_trans.py(50):                 return True
execution_path_trans.py(87):         for move in moves:
execution_path_trans.py(90):         return self.gomokuGame._check_five_in_a_row(5, 5, (1, 0))
 --- modulename: execution_path_trans, funcname: _check_five_in_a_row
execution_path_trans.py(70):         (dx, dy) = newdirection_1
execution_path_trans.py(71):         count = 1
execution_path_trans.py(72):         symbol = self.board[row][col]
execution_path_trans.py(73):         for i in range(1, 5):
execution_path_trans.py(74):             new_row = newFunc0_55(i, row, dx)
 --- modulename: execution_path_trans, funcname: newFunc0_55
execution_path_trans.py(16):     return row + dx * i
execution_path_trans.py(75):             new_col = col + dy * i
execution_path_trans.py(76):             if not (0 <= new_row < self.board_size and 0 <= new_col < self.board_size):
execution_path_trans.py(78):             if self.board[new_row][new_col] != symbol:
execution_path_trans.py(79):                 return False
