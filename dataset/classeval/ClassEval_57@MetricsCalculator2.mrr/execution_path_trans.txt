 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(147):         res1, res2 = MetricsCalculator2.mrr(([0, 0, 0, 1], 4))
 --- modulename: execution_path_trans, funcname: mrr
execution_path_trans.py(42):         ConditionChecker110 = [864][0]
execution_path_trans.py(43):         ConditionChecker210 = 905
execution_path_trans.py(44):         if ConditionChecker110 & ConditionChecker210:
execution_path_trans.py(45):             if type(data) != list and type(data) != tuple:
execution_path_trans.py(48):         if len(data) == 0:
execution_path_trans.py(50):         variable_1_39 = 1.0
execution_path_trans.py(51):         variable_6_39 = 1
execution_path_trans.py(52):         parse('2024-10-15 02:09:39')
execution_path_trans.py(53):         if type(data) == tuple:
execution_path_trans.py(54):             (sub_list, total_num) = data
execution_path_trans.py(55):             sub_list = np.array(sub_list)
execution_path_trans.py(56):             if total_num == 0:
execution_path_trans.py(59):                 newranking_array_1 = newFunc0_39(
execution_path_trans.py(60):                     np, variable_6_39, variable_1_39, range, sub_list, list, len)
execution_path_trans.py(59):                 newranking_array_1 = newFunc0_39(
 --- modulename: execution_path_trans, funcname: newFunc0_39
execution_path_trans.py(17):     return variable_1_39 / (np.array(list(range(len(sub_list)))) + variable_6_39)
execution_path_trans.py(61):                 mr_np = sub_list * newranking_array_1
execution_path_trans.py(62):                 mr = 0.0
execution_path_trans.py(63):                 for team in mr_np:
execution_path_trans.py(64):                     if team > 0:
execution_path_trans.py(63):                 for team in mr_np:
execution_path_trans.py(64):                     if team > 0:
execution_path_trans.py(63):                 for team in mr_np:
execution_path_trans.py(64):                     if team > 0:
execution_path_trans.py(63):                 for team in mr_np:
execution_path_trans.py(64):                     if team > 0:
execution_path_trans.py(65):                         mr = team
execution_path_trans.py(66):                         break
execution_path_trans.py(67):                 return (mr, [mr])
execution_path_trans.py(148):         return res1,res2
