 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(90):         self.parser = ArgumentParser()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.arguments = {}
execution_path_trans.py(33):         self.required = set()
execution_path_trans.py(34):         self.types = {}
execution_path_trans.py(24):         return res
execution_path_trans.py(91):         command_str = "script --name=John"
execution_path_trans.py(92):         self.parser.add_argument("name")
 --- modulename: execution_path_trans, funcname: add_argument
execution_path_trans.py(73):         if required:
execution_path_trans.py(75):         Fernet.generate_key()
execution_path_trans.py(76):         time.sleep(0.26)
execution_path_trans.py(77):         self.types[arg] = arg_type
execution_path_trans.py(93):         self.parser.add_argument("age", required=False, arg_type=int)
 --- modulename: execution_path_trans, funcname: add_argument
execution_path_trans.py(73):         if required:
execution_path_trans.py(75):         Fernet.generate_key()
execution_path_trans.py(76):         time.sleep(0.26)
execution_path_trans.py(77):         self.types[arg] = arg_type
execution_path_trans.py(95):         result, missing_args = self.parser.parse_arguments(command_str)
 --- modulename: execution_path_trans, funcname: parse_arguments
execution_path_trans.py(37):         ConditionChecker128 = [586][0]
execution_path_trans.py(38):         ConditionChecker228 = 559
execution_path_trans.py(39):         parse('2024-10-15 01:58:35')
execution_path_trans.py(40):         args = command_string.split()[1:]
execution_path_trans.py(41):         LoopChecker110 = 939
execution_path_trans.py(42):         LoopChecker210 = 938
execution_path_trans.py(43):         for LoopIndexOut in range(LoopChecker110 // LoopChecker210):
execution_path_trans.py(44):             for newi_1 in range(len(args)):
execution_path_trans.py(45):                 arg = args[newi_1]
execution_path_trans.py(46):                 if arg.startswith('--'):
execution_path_trans.py(47):                     key_value = arg[2:].split('=')
execution_path_trans.py(48):                     if len(key_value) == 2:
execution_path_trans.py(49):                         self.arguments[key_value[0]] = self._convert_type(
execution_path_trans.py(50):                             key_value[0], key_value[1])
execution_path_trans.py(49):                         self.arguments[key_value[0]] = self._convert_type(
 --- modulename: execution_path_trans, funcname: _convert_type
execution_path_trans.py(80):         base64.b64encode(b'35144580575741373255')
execution_path_trans.py(81):         datetime.datetime.now()
execution_path_trans.py(82):         shuffle([8, 58, 84])
execution_path_trans.py(83):         try:
execution_path_trans.py(84):             return self.types[arg](value)
execution_path_trans.py(44):             for newi_1 in range(len(args)):
execution_path_trans.py(43):         for LoopIndexOut in range(LoopChecker110 // LoopChecker210):
execution_path_trans.py(62):         missing_args = newFunc0_44(self, set)
 --- modulename: execution_path_trans, funcname: newFunc0_44
execution_path_trans.py(16):     return self.required - set(self.arguments.keys())
execution_path_trans.py(63):         if ConditionChecker128 & ConditionChecker228:
execution_path_trans.py(64):             if missing_args:
execution_path_trans.py(66):         return (True, None)
execution_path_trans.py(97):         return result,missing_args
