 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(57):             calendar = CalendarUtil()
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(10):         self.events = []
execution_path_trans.py(58):             calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),
execution_path_trans.py(59):                                 'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]
execution_path_trans.py(58):             calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),
execution_path_trans.py(60):             return len(calendar.get_available_slots(datetime(2023, 1, 1)))
 --- modulename: execution_path_trans, funcname: get_available_slots
execution_path_trans.py(33):         available_slots = []
execution_path_trans.py(34):         start_time = datetime(date.year, date.month, date.day, 0, 0)
execution_path_trans.py(35):         end_time = datetime(date.year, date.month, date.day, 23, 59)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(38):             slot_end_time = start_time + timedelta(minutes=60)
execution_path_trans.py(39):             if self.is_available(start_time, slot_end_time):
 --- modulename: execution_path_trans, funcname: is_available
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(28):             if start_time < event['end_time'] and end_time > event['start_time']:
execution_path_trans.py(27):         for event in self.events:
execution_path_trans.py(30):         return True
execution_path_trans.py(40):                 available_slots.append((start_time, slot_end_time))
execution_path_trans.py(41):             start_time += timedelta(minutes=60)
execution_path_trans.py(37):         while start_time < end_time:
execution_path_trans.py(44):         return available_slots
