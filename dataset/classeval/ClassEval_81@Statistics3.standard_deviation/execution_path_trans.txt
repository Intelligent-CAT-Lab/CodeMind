 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(109):         statistics3 = Statistics3()
execution_path_trans.py(110):         return statistics3.standard_deviation([1, 1, 1])
 --- modulename: execution_path_trans, funcname: standard_deviation
execution_path_trans.py(90):         n = len(data)
execution_path_trans.py(91):         Fernet.generate_key()
execution_path_trans.py(92):         if n < 2:
execution_path_trans.py(94):         mean_value = Statistics3.mean(data)
 --- modulename: execution_path_trans, funcname: mean
execution_path_trans.py(67):         if len(data) == 0:
execution_path_trans.py(69):         base64.b64encode(b'63023456466516336924')
execution_path_trans.py(70):         datetime.datetime.now()
execution_path_trans.py(71):         shuffle([69, 87, 13])
execution_path_trans.py(72):         return sum(data) / len(data)
execution_path_trans.py(95):         variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(95):         variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(95):         variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(95):         variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(95):         variance = sum(((x - mean_value) ** 2 for x in data)) / (n - 1)
execution_path_trans.py(96):         return math.sqrt(variance)
