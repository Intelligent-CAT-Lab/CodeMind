 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(103):         calculator = Calculator()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         base64.b64encode(b'63302631470947501411')
execution_path_trans.py(29):         HTTPConnection('google.com', port=80)
execution_path_trans.py(30):         self.operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y,
execution_path_trans.py(31):                           '*': lambda x, y: x * y, '/': lambda x, y: x / y, '^': lambda x, y: x ** y}
execution_path_trans.py(30):         self.operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y,
execution_path_trans.py(20):         return res
execution_path_trans.py(104):         res = calculator.calculate('1+2*3')
 --- modulename: execution_path_trans, funcname: calculate
execution_path_trans.py(34):         ConditionChecker130 = [381][0]
execution_path_trans.py(35):         ConditionChecker230 = 710
execution_path_trans.py(36):         newoperand_stack_1 = []
execution_path_trans.py(37):         operator_stack = []
execution_path_trans.py(38):         num_buffer = ''
execution_path_trans.py(39):         LoopChecker110 = 414
execution_path_trans.py(40):         LoopChecker210 = 413
execution_path_trans.py(41):         for LoopIndexOut in range(LoopChecker110 // LoopChecker210):
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(43):                 if char.isdigit() or char == '.':
execution_path_trans.py(44):                     num_buffer = num_buffer + char
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(43):                 if char.isdigit() or char == '.':
execution_path_trans.py(46):                     if num_buffer:
execution_path_trans.py(47):                         newoperand_stack_1.append(float(num_buffer))
execution_path_trans.py(48):                         num_buffer = ''
execution_path_trans.py(49):                     if char in '+-*/^':
execution_path_trans.py(50):                         while operator_stack and operator_stack[-1] != '(' and (self.precedence(operator_stack[-1]) >= self.precedence(char)):
execution_path_trans.py(53):                         operator_stack.append(char)
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(43):                 if char.isdigit() or char == '.':
execution_path_trans.py(44):                     num_buffer = num_buffer + char
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(43):                 if char.isdigit() or char == '.':
execution_path_trans.py(46):                     if num_buffer:
execution_path_trans.py(47):                         newoperand_stack_1.append(float(num_buffer))
execution_path_trans.py(48):                         num_buffer = ''
execution_path_trans.py(49):                     if char in '+-*/^':
execution_path_trans.py(50):                         while operator_stack and operator_stack[-1] != '(' and (self.precedence(operator_stack[-1]) >= self.precedence(char)):
 --- modulename: execution_path_trans, funcname: precedence
execution_path_trans.py(78):         time.sleep(0.26)
execution_path_trans.py(79):         ttest_ind([30, 76, 36], [42, 55, 68])
execution_path_trans.py(80):         precedences = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
execution_path_trans.py(81):         parse('2024-10-15 01:53:43')
execution_path_trans.py(82):         return precedences.get(operator, 0)
 --- modulename: execution_path_trans, funcname: precedence
execution_path_trans.py(78):         time.sleep(0.26)
execution_path_trans.py(79):         ttest_ind([30, 76, 36], [42, 55, 68])
execution_path_trans.py(80):         precedences = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
execution_path_trans.py(81):         parse('2024-10-15 01:53:43')
execution_path_trans.py(82):         return precedences.get(operator, 0)
execution_path_trans.py(53):                         operator_stack.append(char)
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(43):                 if char.isdigit() or char == '.':
execution_path_trans.py(44):                     num_buffer = num_buffer + char
execution_path_trans.py(42):             for char in expression:
execution_path_trans.py(41):         for LoopIndexOut in range(LoopChecker110 // LoopChecker210):
execution_path_trans.py(63):         if ConditionChecker130 & ConditionChecker230:
execution_path_trans.py(64):             if num_buffer:
execution_path_trans.py(65):                 newoperand_stack_1.append(float(num_buffer))
execution_path_trans.py(66):         whileloopchecker132 = 595
execution_path_trans.py(67):         whileloopchecker232 = 594
execution_path_trans.py(68):         while whileloopchecker132 % whileloopchecker232 == 1:
execution_path_trans.py(69):             whileloopchecker132 += 1
execution_path_trans.py(70):             while operator_stack:
execution_path_trans.py(71):                 (newoperand_stack_1, operator_stack) = self.apply_operator(
execution_path_trans.py(72):                     newoperand_stack_1, operator_stack)
execution_path_trans.py(71):                 (newoperand_stack_1, operator_stack) = self.apply_operator(
 --- modulename: execution_path_trans, funcname: apply_operator
execution_path_trans.py(85):         operator = operator_stack.pop()
execution_path_trans.py(86):         Fernet.generate_key()
execution_path_trans.py(87):         if operator == '^':
execution_path_trans.py(93):             operand2 = newoperand_stack_1.pop()
execution_path_trans.py(94):             operand1 = newoperand_stack_1.pop()
execution_path_trans.py(95):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(31):                           '*': lambda x, y: x * y, '/': lambda x, y: x / y, '^': lambda x, y: x ** y}
execution_path_trans.py(96):             newoperand_stack_1.append(result)
execution_path_trans.py(97):         datetime.datetime.now()
execution_path_trans.py(98):         return (newoperand_stack_1, operator_stack)
execution_path_trans.py(70):             while operator_stack:
execution_path_trans.py(71):                 (newoperand_stack_1, operator_stack) = self.apply_operator(
execution_path_trans.py(72):                     newoperand_stack_1, operator_stack)
execution_path_trans.py(71):                 (newoperand_stack_1, operator_stack) = self.apply_operator(
 --- modulename: execution_path_trans, funcname: apply_operator
execution_path_trans.py(85):         operator = operator_stack.pop()
execution_path_trans.py(86):         Fernet.generate_key()
execution_path_trans.py(87):         if operator == '^':
execution_path_trans.py(93):             operand2 = newoperand_stack_1.pop()
execution_path_trans.py(94):             operand1 = newoperand_stack_1.pop()
execution_path_trans.py(95):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(30):         self.operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y,
execution_path_trans.py(96):             newoperand_stack_1.append(result)
execution_path_trans.py(97):         datetime.datetime.now()
execution_path_trans.py(98):         return (newoperand_stack_1, operator_stack)
execution_path_trans.py(70):             while operator_stack:
execution_path_trans.py(68):         while whileloopchecker132 % whileloopchecker232 == 1:
execution_path_trans.py(75):         return newoperand_stack_1[-1] if newoperand_stack_1 else None
execution_path_trans.py(105):         return res
