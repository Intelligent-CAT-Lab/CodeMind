 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(79):             calculator = Calculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(9):             '+': lambda x, y: x + y,
execution_path.py(10):             '-': lambda x, y: x - y,
execution_path.py(11):             '*': lambda x, y: x * y,
execution_path.py(12):             '/': lambda x, y: x / y,
execution_path.py(13):             '^': lambda x, y: x ** y
execution_path.py(8):         self.operators = {
execution_path.py(80):             res = calculator.calculate('1+2*3')
 --- modulename: execution_path, funcname: calculate
execution_path.py(17):         operand_stack = []
execution_path.py(18):         operator_stack = []
execution_path.py(19):         num_buffer = ''
execution_path.py(21):         for char in expression:
execution_path.py(22):             if char.isdigit() or char == '.':
execution_path.py(23):                 num_buffer += char
execution_path.py(21):         for char in expression:
execution_path.py(22):             if char.isdigit() or char == '.':
execution_path.py(25):                 if num_buffer:
execution_path.py(26):                     operand_stack.append(float(num_buffer))
execution_path.py(27):                     num_buffer = ''
execution_path.py(29):                 if char in '+-*/^':
execution_path.py(31):                             operator_stack and
execution_path.py(30):                     while (
execution_path.py(37):                     operator_stack.append(char)
execution_path.py(21):         for char in expression:
execution_path.py(22):             if char.isdigit() or char == '.':
execution_path.py(23):                 num_buffer += char
execution_path.py(21):         for char in expression:
execution_path.py(22):             if char.isdigit() or char == '.':
execution_path.py(25):                 if num_buffer:
execution_path.py(26):                     operand_stack.append(float(num_buffer))
execution_path.py(27):                     num_buffer = ''
execution_path.py(29):                 if char in '+-*/^':
execution_path.py(31):                             operator_stack and
execution_path.py(30):                     while (
execution_path.py(32):                             operator_stack[-1] != '(' and
execution_path.py(33):                             self.precedence(operator_stack[-1]) >= self.precedence(char)
 --- modulename: execution_path, funcname: precedence
execution_path.py(56):             '+': 1,
execution_path.py(57):             '-': 1,
execution_path.py(58):             '*': 2,
execution_path.py(59):             '/': 2,
execution_path.py(60):             '^': 3
execution_path.py(55):         precedences = {
execution_path.py(62):         return precedences.get(operator, 0)
 --- modulename: execution_path, funcname: precedence
execution_path.py(56):             '+': 1,
execution_path.py(57):             '-': 1,
execution_path.py(58):             '*': 2,
execution_path.py(59):             '/': 2,
execution_path.py(60):             '^': 3
execution_path.py(55):         precedences = {
execution_path.py(62):         return precedences.get(operator, 0)
execution_path.py(37):                     operator_stack.append(char)
execution_path.py(21):         for char in expression:
execution_path.py(22):             if char.isdigit() or char == '.':
execution_path.py(23):                 num_buffer += char
execution_path.py(21):         for char in expression:
execution_path.py(46):         if num_buffer:
execution_path.py(47):             operand_stack.append(float(num_buffer))
execution_path.py(49):         while operator_stack:
execution_path.py(50):             operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)
 --- modulename: execution_path, funcname: apply_operator
execution_path.py(65):         operator = operator_stack.pop()
execution_path.py(66):         if operator == '^':
execution_path.py(72):             operand2 = operand_stack.pop()
execution_path.py(73):             operand1 = operand_stack.pop()
execution_path.py(74):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(11):             '*': lambda x, y: x * y,
execution_path.py(75):             operand_stack.append(result)
execution_path.py(76):         return operand_stack, operator_stack
execution_path.py(49):         while operator_stack:
execution_path.py(50):             operand_stack, operator_stack = self.apply_operator(operand_stack, operator_stack)
 --- modulename: execution_path, funcname: apply_operator
execution_path.py(65):         operator = operator_stack.pop()
execution_path.py(66):         if operator == '^':
execution_path.py(72):             operand2 = operand_stack.pop()
execution_path.py(73):             operand1 = operand_stack.pop()
execution_path.py(74):             result = self.operators[operator](operand1, operand2)
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(9):             '+': lambda x, y: x + y,
execution_path.py(75):             operand_stack.append(result)
execution_path.py(76):         return operand_stack, operator_stack
execution_path.py(49):         while operator_stack:
execution_path.py(52):         return operand_stack[-1] if operand_stack else None
execution_path.py(81):             return res
