 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(47):             bdp = BinaryDataProcessor("011010011111001")
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.binary_string = binary_string
execution_path.py(9):         self.clean_non_binary_chars()
 --- modulename: execution_path, funcname: clean_non_binary_chars
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path, funcname: <lambda>
execution_path.py(12):         self.binary_string = ''.join(filter(lambda x: x in '01', self.binary_string))
execution_path.py(48):             return bdp.calculate_binary_info()
 --- modulename: execution_path, funcname: calculate_binary_info
execution_path.py(15):         zeroes_count = self.binary_string.count('0')
execution_path.py(16):         ones_count = self.binary_string.count('1')
execution_path.py(17):         total_length = len(self.binary_string)
execution_path.py(19):         zeroes_percentage = (zeroes_count / total_length)
execution_path.py(20):         ones_percentage = (ones_count / total_length)
execution_path.py(23):             'Zeroes': zeroes_percentage,
execution_path.py(24):             'Ones': ones_percentage,
execution_path.py(25):             'Bit length': total_length
execution_path.py(22):         return {
