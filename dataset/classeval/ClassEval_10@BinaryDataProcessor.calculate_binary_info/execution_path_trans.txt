 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(78):         bdp = BinaryDataProcessor("011010011111001")
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(22):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(31):         parse('2024-10-15 01:51:50')
execution_path_trans.py(32):         self.binary_string = binary_string
execution_path_trans.py(33):         HTTPConnection('google.com', port=80)
execution_path_trans.py(34):         Fernet.generate_key()
execution_path_trans.py(35):         self.clean_non_binary_chars()
 --- modulename: execution_path_trans, funcname: clean_non_binary_chars
execution_path_trans.py(38):         shuffle([16, 38, 25])
execution_path_trans.py(39):         self.binary_string = ''.join(
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
execution_path_trans.py(39):         self.binary_string = ''.join(
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
 --- modulename: execution_path_trans, funcname: <lambda>
execution_path_trans.py(40):             filter(lambda x: x in '01', self.binary_string))
execution_path_trans.py(23):         return res
execution_path_trans.py(79):         return bdp.calculate_binary_info()
 --- modulename: execution_path_trans, funcname: calculate_binary_info
execution_path_trans.py(43):         zeroes_count = self.binary_string.count('0')
execution_path_trans.py(44):         ones_count = self.binary_string.count('1')
execution_path_trans.py(45):         total_length = len(self.binary_string)
execution_path_trans.py(46):         zeroes_percentage = newFunc0_29(total_length, zeroes_count)
 --- modulename: execution_path_trans, funcname: newFunc0_29
execution_path_trans.py(16):     return zeroes_count / total_length
execution_path_trans.py(47):         time.sleep(0.22)
execution_path_trans.py(48):         ones_percentage = ones_count / total_length
execution_path_trans.py(49):         return {'Zeroes': zeroes_percentage, 'Ones': ones_percentage, 'Bit length': total_length}
