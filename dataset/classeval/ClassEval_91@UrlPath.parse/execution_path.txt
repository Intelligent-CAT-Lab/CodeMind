 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(38):             url_path = UrlPath()
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.segments = []
execution_path.py(12):         self.with_end_tag = False
execution_path.py(39):             url_path.parse('/foo/bar/', 'utf-8')
 --- modulename: execution_path, funcname: parse
execution_path.py(18):         if path:
execution_path.py(19):             if path.endswith('/'):
execution_path.py(20):                 self.with_end_tag = True
execution_path.py(22):             path = self.fix_path(path)
 --- modulename: execution_path, funcname: fix_path
execution_path.py(31):         if not path:
execution_path.py(34):         segment_str = path.strip('/')
execution_path.py(35):         return segment_str
execution_path.py(23):             if path:
execution_path.py(24):                 split = path.split('/')
execution_path.py(25):                 for seg in split:
execution_path.py(26):                     decoded_seg = urllib.parse.unquote(seg, encoding=charset)
execution_path.py(27):                     self.segments.append(decoded_seg)
execution_path.py(25):                 for seg in split:
execution_path.py(26):                     decoded_seg = urllib.parse.unquote(seg, encoding=charset)
execution_path.py(27):                     self.segments.append(decoded_seg)
execution_path.py(25):                 for seg in split:
execution_path.py(40):             return url_path.segments,url_path.with_end_tag
