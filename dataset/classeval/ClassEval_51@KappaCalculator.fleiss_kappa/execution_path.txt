 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(48):             return KappaCalculator.fleiss_kappa([[0, 1, 0, 0, 14], [0, 2, 6, 4, 2], [0, 0, 3, 5, 6], [0, 3, 9, 2, 0], [2, 2, 8, 1, 1], [7, 7, 0, 0, 0], [3, 2, 6, 3, 0], [2, 5, 3, 2, 2], [6, 5, 2, 1, 0], [0, 2, 2, 3, 7]], 10, 5, 14)
 --- modulename: execution_path, funcname: fleiss_kappa
execution_path.py(27):         dataMat = np.mat(testData, float)
execution_path.py(28):         oneMat = np.ones((k, 1))
execution_path.py(29):         sum = 0.0
execution_path.py(30):         P0 = 0.0
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(32):             temp = 0.0
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(34):                 sum += dataMat[i, j]
execution_path.py(35):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path.py(33):             for j in range(k):
execution_path.py(36):             temp -= n
execution_path.py(37):             temp /= (n - 1) * n
execution_path.py(38):             P0 += temp
execution_path.py(31):         for i in range(N):
execution_path.py(39):         P0 = 1.0 * P0 / N
execution_path.py(40):         ysum = np.sum(dataMat, axis=0)
execution_path.py(41):         for i in range(k):
execution_path.py(42):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path.py(41):         for i in range(k):
execution_path.py(42):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path.py(41):         for i in range(k):
execution_path.py(42):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path.py(41):         for i in range(k):
execution_path.py(42):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path.py(41):         for i in range(k):
execution_path.py(42):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path.py(41):         for i in range(k):
execution_path.py(43):         Pe = ysum * oneMat * 1.0
execution_path.py(44):         ans = (P0 - Pe) / (1 - Pe)
execution_path.py(45):         return ans[0, 0]
