 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(88):         return KappaCalculator.fleiss_kappa([[0, 1, 0, 0, 14], [0, 2, 6, 4, 2], [0, 0, 3, 5, 6], [0, 3, 9, 2, 0], [2, 2, 8, 1, 1], [7, 7, 0, 0, 0], [3, 2, 6, 3, 0], [2, 5, 3, 2, 2], [6, 5, 2, 1, 0], [0, 2, 2, 3, 7]], 10, 5, 14)
 --- modulename: execution_path_trans, funcname: fleiss_kappa
execution_path_trans.py(63):         dataMat = np.mat(testData, float)
execution_path_trans.py(64):         oneMat = np.ones((k, 1))
execution_path_trans.py(65):         sum = 0.0
execution_path_trans.py(66):         newP0_1 = 0.0
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(68):             temp = 0.0
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(70):                 sum += dataMat[i, j]
execution_path_trans.py(71):                 temp += 1.0 * dataMat[i, j] ** 2
execution_path_trans.py(69):             for j in range(k):
execution_path_trans.py(72):             temp = temp - n
execution_path_trans.py(73):             temp /= (n - 1) * n
execution_path_trans.py(74):             newP0_1 += temp
execution_path_trans.py(67):         for i in range(N):
execution_path_trans.py(75):         newP0_1 = 1.0 * newP0_1 / N
execution_path_trans.py(76):         Fernet.generate_key()
execution_path_trans.py(77):         ysum = np.sum(dataMat, axis=0)
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(79):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(79):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(79):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(79):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(79):             ysum[0, i] = (ysum[0, i] / sum) ** 2
execution_path_trans.py(78):         for i in range(k):
execution_path_trans.py(80):         base64.b64encode(b'49581940163674189677')
execution_path_trans.py(81):         Pe = ysum * oneMat * 1.0
execution_path_trans.py(82):         time.sleep(0.15)
execution_path_trans.py(83):         ans = (newP0_1 - Pe) / (1 - Pe)
execution_path_trans.py(84):         return ans[0, 0]
