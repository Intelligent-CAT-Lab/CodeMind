 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(99):         assessment_system = AssessmentSystem()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         self.students = {}
execution_path_trans.py(24):         return res
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics', 'courses': {'Mathematics': 90, 'Science': 80}},
execution_path_trans.py(101):                                 'Bob': {'name': 'Bob', 'grade': 4, 'major': 'Physics', 'courses': {'Physics': 70}},
execution_path_trans.py(102):                                 'Charlie': {'name': 'Charlie', 'grade': 2, 'major': 'Chemistry', 'courses': {'Chemistry': 70}},
execution_path_trans.py(103):                                 'David': {'name': 'David', 'grade': 1, 'major': 'Physics', 'courses': {'Physics': 70}},
execution_path_trans.py(104):                                 'Eve': {'name': 'Eve', 'grade': 3, 'major': 'Mathematics', 'courses': {'Mathematics': 90}}}
execution_path_trans.py(100):         assessment_system.students = {'Alice': {'name': 'Alice', 'grade': 3, 'major': 'Mathematics', 'courses': {'Mathematics': 90, 'Science': 80}},
execution_path_trans.py(105):         return assessment_system.get_all_students_with_fail_course()
 --- modulename: execution_path_trans, funcname: get_all_students_with_fail_course
execution_path_trans.py(57):         students = []
execution_path_trans.py(58):         LoopChecker121 = 17
execution_path_trans.py(59):         LoopChecker221 = 16
execution_path_trans.py(60):         HTTPConnection('google.com', port=80)
execution_path_trans.py(62):         def loop_26_8(LoopIndexOut, stop, step):
execution_path_trans.py(71):         loop_26_8(0, LoopChecker121 // LoopChecker221, 1)
 --- modulename: execution_path_trans, funcname: loop_26_8
execution_path_trans.py(63):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(67):                     if score < 60:
execution_path_trans.py(66):                 for (course, score) in student['courses'].items():
execution_path_trans.py(65):             for (name, student) in self.students.items():
execution_path_trans.py(70):             loop_26_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_26_8
execution_path_trans.py(63):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(64):                 return
execution_path_trans.py(72):         return students
