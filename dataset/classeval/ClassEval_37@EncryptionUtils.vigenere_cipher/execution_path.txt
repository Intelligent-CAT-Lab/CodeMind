 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(59):             encryption_utils = EncryptionUtils("key")
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.key = key
execution_path.py(60):             return encryption_utils.vigenere_cipher('abc')
 --- modulename: execution_path, funcname: vigenere_cipher
execution_path.py(25):         encrypted_text = ""
execution_path.py(26):         key_index = 0
execution_path.py(27):         for char in plain_text:
execution_path.py(28):             if char.isalpha():
execution_path.py(29):                 shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
execution_path.py(30):                 encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
execution_path.py(31):                 encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
execution_path.py(32):                 key_index += 1
execution_path.py(27):         for char in plain_text:
execution_path.py(28):             if char.isalpha():
execution_path.py(29):                 shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
execution_path.py(30):                 encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
execution_path.py(31):                 encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
execution_path.py(32):                 key_index += 1
execution_path.py(27):         for char in plain_text:
execution_path.py(28):             if char.isalpha():
execution_path.py(29):                 shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')
execution_path.py(30):                 encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))
execution_path.py(31):                 encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char
execution_path.py(32):                 key_index += 1
execution_path.py(27):         for char in plain_text:
execution_path.py(35):         return encrypted_text
