 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(36):             camelize_map = CamelCaseMap()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self._data = {}
execution_path.py(37):             camelize_map['age'] = 30
 --- modulename: execution_path, funcname: __setitem__
execution_path.py(14):         self._data[self._convert_key(key)] = value
 --- modulename: execution_path, funcname: _convert_key
execution_path.py(26):         if isinstance(key, str):
execution_path.py(27):             return self._to_camel_case(key)
 --- modulename: execution_path, funcname: _to_camel_case
execution_path.py(32):         parts = key.split('_')
execution_path.py(33):         return parts[0] + ''.join(part.title() for part in parts[1:])
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(33):         return parts[0] + ''.join(part.title() for part in parts[1:])
execution_path.py(38):             return camelize_map.__getitem__('age')
 --- modulename: execution_path, funcname: __getitem__
execution_path.py(11):         return self._data[self._convert_key(key)]
 --- modulename: execution_path, funcname: _convert_key
execution_path.py(26):         if isinstance(key, str):
execution_path.py(27):             return self._to_camel_case(key)
 --- modulename: execution_path, funcname: _to_camel_case
execution_path.py(32):         parts = key.split('_')
execution_path.py(33):         return parts[0] + ''.join(part.title() for part in parts[1:])
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(33):         return parts[0] + ''.join(part.title() for part in parts[1:])
