 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(156):         self.expression_calculator = ExpressionCalculator()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(26):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(35):         parse('2024-10-15 02:02:17')
execution_path_trans.py(36):         self.postfix_stack = deque()
execution_path_trans.py(37):         self.operat_priority = [[0, 3, 2, 1, -1, 1, 0, 2]][0]
execution_path_trans.py(27):         return res
execution_path_trans.py(157):         self.expression_calculator.prepare("2-3*4")
 --- modulename: execution_path_trans, funcname: prepare
execution_path_trans.py(66):         ConditionChecker159 = 199
execution_path_trans.py(67):         ConditionChecker259 = 864
execution_path_trans.py(68):         op_stack = deque([','])
execution_path_trans.py(69):         arr = list(expression)
execution_path_trans.py(70):         current_index = 0
execution_path_trans.py(71):         count = 0
execution_path_trans.py(72):         LoopChecker134 = 856
execution_path_trans.py(73):         LoopChecker234 = 855
execution_path_trans.py(74):         shuffle([17, 81, 16])
execution_path_trans.py(75):         for LoopIndexOut in range(LoopChecker134 // LoopChecker234):
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(77):                 if self.is_operator(current_op):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(95):                     count += 1
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(77):                 if self.is_operator(current_op):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(78):                     if count > 0:
execution_path_trans.py(79):                         self.postfix_stack.append(
execution_path_trans.py(80):                             ''.join(arr[current_index:current_index + count]))
execution_path_trans.py(79):                         self.postfix_stack.append(
execution_path_trans.py(81):                     peek_op = op_stack[-1]
execution_path_trans.py(82):                     if current_op == ')':
execution_path_trans.py(87):                         while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
execution_path_trans.py(90):                         op_stack.append(current_op)
execution_path_trans.py(91):                     count = 0
execution_path_trans.py(92):                     variable_3_73 = 1
execution_path_trans.py(93):                     current_index = newFunc0_73(variable_3_73, i)
 --- modulename: execution_path_trans, funcname: newFunc0_73
execution_path_trans.py(19):     ttest_ind([77, 98, 84], [51, 21, 6])
execution_path_trans.py(20):     return i + variable_3_73
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(77):                 if self.is_operator(current_op):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(95):                     count += 1
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(77):                 if self.is_operator(current_op):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(78):                     if count > 0:
execution_path_trans.py(79):                         self.postfix_stack.append(
execution_path_trans.py(80):                             ''.join(arr[current_index:current_index + count]))
execution_path_trans.py(79):                         self.postfix_stack.append(
execution_path_trans.py(81):                     peek_op = op_stack[-1]
execution_path_trans.py(82):                     if current_op == ')':
execution_path_trans.py(87):                         while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
 --- modulename: execution_path_trans, funcname: compare
execution_path_trans.py(111):         time.sleep(0.06)
execution_path_trans.py(112):         if cur == '%':
execution_path_trans.py(114):         if peek == '%':
execution_path_trans.py(116):         return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]
execution_path_trans.py(90):                         op_stack.append(current_op)
execution_path_trans.py(91):                     count = 0
execution_path_trans.py(92):                     variable_3_73 = 1
execution_path_trans.py(93):                     current_index = newFunc0_73(variable_3_73, i)
 --- modulename: execution_path_trans, funcname: newFunc0_73
execution_path_trans.py(19):     ttest_ind([77, 98, 84], [51, 21, 6])
execution_path_trans.py(20):     return i + variable_3_73
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(77):                 if self.is_operator(current_op):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(95):                     count += 1
execution_path_trans.py(76):             for (i, current_op) in enumerate(arr):
execution_path_trans.py(75):         for LoopIndexOut in range(LoopChecker134 // LoopChecker234):
execution_path_trans.py(98):         if ConditionChecker159 & ConditionChecker259:
execution_path_trans.py(99):             if count > 1 or (count == 1 and (not self.is_operator(arr[current_index]))):
 --- modulename: execution_path_trans, funcname: is_operator
execution_path_trans.py(108):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path_trans.py(100):                 self.postfix_stack.append(
execution_path_trans.py(101):                     ''.join(arr[current_index:current_index + count]))
execution_path_trans.py(100):                 self.postfix_stack.append(
execution_path_trans.py(102):         HTTPConnection('google.com', port=80)
execution_path_trans.py(103):         while op_stack[-1] != ',':
execution_path_trans.py(104):             self.postfix_stack.append(str(op_stack.pop()))
execution_path_trans.py(103):         while op_stack[-1] != ',':
execution_path_trans.py(104):             self.postfix_stack.append(str(op_stack.pop()))
execution_path_trans.py(103):         while op_stack[-1] != ',':
execution_path_trans.py(158):         return self.expression_calculator.postfix_stack,deque(['2', '3', '4', '*', '-'])
