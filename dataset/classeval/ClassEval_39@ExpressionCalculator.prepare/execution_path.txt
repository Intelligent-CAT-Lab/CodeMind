 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(119):             self.expression_calculator = ExpressionCalculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(13):         self.postfix_stack = deque()
execution_path.py(14):         self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]
execution_path.py(120):             self.expression_calculator.prepare("2-3*4")
 --- modulename: execution_path, funcname: prepare
execution_path.py(40):         op_stack = deque([','])
execution_path.py(41):         arr = list(expression)
execution_path.py(42):         current_index = 0
execution_path.py(43):         count = 0
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(46):             if self.is_operator(current_op):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(63):                 count += 1
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(46):             if self.is_operator(current_op):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(47):                 if count > 0:
execution_path.py(48):                     self.postfix_stack.append("".join(arr[current_index: current_index + count]))
execution_path.py(49):                 peek_op = op_stack[-1]
execution_path.py(50):                 if current_op == ')':
execution_path.py(55):                     while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
execution_path.py(58):                     op_stack.append(current_op)
execution_path.py(60):                 count = 0
execution_path.py(61):                 current_index = i + 1
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(46):             if self.is_operator(current_op):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(63):                 count += 1
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(46):             if self.is_operator(current_op):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(47):                 if count > 0:
execution_path.py(48):                     self.postfix_stack.append("".join(arr[current_index: current_index + count]))
execution_path.py(49):                 peek_op = op_stack[-1]
execution_path.py(50):                 if current_op == ')':
execution_path.py(55):                     while current_op != '(' and peek_op != ',' and self.compare(current_op, peek_op):
 --- modulename: execution_path, funcname: compare
execution_path.py(76):         if cur == '%':
execution_path.py(78):         if peek == '%':
execution_path.py(80):         return self.operat_priority[ord(peek) - 40] >= self.operat_priority[ord(cur) - 40]
execution_path.py(58):                     op_stack.append(current_op)
execution_path.py(60):                 count = 0
execution_path.py(61):                 current_index = i + 1
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(46):             if self.is_operator(current_op):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(63):                 count += 1
execution_path.py(45):         for i, current_op in enumerate(arr):
execution_path.py(65):         if count > 1 or (count == 1 and not self.is_operator(arr[current_index])):
 --- modulename: execution_path, funcname: is_operator
execution_path.py(73):         return c in {'+', '-', '*', '/', '(', ')', '%'}
execution_path.py(66):             self.postfix_stack.append("".join(arr[current_index: current_index + count]))
execution_path.py(68):         while op_stack[-1] != ',':
execution_path.py(69):             self.postfix_stack.append(str(op_stack.pop()))
execution_path.py(68):         while op_stack[-1] != ',':
execution_path.py(69):             self.postfix_stack.append(str(op_stack.pop()))
execution_path.py(68):         while op_stack[-1] != ',':
execution_path.py(121):             return self.expression_calculator.postfix_stack,deque(['2', '3', '4', '*', '-'])
