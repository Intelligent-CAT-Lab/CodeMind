 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(96):         mc = MetricsCalculator()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(32):         self.true_positives = [0][0]
execution_path_trans.py(33):         self.false_positives = 0
execution_path_trans.py(34):         parse('2024-10-15 02:09:20')
execution_path_trans.py(35):         self.false_negatives = 0
execution_path_trans.py(36):         self.true_negatives = 0
execution_path_trans.py(24):         return res
execution_path_trans.py(97):         mc.update([1, 1, 0, 0], [1, 1, 0, 1])
 --- modulename: execution_path_trans, funcname: update
execution_path_trans.py(39):         LoopChecker110 = 506
execution_path_trans.py(40):         LoopChecker210 = 505
execution_path_trans.py(42):         def loop_12_8(LoopIndexOut, stop, step):
execution_path_trans.py(55):         loop_12_8(0, LoopChecker110 // LoopChecker210, 1)
 --- modulename: execution_path_trans, funcname: loop_12_8
execution_path_trans.py(43):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(45):             for (predicted, true) in zip(predicted_labels, true_labels):
execution_path_trans.py(46):                 if predicted == 1 and true == 1:
execution_path_trans.py(47):                     self.true_positives += 1
execution_path_trans.py(45):             for (predicted, true) in zip(predicted_labels, true_labels):
execution_path_trans.py(46):                 if predicted == 1 and true == 1:
execution_path_trans.py(47):                     self.true_positives += 1
execution_path_trans.py(45):             for (predicted, true) in zip(predicted_labels, true_labels):
execution_path_trans.py(46):                 if predicted == 1 and true == 1:
execution_path_trans.py(48):                 elif predicted == 1 and true == 0:
execution_path_trans.py(50):                 elif predicted == 0 and true == 1:
execution_path_trans.py(52):                 elif predicted == 0 and true == 0:
execution_path_trans.py(53):                     self.true_negatives += 1
execution_path_trans.py(45):             for (predicted, true) in zip(predicted_labels, true_labels):
execution_path_trans.py(46):                 if predicted == 1 and true == 1:
execution_path_trans.py(48):                 elif predicted == 1 and true == 0:
execution_path_trans.py(50):                 elif predicted == 0 and true == 1:
execution_path_trans.py(51):                     self.false_negatives += 1
execution_path_trans.py(45):             for (predicted, true) in zip(predicted_labels, true_labels):
execution_path_trans.py(54):             loop_12_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_12_8
execution_path_trans.py(43):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(44):                 return
execution_path_trans.py(98):         return 
