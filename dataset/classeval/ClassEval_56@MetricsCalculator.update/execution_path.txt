 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(52):             mc = MetricsCalculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.true_positives = 0
execution_path.py(9):         self.false_positives = 0
execution_path.py(10):         self.false_negatives = 0
execution_path.py(11):         self.true_negatives = 0
execution_path.py(53):             mc.update([1, 1, 0, 0], [1, 1, 0, 1])
 --- modulename: execution_path, funcname: update
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(16):                 self.true_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(16):                 self.true_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(21):             elif predicted == 0 and true == 0:
execution_path.py(22):                 self.true_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(20):                 self.false_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(54):             return 
