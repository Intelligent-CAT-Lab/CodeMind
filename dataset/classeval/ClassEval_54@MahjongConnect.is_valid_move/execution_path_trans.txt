 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(105):         mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(19):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(28):         self.BOARD_SIZE = BOARD_SIZE
execution_path_trans.py(29):         self.ICONS = ICONS
execution_path_trans.py(30):         self.board = self.create_board()
 --- modulename: execution_path_trans, funcname: create_board
execution_path_trans.py(33):         Fernet.generate_key()
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
 --- modulename: execution_path_trans, funcname: <listcomp>
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(35):             self.BOARD_SIZE[1])] for _ in range(self.BOARD_SIZE[0])]][0]
execution_path_trans.py(34):         board = [[[random.choice(self.ICONS) for _ in range(
execution_path_trans.py(36):         datetime.datetime.now()
execution_path_trans.py(37):         return board
execution_path_trans.py(20):         return res
execution_path_trans.py(106):         mc.board = [['a', 'b', 'c', 'a'],
execution_path_trans.py(107):                     ['a', 'b', 'c', 'a'],
execution_path_trans.py(108):                     ['a', 'b', 'c', 'a'],
execution_path_trans.py(109):                     ['a', 'b', 'c', 'a']]
execution_path_trans.py(106):         mc.board = [['a', 'b', 'c', 'a'],
execution_path_trans.py(110):         res = mc.is_valid_move((0, 0), (1, 0))
 --- modulename: execution_path_trans, funcname: is_valid_move
execution_path_trans.py(40):         ConditionChecker117 = 776
execution_path_trans.py(41):         ConditionChecker217 = 881
execution_path_trans.py(42):         (x1, y1) = pos1
execution_path_trans.py(43):         (x2, y2) = pos2
execution_path_trans.py(44):         HTTPConnection('google.com', port=80)
execution_path_trans.py(45):         if ConditionChecker117 & ConditionChecker217:
execution_path_trans.py(46):             if not (0 <= x1 < self.BOARD_SIZE[0] and 0 <= y1 < self.BOARD_SIZE[1] and (0 <= x2 < self.BOARD_SIZE[0]) and (0 <= y2 < self.BOARD_SIZE[1])):
execution_path_trans.py(48):         if pos1 == pos2:
execution_path_trans.py(50):         if self.board[x1][y1] != self.board[x2][y2]:
execution_path_trans.py(52):         if not self.has_path(pos1, pos2):
 --- modulename: execution_path_trans, funcname: has_path
execution_path_trans.py(57):         visited = set()
execution_path_trans.py(58):         stack = [pos1]
execution_path_trans.py(59):         whileloopchecker130 = 282
execution_path_trans.py(60):         whileloopchecker230 = 281
execution_path_trans.py(61):         while whileloopchecker130 % whileloopchecker230 == 1:
execution_path_trans.py(62):             whileloopchecker130 = whileloopchecker130 + 1
execution_path_trans.py(63):             while stack:
execution_path_trans.py(64):                 newcurrent_pos_1 = stack.pop()
execution_path_trans.py(65):                 if newcurrent_pos_1 == pos2:
execution_path_trans.py(67):                 if newcurrent_pos_1 in visited:
execution_path_trans.py(69):                 visited.add(newcurrent_pos_1)
execution_path_trans.py(70):                 (x, y) = newcurrent_pos_1
execution_path_trans.py(71):                 for (dx, dy) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path_trans.py(72):                     (new_x, new_y) = (x + dx, y + dy)
execution_path_trans.py(73):                     if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path_trans.py(74):                         if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path_trans.py(71):                 for (dx, dy) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path_trans.py(72):                     (new_x, new_y) = (x + dx, y + dy)
execution_path_trans.py(73):                     if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path_trans.py(71):                 for (dx, dy) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path_trans.py(72):                     (new_x, new_y) = (x + dx, y + dy)
execution_path_trans.py(73):                     if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path_trans.py(74):                         if (new_x, new_y) not in visited and self.board[new_x][new_y] == self.board[x][y]:
execution_path_trans.py(75):                             stack.append((new_x, new_y))
execution_path_trans.py(71):                 for (dx, dy) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path_trans.py(72):                     (new_x, new_y) = (x + dx, y + dy)
execution_path_trans.py(73):                     if 0 <= new_x < self.BOARD_SIZE[0] and 0 <= new_y < self.BOARD_SIZE[1]:
execution_path_trans.py(71):                 for (dx, dy) in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
execution_path_trans.py(63):             while stack:
execution_path_trans.py(64):                 newcurrent_pos_1 = stack.pop()
execution_path_trans.py(65):                 if newcurrent_pos_1 == pos2:
execution_path_trans.py(66):                     return True
execution_path_trans.py(54):         return True
execution_path_trans.py(111):         return res
