 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(52):             unescaper = NumericEntityUnescaper()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         pass
execution_path.py(53):             res = unescaper.replace("&#67;&#67;&#67;;")
 --- modulename: execution_path, funcname: replace
execution_path.py(11):         out = []
execution_path.py(12):         pos = 0
execution_path.py(13):         length = len(string)
execution_path.py(15):         while pos < length - 2:
execution_path.py(16):             if string[pos] == '&' and string[pos + 1] == '#':
execution_path.py(17):                 start = pos + 2
execution_path.py(18):                 is_hex = False
execution_path.py(19):                 first_char = string[start]
execution_path.py(21):                 if first_char == 'x' or first_char == 'X':
execution_path.py(25):                 if start == length:
execution_path.py(28):                 end = start
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(32):                 if end < length and string[end] == ';':
execution_path.py(33):                     try:
execution_path.py(34):                         entity_value = int(string[start:end], 16 if is_hex else 10)
execution_path.py(38):                     out.append(chr(entity_value))
execution_path.py(39):                     pos = end + 1
execution_path.py(40):                     continue
execution_path.py(15):         while pos < length - 2:
execution_path.py(16):             if string[pos] == '&' and string[pos + 1] == '#':
execution_path.py(17):                 start = pos + 2
execution_path.py(18):                 is_hex = False
execution_path.py(19):                 first_char = string[start]
execution_path.py(21):                 if first_char == 'x' or first_char == 'X':
execution_path.py(25):                 if start == length:
execution_path.py(28):                 end = start
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(32):                 if end < length and string[end] == ';':
execution_path.py(33):                     try:
execution_path.py(34):                         entity_value = int(string[start:end], 16 if is_hex else 10)
execution_path.py(38):                     out.append(chr(entity_value))
execution_path.py(39):                     pos = end + 1
execution_path.py(40):                     continue
execution_path.py(15):         while pos < length - 2:
execution_path.py(16):             if string[pos] == '&' and string[pos + 1] == '#':
execution_path.py(17):                 start = pos + 2
execution_path.py(18):                 is_hex = False
execution_path.py(19):                 first_char = string[start]
execution_path.py(21):                 if first_char == 'x' or first_char == 'X':
execution_path.py(25):                 if start == length:
execution_path.py(28):                 end = start
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(30):                     end += 1
execution_path.py(29):                 while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path, funcname: is_hex_char
execution_path.py(49):         return char.isdigit() or ('a' <= char.lower() <= 'f')
execution_path.py(32):                 if end < length and string[end] == ';':
execution_path.py(33):                     try:
execution_path.py(34):                         entity_value = int(string[start:end], 16 if is_hex else 10)
execution_path.py(38):                     out.append(chr(entity_value))
execution_path.py(39):                     pos = end + 1
execution_path.py(40):                     continue
execution_path.py(15):         while pos < length - 2:
execution_path.py(45):         return ''.join(out)
execution_path.py(54):             return res
