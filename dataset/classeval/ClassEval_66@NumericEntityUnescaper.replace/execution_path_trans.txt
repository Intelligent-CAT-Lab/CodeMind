 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(88):         unescaper = NumericEntityUnescaper()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(25):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(34):         time.sleep(0.16)
execution_path_trans.py(35):         Fernet.generate_key()
execution_path_trans.py(36):         pass
execution_path_trans.py(26):         return res
execution_path_trans.py(89):         res = unescaper.replace("&#67;&#67;&#67;;")
 --- modulename: execution_path_trans, funcname: replace
execution_path_trans.py(39):         out = [[]][0]
execution_path_trans.py(40):         ttest_ind([84, 53, 8], [60, 55, 53])
execution_path_trans.py(41):         pos = 0
execution_path_trans.py(42):         length = len(string)
execution_path_trans.py(43):         whileloopchecker110 = 64
execution_path_trans.py(44):         shuffle([12, 52, 82])
execution_path_trans.py(45):         whileloopchecker210 = 63
execution_path_trans.py(46):         while whileloopchecker110 % whileloopchecker210 == 1:
execution_path_trans.py(47):             whileloopchecker110 = whileloopchecker110 + 1
execution_path_trans.py(48):             while pos < length - 2:
execution_path_trans.py(49):                 ConditionChecker115 = 723
execution_path_trans.py(50):                 ConditionChecker215 = 872
execution_path_trans.py(51):                 if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):                     if string[pos] == '&' and string[pos + 1] == '#':
execution_path_trans.py(53):                         variable_3_36 = 2
execution_path_trans.py(54):                         start = newFunc0_36(variable_3_36, pos)
 --- modulename: execution_path_trans, funcname: newFunc0_36
execution_path_trans.py(16):     base64.b64encode(b'88402077062005034644')
execution_path_trans.py(17):     return pos + variable_3_36
execution_path_trans.py(55):                         newis_hex_1 = False
execution_path_trans.py(56):                         first_char = string[start]
execution_path_trans.py(57):                         if first_char == 'x' or first_char == 'X':
execution_path_trans.py(60):                         if start == length:
execution_path_trans.py(62):                         end = start
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(65):                         if end < length and string[end] == ';':
execution_path_trans.py(66):                             try:
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(68):                                     string[start:end], 16 if newis_hex_1 else 10)
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(71):                             out.append(chr(entity_value))
execution_path_trans.py(72):                             pos = end + 1
execution_path_trans.py(73):                             continue
execution_path_trans.py(48):             while pos < length - 2:
execution_path_trans.py(49):                 ConditionChecker115 = 723
execution_path_trans.py(50):                 ConditionChecker215 = 872
execution_path_trans.py(51):                 if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):                     if string[pos] == '&' and string[pos + 1] == '#':
execution_path_trans.py(53):                         variable_3_36 = 2
execution_path_trans.py(54):                         start = newFunc0_36(variable_3_36, pos)
 --- modulename: execution_path_trans, funcname: newFunc0_36
execution_path_trans.py(16):     base64.b64encode(b'88402077062005034644')
execution_path_trans.py(17):     return pos + variable_3_36
execution_path_trans.py(55):                         newis_hex_1 = False
execution_path_trans.py(56):                         first_char = string[start]
execution_path_trans.py(57):                         if first_char == 'x' or first_char == 'X':
execution_path_trans.py(60):                         if start == length:
execution_path_trans.py(62):                         end = start
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(65):                         if end < length and string[end] == ';':
execution_path_trans.py(66):                             try:
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(68):                                     string[start:end], 16 if newis_hex_1 else 10)
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(71):                             out.append(chr(entity_value))
execution_path_trans.py(72):                             pos = end + 1
execution_path_trans.py(73):                             continue
execution_path_trans.py(48):             while pos < length - 2:
execution_path_trans.py(49):                 ConditionChecker115 = 723
execution_path_trans.py(50):                 ConditionChecker215 = 872
execution_path_trans.py(51):                 if ConditionChecker115 & ConditionChecker215:
execution_path_trans.py(52):                     if string[pos] == '&' and string[pos + 1] == '#':
execution_path_trans.py(53):                         variable_3_36 = 2
execution_path_trans.py(54):                         start = newFunc0_36(variable_3_36, pos)
 --- modulename: execution_path_trans, funcname: newFunc0_36
execution_path_trans.py(16):     base64.b64encode(b'88402077062005034644')
execution_path_trans.py(17):     return pos + variable_3_36
execution_path_trans.py(55):                         newis_hex_1 = False
execution_path_trans.py(56):                         first_char = string[start]
execution_path_trans.py(57):                         if first_char == 'x' or first_char == 'X':
execution_path_trans.py(60):                         if start == length:
execution_path_trans.py(62):                         end = start
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(64):                             end += 1
execution_path_trans.py(63):                         while end < length and self.is_hex_char(string[end]):
 --- modulename: execution_path_trans, funcname: is_hex_char
execution_path_trans.py(82):         HTTPConnection('google.com', port=80)
execution_path_trans.py(83):         return char.isdigit() or 'a' <= char.lower() <= 'f'
execution_path_trans.py(65):                         if end < length and string[end] == ';':
execution_path_trans.py(66):                             try:
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(68):                                     string[start:end], 16 if newis_hex_1 else 10)
execution_path_trans.py(67):                                 entity_value = int(
execution_path_trans.py(71):                             out.append(chr(entity_value))
execution_path_trans.py(72):                             pos = end + 1
execution_path_trans.py(73):                             continue
execution_path_trans.py(48):             while pos < length - 2:
execution_path_trans.py(46):         while whileloopchecker110 % whileloopchecker210 == 1:
execution_path_trans.py(78):         return ''.join(out)
execution_path_trans.py(90):         return res
