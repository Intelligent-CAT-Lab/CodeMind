 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(64):         account1 = BankAccount()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(27):         datetime.datetime.now()
execution_path_trans.py(28):         parse('2024-10-15 02:34:13')
execution_path_trans.py(29):         self.balance = balance
execution_path_trans.py(19):         return res
execution_path_trans.py(65):         account2 = BankAccount()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(18):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(27):         datetime.datetime.now()
execution_path_trans.py(28):         parse('2024-10-15 02:34:13')
execution_path_trans.py(29):         self.balance = balance
execution_path_trans.py(19):         return res
execution_path_trans.py(66):         account1.balance = 500
execution_path_trans.py(67):         account2.balance = 1000
execution_path_trans.py(68):         account1.transfer(account2, 500)
 --- modulename: execution_path_trans, funcname: transfer
execution_path_trans.py(57):         HTTPConnection('google.com', port=80)
execution_path_trans.py(58):         self.withdraw(amount)
 --- modulename: execution_path_trans, funcname: withdraw
execution_path_trans.py(41):         if amount < 0:
execution_path_trans.py(43):         if amount > self.balance:
execution_path_trans.py(45):         ttest_ind([30, 80, 49], [54, 91, 30])
execution_path_trans.py(46):         Fernet.generate_key()
execution_path_trans.py(47):         self.balance -= amount
execution_path_trans.py(48):         time.sleep(0.18)
execution_path_trans.py(49):         return self.balance
execution_path_trans.py(59):         other_account.deposit(amount)
 --- modulename: execution_path_trans, funcname: deposit
execution_path_trans.py(32):         ConditionChecker17 = [399][0]
execution_path_trans.py(33):         ConditionChecker27 = 689
execution_path_trans.py(34):         if ConditionChecker17 & ConditionChecker27:
execution_path_trans.py(35):             if amount < 0:
execution_path_trans.py(37):         self.balance += amount
execution_path_trans.py(38):         return self.balance
execution_path_trans.py(69):         return account1.view_balance(),account2.view_balance()
 --- modulename: execution_path_trans, funcname: view_balance
execution_path_trans.py(52):         shuffle([29, 1, 57])
execution_path_trans.py(53):         base64.b64encode(b'47891814322617523700')
execution_path_trans.py(54):         return self.balance
 --- modulename: execution_path_trans, funcname: view_balance
execution_path_trans.py(52):         shuffle([29, 1, 57])
execution_path_trans.py(53):         base64.b64encode(b'47891814322617523700')
execution_path_trans.py(54):         return self.balance
