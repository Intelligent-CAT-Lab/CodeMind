 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(54):             game = TwentyFourPointGame()
 --- modulename: execution_path, funcname: __init__
execution_path.py(11):         self.nums = []
execution_path.py(55):             result = game.answer('1+1+1+1')
 --- modulename: execution_path, funcname: answer
execution_path.py(24):         if expression == 'pass':
execution_path.py(26):         statistic = {}
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(28):             if c.isdigit() and int(c) in self.nums:
execution_path.py(27):         for c in expression:
execution_path.py(31):         nums_used = statistic.copy()
execution_path.py(33):         for num in self.nums:
execution_path.py(39):         if all(count == 0 for count in nums_used.values()) == True:
 --- modulename: execution_path, funcname: <genexpr>
execution_path.py(39):         if all(count == 0 for count in nums_used.values()) == True:
execution_path.py(40):             return self.evaluate_expression(expression)
 --- modulename: execution_path, funcname: evaluate_expression
execution_path.py(45):         try:
execution_path.py(46):             if eval(expression) == 24:
 --- modulename: execution_path, funcname: <module>
<string>(1): execution_path.py(49):                 return False
execution_path.py(56):             return result
