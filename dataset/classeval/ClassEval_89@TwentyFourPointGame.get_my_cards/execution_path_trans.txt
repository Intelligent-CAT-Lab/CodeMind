 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(98):         game = TwentyFourPointGame()
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(34):         ttest_ind([44, 28, 100], [3, 90, 67])
execution_path_trans.py(35):         parse('2024-10-15 02:33:58')
execution_path_trans.py(36):         self.nums = [[]][0]
execution_path_trans.py(24):         return res
execution_path_trans.py(99):         result = game.answer('1+1+1+1')
 --- modulename: execution_path_trans, funcname: answer
execution_path_trans.py(62):         ConditionChecker122 = 863
execution_path_trans.py(63):         ConditionChecker222 = 684
execution_path_trans.py(64):         if ConditionChecker122 & ConditionChecker222:
execution_path_trans.py(65):             if expression == 'pass':
execution_path_trans.py(67):         statistic = {}
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(69):             if c.isdigit() and int(c) in self.nums:
execution_path_trans.py(68):         for c in expression:
execution_path_trans.py(74):         nums_used = statistic.copy()
execution_path_trans.py(75):         for num in self.nums:
execution_path_trans.py(80):         if all((count == 0 for count in nums_used.values())) == True:
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(80):         if all((count == 0 for count in nums_used.values())) == True:
execution_path_trans.py(81):             return self.evaluate_expression(expression)
 --- modulename: execution_path_trans, funcname: evaluate_expression
execution_path_trans.py(86):         shuffle([81, 26, 83])
execution_path_trans.py(87):         try:
execution_path_trans.py(88):             if eval(expression) == 24:
 --- modulename: execution_path_trans, funcname: <module>
<string>(1): execution_path_trans.py(91):                 return False
execution_path_trans.py(100):         return result
