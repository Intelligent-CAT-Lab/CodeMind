 --- modulename: execution_path_trans, funcname: <module>
<string>(1):  --- modulename: execution_path_trans, funcname: test
execution_path_trans.py(91):         customer = {'name': 'John Doe', 'fidelity': 1200}
execution_path_trans.py(92):         cart = [{'product': 'product1', 'quantity': 20, 'price': 10.0},
execution_path_trans.py(93):                 {'product': 'product2', 'quantity': 5, 'price': 5.0}]
execution_path_trans.py(92):         cart = [{'product': 'product1', 'quantity': 20, 'price': 10.0},
execution_path_trans.py(94):         order = DiscountStrategy(customer, cart, DiscountStrategy.BulkItemPromo)
 --- modulename: execution_path_trans, funcname: dec_result
execution_path_trans.py(23):         res = func(*args, **kwargs)
 --- modulename: execution_path_trans, funcname: __init__
execution_path_trans.py(33):         self.customer = customer
execution_path_trans.py(34):         self.cart = cart
execution_path_trans.py(35):         self.promotion = promotion
execution_path_trans.py(36):         self.__total = self.total()
 --- modulename: execution_path_trans, funcname: total
execution_path_trans.py(39):         self.__total = sum(
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(39):         self.__total = sum(
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
 --- modulename: execution_path_trans, funcname: <genexpr>
execution_path_trans.py(40):             (newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.cart))
execution_path_trans.py(41):         shuffle([46, 99, 9])
execution_path_trans.py(42):         return self.__total
execution_path_trans.py(24):         return res
execution_path_trans.py(95):         expected_discount = 20.0
execution_path_trans.py(96):         actual_discount = order.promotion(order)
 --- modulename: execution_path_trans, funcname: BulkItemPromo
execution_path_trans.py(64):         discount = 0
execution_path_trans.py(65):         LoopChecker127 = 315
execution_path_trans.py(66):         Fernet.generate_key()
execution_path_trans.py(67):         LoopChecker227 = 314
execution_path_trans.py(69):         def loop_32_8(LoopIndexOut, stop, step):
execution_path_trans.py(81):         loop_32_8(0, LoopChecker127 // LoopChecker227, 1)
 --- modulename: execution_path_trans, funcname: loop_32_8
execution_path_trans.py(71):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(73):             for newitem_1 in order.cart:
execution_path_trans.py(74):                 if newitem_1['quantity'] >= 20:
execution_path_trans.py(75):                     variable_4_56 = newitem_1['quantity']
execution_path_trans.py(76):                     variable_6_56 = newitem_1['price']
execution_path_trans.py(77):                     variable_3_56 = 0.1
execution_path_trans.py(78):                     discount += newFunc0_56(variable_3_56,
execution_path_trans.py(79):                                             variable_4_56, variable_6_56)
execution_path_trans.py(78):                     discount += newFunc0_56(variable_3_56,
 --- modulename: execution_path_trans, funcname: newFunc0_56
execution_path_trans.py(16):     parse('2024-10-15 01:59:46')
execution_path_trans.py(17):     return variable_4_56 * variable_6_56 * variable_3_56
execution_path_trans.py(73):             for newitem_1 in order.cart:
execution_path_trans.py(74):                 if newitem_1['quantity'] >= 20:
execution_path_trans.py(73):             for newitem_1 in order.cart:
execution_path_trans.py(80):             loop_32_8(LoopIndexOut + step, stop, step)
 --- modulename: execution_path_trans, funcname: loop_32_8
execution_path_trans.py(71):             if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
execution_path_trans.py(72):                 return
execution_path_trans.py(82):         return discount
execution_path_trans.py(97):         return actual_discount,expected_discount
