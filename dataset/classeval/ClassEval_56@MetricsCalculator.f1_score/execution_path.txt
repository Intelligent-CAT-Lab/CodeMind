 --- modulename: execution_path, funcname: <module>
<string>(1):  --- modulename: execution_path, funcname: test
execution_path.py(52):             mc = MetricsCalculator()
 --- modulename: execution_path, funcname: __init__
execution_path.py(8):         self.true_positives = 0
execution_path.py(9):         self.false_positives = 0
execution_path.py(10):         self.false_negatives = 0
execution_path.py(11):         self.true_negatives = 0
execution_path.py(53):             temp = mc.f1_score([1, 1, 0, 0], [1, 0, 0, 1])
 --- modulename: execution_path, funcname: f1_score
execution_path.py(37):         self.update(predicted_labels, true_labels)
 --- modulename: execution_path, funcname: update
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(16):                 self.true_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(18):                 self.false_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(21):             elif predicted == 0 and true == 0:
execution_path.py(22):                 self.true_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(20):                 self.false_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(38):         precision = self.precision(predicted_labels, true_labels)
 --- modulename: execution_path, funcname: precision
execution_path.py(25):         self.update(predicted_labels, true_labels)
 --- modulename: execution_path, funcname: update
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(16):                 self.true_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(18):                 self.false_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(21):             elif predicted == 0 and true == 0:
execution_path.py(22):                 self.true_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(20):                 self.false_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(26):         if self.true_positives + self.false_positives == 0:
execution_path.py(28):         return self.true_positives / (self.true_positives + self.false_positives)
execution_path.py(39):         recall = self.recall(predicted_labels, true_labels)
 --- modulename: execution_path, funcname: recall
execution_path.py(31):         self.update(predicted_labels, true_labels)
 --- modulename: execution_path, funcname: update
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(16):                 self.true_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(18):                 self.false_positives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(21):             elif predicted == 0 and true == 0:
execution_path.py(22):                 self.true_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(15):             if predicted == 1 and true == 1:
execution_path.py(17):             elif predicted == 1 and true == 0:
execution_path.py(19):             elif predicted == 0 and true == 1:
execution_path.py(20):                 self.false_negatives += 1
execution_path.py(14):         for predicted, true in zip(predicted_labels, true_labels):
execution_path.py(32):         if self.true_positives + self.false_negatives == 0:
execution_path.py(34):         return self.true_positives / (self.true_positives + self.false_negatives)
execution_path.py(40):         if precision + recall == 0.0:
execution_path.py(42):         return (2 * precision * recall) / (precision + recall)
execution_path.py(54):             return temp
