{"problem_name": "131", "generated_code": "```python\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n    \n    while left < right:\n        if str_list[left] in vowels and str_list[right] in vowels:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n        elif str_list[left] in vowels:\n            right -= 1\n        elif str_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return ''.join(str_list)\n\n# Example usage:\nprint(reverse_vowels(\"hello\"))  # Should print \"holle\"\nprint(reverse_vowels(\"leetcode\"))  # Should print \"leotcede\"\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "input_data": "reverse_vowels(\"Python\")", "expected_output": "\"Python\"", "assertion": "assert reverse_vowels(\"Python\") == \"Python\"", "assertion_": null}
{"problem_name": "554", "generated_code": "```python\ndef Split(lst):\n    # Using list comprehension to filter out odd numbers\n    return [num for num in lst if num % 2 != 0]\n\n# Example usage:\n# odd_numbers = Split([1, 2, 3, 4, 5])\n# print(odd_numbers)  # Output: [1, 3, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of integers and only returns the odd ones.", "input_data": "Split([1,2,3,4,5,6])", "expected_output": "[1,3,5]", "assertion": "assert Split([1,2,3,4,5,6]) == [1,3,5]", "assertion_": null}
{"problem_name": "415", "generated_code": "```python\ndef max_Product(arr):\n    # Sort the array\n    arr.sort()\n    \n    # Get the number of elements in the array\n    n = len(arr)\n    \n    # If there are no elements or only one element, we cannot find a pair\n    if n < 2:\n        return \"No pairs exists\"\n    \n    # If there are at least two elements, the maximum product is either from the two largest elements\n    # or from the two smallest elements (in case of two large negative numbers)\n    return max(arr[0] * arr[1], arr[n - 1] * arr[n - 2])\n\n# Example usage:\n# arr = [1, 4, 3, 6, 7, 0]\n# print(max_Product(arr))  # Output should be 42 (6*7)\n```\n\nThis function first sorts the array, then calculates the product of the two largest elements and the product of the two smallest elements, and returns the maximum of these two products. This is because the largest product can come from either the two largest positive numbers or the two smallest (largest in magnitude) negative numbers.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find a pair with highest product from a given array of integers.", "input_data": "max_Product([1,2,3,4,7,0,8,4])", "expected_output": "(7,8)", "assertion": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assertion_": null}
{"problem_name": "279", "generated_code": "```python\ndef is_num_decagonal(n):\n    # The formula for the nth decagonal number is: Dn = 4n^2 - 3n\n    # where n is the position in the sequence and Dn is the nth decagonal number.\n    if n < 1:\n        return False  # There is no 0th or negative decagonal number\n    decagonal_number = 4 * n * n - 3 * n\n    return decagonal_number\n\n# Example usage:\n# Get the 5th decagonal number\nprint(is_num_decagonal(5))  # Output should be 85\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth decagonal number.", "input_data": "is_num_decagonal(3)", "expected_output": "27", "assertion": "assert is_num_decagonal(3) == 27", "assertion_": null}
{"problem_name": "592", "generated_code": "```python\nfrom math import comb\n\ndef sum_of_product(n):\n    # Initialize sum\n    sum_product = 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(n):\n        sum_product += comb(n, i) * comb(n, i + 1)\n    \n    return sum_product\n\n# Example usage:\n# n = 5\n# The sum of the product of consecutive binomial coefficients would be:\n# C(5,0)*C(5,1) + C(5,1)*C(5,2) + C(5,2)*C(5,3) + C(5,3)*C(5,4) + C(5,4)*C(5,5)\n# = 1*5 + 5*10 + 10*10 + 10*5 + 5*1\n# = 5 + 50 + 100 + 50 + 5\n# = 210\n# print(sum_of_product(n)) # Output: 210\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the product of consecutive binomial co-efficients.", "input_data": "sum_Of_product(3)", "expected_output": "15", "assertion": "assert sum_Of_product(3) == 15", "assertion_": null}
{"problem_name": "247", "generated_code": "```python\ndef lps(str):\n    n = len(str)\n    \n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The table is filled in a\n    # manner that the table[i][j] contains length of LPS of substring\n    # str[i..j].\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # Length of LPS is the entry in top right corner of the table\n    return dp[0][n - 1]\n\n# Example usage:\nprint(lps(\"bbabcbcab\"))  # Output: 7 (babcbab or bacbcab)\nprint(lps(\"cbbd\"))       # Output: 2 (bb)\n```\nThis function `lps` uses dynamic programming to find the length of the longest palindromic subsequence in a given string. It creates a 2D array `dp` where `dp[i][j]` will hold the length of the LPS of the substring from index `i` to `j`. The function then fills the table in a bottom-up manner and finally returns the value in `dp[0][n-1]`, which represents the length of the LPS of the entire string.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the length of the longest palindromic subsequence in the given string.", "input_data": "lps(\"TENS FOR TENS\")", "expected_output": "5", "assertion": "assert lps(\"TENS FOR TENS\") == 5", "assertion_": null}
{"problem_name": "744", "generated_code": "```python\ndef check_none(test_tup):\n    # Using any() to check for None values in tuple\n    return any(elem is None for elem in test_tup)\n\n# Example usage:\n# Define a tuple\ntest_tup = (10, 4, 5, None, 6)\n# Check if there is any None value in the tuple\nprint(check_none(test_tup))  # Output: True\n\n# Define another tuple without None\ntest_tup = (10, 4, 5, 6)\n# Check if there is any None value in the tuple\nprint(check_none(test_tup))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given tuple has any none value or not.", "input_data": "check_none((10, 4, 5, 6, None))", "expected_output": "True", "assertion": "assert check_none((10, 4, 5, 6, None)) == True", "assertion_": null}
{"problem_name": "257", "generated_code": "```python\ndef swap_numbers(a, b):\n    return (b, a)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "input_data": "swap_numbers(10,20)", "expected_output": "(20,10)", "assertion": "assert swap_numbers(10,20)==(20,10)", "assertion_": null}
{"problem_name": "786", "generated_code": "```python\ndef right_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x, and returns the index\n    where x should be inserted in list a to maintain sorted order. If x is\n    already present in a, the function returns the index after the last\n    occurrence of x (right insertion point).\n    \"\"\"\n    left, right = 0, len(a)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] <= x:  # Move right if x is greater than or equal to a[mid]\n            left = mid + 1\n        else:  # Move left if x is less than a[mid]\n            right = mid\n    \n    return left\n\n# Example usage:\n# sorted_list = [1, 2, 4, 5]\n# value_to_insert = 3\n# print(right_insertion(sorted_list, value_to_insert))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to locate the right insertion point for a specified value in sorted order.", "input_data": "right_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert right_insertion([1,2,4,5],6)==4", "assertion_": null}
{"problem_name": "478", "generated_code": "```python\ndef remove_lowercase(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Split the string into substrings using space as a delimiter\n    substrings = str1.split()\n    \n    # Iterate through each substring\n    for substring in substrings:\n        # Check if the substring is not all lowercase\n        if not substring.islower():\n            # If it's not all lowercase, add it to the result string with a space\n            result += substring + \" \"\n    \n    # Return the result string after stripping any trailing spaces\n    return result.strip()\n\n# Example usage:\nprint(remove_lowercase(\"Hello World this IS a Test\"))  # Output: \"Hello World IS Test\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove lowercase substrings from a given string.", "input_data": "remove_lowercase(\"PYTHon\")", "expected_output": "('PYTH')", "assertion": "assert remove_lowercase(\"PYTHon\")==('PYTH')", "assertion_": null}
{"problem_name": "405", "generated_code": "```python\ndef check_tuplex(tuplex, tuple1):\n    # Check if tuple1 is a subset of tuplex\n    return set(tuple1).issubset(tuplex)\n\n# Example usage:\ntuplex = (4, 3, 5, 6, 2)\ntuple1 = (5, 3)\ntuple2 = (5, 7)\n\nprint(check_tuplex(tuplex, tuple1))  # Output: True\nprint(check_tuplex(tuplex, tuple2))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether an element exists within a tuple.", "input_data": "check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')", "expected_output": "True", "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assertion_": null}
{"problem_name": "88", "generated_code": "```python\ndef freq_count(list1):\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "input_data": "freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])", "expected_output": "({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assertion": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assertion_": null}
{"problem_name": "166", "generated_code": "```python\ndef find_even_pair(A):\n    # Initialize the count of even pairs\n    even_pairs_count = 0\n    \n    # Iterate through the list to find pairs\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # Calculate the xor of the current pair\n            xor_result = A[i] ^ A[j]\n            # Check if the xor result is even\n            if xor_result % 2 == 0:\n                # Increment the count if even\n                even_pairs_count += 1\n                \n    # Return the count of even pairs\n    return even_pairs_count\n\n# Example usage:\n# A = [1, 2, 3, 4]\n# The pairs that xor to an even number are: (1, 3), (2, 4)\n# So the function should return 2\nprint(find_even_pair([1, 2, 3, 4]))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "input_data": "find_even_pair([5, 4, 7, 2, 1])", "expected_output": "4", "assertion": "assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assertion_": null}
{"problem_name": "559", "generated_code": "```python\ndef max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n# Example usage:\n# a = [-2, -3, 4, -1, -2, 1, 5, -3]\n# print(max_sub_array_sum(a, len(a)))  # Output: 7\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the sum of the largest contiguous sublist in the given list.", "input_data": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)", "expected_output": "7", "assertion": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "assertion_": null}
{"problem_name": "299", "generated_code": "```python\ndef max_aggregate(stdata):\n    # Check if the input is a list of tuples\n    if not all(isinstance(item, tuple) for item in stdata):\n        raise ValueError(\"Input must be a list of tuples\")\n\n    # Calculate the aggregate of each tuple by summing its elements\n    aggregates = [sum(data) for data in stdata]\n\n    # Return the maximum aggregate\n    return max(aggregates)\n\n# Example usage:\n# stdata = [(1, 2, 3), (4, 5, 6), (10, 11, 12)]\n# print(max_aggregate(stdata))  # Output: 33\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the maximum aggregate from the list of tuples.", "input_data": "max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])", "expected_output": "('Juan Whelan', 212)", "assertion": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assertion_": null}
{"problem_name": "472", "generated_code": "```python\ndef check_Consecutive(l):\n    # Sort the list\n    sorted_list = sorted(l)\n    # Check if all adjacent elements differ by 1\n    return all(x == y - 1 for x, y in zip(sorted_list, sorted_list[1:]))\n\n# Example usage:\n# list1 = [2, 3, 1, 4, 5]\n# print(check_Consecutive(list1))  # Output: True\n\n# list2 = [1, 2, 4, 5]\n# print(check_Consecutive(list2))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given list contains consecutive numbers or not.", "input_data": "check_Consecutive([1,2,3,4,5])", "expected_output": "True", "assertion": "assert check_Consecutive([1,2,3,4,5]) == True", "assertion_": null}
{"problem_name": "255", "generated_code": "```python\nfrom itertools import product\n\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))\n\n# Example usage:\n# colors = ['red', 'green', 'blue']\n# print(combinations_colors(colors, 2))\n```\n\nThis function uses the `product` function from the `itertools` module to generate all possible combinations with repetition of the elements in the list `l`, taken `n` at a time. The result is converted to a list where each element is a tuple representing a combination.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "input_data": "combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)", "expected_output": "[('Red',), ('Green',), ('Blue',)]", "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assertion_": null}
{"problem_name": "8", "generated_code": "```python\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find squares of individual elements in a list.", "input_data": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion_": null}
{"problem_name": "87", "generated_code": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge three dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Example usage:\n# dict1 = {'a': 1, 'b': 2}\n# dict2 = {'c': 3, 'd': 4}\n# dict3 = {'e': 5, 'f': 6}\n# merged = merge_dictionaries_three(dict1, dict2, dict3)\n# print(merged)  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to merge three dictionaries into a single dictionary.", "input_data": "merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })", "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assertion_": null}
{"problem_name": "85", "generated_code": "```python\nimport math\n\ndef surfacearea_sphere(r):\n    # Surface area of a sphere is given by 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a sphere.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "404", "generated_code": "```python\ndef minimum(a, b):\n    return a if a < b else b\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum of two numbers.", "input_data": "minimum(1,2)", "expected_output": "1", "assertion": "assert minimum(1,2) == 1", "assertion_": null}
{"problem_name": "788", "generated_code": "```python\ndef new_tuple(test_list, test_str):\n    # Convert the string to a tuple of characters\n    str_tuple = tuple(test_str)\n    \n    # Combine the list and the string tuple into a new tuple\n    result_tuple = tuple(test_list) + str_tuple\n    \n    return result_tuple\n\n# Example usage:\n# test_list = [5, 6, 7]\n# test_str = \"abc\"\n# print(new_tuple(test_list, test_str))  # Output: (5, 6, 7, 'a', 'b', 'c')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to create a new tuple from the given string and list.", "input_data": "new_tuple([\"WEB\", \"is\"], \"best\")", "expected_output": "('WEB', 'is', 'best')", "assertion": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assertion_": null}
{"problem_name": "428", "generated_code": "```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap.\n\n    # Perform the shell sort.\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Sort the sub list for this gap.\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap for the next element.\n        gap //= 2\n\n    return my_list\n\n# Example usage:\n# my_list = [23, 12, 1, 8, 34, 54, 2, 3]\n# sorted_list = shell_sort(my_list)\n# print(sorted_list)\n```\nThis function `shell_sort` takes a list `my_list` and sorts it in ascending order using the shell sort algorithm. The function returns the sorted list. Uncomment the example usage to test the function with a sample list.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort the given array by using shell sort.", "input_data": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])", "expected_output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assertion": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assertion_": null}
{"problem_name": "638", "generated_code": "```python\nimport math\n\ndef wind_chill(v, t):\n    # Wind chill calculation is only valid for temperatures below 10°C and wind speeds above 4.8 km/h\n    if t > 10 or v < 4.8:\n        return None\n\n    # Convert wind speed from km/h to m/s\n    v_meters_per_second = v / 3.6\n\n    # Calculate the wind chill index using the JAG/TI method\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v_meters_per_second, 0.16) + 0.3965 * t * math.pow(v_meters_per_second, 0.16)\n\n    # Round the result to the next integer\n    return math.ceil(wci)\n\n# Example usage:\n# print(wind_chill(20, 5))  # Should print the wind chill index rounded to the next integer\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "input_data": "wind_chill(120,35)", "expected_output": "40", "assertion": "assert wind_chill(120,35)==40", "assertion_": null}
{"problem_name": "271", "generated_code": "```python\ndef even_Power_Sum(n):\n    # Initialize the sum\n    sum_even_powers = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n+1):\n        # Calculate the even number\n        even_number = 2 * i\n        # Raise it to the fifth power and add it to the sum\n        sum_even_powers += even_number ** 5\n    \n    # Return the sum\n    return sum_even_powers\n\n# Example usage:\n# Calculate the sum of the first 3 even natural numbers raised to the fifth power\nprint(even_Power_Sum(3))  # Output should be 2^5 + 4^5 + 6^5 = 32 + 1024 + 7776 = 8832\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "input_data": "even_Power_Sum(2)", "expected_output": "1056", "assertion": "assert even_Power_Sum(2) == 1056", "assertion_": null}
{"problem_name": "798", "generated_code": "```python\ndef _sum(arr):\n    return sum(arr)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of an array.", "input_data": "_sum([1, 2, 3])", "expected_output": "6", "assertion": "assert _sum([1, 2, 3]) == 6", "assertion_": null}
{"problem_name": "285", "generated_code": "```python\nimport re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(text_match_two_three(\"ab\"))       # Should return False\n# print(text_match_two_three(\"abb\"))      # Should return True\n# print(text_match_two_three(\"abbb\"))     # Should return True\n# print(text_match_two_three(\"abbbb\"))    # Should return False\n# print(text_match_two_three(\"aabbb\"))    # Should return True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "input_data": "text_match_two_three(\"ac\")", "expected_output": "(False)", "assertion": "assert text_match_two_three(\"ac\")==(False)", "assertion_": null}
{"problem_name": "68", "generated_code": "```python\ndef is_Monotonic(A):\n    # Check if the array is empty or has one element, which is trivially monotonic\n    if len(A) < 2:\n        return True\n    \n    # Determine if the array is non-increasing or non-decreasing\n    non_decreasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    non_increasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    # An array is monotonic if it is either non-decreasing or non-increasing\n    return non_decreasing or non_increasing\n\n# Example usage:\n# A = [1, 2, 2, 3]\n# print(is_Monotonic(A))  # Output: True\n\n# A = [1, 3, 2]\n# print(is_Monotonic(A))  # Output: False\n\n# A = [3, 3, 2, 2, 1]\n# print(is_Monotonic(A))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given array is monotonic or not.", "input_data": "is_Monotonic([6, 5, 4, 4])", "expected_output": "True", "assertion": "assert is_Monotonic([6, 5, 4, 4]) == True", "assertion_": null}
{"problem_name": "475", "generated_code": "```python\ndef sort_counter(dict1):\n    # Sort the dictionary by value and return a list of tuples\n    sorted_tuples = sorted(dict1.items(), key=lambda item: item[1])\n    return sorted_tuples\n\n# Example usage:\n# my_dict = {'apple': 5, 'banana': 3, 'cherry': 8}\n# sorted_dict = sort_counter(my_dict)\n# print(sorted_dict)  # Output: [('banana', 3), ('apple', 5), ('cherry', 8)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a dictionary by value.", "input_data": "sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})", "expected_output": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assertion": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assertion_": null}
{"problem_name": "400", "generated_code": "```python\ndef extract_freq(test_list):\n    # Using set to store unique tuples\n    unique_tuples = set(test_list)\n    # Returning the number of unique tuples\n    return len(unique_tuples)\n\n# Example usage:\n# test_list = [(4, 5), (4, 5), (6, 7), (4, 5), (6, 7)]\n# print(extract_freq(test_list))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the number of unique tuples in the given list.", "input_data": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )", "expected_output": "3", "assertion": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assertion_": null}
{"problem_name": "420", "generated_code": "```python\ndef cube_Sum(n):\n    # Initialize sum\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the even number and add it to the sum\n        sum += (2 * i) ** 3\n    # Return the sum\n    return sum\n\n# Example usage:\n# Calculate the cube sum of the first 3 even natural numbers\nprint(cube_Sum(3))  # Output should be 8^3 + 16^3 + 24^3 = 6912\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the cube sum of first n even natural numbers.", "input_data": "cube_Sum(2)", "expected_output": "72", "assertion": "assert cube_Sum(2) == 72", "assertion_": null}
{"problem_name": "138", "generated_code": "```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    # A number can be represented as a sum of non-zero powers of 2 if and only if it is a positive integer.\n    # We can use the property that in binary representation, powers of 2 have only one '1'.\n    # If n is a sum of distinct non-zero powers of 2, then in binary, it will have no consecutive '1's.\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Check if n has consecutive '1's in its binary representation\n    # If it does, it cannot be a sum of distinct non-zero powers of 2\n    # We do this by checking if n & (n >> 1) is non-zero\n    # This operation shifts n to the right by 1 bit and performs a bitwise AND with n\n    # If there are consecutive '1's, this will result in a non-zero value\n    if (n & (n >> 1)) != 0:\n        return False\n    \n    # If we reach this point, n has no consecutive '1's in its binary representation\n    # and is therefore a sum of distinct non-zero powers of 2\n    return True\n\n# Example usage:\nprint(is_Sum_Of_Powers_Of_Two(10))  # True, because 10 = 2^3 + 2^1\nprint(is_Sum_Of_Powers_Of_Two(15))  # False, because 15 = 2^3 + 2^2 + 2^1 + 2^0 has consecutive '1's in binary\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "input_data": "is_Sum_Of_Powers_Of_Two(10)", "expected_output": "True", "assertion": "assert is_Sum_Of_Powers_Of_Two(10) == True", "assertion_": null}
{"problem_name": "116", "generated_code": "```python\ndef tuple_to_int(nums):\n    # Convert each number in the tuple to a string and concatenate them\n    return int(''.join(map(str, nums)))\n\n# Example usage:\n# Convert the tuple (1, 2, 3) to the integer 123\nprint(tuple_to_int((1, 2, 3)))  # Output: 123\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a given tuple of positive integers into a single integer.", "input_data": "tuple_to_int((1,2,3))", "expected_output": "123", "assertion": "assert tuple_to_int((1,2,3))==123", "assertion_": null}
{"problem_name": "93", "generated_code": "```python\ndef power(a, b):\n    return a ** b\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the value of 'a' to the power 'b'.", "input_data": "power(3,4)", "expected_output": "81", "assertion": "assert power(3,4) == 81", "assertion_": null}
{"problem_name": "572", "generated_code": "```python\ndef two_unique_nums(nums):\n    # Create a dictionary to store the frequency of each number\n    frequency = {}\n    for num in nums:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Filter out the numbers that appear more than once\n    unique_nums = [num for num, count in frequency.items() if count == 1]\n    \n    return unique_nums\n\n# Example usage:\n# If you want to test the function with a list of numbers:\n# nums = [1, 2, 2, 3, 4, 4, 5]\n# print(two_unique_nums(nums))  # Output should be [1, 3, 5]\n```\n\nThe function `two_unique_nums` takes a list of numbers `nums` and returns a list of numbers that appear exactly once in the input list. It uses a dictionary to count the occurrences of each number and then creates a list of numbers that have a count of 1, which means they are unique in the list.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove duplicate numbers from a given number of lists.", "input_data": "two_unique_nums([1,2,3,2,3,4,5])", "expected_output": "[1, 4, 5]", "assertion": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assertion_": null}
{"problem_name": "775", "generated_code": "```python\ndef odd_position(nums):\n    # Iterate over the list, checking only odd indices\n    for i in range(1, len(nums), 2):\n        # If the number at the odd index is not odd, return False\n        if nums[i] % 2 == 0:\n            return False\n    # If all odd indices contain odd numbers, return True\n    return True\n\n# Example usage:\n# nums = [2, 3, 4, 7, 6, 9]\n# print(odd_position(nums))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether every odd index contains odd numbers of a given list.", "input_data": "odd_position([2,1,4,3,6,7,6,3])", "expected_output": "True", "assertion": "assert odd_position([2,1,4,3,6,7,6,3]) == True", "assertion_": null}
{"problem_name": "583", "generated_code": "```python\ndef catalan_number(num):\n    # Base case\n    if num <= 1:\n        return 1\n\n    # Recursive case\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    \n    return res\n\n# Example usage:\n# print(catalan_number(4))  # Should output 14\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function which returns nth catalan number.", "input_data": "catalan_number(10)", "expected_output": "16796", "assertion": "assert catalan_number(10)==16796", "assertion_": null}
{"problem_name": "641", "generated_code": "```python\ndef is_nonagonal(n):\n    # Using the formula for the nth nonagonal number: N = n(7n-5)/2\n    # We rearrange the formula to solve for n and check if it results in an integer\n    # 7n^2 - 5n - 2N = 0\n    # We use the quadratic formula to solve for n: n = (5 + sqrt(25 + 56N)) / 14\n    # If n is an integer, then N is a nonagonal number\n    \n    # Calculate the discriminant\n    discriminant = 25 + 56 * n\n    \n    # Check if the discriminant is a perfect square\n    sqrt_discriminant = discriminant**0.5\n    if sqrt_discriminant.is_integer():\n        # Calculate the potential value of n using the quadratic formula\n        potential_n = (5 + sqrt_discriminant) / 14\n        # Check if potential_n is an integer\n        if potential_n.is_integer():\n            return True\n    return False\n\n# Example usage:\n# To check if 145 is a nonagonal number\nprint(is_nonagonal(145))  # Output: True, since 145 is the 5th nonagonal number\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth nonagonal number.", "input_data": "is_nonagonal(10)", "expected_output": "325", "assertion": "assert is_nonagonal(10) == 325", "assertion_": null}
{"problem_name": "222", "generated_code": "```python\ndef check_type(test_tuple):\n    # Check if the tuple is empty\n    if not test_tuple:\n        return True  # An empty tuple can be considered as having the same data type\n    \n    # Get the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # Compare the type of the first element with the rest of the elements\n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False  # Found an element with a different type\n    \n    return True  # All elements have the same type\n\n# Example usage:\n# Should return True\nprint(check_type((1, 2, 3, 4)))\n\n# Should return False\nprint(check_type((1, \"2\", 3, 4)))\n\n# Should return True\nprint(check_type(()))\n\n# Should return True\nprint(check_type((\"a\", \"b\", \"c\")))\n\n# Should return False\nprint(check_type((1.0, 2, 3.5)))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if all the elements in tuple have same data type or not.", "input_data": "check_type((5, 6, 7, 3, 5, 6) )", "expected_output": "True", "assertion": "assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assertion_": null}
{"problem_name": "477", "generated_code": "```python\ndef is_lower(string):\n    return string.lower()\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert the given string to lower case.", "input_data": "is_lower(\"InValid\")", "expected_output": "\"invalid\"", "assertion": "assert is_lower(\"InValid\") == \"invalid\"", "assertion_": null}
{"problem_name": "388", "generated_code": "```python\ndef highest_Power_of_2(n):\n    # Initialize power to 1, as 2^0 = 1\n    power = 1\n    \n    # Keep doubling the power until it is less than or equal to n\n    while power * 2 <= n:\n        power *= 2\n    \n    return power\n\n# Example usage:\n# n = 20, the highest power of 2 less than or equal to 20 is 16 (2^4)\nprint(highest_Power_of_2(20))  # Output: 16\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the highest power of 2 that is less than or equal to n.", "input_data": "highest_Power_of_2(10)", "expected_output": "8", "assertion": "assert highest_Power_of_2(10) == 8", "assertion_": null}
{"problem_name": "618", "generated_code": "```python\ndef div_list(nums1, nums2):\n    \"\"\"\n    Divides two lists element-wise.\n    \n    Parameters:\n    nums1 (list): The list of numerators.\n    nums2 (list): The list of denominators.\n    \n    Returns:\n    list: A new list with the element-wise division of nums1 by nums2.\n          If the division cannot be performed due to a zero in nums2 or\n          the lists are of unequal length, an appropriate error message is returned.\n    \"\"\"\n    # Check if the lists are of the same length\n    if len(nums1) != len(nums2):\n        return \"Error: Lists are of unequal length.\"\n    \n    # Perform element-wise division\n    result = []\n    for i in range(len(nums1)):\n        # Check for division by zero\n        if nums2[i] == 0:\n            return \"Error: Division by zero encountered.\"\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to divide two lists element wise.", "input_data": "div_list([4,5,6],[1, 2, 3])", "expected_output": "[4.0,2.5,2.0]", "assertion": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assertion_": null}
{"problem_name": "162", "generated_code": "```python\ndef sum_series(n):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop from i=0 to n//2\n    for i in range(n // 2 + 1):\n        # Add (n - 2*i) to the sum\n        total_sum += (n - 2 * i)\n    \n    # Return the calculated sum\n    return total_sum\n\n# Example usage:\n# print(sum_series(5))  # Output should be 9 (5 + 3 + 1)\n# print(sum_series(6))  # Output should be 12 (6 + 4 + 2)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "input_data": "sum_series(6)", "expected_output": "12", "assertion": "assert sum_series(6) == 12", "assertion_": null}
{"problem_name": "235", "generated_code": "```python\ndef even_bit_set_number(n):\n    # Iterate through each bit position\n    for i in range(0, 32, 2):  # Assuming a 32-bit integer\n        # Set the even bit using OR operation with 1 shifted to the correct position\n        n |= (1 << i)\n    return n\n\n# Example usage:\n# Set all even bits of the number 10 (binary: 1010)\nresult = even_bit_set_number(10)\nprint(f\"The number with all even bits set: {result} (binary: {bin(result)})\")\n```\n\nThis function `even_bit_set_number` takes an integer `n` and sets all the even bits (0, 2, 4, ...) to 1. The loop iterates over the bit positions, incrementing by 2 to only consider even positions. The OR operation with `1 << i` sets the ith bit to 1. The function then returns the modified number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to set all even bits of a given number.", "input_data": "even_bit_set_number(10)", "expected_output": "10", "assertion": "assert even_bit_set_number(10) == 10", "assertion_": null}
{"problem_name": "234", "generated_code": "```python\ndef volume_cube(l):\n    return l**3\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a cube given its side length.", "input_data": "volume_cube(3)", "expected_output": "27", "assertion": "assert volume_cube(3)==27", "assertion_": null}
{"problem_name": "128", "generated_code": "```python\ndef long_words(n, str):\n    # Split the string into a list of words\n    words = str.split()\n    # Filter out the words that are longer than n characters\n    long_words_list = [word for word in words if len(word) > n]\n    # Return the list of long words\n    return long_words_list\n\n# Example usage:\n# Assuming str is a string variable containing words separated by spaces\n# n is an integer representing the minimum length of words to find\nn = 5\nstr = \"The quick brown fox jumps over the lazy dog\"\nprint(long_words(n, str))  # Output should be ['quick', 'brown', 'jumps']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find words that are longer than n characters from a given list of words.", "input_data": "long_words(3,\"python is a programming language\")", "expected_output": "['python','programming','language']", "assertion": "assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assertion_": null}
{"problem_name": "804", "generated_code": "```python\ndef is_product_even(arr):\n    # Iterate through the array\n    for num in arr:\n        # If any number is even, the product will be even\n        if num % 2 == 0:\n            return True\n    # If no even numbers are found, the product will be odd\n    return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the product of numbers in a list is even or not.", "input_data": "is_product_even([1,2,3])", "expected_output": "True", "assertion": "assert is_product_even([1,2,3])", "assertion_": null}
{"problem_name": "100", "generated_code": "```python\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    # Start checking from the next number\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Example usage:\n# print(next_smallest_palindrome(123))  # Output: 131\n# print(next_smallest_palindrome(808))  # Output: 818\n# print(next_smallest_palindrome(999))  # Output: 1001\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "input_data": "next_smallest_palindrome(99)", "expected_output": "101", "assertion": "assert next_smallest_palindrome(99)==101", "assertion_": null}
{"problem_name": "276", "generated_code": "```python\nimport math\n\ndef volume_cylinder(r, h):\n    # Calculate the volume of the cylinder using the formula V = πr^2h\n    volume = math.pi * (r ** 2) * h\n    return volume\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "468", "generated_code": "```python\ndef max_product(arr):\n    n = len(arr)\n    # Initialize a dp array where dp[i] will store the maximum product\n    # subsequence ending with arr[i]\n    dp = [0] * n\n    for i in range(n):\n        # The minimum product subsequence ending with arr[i] is the number itself\n        dp[i] = arr[i]\n        # Check all numbers before arr[i]\n        for j in range(i):\n            # If arr[j] is smaller than arr[i], it can be part of the increasing subsequence\n            if arr[j] < arr[i]:\n                # Update the maximum product subsequence ending with arr[i]\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    # The answer is the maximum value in dp array\n    return max(dp)\n\n# Example usage:\n# arr = [3, 100, 4, 5, 150, 6]\n# print(max_product(arr))  # Output should be 45000, as the increasing subsequence is [3, 100, 150]\n```\n\nThis function `max_product` takes an array `arr` as input and returns the maximum product of an increasing subsequence within the array. It uses dynamic programming to build up solutions to subproblems, storing the maximum product that can be achieved ending with each element of the array. The final result is the maximum value found in the `dp` array, which represents the maximum product of an increasing subsequence.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "input_data": "max_product([3, 100, 4, 5, 150, 6])", "expected_output": "3000", "assertion": "assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assertion_": null}
{"problem_name": "733", "generated_code": "```python\ndef find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Continue searching to the left\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "input_data": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "expected_output": "1", "assertion": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assertion_": null}
{"problem_name": "800", "generated_code": "```python\ndef remove_all_spaces(text):\n    return text.replace(\" \", \"\")\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all whitespaces from a string.", "input_data": "remove_all_spaces('python  program')", "expected_output": "('pythonprogram')", "assertion": "assert remove_all_spaces('python  program')==('pythonprogram')", "assertion_": null}
{"problem_name": "631", "generated_code": "```python\ndef replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_', ' ', text.count('_') // 2)\n    return text\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "input_data": "replace_spaces('Jumanji The Jungle')", "expected_output": "'Jumanji_The_Jungle'", "assertion": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assertion_": null}
{"problem_name": "286", "generated_code": "```python\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Helper function to find the maximum subarray sum using Kadane's algorithm.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\ndef max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Function to find the largest sum of a contiguous array in the modified array\n    which is formed by repeating the given array k times.\n    \"\"\"\n    # If k is 1, we just need to find the max subarray sum of the original array\n    if k == 1:\n        return max_sub_array_sum(a)\n\n    # Calculate sum of the whole array and max subarray sum\n    array_sum = sum(a)\n    max_subarray_sum = max_sub_array_sum(a)\n\n    # If the sum is negative, repeating the array won't help\n    if array_sum <= 0:\n        return max_subarray_sum\n\n    # If the sum is positive, we can consider the max subarray sum of twice the array\n    # as it will cover the case where the subarray wraps around the end and start\n    max_subarray_sum_twice = max_sub_array_sum(a * 2)\n\n    # The result is either the max subarray sum of twice the array or\n    # the sum of the array times (k-2) plus the max subarray sum of twice the array\n    return max(max_subarray_sum_twice, array_sum * (k - 2) + max_subarray_sum_twice)\n\n# Example usage:\na = [1, -2, 1]\nn = len(a)\nk = 3\nprint(max_sub_array_sum_repeated(a, n, k))  # Output should be 2\n```\n\nThis function first checks if `k` is 1, in which case it simply returns the maximum subarray sum of the original array. If the sum of the array is negative, repeating the array won't increase the maximum subarray sum, so it returns the maximum subarray sum of the original array. If the sum is positive, it calculates the maximum subarray sum of the array repeated twice, as this will cover the case where the maximum subarray wraps around from the end of the array to the beginning. The final result is the maximum of this value and the sum of the array times `(k-2)` plus this value, which accounts for the middle repetitions of the array.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "input_data": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)", "expected_output": "30", "assertion": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assertion_": null}
{"problem_name": "310", "generated_code": "```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n\n# Example usage:\n# str1 = \"hello\"\n# result = string_to_tuple(str1)\n# print(result)  # Output: ('h', 'e', 'l', 'l', 'o')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a given string to a tuple of characters.", "input_data": "string_to_tuple(\"python 3.0\")", "expected_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assertion": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assertion_": null}
{"problem_name": "793", "generated_code": "```python\ndef last(arr, x):\n    # Initialize the start and end indices\n    start = 0\n    end = len(arr) - 1\n    result = -1  # Default value if x is not found\n\n    # Binary search loop\n    while start <= end:\n        mid = (start + end) // 2  # Find the middle index\n\n        if arr[mid] == x:\n            result = mid  # Update result to the current mid index\n            start = mid + 1  # Move the start to the right to find the last occurrence\n        elif arr[mid] < x:\n            start = mid + 1  # Move the start to the right\n        else:\n            end = mid - 1  # Move the end to the left\n\n    return result  # Return the last position of x, or -1 if not found\n```\n\nThis function uses a modified binary search algorithm to find the last occurrence of an element `x` in a sorted array `arr`. If the element is found, it returns the index of the last occurrence; otherwise, it returns `-1`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last position of an element in a sorted array.", "input_data": "last([1,2,3],1)", "expected_output": "0", "assertion": "assert last([1,2,3],1) == 0", "assertion_": null}
{"problem_name": "223", "generated_code": "```python\ndef is_majority(arr, n, x):\n    # Find the first occurrence of x in arr\n    first_occurrence = find_first_occurrence(arr, x)\n    \n    # If x is not present or if the element at index (first_occurrence + n//2)\n    # is not x, then x cannot be a majority element\n    if first_occurrence == -1 or (first_occurrence + n//2 >= n or arr[first_occurrence + n//2] != x):\n        return False\n    \n    # If the above conditions are not met, x is the majority element\n    return True\n\ndef find_first_occurrence(arr, x):\n    # Perform binary search to find the first occurrence of x\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            # If mid is 0 or element before mid is not x, then mid is the first occurrence\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n\n# Example usage:\n# arr = [1, 2, 3, 3, 3, 3, 10]\n# n = len(arr)\n# x = 3\n# print(is_majority(arr, n, x))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "input_data": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)", "expected_output": "True", "assertion": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assertion_": null}
{"problem_name": "439", "generated_code": "```python\ndef multiple_to_single(L):\n    # Convert each integer in the list to a string and concatenate them\n    return int(''.join(map(str, L)))\n\n# Example usage:\n# L = [11, 22, 33]\n# The function should return 112233\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to join a list of multiple integers into a single integer.", "input_data": "multiple_to_single([11, 33, 50])", "expected_output": "113350", "assertion": "assert multiple_to_single([11, 33, 50])==113350", "assertion_": null}
{"problem_name": "440", "generated_code": "```python\nimport re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs (typically ending in \"ly\")\n    pattern = r\"\\b\\w+ly\\b\"\n    \n    # Find all matches in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize a list to store adverbs and their positions\n    adverbs_positions = []\n    \n    # Iterate over the matches and store the adverb with its start position\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs_positions.append((adverb, position))\n        break  # Only consider the first adverb\n    \n    # Return the list of adverbs with their positions\n    return adverbs_positions\n\n# Example usage:\nsentence = \"He quickly realized that the quietly whispering voices were coming from the other room.\"\nprint(find_adverb_position(sentence))  # Output should be [('quickly', 3)]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the first adverb and their positions in a given sentence.", "input_data": "find_adverb_position(\"clearly!! we can see the sky\")", "expected_output": "(0, 7, 'clearly')", "assertion": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assertion_": null}
{"problem_name": "608", "generated_code": "```python\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly fill for j = 0\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill for remaining values of j\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n```\n\nThis function calculates the nth Bell number using dynamic programming. The Bell number is the number of ways a set with n elements can be partitioned into non-empty subsets. The function creates a two-dimensional array `bell` where `bell[i][j]` will contain the Bell number for `i` elements and `j` partitions. The Bell numbers are calculated using the following recurrence relation:\n\n- `bell[i][0] = bell[i-1][i-1]` for `i > 0`\n- `bell[i][j] = bell[i-1][j-1] + bell[i][j-1]` for `j > 0`\n\nThe function returns `bell[n][0]`, which is the nth Bell number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find nth bell number.", "input_data": "bell_Number(2)", "expected_output": "2", "assertion": "assert bell_Number(2) == 2", "assertion_": null}
{"problem_name": "111", "generated_code": "```python\ndef common_in_nested_lists(nested_list):\n    # Use set intersection to find common elements\n    # Initialize the set with the first list to start the intersection process\n    common_elements = set(nested_list[0])\n    \n    # Iterate over the remaining lists and update the set of common elements\n    for lst in nested_list[1:]:\n        common_elements.intersection_update(lst)\n    \n    # Return the common elements as a list\n    return list(common_elements)\n\n# Example usage:\n# nested_list = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n# print(common_in_nested_lists(nested_list))  # Output: [3]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the common elements in given nested lists.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "731", "generated_code": "```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n# Example usage:\n# radius = 5, height = 12\nprint(lateralsurface_cone(5, 12))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "input_data": "lateralsurface_cone(5,12)", "expected_output": "204.20352248333654", "assertion": "assert lateralsurface_cone(5,12)==204.20352248333654", "assertion_": null}
{"problem_name": "607", "generated_code": "```python\nimport re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    \n    # Search the text for the pattern\n    match = regex.search(text)\n    \n    # If a match is found, return the substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        # If no match is found, return None\n        return None\n\n# Example usage:\n# text = \"The quick brown fox jumps over the lazy dog\"\n# pattern = r\"\\bfox\\b\"\n# result = find_literals(text, pattern)\n# print(result)  # Output: ('fox', 16, 19)\n```\nThis function will search the provided `text` for the first occurrence of the `pattern` and return the matching substring along with its start and end indices. If no match is found, it will return `None`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "input_data": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')", "expected_output": "('fox', 16, 19)", "assertion": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assertion_": null}
{"problem_name": "396", "generated_code": "```python\ndef check_char(string):\n    if not string:  # Check if the string is empty\n        return False\n    return string[0] == string[-1]  # Compare the first and last character\n\n# Example usage:\n# print(check_char(\"radar\"))  # Should return True\n# print(check_char(\"hello\"))  # Should return False\n# print(check_char(\"\"))       # Should return False\n# print(check_char(\"a\"))      # Should return True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given string starts and ends with the same character or not.", "input_data": "check_char(\"abba\")", "expected_output": "\"Valid\"", "assertion": "assert check_char(\"abba\") == \"Valid\"", "assertion_": null}
{"problem_name": "442", "generated_code": "```python\ndef positive_count(nums):\n    # Ensure that nums is not empty to avoid division by zero\n    if not nums:\n        return 0\n    \n    # Count the number of positive numbers\n    positive_nums = sum(1 for num in nums if num > 0)\n    \n    # Calculate the ratio of positive numbers to the total number of elements\n    ratio = positive_nums / len(nums)\n    \n    return ratio\n\n# Example usage:\n# nums = [1, -2, 3, 4, -5, 6]\n# print(positive_count(nums))  # Output: 0.5\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ration of positive numbers in an array of integers.", "input_data": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "expected_output": "0.54", "assertion": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assertion_": null}
{"problem_name": "300", "generated_code": "```python\ndef count_binary_seq(n):\n    # A dynamic programming approach to find the count of balanced binary sequences\n    # We use a 2D table dp where dp[i][j] stores the count of all sequences of length i with a difference of j between the number of 1s and 0s\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Base case: for sequence of length 0, the difference is 0\n    dp[0][0] = 1\n\n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j + 1]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]\n\n    # The result is the square of dp[n][0] because we need to consider both halves of the sequence\n    return dp[n][0] ** 2\n\n# Example usage:\nprint(count_binary_seq(1))  # Output: 2\nprint(count_binary_seq(2))  # Output: 6\nprint(count_binary_seq(3))  # Output: 20\n```\n\nThis function uses dynamic programming to calculate the number of balanced binary sequences of length `2n`. The `dp` table is filled based on the recurrence relation that the number of sequences of length `i` with a difference of `j` between the number of 1s and 0s can be obtained from the number of sequences of length `i-1` with a difference of `j-1` and `j+1`. The final result is the square of `dp[n][0]` because we need to consider both halves of the sequence.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "735", "generated_code": "```python\ndef toggle_middle_bits(n):\n    # If n is 0 or 1, there are no middle bits to toggle\n    if n < 2:\n        return n\n    \n    # Calculate the number of bits in n\n    num_bits = n.bit_length()\n    \n    # If there are only two bits, there are no middle bits to toggle\n    if num_bits <= 2:\n        return n\n    \n    # Create a mask that has all bits set except the first and last\n    # For example, if num_bits is 5, mask will be 0b01110\n    mask = (1 << (num_bits - 2)) - 1\n    mask <<= 1\n    \n    # Toggle the middle bits using XOR\n    return n ^ mask\n\n# Example usage:\nn = 10  # Binary: 1010\nprint(bin(toggle_middle_bits(n)))  # Output should be 0b1001 (9 in decimal)\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "input_data": "toggle_middle_bits(9)", "expected_output": "15", "assertion": "assert toggle_middle_bits(9) == 15", "assertion_": null}
{"problem_name": "253", "generated_code": "```python\ndef count_integer(list1):\n    # Initialize a counter for integer elements\n    integer_count = 0\n    \n    # Iterate over each element in the list\n    for element in list1:\n        # Check if the element is an integer\n        if isinstance(element, int):\n            # Increment the counter\n            integer_count += 1\n            \n    # Return the count of integer elements\n    return integer_count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that returns the number of integer elements in a given list.", "input_data": "count_integer([1,2,'abc',1.2])", "expected_output": "2", "assertion": "assert count_integer([1,2,'abc',1.2]) == 2", "assertion_": null}
{"problem_name": "58", "generated_code": "```python\ndef opposite_Signs(x, y):\n    # The sign bit is the leftmost bit in a number.\n    # If the XOR of x and y is negative, then they have opposite signs.\n    return (x ^ y) < 0\n\n# Example usage:\n# Positive and negative numbers have opposite signs\nprint(opposite_Signs(10, -20))  # Output: True\n\n# Two positive numbers do not have opposite signs\nprint(opposite_Signs(15, 25))   # Output: False\n\n# Two negative numbers do not have opposite signs\nprint(opposite_Signs(-10, -30)) # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given two integers have opposite sign or not.", "input_data": "opposite_Signs(1,-2)", "expected_output": "True", "assertion": "assert opposite_Signs(1,-2) == True", "assertion_": null}
{"problem_name": "407", "generated_code": "```python\nfrom itertools import permutations\n\ndef rearrange_bigger(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    \n    # Find all possible permutations of the digits\n    all_perms = sorted(set([''.join(p) for p in permutations(digits)]))\n    \n    # Find the index of the current number in the sorted list of permutations\n    current_index = all_perms.index(''.join(digits))\n    \n    # If the current permutation is the last one, there is no bigger number with the same digits\n    if current_index == len(all_perms) - 1:\n        return -1\n    \n    # Otherwise, return the next permutation\n    return int(all_perms[current_index + 1])\n\n# Example usage:\nprint(rearrange_bigger(123))  # Output: 132\nprint(rearrange_bigger(321))  # Output: -1\nprint(rearrange_bigger(4132)) # Output: 4213\n```\n\nThis function works by generating all permutations of the digits of the input number, sorting them, and then finding the next permutation in the sorted list. If the input number is the highest permutation, the function returns -1, indicating that there is no bigger number that can be formed with the same digits.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to create the next bigger number by rearranging the digits of a given number.", "input_data": "rearrange_bigger(12)", "expected_output": "21", "assertion": "assert rearrange_bigger(12)==21", "assertion_": null}
{"problem_name": "267", "generated_code": "```python\ndef square_Sum(n):\n    # Initialize sum\n    sum_of_squares = 0\n    \n    # Iterate over the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    \n    return sum_of_squares\n\n# Example usage:\n# n = 3\n# The first 3 odd natural numbers are 1, 3, 5\n# Their squares are 1, 9, 25\n# So the function should return 1 + 9 + 25 = 35\nprint(square_Sum(3))  # Output should be 35\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "input_data": "square_Sum(2)", "expected_output": "10", "assertion": "assert square_Sum(2) == 10", "assertion_": null}
{"problem_name": "57", "generated_code": "```python\nfrom itertools import permutations\n\ndef find_Max_Num(arr):\n    # Generate all possible permutations of the digits\n    perm = permutations(arr)\n    \n    # Initialize the maximum number as a string\n    max_num = ''\n    \n    # Iterate through all permutations and find the maximum number\n    for i in list(perm):\n        # Join the tuple of digits to form a number string\n        num = ''.join(map(str, i))\n        # Update max_num if the current number is greater\n        if num > max_num:\n            max_num = num\n    \n    # Return the maximum number as an integer\n    return int(max_num)\n\n# Example usage:\narr = [3, 5, 7, 9]\nprint(find_Max_Num(arr))  # Output should be 9753\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the largest number that can be formed with the given list of digits.", "input_data": "find_Max_Num([1,2,3])", "expected_output": "321", "assertion": "assert find_Max_Num([1,2,3]) == 321", "assertion_": null}
{"problem_name": "17", "generated_code": "```python\ndef square_perimeter(a):\n    return 4 * a\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns the perimeter of a square given its side length as input.", "input_data": "square_perimeter(10)", "expected_output": "40", "assertion": "assert square_perimeter(10)==40", "assertion_": null}
{"problem_name": "805", "generated_code": "```python\ndef max_sum_list(lists):\n    # Initialize the maximum sum to a very small number and an empty list for the result\n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the current list\n        current_sum = sum(lst)\n        # If the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the list with the maximum sum\n            max_sum = current_sum\n            max_sum_list = lst\n            \n    # Return the list with the maximum sum\n    return max_sum_list\n\n# Example usage:\n# Should return [5, 9, 7] because it has the highest sum (21)\nprint(max_sum_list([[1, 2, 3], [5, 9, 7], [4, 5]]))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "input_data": "max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])", "expected_output": "[10, 11, 12]", "assertion": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assertion_": null}
{"problem_name": "19", "generated_code": "```python\ndef test_duplicate(arraynums):\n    if len(arraynums) == len(set(arraynums)):\n        return False  # No duplicates\n    else:\n        return True  # Duplicates found\n\n# Example usage:\n# array = [1, 2, 3, 4, 5]\n# print(test_duplicate(array))  # Output: False\n\n# array = [1, 2, 3, 2, 5]\n# print(test_duplicate(array))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find whether a given array of integers contains any duplicate element.", "input_data": "test_duplicate(([1,2,3,4,5]))", "expected_output": "False", "assertion": "assert test_duplicate(([1,2,3,4,5]))==False", "assertion_": null}
{"problem_name": "564", "generated_code": "```python\ndef count_pairs(arr, n):\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the elements are unequal\n            if arr[i] != arr[j]:\n                count += 1\n    \n    return count\n\n# Example usage:\n# arr = [1, 2, 3, 4]\n# n = len(arr)\n# print(count_pairs(arr, n))  # Output: 6\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.", "input_data": "count_Pairs([1,2,1],3)", "expected_output": "2", "assertion": "assert count_Pairs([1,2,1],3) == 2", "assertion_": null}
{"problem_name": "127", "generated_code": "```python\ndef multiply_int(x, y):\n    return x * y\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to multiply two integers.", "input_data": "multiply_int(10,20)", "expected_output": "200", "assertion": "assert multiply_int(10,20)==200", "assertion_": null}
{"problem_name": "91", "generated_code": "```python\ndef find_substring(str_list, sub_str):\n    \"\"\"\n    This function checks if the substring 'sub_str' is present in any of the strings in the list 'str_list'.\n    \n    Parameters:\n    str_list (list): A list of strings to search within.\n    sub_str (str): The substring to search for.\n    \n    Returns:\n    bool: True if 'sub_str' is found in any string in 'str_list', False otherwise.\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False\n\n# Example usage:\n# str_list = [\"hello\", \"world\", \"python\", \"programming\"]\n# sub_str = \"gram\"\n# result = find_substring(str_list, sub_str)\n# print(result)  # Output: True\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a string is present as a substring in a given list of string values.", "input_data": "find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")", "expected_output": "True", "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assertion_": null}
{"problem_name": "66", "generated_code": "```python\ndef pos_count(lst):\n    # Initialize a counter for positive numbers\n    positive_count = 0\n    \n    # Iterate through the list and count positive numbers\n    for num in lst:\n        if num > 0:\n            positive_count += 1\n            \n    # Return the count of positive numbers\n    return positive_count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of positive numbers in a list.", "input_data": "pos_count([1,-2,3,-4])", "expected_output": "2", "assertion": "assert pos_count([1,-2,3,-4]) == 2", "assertion_": null}
{"problem_name": "780", "generated_code": "```python\nfrom itertools import combinations\n\ndef find_combinations(test_list):\n    # Initialize an empty list to store the combinations\n    res = []\n    \n    # Iterate over the range of lengths for combinations\n    for i in range(1, len(test_list) + 1):\n        # Use combinations from itertools to get all combinations of the given length\n        temp = list(combinations(test_list, i))\n        \n        # Iterate over each combination\n        for j in temp:\n            # Calculate the sum of the current combination\n            sum_comb = sum(ele[1] for ele in j)\n            # Append the combination along with its sum to the result list\n            res.append((j, sum_comb))\n    \n    # Return the result list\n    return res\n\n# Example usage:\ntest_list = [(5, 4), (1, 3), (3, 2), (2, 1)]\nprint(find_combinations(test_list))\n```\n\nThis function `find_combinations` takes a list of tuples `test_list` as input and returns a list of combinations along with their sums. It uses the `combinations` function from the `itertools` module to generate all possible combinations of the tuples in the list, and then calculates the sum of the second elements of the tuples in each combination. The result is a list of tuples, where each tuple contains a combination of the input tuples and the sum of their second elements.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "input_data": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])", "expected_output": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assertion": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assertion_": null}
{"problem_name": "567", "generated_code": "```python\ndef issort_list(list1):\n    # Check if the list is sorted in ascending order\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n\n# Example usage:\n# sorted_list = [1, 2, 3, 4, 5]\n# unsorted_list = [1, 3, 2, 5, 4]\n# print(issort_list(sorted_list))  # Output: True\n# print(issort_list(unsorted_list))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a specified list is sorted or not.", "input_data": "issort_list([1,2,4,6,8,10,12,14,16,17])", "expected_output": "True", "assertion": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assertion_": null}
{"problem_name": "619", "generated_code": "```python\ndef move_num(test_str):\n    # Separate the characters into digits and non-digits\n    digits = [char for char in test_str if char.isdigit()]\n    non_digits = [char for char in test_str if not char.isdigit()]\n    \n    # Concatenate non-digits with digits to move all numbers to the end\n    result = ''.join(non_digits + digits)\n    \n    return result\n\n# Example usage:\n# test_str = \"He3llo2Wor1ld\"\n# print(move_num(test_str))  # Output: \"HelloWorld321\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to move all the numbers to the end of the given string.", "input_data": "move_num('I1love143you55three3000thousand')", "expected_output": "'Iloveyouthreethousand1143553000'", "assertion": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assertion_": null}
{"problem_name": "393", "generated_code": "```python\ndef max_length_list(input_list):\n    # Initialize a variable to keep track of the maximum length\n    max_length = 0\n    # Initialize a variable to keep track of the list with maximum length\n    max_length_list = []\n    \n    # Iterate through each list in the input list of lists\n    for lst in input_list:\n        # Check if the current list has a greater length than the current maximum\n        if len(lst) > max_length:\n            # Update the maximum length and the list with maximum length\n            max_length = len(lst)\n            max_length_list = lst\n    \n    # Return the list with maximum length\n    return max_length_list\n```\n\nThis function `max_length_list` takes a list of lists as input and iterates through each list to find the one with the maximum length. It returns the list with the maximum length. If there are multiple lists with the same maximum length, it will return the first one it encounters.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the list with maximum length.", "input_data": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assertion_": null}
{"problem_name": "620", "generated_code": "```python\ndef largest_subset(a):\n    # Sort the array in descending order\n    a.sort(reverse=True)\n    n = len(a)\n    \n    # Create an array to store the size of the largest divisible subset\n    # that ends with the element at index i\n    dp = [0] * n\n    \n    # Initialize the largest subset size for the last element\n    dp[0] = 1\n    \n    # Iterate over the elements to fill the dp array\n    for i in range(1, n):\n        max_subset_size = 0\n        for j in range(i):\n            # If a[j] is divisible by a[i], then a[i] can be added to the subset\n            # ending with a[j]\n            if a[j] % a[i] == 0:\n                max_subset_size = max(max_subset_size, dp[j])\n        dp[i] = max_subset_size + 1\n    \n    # The size of the largest divisible subset is the maximum value in dp\n    return max(dp)\n\n# Example usage:\nprint(largest_subset([1, 2, 3]))  # Output: 2 (subset [1, 2] or [1, 3])\nprint(largest_subset([1, 2, 4, 8]))  # Output: 4 (subset [1, 2, 4, 8])\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "input_data": "largest_subset([ 1, 3, 6, 13, 17, 18 ])", "expected_output": "4", "assertion": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assertion_": null}
{"problem_name": "160", "generated_code": "```python\ndef find_solution(a, b, n):\n    # We will use the Extended Euclidean Algorithm to find x and y\n    # such that ax + by = gcd(a, b). Then we can scale the solution\n    # to get ax + by = n if n is a multiple of gcd(a, b).\n    \n    def extended_gcd(aa, bb):\n        last_remainder, remainder = abs(aa), abs(bb)\n        x, last_x, y, last_y = 0, 1, 1, 0\n        while remainder:\n            last_remainder, (quotient, remainder) = remainder, divmod(last_remainder, remainder)\n            x, last_x = last_x - quotient*x, x\n            y, last_y = last_y - quotient*y, y\n        return last_remainder, last_x * (-1 if aa < 0 else 1), last_y * (-1 if bb < 0 else 1)\n\n    # Calculate the gcd of a and b and the coefficients x and y\n    gcd, x, y = extended_gcd(a, b)\n\n    # If n is not a multiple of gcd(a, b), there is no solution\n    if n % gcd != 0:\n        return None\n\n    # Scale the solution of ax + by = gcd(a, b) to get ax + by = n\n    factor = n // gcd\n    x *= factor\n    y *= factor\n    return (x, y)\n\n# Example usage:\n# Should return a tuple (x, y) such that 3x + 5y = 11\nprint(find_solution(3, 5, 11))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "input_data": "find_solution(2, 3, 7)", "expected_output": "(2, 1)", "assertion": "assert find_solution(2, 3, 7) == (2, 1)", "assertion_": null}
{"problem_name": "787", "generated_code": "```python\nimport re\n\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n# print(text_match_three(\"abbb\")) # Should return 'Found a match!'\n# print(text_match_three(\"aabbbb\")) # Should return 'Found a match!'\n# print(text_match_three(\"aac\")) # Should return 'Not matched!'\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an a followed by three 'b'.", "input_data": "text_match_three(\"ac\")", "expected_output": "False", "assertion": "assert not text_match_three(\"ac\")", "assertion_": null}
{"problem_name": "86", "generated_code": "```python\ndef centered_hexagonal_number(n):\n    # The formula for the nth centered hexagonal number is given by:\n    # H(n) = 3n(n - 1) + 1\n    return 3 * n * (n - 1) + 1\n\n# Example usage:\n# To find the 3rd centered hexagonal number:\nprint(centered_hexagonal_number(3))  # Output should be 19\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find nth centered hexagonal number.", "input_data": "centered_hexagonal_number(10)", "expected_output": "271", "assertion": "assert centered_hexagonal_number(10) == 271", "assertion_": null}
{"problem_name": "436", "generated_code": "```python\ndef neg_nos(list1):\n    # Using list comprehension to filter out negative numbers\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\n\n# Example usage:\n# my_list = [1, -2, 3, -4, 5]\n# print(neg_nos(my_list))  # Output: [-2, -4]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to return the negative numbers in a list.", "input_data": "neg_nos([-1,4,5,-6])", "expected_output": "[-1,-6]", "assertion": "assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assertion_": null}
{"problem_name": "568", "generated_code": "```python\ndef empty_list(length):\n    return [{} for _ in range(length)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to create a list of N empty dictionaries.", "input_data": "empty_list(5)", "expected_output": "[{},{},{},{},{}]", "assertion": "assert empty_list(5)==[{},{},{},{},{}]", "assertion_": null}
{"problem_name": "113", "generated_code": "```python\ndef check_integer(text):\n    try:\n        # Try to convert the text to an integer\n        int(text)\n        return True\n    except ValueError:\n        # If ValueError is raised, the text is not an integer\n        return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a string represents an integer or not.", "input_data": "check_integer(\"python\")", "expected_output": "False", "assertion": "assert check_integer(\"python\")==False", "assertion_": null}
{"problem_name": "69", "generated_code": "```python\ndef is_sublist(l, s):\n    # Check if the sublist is empty, if so, it is a sublist of any list\n    if not s:\n        return True\n    # Check if the sublist is longer than the main list, if so, it cannot be a sublist\n    if len(s) > len(l):\n        return False\n    # Loop through the main list to find the starting index of the potential sublist\n    for i in range(len(l) - len(s) + 1):\n        # Check if the elements from the current index match the elements of the sublist\n        if l[i:i+len(s)] == s:\n            return True\n    # If no match is found, return False\n    return False\n\n# Example usage:\n# main_list = [2, 4, 3, 5, 7]\n# sublist = [3, 5]\n# print(is_sublist(main_list, sublist))  # Output: True\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a list contains the given sublist or not.", "input_data": "is_sublist([2,4,3,5,7],[3,7])", "expected_output": "False", "assertion": "assert is_sublist([2,4,3,5,7],[3,7])==False", "assertion_": null}
{"problem_name": "125", "generated_code": "```python\ndef find_length(string):\n    max_diff = 0\n    count = 0  # This will count the difference between 0's and 1's\n\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes negative, reset it to zero\n        if count < 0:\n            count = 0\n\n        # Update max_diff if count is greater than max_diff\n        max_diff = max(max_diff, count)\n\n    # If the string contains all 0's, the max_diff will be the length of the string\n    if max_diff == 0:\n        return len(string) if '0' in string else 0\n\n    return max_diff\n\n# Example usage:\nbinary_string = \"110001111000000\"\nprint(find_length(binary_string))  # Output should be 6\n```\n\nThis function iterates through the input binary string, counting the difference between the number of 0s and the number of 1s. If the count becomes negative, it is reset to zero, as a negative count would not contribute to a maximum difference in a substring. The function keeps track of the maximum difference encountered and returns it at the end. If the string contains only 0s, the maximum difference will be the length of the string. If the string contains only 1s, the maximum difference will be 0.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "input_data": "find_length(\"11000010001\")", "expected_output": "6", "assertion": "assert find_length(\"11000010001\") == 6", "assertion_": null}
{"problem_name": "11", "generated_code": "```python\ndef remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    first_occ = s.find(ch)\n    # If the character is not found, return the original string\n    if first_occ == -1:\n        return s\n    \n    # Remove the first occurrence of the character\n    s = s[:first_occ] + s[first_occ+1:]\n    \n    # Find the last occurrence of the character\n    last_occ = s.rfind(ch)\n    # If the character is not found, return the string without the first occurrence\n    if last_occ == -1:\n        return s\n    \n    # Remove the last occurrence of the character\n    s = s[:last_occ] + s[last_occ+1:]\n    \n    return s\n\n# Example usage:\nprint(remove_Occ(\"hello world\", \"l\"))  # Output: \"heo world\"\nprint(remove_Occ(\"banana\", \"n\"))       # Output: \"baaa\"\nprint(remove_Occ(\"abcba\", \"b\"))        # Output: \"aca\"\nprint(remove_Occ(\"abc\", \"d\"))          # Output: \"abc\" (character not found)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove first and last occurrence of a given character from the string.", "input_data": "remove_Occ(\"hello\",\"l\")", "expected_output": "\"heo\"", "assertion": "assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assertion_": null}
{"problem_name": "391", "generated_code": "```python\ndef convert_list_dictionary(l1, l2, l3):\n    # Initialize the nested dictionary\n    nested_dict = {}\n    \n    # Iterate over the lists and populate the dictionary\n    for i in range(len(l1)):\n        # Use the first list's elements as the top-level keys\n        # Check if the current element in l1 is already a key in the dictionary\n        if l1[i] not in nested_dict:\n            nested_dict[l1[i]] = {}\n        \n        # Use the second list's elements as the second-level keys\n        # Check if the current element in l2 is already a key in the nested dictionary\n        if l2[i] not in nested_dict[l1[i]]:\n            nested_dict[l1[i]][l2[i]] = []\n        \n        # Append the third list's elements to the list in the nested dictionary\n        nested_dict[l1[i]][l2[i]].append(l3[i])\n    \n    return nested_dict\n\n# Example usage:\n# l1 = ['a', 'b', 'a']\n# l2 = ['x', 'y', 'x']\n# l3 = [1, 2, 3]\n# convert_list_dictionary(l1, l2, l3)\n# Output should be: {'a': {'x': [1, 3]}, 'b': {'y': [2]}}\n```\n\nThis function assumes that all three lists `l1`, `l2`, and `l3` are of the same length. It uses elements from `l1` as the top-level keys, elements from `l2` as the second-level keys, and elements from `l3` as the values in a list. If the same key appears more than once, it appends the values from `l3` to the list under that key.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert more than one list to nested dictionary.", "input_data": "convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])", "expected_output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assertion": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assertion_": null}
{"problem_name": "108", "generated_code": "```python\ndef merge_sorted_list(num1, num2, num3):\n    # Combine all three lists\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    return sorted_list\n\n# Example usage:\n# num1 = [1, 4, 5]\n# num2 = [1, 3, 4]\n# num3 = [2, 6]\n# print(merge_sorted_list(num1, num2, num3))  # Output: [1, 1, 2, 3, 4, 4, 5, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to merge three lists into a single sorted list.", "input_data": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])", "expected_output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assertion": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assertion_": null}
{"problem_name": "594", "generated_code": "```python\ndef diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    # Loop through the list to find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        # If both first even and odd numbers are found, break the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If either first even or odd number is not found, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # Return the difference between the first even and odd numbers\n    return first_even - first_odd\n\n# Example usage:\n# list1 = [5, 3, 2, 8, 1, 4]\n# The first even number is 2 and the first odd number is 5\n# The difference would be 2 - 5 = -3\n# print(diff_even_odd(list1))  # Output: -3\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the difference of the first even and first odd number of a given list.", "input_data": "diff_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "3", "assertion": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3", "assertion_": null}
{"problem_name": "591", "generated_code": "```python\ndef swap_list(newList):\n    # Check if the list has at least two elements to swap\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n# Example usage:\n# myList = [12, 35, 9, 56, 24]\n# print(swap_list(myList))  # Output should be [24, 35, 9, 56, 12]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to interchange the first and last elements in a list.", "input_data": "swap_List([12, 35, 9, 56, 24])", "expected_output": "[24, 35, 9, 56, 12]", "assertion": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "assertion_": null}
{"problem_name": "63", "generated_code": "```python\ndef max_difference(test_list):\n    # Initialize max_diff to None for comparison\n    max_diff = None\n    \n    # Iterate through the list to find all possible pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the pairs\n            diff = abs(test_list[i] - test_list[j])\n            # Update max_diff if the current difference is greater than the max_diff found so far\n            if max_diff is None or diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff\n\n# Example usage:\n# Assuming the input is a list of integers, not a list of tuples as the problem statement is a bit unclear.\n# If the input is supposed to be a list of tuples, please clarify the structure of the tuples.\ntest_list = [1, 10, 5, 3, 9]\nprint(max_difference(test_list))  # Output should be 9 (difference between 1 and 10)\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum difference between available pairs in the given tuple list.", "input_data": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])", "expected_output": "7", "assertion": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assertion_": null}
{"problem_name": "759", "generated_code": "```python\ndef is_decimal(num):\n    try:\n        # Convert the string to a float and check if it raises a ValueError\n        float_num = float(num)\n    except ValueError:\n        # If it raises a ValueError, it's not a valid float, hence not a decimal number\n        return False\n    \n    # Split the number into its integer and decimal parts\n    num_parts = num.split('.')\n    \n    # Check if the number has a decimal part and if the length of the decimal part is 2\n    return len(num_parts) == 2 and len(num_parts[1]) == 2\n\n# Example usage:\n# print(is_decimal(\"123.45\"))  # Should return True\n# print(is_decimal(\"123.4\"))   # Should return False\n# print(is_decimal(\"123\"))     # Should return False\n# print(is_decimal(\"abc.def\")) # Should return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a given string is a decimal number with a precision of 2.", "input_data": "is_decimal('123.11')", "expected_output": "True", "assertion": "assert is_decimal('123.11')==True", "assertion_": null}
{"problem_name": "730", "generated_code": "```python\ndef consecutive_duplicates(nums):\n    if not nums:  # If the list is empty, return it as is\n        return nums\n    \n    # Initialize a new list with the first element of the input list\n    result = [nums[0]]\n    \n    # Iterate over the input list starting from the second element\n    for num in nums[1:]:\n        # If the current number is different from the last number in the result list, append it\n        if num != result[-1]:\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove consecutive duplicates of a given list.", "input_data": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assertion": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assertion_": null}
{"problem_name": "397", "generated_code": "```python\ndef median_numbers(a, b, c):\n    # Sort the numbers and return the middle one\n    sorted_numbers = sorted([a, b, c])\n    return sorted_numbers[1]\n\n# Example usage:\n# median = median_numbers(1, 3, 2)\n# print(median)  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median of three numbers.", "input_data": "median_numbers(25,55,65)", "expected_output": "55.0", "assertion": "assert median_numbers(25,55,65)==55.0", "assertion_": null}
{"problem_name": "165", "generated_code": "```python\ndef count_char_position(str1):\n    # Initialize count to 0\n    count = 0\n    \n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    \n    # Iterate over the string\n    for i, char in enumerate(str1):\n        # Check if the character is a letter and its position matches its position in the alphabet\n        if char.isalpha() and ord(char) - ord('a') == i:\n            count += 1\n    \n    # Return the count of characters\n    return count\n\n# Example usage:\n# The function should return 1 for the string \"Abcdefghijklmnopqrstuvwxyz\" as only 'b' is at the correct position (1).\nprint(count_char_position(\"Abcdefghijklmnopqrstuvwxyz\"))  # Output: 1\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "input_data": "count_char_position(\"xbcefg\")", "expected_output": "2", "assertion": "assert count_char_position(\"xbcefg\") == 2", "assertion_": null}
{"problem_name": "123", "generated_code": "```python\ndef sum_of_divisors(n):\n    \"\"\"Return the sum of proper divisors of n.\"\"\"\n    divisors_sum = 1  # Start with 1 since it's a divisor for all n > 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:  # Add the complementary divisor if it's different\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers up to the specified limit.\"\"\"\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b > a and sum_of_divisors(b) == a:  # Check if b is amicable with a\n            amicable_sum += a + b\n    return amicable_sum\n\n# Example usage:\nprint(amicable_numbers_sum(10000))  # Should print the sum of amicable numbers under 10000\n```\n\nThis function `amicable_numbers_sum` calculates the sum of all amicable numbers up to a given limit. It uses a helper function `sum_of_divisors` to calculate the sum of proper divisors of a number. The main function iterates through all numbers from 2 up to the limit, checks if each number has an amicable pair, and if so, adds both numbers to the running total. The check for amicability is done by comparing the sum of divisors of each number and ensuring that the pair is distinct (b > a).", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sum all amicable numbers from 1 to a specified number.", "input_data": "amicable_numbers_sum(999)", "expected_output": "504", "assertion": "assert amicable_numbers_sum(999)==504", "assertion_": null}
{"problem_name": "723", "generated_code": "```python\ndef count_same_pair(nums1, nums2):\n    # Initialize a counter to keep track of the same pairs\n    same_pair_count = 0\n    \n    # Iterate over the indices of the lists\n    for i in range(len(nums1)):\n        # Check if the values at the current index are the same\n        if nums1[i] == nums2[i]:\n            # Increment the counter if they are the same\n            same_pair_count += 1\n            \n    # Return the final count of same pairs\n    return same_pair_count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "input_data": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])", "expected_output": "4", "assertion": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assertion_": null}
{"problem_name": "623", "generated_code": "```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n\n# Example usage:\n# nums_list = [2, 3, 4]\n# n = 2\n# print(nth_nums(nums_list, n))  # Output: [4, 9, 16]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to compute the n-th power of each number in a list.", "input_data": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion_": null}
{"problem_name": "720", "generated_code": "```python\ndef add_dict_to_tuple(test_tup, test_dict):\n    # Convert the tuple to a list\n    list_tup = list(test_tup)\n    # Append the dictionary to the list\n    list_tup.append(test_dict)\n    # Convert the list back to a tuple\n    return tuple(list_tup)\n\n# Example usage:\nmy_tuple = (1, 2, 3)\nmy_dict = {'a': 1, 'b': 2}\n# Adding dictionary to tuple\nresult = add_dict_to_tuple(my_tuple, my_dict)\nprint(result)  # Output should be (1, 2, 3, {'a': 1, 'b': 2})\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "input_data": "add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )", "expected_output": "(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assertion": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assertion_": null}
{"problem_name": "771", "generated_code": "```python\ndef check_expression(exp):\n    # Stack to keep track of opening brackets\n    stack = []\n\n    # Dictionary to hold matching pairs of brackets\n    brackets = {')': '(', '}': '{', ']': '['}\n\n    # Iterate through each character in the expression\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in brackets.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in brackets.keys():\n            # If the stack is empty or the top of the stack doesn't match the corresponding opening bracket, return False\n            if not stack or stack[-1] != brackets[char]:\n                return False\n            # If the stack is not empty and the top of the stack matches, pop the opening bracket from the stack\n            stack.pop()\n\n    # If the stack is empty, all brackets were matched and the expression is balanced\n    return not stack\n\n# Example usage:\n# Balanced expression\nprint(check_expression(\"{[()]}\"))  # Output: True\n\n# Unbalanced expression\nprint(check_expression(\"{[(])}\"))  # Output: False\n\n# Unbalanced expression with no closing brackets\nprint(check_expression(\"{{[[(())]]\"))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "input_data": "check_expression(\"{()}[{}]\")", "expected_output": "True", "assertion": "assert check_expression(\"{()}[{}]\") == True", "assertion_": null}
{"problem_name": "414", "generated_code": "```python\ndef overlapping(list1, list2):\n    # Check if any element in list1 is present in list2\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5]\n# list2 = [5, 6, 7, 8, 9]\n# print(overlapping(list1, list2))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "input_data": "overlapping([1,2,3,4,5],[6,7,8,9])", "expected_output": "False", "assertion": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assertion_": null}
{"problem_name": "161", "generated_code": "```python\ndef remove_elements(list1, list2):\n    # Using list comprehension to create a new list without the elements from list2\n    return [element for element in list1 if element not in list2]\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5]\n# list2 = [2, 4]\n# result = remove_elements(list1, list2)\n# print(result)  # Output should be [1, 3, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all elements from a given list present in another list.", "input_data": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 10]", "assertion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assertion_": null}
{"problem_name": "746", "generated_code": "```python\nimport math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        # Area of a sector = (angle/360) * π * r^2\n        area = (a / 360) * math.pi * r ** 2\n        return area\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "input_data": "sector_area(4,45)", "expected_output": "6.283185307179586", "assertion": "assert sector_area(4,45)==6.283185307179586", "assertion_": null}
{"problem_name": "633", "generated_code": "```python\ndef pair_xor_sum(arr, n):\n    # Initialize result\n    xor_sum = 0\n    \n    # Traverse all pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate xor for the current pair and add it to the result\n            xor_sum += arr[i] ^ arr[j]\n    \n    return xor_sum\n\n# Example usage:\n# arr = [1, 2, 3]\n# n = len(arr)\n# print(pair_xor_sum(arr, n))  # Output: 2\n```\n\nThis function `pair_xor_sum` takes an array `arr` and its size `n`, and computes the sum of the XOR of all pairs of numbers in the array. The function iterates over all unique pairs of elements in the array, calculates their XOR, and adds it to the cumulative sum `xor_sum`, which is returned at the end.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "input_data": "pair_xor_Sum([5,9,7,6],4)", "expected_output": "47", "assertion": "assert pair_xor_Sum([5,9,7,6],4) == 47", "assertion_": null}
{"problem_name": "282", "generated_code": "```python\ndef sub_list(nums1, nums2):\n    # Subtract the second list from the first list element-wise\n    # Assuming both lists are of the same length\n    return [a - b for a, b in zip(nums1, nums2)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to subtract two lists element-wise.", "input_data": "sub_list([1, 2, 3],[4,5,6])", "expected_output": "[-3,-3,-3]", "assertion": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assertion_": null}
{"problem_name": "770", "generated_code": "```python\ndef odd_num_sum(n):\n    # Initialize sum\n    sum_of_fourth_powers = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of the odd number to the sum\n        sum_of_fourth_powers += i**4\n    \n    # Return the sum\n    return sum_of_fourth_powers\n\n# Example usage:\n# To find the sum of fourth powers of the first 5 odd natural numbers:\nprint(odd_num_sum(5))  # Output should be 1^4 + 3^4 + 5^4 + 7^4 + 9^4\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "input_data": "odd_num_sum(2)", "expected_output": "82", "assertion": "assert odd_num_sum(2) == 82", "assertion_": null}
{"problem_name": "260", "generated_code": "```python\ndef newman_prime(n):\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Helper function to generate the nth Newman–Shanks–Williams (NSW) number\n    def nsw_number(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return 2 * nsw_number(n - 1) + nsw_number(n - 2)\n\n    # Find the nth NSW prime number\n    count = 0\n    i = 0\n    while True:\n        nsw_num = nsw_number(i)\n        if is_prime(nsw_num):\n            count += 1\n            if count == n:\n                return nsw_num\n        i += 1\n\n# Example usage:\n# Find the 5th Newman–Shanks–Williams prime number\nprint(newman_prime(5))\n```\n\nPlease note that this function may not be efficient for large values of `n` due to the recursive calculation of NSW numbers and the prime checking algorithm. For large `n`, it is recommended to optimize the NSW number generation using memoization or iterative approach and to use a more efficient prime checking method.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth newman–shanks–williams prime number.", "input_data": "newman_prime(3)", "expected_output": "7", "assertion": "assert newman_prime(3) == 7", "assertion_": null}
{"problem_name": "458", "generated_code": "```python\ndef rectangle_area(l, b):\n    return l * b\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the area of a rectangle.", "input_data": "rectangle_area(10,20)", "expected_output": "200", "assertion": "assert rectangle_area(10,20)==200", "assertion_": null}
{"problem_name": "725", "generated_code": "```python\ndef extract_quotation(text1):\n    # Initialize an empty list to store the quotations\n    quotations = []\n    \n    # Initialize a variable to keep track of whether we are inside quotes\n    inside_quotes = False\n    \n    # Initialize a variable to store the current quotation\n    current_quotation = \"\"\n    \n    # Iterate over each character in the string\n    for char in text1:\n        # If we encounter a quotation mark\n        if char == '\"':\n            # If we are not currently inside quotes, we are entering a quotation\n            if not inside_quotes:\n                inside_quotes = True\n            # If we are currently inside quotes, we are exiting a quotation\n            else:\n                inside_quotes = False\n                # Add the current quotation to the list and reset it\n                quotations.append(current_quotation)\n                current_quotation = \"\"\n        # If we are inside quotes, add the character to the current quotation\n        elif inside_quotes:\n            current_quotation += char\n    \n    # Return the list of quotations\n    return quotations\n\n# Example usage:\ntext = 'She said, \"Hello, how are you?\" He replied, \"I\\'m fine, thanks!\"'\nprint(extract_quotation(text))  # Output: ['Hello, how are you?', 'I\\'m fine, thanks!']\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract values between quotation marks \" \" of the given string.", "input_data": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')", "expected_output": "['A53', 'multi', 'Processor']", "assertion": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assertion_": null}
{"problem_name": "776", "generated_code": "```python\ndef count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count those characters which have vowels as their neighbors in the given string.", "input_data": "count_vowels('bestinstareels')", "expected_output": "7", "assertion": "assert count_vowels('bestinstareels') == 7", "assertion_": null}
{"problem_name": "445", "generated_code": "```python\ndef index_multiplication(test_tup1, test_tup2):\n    # Using zip() + tuple() + generator expression to perform index wise multiplication\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# test_tup1 = (1, 4, 5)\n# test_tup2 = (7, 8, 6)\n# print(index_multiplication(test_tup1, test_tup2))  # Output: (7, 32, 30)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "input_data": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )", "expected_output": "((6, 21), (12, 45), (2, 9), (7, 30))", "assertion": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assertion_": null}
{"problem_name": "599", "generated_code": "```python\ndef sum_average(number):\n    # Calculate the sum of first n natural numbers\n    sum_of_numbers = number * (number + 1) // 2\n    \n    # Calculate the average of first n natural numbers\n    average = sum_of_numbers / number\n    \n    return sum_of_numbers, average\n\n# Example usage:\nn = 10\nsum_of_n, average_of_n = sum_average(n)\nprint(f\"Sum of first {n} natural numbers is: {sum_of_n}\")\nprint(f\"Average of first {n} natural numbers is: {average_of_n}\")\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find sum and average of first n natural numbers.", "input_data": "sum_average(10)", "expected_output": "(55, 5.5)", "assertion": "assert sum_average(10)==(55, 5.5)", "assertion_": null}
{"problem_name": "104", "generated_code": "```python\ndef sort_sublists(input_list):\n    # Sort each sublist in the input list\n    sorted_sublists = [sorted(sublist) for sublist in input_list]\n    return sorted_sublists\n\n# Example usage:\n# input_list = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\n# sorted_list = sort_sublists(input_list)\n# print(sorted_list)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion_": null}
{"problem_name": "92", "generated_code": "```python\ndef is_undulating(n):\n    # Convert the number to a string to easily access individual digits\n    num_str = str(n)\n    \n    # An undulating number must be at least 3 digits long and have alternating digits\n    if len(num_str) < 3:\n        return False\n    \n    # Check if the number is undulating by comparing adjacent digits\n    for i in range(1, len(num_str)):\n        # If two adjacent digits are the same or the pattern breaks, it's not undulating\n        if num_str[i] == num_str[i-1] or (i > 1 and num_str[i] != num_str[i-2]):\n            return False\n    \n    # If the loop completes without returning False, the number is undulating\n    return True\n\n# Example usage:\n# print(is_undulating(121)) # True\n# print(is_undulating(123)) # False\n# print(is_undulating(373737)) # True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is undulating or not.", "input_data": "is_undulating(1212121)", "expected_output": "True", "assertion": "assert is_undulating(1212121) == True", "assertion_": null}
{"problem_name": "248", "generated_code": "```python\ndef harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n# Example usage:\n# print(harmonic_sum(5))  # Should print the harmonic sum of 4, which is 2.083333333333333\n```\nNote: The problem statement asks for the harmonic sum of n-1, so the function is designed to calculate the sum up to the (n-1)th term. If you want to include the nth term in the sum, you can adjust the base case to return 0 instead of 1.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "291", "generated_code": "```python\ndef count_no_of_ways(n, k):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # Two variables to store the previous two results\n    same = k  # number of ways to paint the first two posts with the same color\n    diff = k * (k - 1)  # number of ways to paint the first two posts with different colors\n    total = same + diff  # total number of ways to paint the first two posts\n    \n    # Loop for the rest of the posts\n    for i in range(3, n + 1):\n        # If we paint the current post the same color as the previous post,\n        # then the previous post must have been painted a different color than its previous post\n        same = diff\n        \n        # If we paint the current post a different color than the previous post,\n        # then we can choose from (k - 1) colors and multiply by the total number of ways\n        # to paint the previous post (since it doesn't matter what color the previous post was)\n        diff = total * (k - 1)\n        \n        # Update the total number of ways to paint up to the current post\n        total = same + diff\n    \n    return total\n\n# Example usage:\nn = 3  # Number of posts\nk = 2  # Number of colors\nprint(count_no_of_ways(n, k))  # Output should be 6\n```\n\nThis function calculates the number of ways to paint a fence with `n` posts using `k` colors such that no more than two adjacent posts have the same color. It uses dynamic programming to build up the solution by considering the number of ways to paint the fence with one less post and then adding the current post with the appropriate constraints.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "input_data": "count_no_of_ways(2, 4)", "expected_output": "16", "assertion": "assert count_no_of_ways(2, 4) == 16", "assertion_": null}
{"problem_name": "409", "generated_code": "```python\ndef min_product_tuple(list1):\n    # Initialize the minimum product to None\n    min_product = None\n    \n    # Iterate over each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair\n            product = list1[i][0] * list1[i][1] + list1[j][0] * list1[j][1]\n            \n            # If min_product is None or the current product is less than the min_product, update min_product\n            if min_product is None or product < min_product:\n                min_product = product\n    \n    # Return the minimum product found\n    return min_product\n\n# Example usage:\n# Assuming the input list contains pairs of integers as tuples\nexample_list = [(1, 3), (2, 5), (0, 4)]\nprint(min_product_tuple(example_list))  # Expected output: 11 (from pairs (1, 3) and (0, 4))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the minimum product from the pairs of tuples within a given list.", "input_data": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "8", "assertion": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assertion_": null}
{"problem_name": "637", "generated_code": "```python\ndef noprofit_noloss(actual_cost, sale_amount):\n    # Check if the sale amount is equal to the actual cost\n    if actual_cost == sale_amount:\n        return True  # No profit, no loss\n    else:\n        return False  # There is either profit or loss\n\n# Example usage:\n# actual_cost = 100\n# sale_amount = 100\n# print(noprofit_noloss(actual_cost, sale_amount))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given amount has no profit and no loss", "input_data": "noprofit_noloss(1500,1200)", "expected_output": "False", "assertion": "assert noprofit_noloss(1500,1200)==False", "assertion_": null}
{"problem_name": "126", "generated_code": "```python\ndef sum_common_divisors(a, b):\n    # Function to calculate the sum of common divisors of two numbers\n    def gcd(x, y):\n        # Euclidean algorithm to find the greatest common divisor (GCD)\n        while y:\n            x, y = y, x % y\n        return x\n\n    # Find the GCD of the two numbers\n    gcd_value = gcd(a, b)\n\n    # Initialize sum of divisors\n    sum_divisors = 0\n\n    # Loop to find all divisors of gcd_value\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            sum_divisors += i\n\n    return sum_divisors\n\n# Example usage:\n# sum_common_divisors(12, 18) should return 18 because the common divisors are 1, 2, 3, 6 and their sum is 18.\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of common divisors of two given numbers.", "input_data": "sum(10,15)", "expected_output": "6", "assertion": "assert sum(10,15) == 6", "assertion_": null}
{"problem_name": "295", "generated_code": "```python\ndef sum_div(number):\n    # Initialize sum of divisors\n    sum_of_divisors = 0\n    \n    # Loop through all possible divisors\n    for i in range(1, number + 1):\n        # If i is a divisor of number, add it to the sum\n        if number % i == 0:\n            sum_of_divisors += i\n            \n    return sum_of_divisors\n\n# Example usage:\n# print(sum_div(6))  # Should return 12, because the divisors of 6 are 1, 2, 3, 6 and their sum is 12.\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to return the sum of all divisors of a number.", "input_data": "sum_div(8)", "expected_output": "7", "assertion": "assert sum_div(8)==7", "assertion_": null}
{"problem_name": "65", "generated_code": "```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n# Example usage:\n# nested_list = [1, 2, [3, 4], [5, [6, 7]], 8]\n# print(recursive_list_sum(nested_list))  # Output should be 36\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten a list and sum all of its elements.", "input_data": "recursive_list_sum(([1, 2, [3,4],[5,6]]))", "expected_output": "21", "assertion": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assertion_": null}
{"problem_name": "764", "generated_code": "```python\ndef number_ctr(str):\n    return sum(c.isdigit() for c in str)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count number of digits in a given string.", "input_data": "number_ctr('program2bedone')", "expected_output": "1", "assertion": "assert number_ctr('program2bedone') == 1", "assertion_": null}
{"problem_name": "758", "generated_code": "```python\ndef unique_sublists(list1):\n    # Convert each sublist to a tuple so it can be hashed and counted\n    tuple_list = [tuple(sublist) for sublist in list1]\n    \n    # Create a dictionary to count occurrences of each tuple\n    count_dict = {}\n    for t in tuple_list:\n        if t in count_dict:\n            count_dict[t] += 1\n        else:\n            count_dict[t] = 1\n            \n    return count_dict\n\n# Example usage:\n# list_of_lists = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [3, 4]]\n# print(unique_sublists(list_of_lists))\n# Output should be: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion_": null}
{"problem_name": "408", "generated_code": "```python\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    # Initialize the heap with the smallest pairs (nums1[i] + nums2[0], i, 0)\n    # i is the index in nums1, 0 is the index in nums2\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    # Extract the smallest pairs from the heap\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            # If there is a next element in nums2, push the new pair into the heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n\n# Example usage:\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))  # Output: [[1, 2], [1, 4], [1, 6]]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "input_data": "k_smallest_pairs([1,3,7],[2,4,6],2)", "expected_output": "[[1, 2], [1, 4]]", "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assertion_": null}
{"problem_name": "622", "generated_code": "```python\ndef get_median(arr1, arr2, n):\n    # If the size of the arrays is 0, there is no median\n    if n == 0:\n        return -1\n    # If the size of the arrays is 1, the median is the average of the two elements\n    elif n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    # If the size of the arrays is 2, the median is the average of the middle two elements\n    elif n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n    \n    # Calculate the medians of the input arrays\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    \n    # If medians are equal, return either m1 or m2\n    if m1 == m2:\n        return m1\n    \n    # If m1 < m2, then median must exist in arr1[m1....] and arr2[....m2]\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2 - 1:], arr2[:n//2 + 1], n//2 + 1)\n        else:\n            return get_median(arr1[n//2:], arr2[:n//2 + 1], n//2 + 1)\n    \n    # If m1 > m2, then median must exist in arr1[....m1] and arr2[m2....]\n    if n % 2 == 0:\n        return get_median(arr1[:n//2 + 1], arr2[n//2 - 1:], n//2 + 1)\n    else:\n        return get_median(arr1[:n//2 + 1], arr2[n//2:], n//2 + 1)\n\ndef median(arr, n):\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        return arr[n//2]\n\n# Example usage:\n# arr1 = [1, 12, 15, 26, 38]\n# arr2 = [2, 13, 17, 30, 45]\n# n = len(arr1)\n# print(get_median(arr1, arr2, n))  # Output should be 16.0\n```\n\nThis function `get_median` calculates the median of two sorted arrays of the same size. It uses a helper function `median` to find the median of a single array. The function handles edge cases where the size of the arrays is 0, 1, or 2. For larger arrays, it uses a divide and conquer approach, recursively finding the median of the two halves of the arrays where the median is likely to be found.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median of two sorted lists of same size.", "input_data": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)", "expected_output": "16.0", "assertion": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assertion_": null}
{"problem_name": "62", "generated_code": "```python\ndef smallest_num(xs):\n    # Check if the list is empty\n    if not xs:\n        return None  # Return None or raise an exception if the list is empty\n    # Initialize the smallest number with the first element of the list\n    smallest = xs[0]\n    # Iterate through the list to find the smallest number\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find smallest number in a list.", "input_data": "smallest_num([10, 20, 1, 45, 99])", "expected_output": "1", "assertion": "assert smallest_num([10, 20, 1, 45, 99]) == 1", "assertion_": null}
{"problem_name": "132", "generated_code": "```python\ndef tup_string(tup1):\n    # Convert the tuple to a string by joining all the elements\n    # Assuming all elements in the tuple are strings or can be converted to strings\n    return ''.join(map(str, tup1))\n\n# Example usage:\n# my_tuple = ('P', 'y', 't', 'h', 'o', 'n')\n# print(tup_string(my_tuple))  # Output: Python\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a tuple to a string.", "input_data": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "expected_output": "(\"exercises\")", "assertion": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assertion_": null}
{"problem_name": "784", "generated_code": "```python\ndef mul_even_odd(list1):\n    even = None\n    odd = None\n    \n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return \"List does not have both even and odd numbers\"\n\n# Example usage:\n# list1 = [1, 3, 5, 4, 2]\n# print(mul_even_odd(list1))  # Output should be 4 (first even) * 1 (first odd) = 4\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the product of first even and odd number of a given list.", "input_data": "mul_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "4", "assertion": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assertion_": null}
{"problem_name": "77", "generated_code": "```python\ndef is_Diff(n):\n    # Convert the number to string to easily access individual digits\n    num_str = str(n)\n    \n    # Initialize the sum of odd and even position digits\n    odd_sum = 0\n    even_sum = 0\n    \n    # Iterate over the digits of the number\n    for i in range(len(num_str)):\n        # Convert the character to an integer\n        digit = int(num_str[i])\n        \n        # If the position is odd (considering the first position as 1), add to odd_sum\n        if i % 2 == 0:\n            odd_sum += digit\n        # If the position is even, add to even_sum\n        else:\n            even_sum += digit\n    \n    # Calculate the difference between the sums\n    diff = abs(odd_sum - even_sum)\n    \n    # A number is divisible by 11 if the difference between the sum of its digits\n    # at odd positions and the sum of its digits at even positions is a multiple of 11\n    return diff % 11 == 0\n\n# Example usage:\nprint(is_Diff(121))  # Should return True, because 121 is divisible by 11\nprint(is_Diff(123))  # Should return False, because 123 is not divisible by 11\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find whether a number is divisible by 11.", "input_data": "is_Diff (12345)", "expected_output": "False", "assertion": "assert is_Diff (12345) == False", "assertion_": null}
{"problem_name": "644", "generated_code": "```python\ndef reverse_Array_Upto_K(input, k):\n    # Check if k is within the bounds of the array\n    if k > len(input):\n        return \"k is greater than the length of the array\"\n    \n    # Reverse the array up to the kth position\n    return input[:k][::-1] + input[k:]\n\n# Example usage:\n# input_array = [1, 2, 3, 4, 5]\n# k = 3\n# The function should return [3, 2, 1, 4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to reverse an array upto a given position.", "input_data": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)", "expected_output": "[4, 3, 2, 1, 5, 6]", "assertion": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assertion_": null}
{"problem_name": "421", "generated_code": "```python\ndef concatenate_tuple(test_tup):\n    # Using map() and join() to concatenate tuple elements with a delimiter\n    res = ''.join(map(str, test_tup))\n    return res\n\n# Example usage:\n# Define a tuple\ntest_tup = ('Python', 'is', 'awesome')\n# Call the function\nprint(concatenate_tuple(test_tup))  # Output: Pythonisawesome\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to concatenate each element of tuple by the delimiter.", "input_data": "concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )", "expected_output": "'ID-is-4-UTS'", "assertion": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assertion_": null}
{"problem_name": "7", "generated_code": "```python\ndef find_char_long(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Find all words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words\n\n# Example usage:\n# text = \"This is a test string with some long words\"\n# print(find_char_long(text))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find all words which are at least 4 characters long in a string.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "262", "generated_code": "```python\ndef split_two_parts(list1, L):\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5, 6]\n# L = 3\n# The function should return ([1, 2, 3], [4, 5, 6])\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "input_data": "split_two_parts([1,1,2,3,4,4,5,1],3)", "expected_output": "([1, 1, 2], [3, 4, 4, 5, 1])", "assertion": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assertion_": null}
{"problem_name": "417", "generated_code": "```python\ndef group_tuples(input_list):\n    # Create a dictionary to store the groups\n    groups = {}\n    \n    # Iterate over each tuple in the input list\n    for tup in input_list:\n        # Check if the first element of the tuple is already a key in the dictionary\n        if tup[0] in groups:\n            # If it is, append the tuple to the corresponding list\n            groups[tup[0]].append(tup)\n        else:\n            # If it's not, create a new list with the tuple as the first element\n            groups[tup[0]] = [tup]\n    \n    # Filter out the groups with only one tuple, as we are looking for common first elements\n    common_groups = {key: value for key, value in groups.items() if len(value) > 1}\n    \n    # Return the values of the dictionary as a list of lists\n    return list(common_groups.values())\n\n# Example usage:\ninput_tuples = [(1, 2), (3, 4), (1, 5), (2, 6), (1, 7), (3, 8)]\nprint(group_tuples(input_tuples))  # Output: [[(1, 2), (1, 5), (1, 7)], [(3, 4), (3, 8)]]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find common first element in given list of tuple.", "input_data": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])", "expected_output": "[('x', 'y', 'z'), ('w', 't')]", "assertion": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assertion_": null}
{"problem_name": "278", "generated_code": "```python\ndef count_first_elements(test_tup):\n    # Dictionary to store the count of elements\n    count_dict = {}\n    # List to store the result\n    result = []\n    \n    # Iterate over each element in the tuple\n    for elem in test_tup:\n        # If the element is already in the dictionary, increment its count\n        if elem in count_dict:\n            count_dict[elem] += 1\n        # If the element is not in the dictionary, add it with count 1\n        else:\n            count_dict[elem] = 1\n        # Append the count of elements before the current element to the result list\n        result.append(sum(count_dict.values()) - count_dict[elem])\n    \n    return result\n\n# Example usage:\ntest_tup = (5, 4, 5, 6, 4, 4, 5)\nprint(count_first_elements(test_tup))  # Output: [0, 1, 1, 3, 2, 3, 3]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "input_data": "count_first_elements((1, 5, 7, (4, 6), 10) )", "expected_output": "3", "assertion": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assertion_": null}
{"problem_name": "476", "generated_code": "```python\ndef big_sum(nums):\n    if not nums:  # Check if the list is empty\n        return 0  # Return 0 for empty list\n    return max(nums) + min(nums)  # Return the sum of the largest and smallest numbers\n\n# Example usage:\n# nums = [1, 2, 3, 4, 5]\n# print(big_sum(nums))  # Output will be 6 (1 + 5)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the largest and smallest value in a given array.", "input_data": "big_sum([1,2,3])", "expected_output": "4", "assertion": "assert big_sum([1,2,3]) == 4", "assertion_": null}
{"problem_name": "240", "generated_code": "```python\ndef replace_list(list1, list2):\n    # Check if the first list is not empty\n    if list1:\n        # Remove the last element from the first list\n        list1.pop()\n        # Extend the first list with the elements of the second list\n        list1.extend(list2)\n    else:\n        # If the first list is empty, just copy the second list into it\n        list1.extend(list2)\n    return list1\n\n# Example usage:\n# list1 = [1, 2, 3]\n# list2 = [4, 5, 6]\n# replace_list(list1, list2) should return [1, 2, 4, 5, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "input_data": "replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assertion": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assertion_": null}
{"problem_name": "741", "generated_code": "```python\ndef all_Characters_Same(s):\n    # Check if all characters in the string are the same\n    return all(ch == s[0] for ch in s)\n\n# Example usage:\n# Should return True\nprint(all_Characters_Same(\"aaaaa\"))\n\n# Should return False\nprint(all_Characters_Same(\"aaaba\"))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether all the characters are same or not.", "input_data": "all_Characters_Same(\"python\")", "expected_output": "False", "assertion": "assert all_Characters_Same(\"python\") == False", "assertion_": null}
{"problem_name": "463", "generated_code": "```python\ndef max_subarray_product(arr):\n    # Base case: if the array is empty, return 0\n    if not arr:\n        return 0\n\n    # Initialize variables to store the maximum product, the current maximum and minimum\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n\n    # Iterate through the array starting from the second element\n    for num in arr[1:]:\n        # If the current number is negative, swap the current max and min\n        if num < 0:\n            current_max, current_min = current_min, current_max\n\n        # Update the current max and min\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n\n        # Update the maximum product found so far\n        max_product = max(max_product, current_max)\n\n    return max_product\n\n# Example usage:\n# arr = [2, 3, -2, 4]\n# print(max_subarray_product(arr))  # Output: 6\n```\nThis function uses a dynamic programming approach to keep track of the maximum and minimum products up to the current position in the array, taking into account that a negative number can turn a minimum product into a maximum product and vice versa. It returns the maximum product of any subarray within the given array.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum product subarray of the given array.", "input_data": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])", "expected_output": "112", "assertion": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assertion_": null}
{"problem_name": "79", "generated_code": "```python\ndef word_len(s):\n    # Check if the length of the word is odd\n    return len(s) % 2 != 0\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the length of the word is odd or not.", "input_data": "word_len(\"Hadoop\")", "expected_output": "False", "assertion": "assert word_len(\"Hadoop\") == False", "assertion_": null}
{"problem_name": "120", "generated_code": "```python\nfrom itertools import combinations\nfrom math import prod\n\ndef max_product_tuple(list1):\n    # Generate all possible pairs of tuples from the list\n    tuple_pairs = combinations(list1, 2)\n    \n    # Initialize the maximum product to a very small number\n    max_product = float('-inf')\n    \n    # Iterate over each pair of tuples\n    for pair in tuple_pairs:\n        # Flatten the pair of tuples into a single list\n        combined = pair[0] + pair[1]\n        \n        # Calculate the product of the elements in the combined list\n        current_product = prod(combined)\n        \n        # Update the maximum product if the current product is greater\n        if abs(current_product) > abs(max_product):\n            max_product = current_product\n    \n    return max_product\n\n# Example usage:\n# Assuming the input list contains tuples of integers\nlist1 = [(1, 2), (3, 4), (-1, -9)]\nprint(max_product_tuple(list1))  # Output should be the maximum absolute product between pairs of tuples\n```\nThis function `max_product_tuple` takes a list of tuples as input and calculates the maximum absolute product between numbers in pairs of tuples within the given list. It uses the `combinations` function from the `itertools` module to generate all possible pairs of tuples and then calculates the product of the elements in each pair. The function returns the maximum absolute product found.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "input_data": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "36", "assertion": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assertion_": null}
{"problem_name": "75", "generated_code": "```python\ndef find_tuples(test_list, K):\n    # Using list comprehension to filter out the tuples\n    # where all elements are divisible by K\n    result = [tup for tup in test_list if all(ele % K == 0 for ele in tup)]\n    return result\n\n# Example usage:\n# test_list = [(4, 5, 8), (6, 9, 10), (12, 18, 21)]\n# K = 3\n# print(find_tuples(test_list, K))  # Output: [(12, 18, 21)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "input_data": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)", "expected_output": "[(6, 24, 12)]", "assertion": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assertion_": null}
{"problem_name": "244", "generated_code": "```python\nimport math\n\ndef next_Perfect_Square(N):\n    # First, find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # If N is already a perfect square, we start from the next number\n    if sqrt_N.is_integer():\n        next_sqrt = int(sqrt_N) + 1\n    else:\n        # If N is not a perfect square, we take the ceiling of the sqrt\n        next_sqrt = math.ceil(sqrt_N)\n    \n    # The next perfect square is the square of the next integer square root\n    next_perfect_square = next_sqrt ** 2\n    \n    return next_perfect_square\n\n# Example usage:\nprint(next_Perfect_Square(36))  # Output: 49\nprint(next_Perfect_Square(0))   # Output: 1\nprint(next_Perfect_Square(20))  # Output: 25\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the next perfect square greater than a given number.", "input_data": "next_Perfect_Square(35)", "expected_output": "36", "assertion": "assert next_Perfect_Square(35) == 36", "assertion_": null}
{"problem_name": "434", "generated_code": "```python\nimport re\n\ndef text_match_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n# print(text_match_one(\"ab\"))  # Should return 'Found a match!'\n# print(text_match_one(\"aabbb\"))  # Should return 'Found a match!'\n# print(text_match_one(\"ac\"))  # Should return 'Not matched!'\n# print(text_match_one(\"b\"))  # Should return 'Not matched!'\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an a followed by one or more b's.", "input_data": "text_match_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_one(\"ac\")==False", "assertion_": null}
{"problem_name": "721", "generated_code": "```python\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    # Create a memoization table to store the maximum sum of costs up to each cell\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # Create a table to store the number of steps taken to reach each cell\n    steps = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first cell\n    dp[0][0] = cost[0][0]\n    steps[0][0] = 1\n\n    # Fill the first row and first column of dp and steps tables\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        steps[0][i] = steps[0][i-1] + 1\n        steps[i][0] = steps[i-1][0] + 1\n\n    # Fill the rest of the dp and steps tables\n    for i in range(1, n):\n        for j in range(1, n):\n            # Choose the path with the maximum sum of costs\n            if dp[i-1][j] + cost[i][j] > dp[i][j-1] + cost[i][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                steps[i][j] = steps[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                steps[i][j] = steps[i][j-1] + 1\n\n    # The maximum average is the maximum sum of costs divided by the number of steps to reach the bottom-right cell\n    max_avg = dp[n-1][n-1] / steps[n-1][n-1]\n    return max_avg\n\n# Example usage:\ncost = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(maxAverageOfPath(cost))  # Output should be the maximum average of a path from top-left to bottom-right\n```\n\nThis function calculates the maximum average of a path from the top-left cell to the bottom-right cell in a given square matrix. It uses dynamic programming to store the maximum sum of costs and the number of steps taken to reach each cell. The function then returns the maximum average, which is the maximum sum of costs divided by the number of steps to reach the bottom-right cell.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "input_data": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])", "expected_output": "5.2", "assertion": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assertion_": null}
{"problem_name": "129", "generated_code": "```python\ndef magic_square_test(my_matrix):\n    # Calculate the sum of the first row to set a target sum for comparison\n    target_sum = sum(my_matrix[0])\n    \n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(len(my_matrix)):\n        if sum(my_matrix[row][col] for row in range(len(my_matrix))) != target_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != target_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))) != target_sum:\n        return False\n    \n    # If all checks pass, it's a magic square\n    return True\n\n# Example usage:\n# my_matrix = [\n#     [2, 7, 6],\n#     [9, 5, 1],\n#     [4, 3, 8]\n# ]\n# print(magic_square_test(my_matrix))  # Output: True\n```\nThis function checks whether a given square matrix is a magic square. A magic square is a square matrix where the sums of the numbers in each row, each column, and both main diagonals are all the same. The function returns `True` if the matrix is a magic square, and `False` otherwise.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate whether the matrix is a magic square.", "input_data": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])", "expected_output": "True", "assertion": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assertion_": null}
{"problem_name": "557", "generated_code": "```python\ndef toggle_string(string):\n    # Use a list comprehension to toggle each character's case\n    toggled_string = [char.lower() if char.isupper() else char.upper() for char in string]\n    # Join the list of characters back into a string\n    return ''.join(toggled_string)\n\n# Example usage:\n# print(toggle_string(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to toggle the case of all characters in a string.", "input_data": "toggle_string(\"Python\")", "expected_output": "(\"pYTHON\")", "assertion": "assert toggle_string(\"Python\")==(\"pYTHON\")", "assertion_": null}
{"problem_name": "754", "generated_code": "```python\ndef extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through the indices of the shortest list to avoid index out of range errors\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Check if the element at the current index is the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If so, append the element to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n\n# Example usage:\n# l1 = [1, 2, 3, 4, 5]\n# l2 = [1, 2, 3, 4, 5]\n# l3 = [1, 2, 3, 4, 5]\n# print(extract_index_list(l1, l2, l3))  # Output: [1, 2, 3, 4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "input_data": "extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])", "expected_output": "[1, 7]", "assertion": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assertion_": null}
{"problem_name": "264", "generated_code": "```python\ndef dog_age(h_age):\n    # According to the American Veterinary Medical Association:\n    # The first year of a medium-sized dog's life is equal to 15 human years.\n    # The second year for a dog equals about nine human years.\n    # Each additional year is around five human years.\n    \n    if h_age == 1:\n        # First year equals 15 dog years\n        return 15\n    elif h_age == 2:\n        # Second year adds 9 dog years\n        return 15 + 9\n    else:\n        # Any additional year adds 5 dog years\n        additional_years = h_age - 2\n        return 15 + 9 + (additional_years * 5)\n\n# Example usage:\nprint(dog_age(1))  # Should return 15\nprint(dog_age(2))  # Should return 24\nprint(dog_age(5))  # Should return 39\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate a dog's age in dog's years.", "input_data": "dog_age(12)", "expected_output": "61", "assertion": "assert dog_age(12)==61", "assertion_": null}
{"problem_name": "808", "generated_code": "```python\ndef check_K(test_tup, K):\n    # Using any() to check if K is present in any tuple\n    return any(K in tup for tup in test_tup)\n\n# Example usage:\n# Define a list of tuples\ntest_tup = [(5, 6), (1, 7), (3, 4), (9, 0)]\n\n# Define the value of K to check\nK = 3\n\n# Call the function and print the result\nprint(check_K(test_tup, K))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given tuples contain the k or not.", "input_data": "check_K((10, 4, 5, 6, 8), 6)", "expected_output": "True", "assertion": "assert check_K((10, 4, 5, 6, 8), 6) == True", "assertion_": null}
{"problem_name": "782", "generated_code": "```python\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):  # increment by 2 to ensure subarray length is odd\n            subarray = arr[i:j+1]\n            total_sum += sum(subarray)\n    return total_sum\n\n# Example usage:\n# arr = [1, 4, 2, 5, 3]\n# print(odd_length_sum(arr))  # Output should be 58\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "input_data": "odd_length_sum([1,2,4])", "expected_output": "14", "assertion": "assert odd_length_sum([1,2,4]) == 14", "assertion_": null}
{"problem_name": "450", "generated_code": "```python\ndef extract_string(str_list, l):\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    \n    # Iterate over each string in the list\n    for s in str_list:\n        # Check if the length of the string matches the specified size\n        if len(s) == l:\n            # If it does, append it to the list of extracted strings\n            extracted_strings.append(s)\n    \n    # Return the list of extracted strings\n    return extracted_strings\n\n# Example usage:\n# str_list = [\"hello\", \"world\", \"python\", \"code\", \"list\", \"examples\"]\n# l = 5\n# print(extract_string(str_list, l))  # Output: [\"hello\", \"world\"]\n```\nThis function `extract_string` takes a list of strings `str_list` and an integer `l` as input and returns a new list containing only the strings from `str_list` that have a length exactly equal to `l`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract specified size of strings from a given list of string values.", "input_data": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)", "expected_output": "['practice', 'solution']", "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assertion_": null}
{"problem_name": "462", "generated_code": "```python\nfrom itertools import combinations\n\ndef combinations_list(list1):\n    result = []\n    for r in range(1, len(list1) + 1):\n        result.extend(combinations(list1, r))\n    return [list(comb) for comb in result]\n\n# Example usage:\n# my_list = [1, 2, 3]\n# print(combinations_list(my_list))\n# Output: [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find all possible combinations of the elements of a given list.", "input_data": "combinations_list(['orange', 'red', 'green', 'blue'])", "expected_output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assertion": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assertion_": null}
{"problem_name": "245", "generated_code": "```python\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Initialize two arrays for dynamic programming\n    inc = [0] * n  # inc[i] will store the max sum of increasing subsequence ending at arr[i]\n    dec = [0] * n  # dec[i] will store the max sum of decreasing subsequence starting at arr[i]\n    \n    # Fill inc[] from left to right\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill dec[] from right to left\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n\n# Example usage:\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nprint(max_sum(arr))  # Output should be the maximum sum of a bitonic subsequence\n```\n\nThis function `max_sum` calculates the maximum sum of a bitonic subsequence in an array. It uses dynamic programming to build up two arrays, `inc` and `dec`, which represent the maximum sum of increasing and decreasing subsequences ending or starting at each element, respectively. The final result is the maximum value obtained by combining these two arrays, subtracting the current element since it is counted twice.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "input_data": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])", "expected_output": "194", "assertion": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assertion_": null}
{"problem_name": "18", "generated_code": "```python\ndef remove_dirty_chars(string, second_string):\n    # Create a set of characters to remove from the first string\n    chars_to_remove = set(second_string)\n    \n    # Use a list comprehension to filter out unwanted characters\n    filtered_string = [char for char in string if char not in chars_to_remove]\n    \n    # Join the list back into a string and return it\n    return ''.join(filtered_string)\n\n# Example usage:\n# first_string = \"hello world\"\n# second_string = \"ad\"\n# The function should return \"hello worl\" since 'd' is removed.\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove characters from the first string which are present in the second string.", "input_data": "remove_dirty_chars(\"probasscurve\", \"pros\")", "expected_output": "'bacuve'", "assertion": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assertion_": null}
{"problem_name": "268", "generated_code": "```python\ndef find_star_num(n):\n    # The formula for the nth star number is 6n(n - 1) + 1\n    return 6 * n * (n - 1) + 1\n\n# Example usage:\n# Find the 5th star number\nprint(find_star_num(5))  # Output should be 121\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n'th star number.", "input_data": "find_star_num(3)", "expected_output": "37", "assertion": "assert find_star_num(3) == 37", "assertion_": null}
{"problem_name": "233", "generated_code": "```python\ndef lateralsurface_cylinder(r, h):\n    # The formula for the lateral surface area of a cylinder is 2 * pi * r * h\n    # where r is the radius and h is the height of the cylinder.\n    import math\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cylinder.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "269", "generated_code": "```python\ndef ascii_value(k):\n    return ord(k)\n\n# Example usage:\n# print(ascii_value('A'))  # Output: 65\n# print(ascii_value('a'))  # Output: 97\n# print(ascii_value('0'))  # Output: 48\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ascii value of a character.", "input_data": "ascii_value('A')", "expected_output": "65", "assertion": "assert ascii_value('A')==65", "assertion_": null}
{"problem_name": "752", "generated_code": "```python\ndef jacobsthal_num(n):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize the first two numbers of the sequence\n    a, b = 0, 1\n    \n    # Calculate the nth Jacobsthal number\n    for _ in range(n - 1):\n        a, b = b, a + 2 * b\n    \n    return a\n\n# Example usage:\n# nth = 5\n# print(jacobsthal_num(nth))  # Output: 11\n```\nThis function calculates the nth Jacobsthal number using an iterative approach. It starts with the first two numbers of the sequence, 0 and 1, and then iteratively updates the values to find the nth number. The Jacobsthal sequence is defined by the recurrence relation J(n) = J(n-1) + 2*J(n-2), with initial terms J(0) = 0 and J(1) = 1.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "input_data": "jacobsthal_num(5)", "expected_output": "11", "assertion": "assert jacobsthal_num(5) == 11", "assertion_": null}
{"problem_name": "781", "generated_code": "```python\ndef count_divisors(n):\n    # Initialize count of divisors\n    count = 0\n    \n    # Iterate over all possible divisors\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    \n    # Check if the count of divisors is even\n    return count % 2 == 0\n\n# Example usage:\n# print(count_divisors(10))  # Should return False, since 10 has 4 divisors: 1, 2, 5, 10\n# print(count_divisors(9))   # Should return True, since 9 has 3 divisors: 1, 3, 9\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "input_data": "count_divisors(10)", "expected_output": "True", "assertion": "assert count_divisors(10)", "assertion_": null}
{"problem_name": "627", "generated_code": "```python\ndef find_First_Missing(array, start, end):\n    if start > end:\n        return end + 1\n\n    if start != array[start]:\n        return start\n\n    mid = (start + end) // 2\n\n    # If the element at mid index is equal to mid value, then the missing number is in the right half\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        # Else the missing number is in the left half\n        return find_First_Missing(array, start, mid)\n\n# Example usage:\n# The sorted list of natural numbers starting from 0\narray = [0, 1, 2, 3, 4, 6, 7, 8, 9, 10]\n# The smallest missing number is 5\nprint(find_First_Missing(array, 0, len(array) - 1))\n```\n\nThis function uses a binary search approach to find the smallest missing number in a sorted list of natural numbers. It assumes that the list starts with 0 and is sorted in ascending order without duplicates. If the list starts with a different number or contains duplicates, the function may not work correctly.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "input_data": "find_First_Missing([0,1,2,3])", "expected_output": "4", "assertion": "assert find_First_Missing([0,1,2,3]) == 4", "assertion_": null}
{"problem_name": "565", "generated_code": "```python\ndef split(word):\n    return [char for char in word]\n\n# Example usage:\n# word_to_split = \"hello\"\n# characters = split(word_to_split)\n# print(characters)  # Output: ['h', 'e', 'l', 'l', 'o']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to split a string into characters.", "input_data": "split('python')", "expected_output": "['p','y','t','h','o','n']", "assertion": "assert split('python') == ['p','y','t','h','o','n']", "assertion_": null}
{"problem_name": "590", "generated_code": "```python\nimport math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius or magnitude of the vector.\n    theta (float): The angle in radians.\n    \n    Returns:\n    tuple: A tuple containing the x and y coordinates.\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert polar coordinates to rectangular coordinates.", "input_data": "polar_rect(3,4)", "expected_output": "((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assertion": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assertion_": null}
{"problem_name": "797", "generated_code": "```python\ndef sum_in_range(l, r):\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Adjust l to be the next odd number if it is even\n    if l % 2 == 0:\n        l += 1\n    \n    # Loop through the range from l to r, incrementing by 2 to get only odd numbers\n    for number in range(l, r + 1, 2):\n        total_sum += number\n    \n    return total_sum\n\n# Example usage:\n# sum_in_range(1, 10) should return the sum of odd numbers between 1 and 10, which is 1+3+5+7+9 = 25\nprint(sum_in_range(1, 10))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "input_data": "sum_in_range(2,5)", "expected_output": "8", "assertion": "assert sum_in_range(2,5) == 8", "assertion_": null}
{"problem_name": "425", "generated_code": "```python\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if isinstance(sublist, list) and x in sublist:\n            count += 1\n    return count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of sublists containing a particular element.", "input_data": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)", "expected_output": "3", "assertion": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assertion_": null}
{"problem_name": "141", "generated_code": "```python\ndef flip(sublist, k):\n    \"\"\"Helper function to reverse the order of the first k elements of the sublist.\"\"\"\n    sublist[:k] = sublist[:k][::-1]\n\ndef find_max_index(sublist, n):\n    \"\"\"Helper function to find the index of the maximum element in sublist[:n].\"\"\"\n    return sublist.index(max(sublist[:n]))\n\ndef pancake_sort(nums):\n    \"\"\"Sorts the list of numbers using pancake sort algorithm.\"\"\"\n    cur_size = len(nums)\n    while cur_size > 1:\n        # Find the index of the largest element not yet sorted\n        max_index = find_max_index(nums, cur_size)\n        \n        # Move the largest element to the beginning if it's not already at the beginning\n        if max_index != cur_size - 1:\n            # Flip the sublist to bring the max element to the front\n            flip(nums, max_index + 1)\n            # Flip the entire list to move the max element to its correct position\n            flip(nums, cur_size)\n        \n        # Reduce the current size of the array as the largest element is now sorted\n        cur_size -= 1\n    \n    return nums\n\n# Example usage:\n# nums = [3, 6, 2, 4, 5]\n# sorted_nums = pancake_sort(nums)\n# print(sorted_nums)  # Output: [2, 3, 4, 5, 6]\n```\n\nThis function implements the pancake sorting algorithm, which is a variation of the sorting problem where the only allowed operation is to \"flip\" a prefix of the array (reversing the order of the elements in the prefix). The goal is to sort the array using the minimum number of flips. In this implementation, we repeatedly bring the largest element to the front and then flip the entire array up to the current size to move the largest element to its final position. This process is repeated until the array is sorted.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of elements.", "input_data": "pancake_sort([15, 79, 25, 38, 69])", "expected_output": "[15, 25, 38, 69, 79]", "assertion": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assertion_": null}
{"problem_name": "287", "generated_code": "```python\ndef square_Sum(n):\n    # Initialize sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        even_number = 2 * i  # Get the ith even number\n        sum_of_squares += even_number ** 2  # Add its square to the sum\n    \n    return sum_of_squares\n\n# Example usage:\n# print(square_Sum(3))  # Should return 56, since 2^2 + 4^2 + 6^2 = 4 + 16 + 36 = 56\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "input_data": "square_Sum(2)", "expected_output": "20", "assertion": "assert square_Sum(2) == 20", "assertion_": null}
{"problem_name": "3", "generated_code": "```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True  # 0 and 1 are not prime numbers\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True  # n is divisible by some number other than 1 and itself\n    return False  # n is a prime number\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to identify non-prime numbers.", "input_data": "is_not_prime(2)", "expected_output": "False", "assertion": "assert is_not_prime(2) == False", "assertion_": null}
{"problem_name": "98", "generated_code": "```python\ndef multiply_num(numbers):\n    # Check if the list is empty\n    if not numbers:\n        return 0\n    \n    # Initialize the result with 1 (neutral element for multiplication)\n    result = 1\n    \n    # Multiply all the numbers in the list\n    for num in numbers:\n        result *= num\n    \n    # Divide the result by the length of the list\n    result /= len(numbers)\n    \n    return result\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "604", "generated_code": "```python\ndef reverse_words(s):\n    # Split the string into words\n    words = s.split(' ')\n    \n    # Reverse the list of words\n    words.reverse()\n    \n    # Join the words back into a string with spaces in between\n    reversed_s = ' '.join(words)\n    \n    return reversed_s\n\n# Example usage:\n# reversed_string = reverse_words(\"hello world\")\n# print(reversed_string)  # Output: \"world hello\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to reverse words seperated by spaces in a given string.", "input_data": "reverse_words(\"python program\")", "expected_output": "(\"program python\")", "assertion": "assert reverse_words(\"python program\")==(\"program python\")", "assertion_": null}
{"problem_name": "312", "generated_code": "```python\nimport math\n\ndef volume_cone(r, h):\n    # Calculate the volume of a cone using the formula: (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a cone.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "115", "generated_code": "```python\ndef empty_dict(list1):\n    # Iterate through each dictionary in the list\n    for d in list1:\n        # Check if the dictionary is not empty\n        if d:\n            # If any dictionary is not empty, return False\n            return False\n    # If all dictionaries are empty, return True\n    return True\n\n# Example usage:\n# Should return True\nprint(empty_dict([{}, {}, {}]))\n\n# Should return False\nprint(empty_dict([{}, {'key': 'value'}, {}]))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether all dictionaries in a list are empty or not.", "input_data": "empty_dit([{},{},{}])", "expected_output": "True", "assertion": "assert empty_dit([{},{},{}])==True", "assertion_": null}
{"problem_name": "582", "generated_code": "```python\ndef my_dict(dict1):\n    # Check if the dictionary is empty\n    return not bool(dict1)\n\n# Example usage:\n# Create an empty dictionary\nempty_dict = {}\n# Create a non-empty dictionary\nnon_empty_dict = {'key': 'value'}\n\n# Test the function\nprint(my_dict(empty_dict))     # Output: True (because the dictionary is empty)\nprint(my_dict(non_empty_dict)) # Output: False (because the dictionary is not empty)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a dictionary is empty", "input_data": "my_dict({10})", "expected_output": "False", "assertion": "assert my_dict({10})==False", "assertion_": null}
{"problem_name": "588", "generated_code": "```python\ndef big_diff(nums):\n    # Check if the list is empty or contains only one element\n    if not nums or len(nums) == 1:\n        return 0\n    \n    # Initialize the minimum and maximum values with the first element of the list\n    min_val = max_val = nums[0]\n    \n    # Iterate through the list to find the minimum and maximum values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # Calculate the difference between the maximum and minimum values\n    return max_val - min_val\n\n# Example usage:\n# nums = [10, 3, 5, 6]\n# print(big_diff(nums))  # Output: 7\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the difference between largest and smallest value in a given list.", "input_data": "big_diff([1,2,3,4])", "expected_output": "3", "assertion": "assert big_diff([1,2,3,4]) == 3", "assertion_": null}
{"problem_name": "777", "generated_code": "```python\ndef find_sum(arr):\n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    for num in arr:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Calculate the sum of non-repeated elements\n    sum_non_repeated = sum(num for num, count in frequency.items() if count == 1)\n    \n    return sum_non_repeated\n\n# Example usage:\n# arr = [1, 2, 3, 2, 4, 5, 5]\n# print(find_sum(arr))  # Output should be 1 + 3 + 4 = 8\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of non-repeated elements in a given list.", "input_data": "find_sum([1,2,3,1,1,4,5,6])", "expected_output": "21", "assertion": "assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assertion_": null}
{"problem_name": "597", "generated_code": "```python\ndef find_kth(arr1, arr2, k):\n    # Check if arr1 is smaller than arr2\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # If arr1 is empty, return kth element from arr2\n    if not arr1:\n        return arr2[k - 1]\n    \n    # If k is 1, return minimum of first elements\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Divide k into two parts\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    \n    if arr1[i - 1] > arr2[j - 1]:\n        # If the element at the i-1 index of arr1 is greater than the element at the j-1 index of arr2,\n        # then we can safely ignore the first j elements of arr2 and adjust k.\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        # If the element at the i-1 index of arr1 is less than or equal to the element at the j-1 index of arr2,\n        # then we can safely ignore the first i elements of arr1 and adjust k.\n        return find_kth(arr1[i:], arr2, k - i)\n\n# Example usage:\n# arr1 = [2, 3, 6, 7, 9]\n# arr2 = [1, 4, 8, 10]\n# k = 5\n# print(find_kth(arr1, arr2, k))  # Output should be 6\n```\n\nThis function `find_kth` takes two sorted arrays `arr1` and `arr2` and an integer `k` and returns the kth smallest element in the union of the two arrays. The function uses a binary search approach to efficiently find the kth element.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find kth element from the given two sorted arrays.", "input_data": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)", "expected_output": "6", "assertion": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6", "assertion_": null}
{"problem_name": "640", "generated_code": "```python\ndef remove_parenthesis(s):\n    while '(' in s and ')' in s:\n        start = s.rfind('(')\n        end = s.find(')', start)\n        s = s[:start] + s[end+1:]\n    return s\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove the parenthesis and what is inbetween them from a string.", "input_data": "remove_parenthesis([\"python (chrome)\"])", "expected_output": "(\"python\")", "assertion": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assertion_": null}
{"problem_name": "574", "generated_code": "```python\nimport math\n\ndef surfacearea_cylinder(r, h):\n    # Surface area of a cylinder is 2*pi*r*h (side area) + 2*pi*r^2 (top and bottom area)\n    side_area = 2 * math.pi * r * h\n    top_bottom_area = 2 * math.pi * r**2\n    return side_area + top_bottom_area\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a cylinder.", "input_data": "surfacearea_cylinder(10,5)", "expected_output": "942.45", "assertion": "assert surfacearea_cylinder(10,5)==942.45", "assertion_": null}
{"problem_name": "452", "generated_code": "```python\ndef loss_amount(actual_cost, sale_amount):\n    # Calculate the loss amount\n    loss = actual_cost - sale_amount\n    # If there is a loss, return the loss amount, otherwise return 0\n    return loss if loss > 0 else 0\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "input_data": "loss_amount(1500,1200)", "expected_output": "0", "assertion": "assert loss_amount(1500,1200)==0", "assertion_": null}
{"problem_name": "580", "generated_code": "```python\ndef extract_even(test_tuple):\n    # Helper function to check if all elements in a tuple are even\n    def all_even(sub_tuple):\n        return all(item % 2 == 0 for item in sub_tuple if isinstance(item, int))\n\n    # Using recursion to handle nested tuples\n    def remove_uneven_elements(tup):\n        new_tuple = ()\n        for item in tup:\n            if isinstance(item, tuple):\n                # Recursively remove uneven elements from nested tuples\n                result = remove_uneven_elements(item)\n                if result:  # Only add non-empty tuples\n                    new_tuple += (result,)\n            elif isinstance(item, int) and item % 2 == 0:\n                # Add even integers to the new tuple\n                new_tuple += (item,)\n        return new_tuple\n\n    # Call the recursive function on the input tuple\n    return remove_uneven_elements(test_tuple)\n\n# Example usage:\nnested_tuple = (5, 6, (7, 8, 9), (10, 11, 12, (13, 14)), 15)\nprint(extract_even(nested_tuple))  # Output should be (6, (8,), (10, 12, (14,)))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove uneven elements in the nested mixed tuple.", "input_data": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))", "expected_output": "(4, (6, (2, 4)), 6, 8)", "assertion": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "assertion_": null}
{"problem_name": "401", "generated_code": "```python\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Using zip and a generator expression to add corresponding elements\n    result = tuple(tuple(sum(x) for x in zip(*tups)) for tups in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# Define two nested tuples\ntest_tup1 = ((3, 4), (5, 6), (8, 7))\ntest_tup2 = ((1, 6), (3, 8), (2, 3))\n\n# Call the function\nresult = add_nested_tuples(test_tup1, test_tup2)\n\n# Print the result\nprint(result)  # Output: ((4, 10), (8, 14), (10, 10))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "input_data": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((7, 10), (7, 14), (3, 10), (8, 13))", "assertion": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assertion_": null}
{"problem_name": "766", "generated_code": "```python\ndef pair_wise(l1):\n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate over the list using a range that stops before the last element\n    for i in range(len(l1) - 1):\n        # Append the pair of consecutive elements to the pairs list\n        pairs.append((l1[i], l1[i + 1]))\n    \n    # Return the list of pairs\n    return pairs\n\n# Example usage:\n# input_list = [1, 2, 3, 4]\n# print(pair_wise(input_list))\n# Output: [(1, 2), (2, 3), (3, 4)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to return a list of all pairs of consecutive items in a given list.", "input_data": "pair_wise([1,1,2,3,3,4,4,5])", "expected_output": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assertion": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assertion_": null}
{"problem_name": "124", "generated_code": "```python\nimport cmath\n\ndef angle_complex(a, b):\n    # Create a complex number from the given a and b\n    complex_number = complex(a, b)\n    \n    # Use the phase function from cmath to get the angle (in radians)\n    angle_radians = cmath.phase(complex_number)\n    \n    # Return the angle\n    return angle_radians\n\n# Example usage:\n# angle = angle_complex(1, 1)\n# print(angle)  # Output will be 0.7853981633974483 which is π/4 radians\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the angle of a complex number.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "460", "generated_code": "```python\ndef Extract(lst):\n    return [item[0] for item in lst]\n\n# Example usage:\n# sublists = [[1, 2], [3, 4], [5, 6]]\n# first_elements = Extract(sublists)\n# print(first_elements)  # Output: [1, 3, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to get the first element of each sublist.", "input_data": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])", "expected_output": "[1, 3, 6]", "assertion": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assertion_": null}
{"problem_name": "611", "generated_code": "```python\ndef max_of_nth(test_list, N):\n    # Extract the Nth column from the matrix\n    nth_column = [row[N] for row in test_list if len(row) > N]\n    # Find the maximum value in the Nth column\n    max_value = max(nth_column)\n    return max_value\n\n# Example usage:\n# matrix = [\n#     [1, 2, 3],\n#     [4, 5, 6],\n#     [7, 8, 9]\n# ]\n# N = 2\n# print(max_of_nth(matrix, N))  # Output: 9\n```\nThis function will return the maximum value in the Nth column of the given matrix. Note that the function assumes that the input matrix is well-formed (i.e., each row has at least N+1 elements). If a row does not have an Nth element, it is ignored in the calculation.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "input_data": "max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)", "expected_output": "19", "assertion": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assertion_": null}
{"problem_name": "399", "generated_code": "```python\ndef bitwise_xor(test_tup1, test_tup2):\n    # Using zip() + generator expression + tuple()\n    # Bitwise XOR of tuples\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\n# test_tup1 = (5, 6, 7)\n# test_tup2 = (1, 2, 3)\n# print(bitwise_xor(test_tup1, test_tup2))  # Output: (4, 4, 4)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "input_data": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(15, 6, 5, 10)", "assertion": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assertion_": null}
{"problem_name": "605", "generated_code": "```python\ndef prime_num(num):\n    # Check if num is less than 2, which is not a prime number\n    if num < 2:\n        return False\n    # Check for factors from 2 to the square root of num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given integer is a prime number.", "input_data": "prime_num(13)", "expected_output": "True", "assertion": "assert prime_num(13)==True", "assertion_": null}
{"problem_name": "413", "generated_code": "```python\ndef extract_nth_element(list_of_tuples, n):\n    # Check if the list is empty or n is out of range\n    if not list_of_tuples or n < 0 or (list_of_tuples and n >= len(list_of_tuples[0])):\n        return \"Invalid input\"\n    \n    # Extract the nth element from each tuple\n    return [tup[n] for tup in list_of_tuples]\n\n# Example usage:\n# list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n# n = 1\n# print(extract_nth_element(list_of_tuples, n))  # Output: [2, 4, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the nth element from a given list of tuples.", "input_data": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)", "expected_output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assertion_": null}
{"problem_name": "437", "generated_code": "```python\ndef remove_odd(str1):\n    # Using string slicing to remove odd characters\n    return str1[::2]\n\n# Example usage:\n# Input: \"abcdef\"\n# Output: \"ace\"\nprint(remove_odd(\"abcdef\"))  # Output should be \"ace\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove odd characters in a string.", "input_data": "remove_odd(\"python\")", "expected_output": "(\"yhn\")", "assertion": "assert remove_odd(\"python\")==(\"yhn\")", "assertion_": null}
{"problem_name": "167", "generated_code": "```python\ndef next_power_of_2(n):\n    # Start with a power of 2 equal to 1\n    power_of_2 = 1\n    # Keep doubling until it's greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2\n\n# Example usage:\n# print(next_power_of_2(5))  # Output: 8\n# print(next_power_of_2(17)) # Output: 32\n# print(next_power_of_2(32)) # Output: 32\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the smallest power of 2 greater than or equal to n.", "input_data": "next_power_of_2(0)", "expected_output": "1", "assertion": "assert next_power_of_2(0) == 1", "assertion_": null}
{"problem_name": "456", "generated_code": "```python\ndef reverse_string_list(stringlist):\n    # Reverse each string in the list and return the new list\n    return [s[::-1] for s in stringlist]\n\n# Example usage:\n# strings = [\"hello\", \"world\", \"python\"]\n# reversed_strings = reverse_string_list(strings)\n# print(reversed_strings)  # Output: ['olleh', 'dlrow', 'nohtyp']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to reverse each string in a given list of string values.", "input_data": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "expected_output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assertion": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assertion_": null}
{"problem_name": "229", "generated_code": "```python\ndef re_arrange_array(arr, n):\n    # Separate negative and positive elements while preserving their order\n    negative_elements = [x for x in arr[:n] if x < 0]\n    positive_elements = [x for x in arr[:n] if x >= 0]\n    \n    # Concatenate the negative and positive elements\n    rearranged_part = negative_elements + positive_elements\n    \n    # Replace the first n elements with the rearranged part\n    arr[:n] = rearranged_part\n    \n    return arr\n\n# Example usage:\n# arr = [1, -2, 3, -4, 5, -6, 7, 8]\n# n = 5\n# print(re_arrange_array(arr, n))  # Output should be [-2, -4, 1, 3, 5, -6, 7, 8]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "input_data": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)", "expected_output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assertion": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assertion_": null}
{"problem_name": "576", "generated_code": "```python\ndef is_Sub_Array(A, B):\n    # Get the length of both lists\n    len_A = len(A)\n    len_B = len(B)\n    \n    # Initialize starting index for A and B\n    i = 0\n    j = 0\n    \n    # Iterate while index of A is less than its length\n    while i < len_A and j < len_B:\n        # If the element in A matches the element in B\n        if A[i] == B[j]:\n            # Move to the next element in both A and B\n            i += 1\n            j += 1\n            \n            # If we've reached the end of A, it means A is a sublist of B\n            if i == len_A:\n                return True\n        else:\n            # If there's a mismatch, reset the index of A\n            # and move to the next starting point in B\n            i = 0\n            j += 1\n    \n    # If we've reached here, A is not a sublist of B\n    return False\n\n# Example usage:\n# A is a sublist of B\nprint(is_Sub_Array([1, 2, 3], [0, 1, 2, 3, 4]))  # Output: True\n\n# A is not a sublist of B\nprint(is_Sub_Array([1, 2, 4], [0, 1, 2, 3, 4]))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether a list is sublist of another or not.", "input_data": "is_Sub_Array([1,4,3,5],[1,2])", "expected_output": "False", "assertion": "assert is_Sub_Array([1,4,3,5],[1,2]) == False", "assertion_": null}
{"problem_name": "625", "generated_code": "```python\ndef swap_list(new_list):\n    # Check if the list has at least two elements to swap\n    if len(new_list) > 1:\n        # Swap the first and last elements\n        new_list[0], new_list[-1] = new_list[-1], new_list[0]\n    return new_list\n\n# Example usage:\n# my_list = [12, 35, 9, 56, 24]\n# print(swap_list(my_list))  # Output should be [24, 35, 9, 56, 12]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to interchange the first and last element in a given list.", "input_data": "swap_List([1,2,3])", "expected_output": "[3,2,1]", "assertion": "assert swap_List([1,2,3]) == [3,2,1]", "assertion_": null}
{"problem_name": "270", "generated_code": "```python\ndef sum_even_and_even_index(arr):\n    # Initialize the sum\n    even_sum = 0\n    \n    # Loop through the list, considering only even indices\n    for i in range(0, len(arr), 2):\n        # Check if the element at the even index is also an even number\n        if arr[i] % 2 == 0:\n            # Add it to the sum\n            even_sum += arr[i]\n    \n    # Return the final sum\n    return even_sum\n\n# Example usage:\n# arr = [1, 3, 5, 8, 10, 13, 18, 26, 12]\n# print(sum_even_and_even_index(arr))  # Output should be 10 + 18 + 12 = 40\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of even numbers at even positions of a list.", "input_data": "sum_even_and_even_index([5, 6, 12, 1, 18, 8])", "expected_output": "30", "assertion": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assertion_": null}
{"problem_name": "280", "generated_code": "```python\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "input_data": "sequential_search([11,23,58,31,56,77,43,12,65,19],31)", "expected_output": "(True, 3)", "assertion": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assertion_": null}
{"problem_name": "453", "generated_code": "```python\ndef sumofFactors(n):\n    # Initialize sum of even factors\n    sum_even_factors = 0\n    \n    # Iterate through all factors of n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                sum_even_factors += i\n                \n    return sum_even_factors\n\n# Example usage:\n# n = 10, even factors are 2 and 10, so the sum is 12\nprint(sumofFactors(10))  # Output: 12\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of even factors of a number.", "input_data": "sumofFactors(18)", "expected_output": "26", "assertion": "assert sumofFactors(18) == 26", "assertion_": null}
{"problem_name": "390", "generated_code": "```python\ndef add_string(list_, string):\n    # Apply the format string to all elements in the list\n    return [string.format(item) for item in list_]\n```\n\n# Example usage:\n# list_ = [1, 2, 3]\n# string = \"Number: {}\"\n# The function should return [\"Number: 1\", \"Number: 2\", \"Number: 3\"]", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to apply a given format string to all of the elements in a list.", "input_data": "add_string([1,2,3,4],'temp{0}')", "expected_output": "['temp1', 'temp2', 'temp3', 'temp4']", "assertion": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assertion_": null}
{"problem_name": "103", "generated_code": "```python\ndef eulerian_num(n, m):\n    # Create a table to store the Eulerian numbers\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(0, m + 1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    # Return the Eulerian number a(n, m)\n    return dp[n][m]\n\n# Example usage:\n# print(eulerian_num(3, 1))  # Output: 4\n# print(eulerian_num(4, 1))  # Output: 11\n```\n\nThis function `eulerian_num(n, m)` calculates the Eulerian number `a(n, m)` using dynamic programming. The Eulerian number `a(n, m)` is the number of permutations of the numbers from 1 to `n` in which exactly `m` elements are greater than the previous element. The function creates a 2D list `dp` to store the Eulerian numbers, initializes the base case, and then fills the table using the recurrence relation. Finally, it returns the Eulerian number `a(n, m)`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the Eulerian number a(n, m).", "input_data": "eulerian_num(3, 1)", "expected_output": "4", "assertion": "assert eulerian_num(3, 1) == 4", "assertion_": null}
{"problem_name": "307", "generated_code": "It seems like there might be a misunderstanding in the problem statement. In Python, tuples are immutable, and the term \"colon\" doesn't have a specific meaning in the context of tuples. However, if by \"colon\" you mean slicing a tuple (which uses a colon in Python syntax), then the function can be written to return a slice of the tuple from index `m` to `n`.\n\nHere's how you could write the function:\n\n```python\ndef colon_tuplex(tuplex, m, n):\n    # Return a slice of the tuple from index m to n\n    return tuplex[m:n]\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6)\nprint(colon_tuplex(my_tuple, 1, 4))  # Output: (2, 3, 4)\n```\n\nThis function takes a tuple `tuplex` and two integers `m` and `n`, and returns a new tuple that includes the elements from index `m` up to, but not including, index `n`. If `m` or `n` are out of bounds, Python's slicing mechanism handles it gracefully by returning an appropriate slice of the tuple.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to get a colon of a tuple.", "input_data": "colon_tuplex((\"HELLO\", 5, [], True) ,2,50)", "expected_output": "(\"HELLO\", 5, [50], True)", "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assertion_": null}
{"problem_name": "140", "generated_code": "```python\ndef extract_singly(test_list):\n    # Using set comprehension to flatten the list of lists\n    # and remove duplicates by converting it into a set\n    return {elem for sublist in test_list for elem in sublist}\n\n# Example usage:\n# test_list = [[5, 6, 7], [3, 4, 5], [5, 6]]\n# print(extract_singly(test_list))  # Output: {3, 4, 5, 6, 7}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten the list of lists into a single set of numbers.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "133", "generated_code": "```python\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n# Example usage:\n# nums = [1, -2, 3, -4, 5]\n# print(sum_negativenum(nums))  # Output should be -6 (-2 + -4)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "input_data": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])", "expected_output": "-32", "assertion": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assertion_": null}
{"problem_name": "273", "generated_code": "```python\ndef subtract_elements(test_tup1, test_tup2):\n    # Using zip() to pair up elements of both tuples and then subtract them\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# test_tup1 = (6, 4, 8)\n# test_tup2 = (1, 2, 3)\n# print(subtract_elements(test_tup1, test_tup2))  # Output: (5, 2, 5)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "input_data": "substract_elements((10, 4, 5), (2, 5, 18))", "expected_output": "(8, -1, -13)", "assertion": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assertion_": null}
{"problem_name": "562", "generated_code": "```python\ndef Find_Max_Length(lst):\n    # Initialize the maximum length to 0\n    max_length = 0\n    \n    # Iterate through the list to find the longest sublist\n    for sublist in lst:\n        # Check if the current element is a list\n        if isinstance(sublist, list):\n            # Update the maximum length if the current sublist is longer\n            max_length = max(max_length, len(sublist))\n    \n    return max_length\n\n# Example usage:\n# lst = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n# print(Find_Max_Length(lst))  # Output: 4\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the longest sublists.", "input_data": "Find_Max_Length([[1],[1,4],[5,6,7,8]])", "expected_output": "4", "assertion": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4", "assertion_": null}
{"problem_name": "598", "generated_code": "```python\ndef armstrong_number(number):\n    # Convert the number to a string to easily iterate over its digits\n    num_str = str(number)\n    num_length = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number's length\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    \n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n\n# Example usage:\n# print(armstrong_number(153))  # Should return True, because 1^3 + 5^3 + 3^3 = 153\n# print(armstrong_number(123))  # Should return False, because 1^3 + 2^3 + 3^3 != 123\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is armstrong or not.", "input_data": "armstrong_number(153)", "expected_output": "True", "assertion": "assert armstrong_number(153)==True", "assertion_": null}
{"problem_name": "242", "generated_code": "```python\ndef count_charac(str1):\n    return len(str1)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the total number of characters in a string.", "input_data": "count_charac(\"python programming\")", "expected_output": "18", "assertion": "assert count_charac(\"python programming\")==18", "assertion_": null}
{"problem_name": "432", "generated_code": "```python\ndef median_trapezium(base1, base2, height):\n    # The median (also known as the midsegment or midline) of a trapezium is the segment that connects the midpoints of the non-parallel sides.\n    # The length of the median is the average of the lengths of the two bases.\n    median_length = (base1 + base2) / 2\n    return median_length\n\n# Example usage:\n# base1 = 10, base2 = 6, height = 5\n# median_length should be 8\nprint(median_trapezium(10, 6, 5))  # Output: 8.0\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median length of a trapezium.", "input_data": "median_trapezium(15,25,35)", "expected_output": "20", "assertion": "assert median_trapezium(15,25,35)==20", "assertion_": null}
{"problem_name": "769", "generated_code": "```python\ndef Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n\n# Example usage:\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 5, 6]\n# print(Diff(list1, list2))  # Output: [3, 4, 5, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to get the difference between two lists.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "418", "generated_code": "```python\ndef Find_Max(lst):\n    # Initialize the maximum length and the element with maximum length\n    max_length = -1\n    max_element = None\n    \n    # Iterate through the list to find the element with maximum length\n    for element in lst:\n        # Check if the current element's length is greater than the maximum length found so far\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    # Return the element with maximum length\n    return max_element\n\n# Example usage:\n# lst = [\"apple\", \"banana\", \"cherry\", \"date\"]\n# print(Find_Max(lst))  # Output: \"banana\"\n```\n\nPlease note that if there are multiple elements with the same maximum length, this function will return the first one it encounters. If you need to handle this case differently, you may need to modify the function accordingly.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the element of a list having maximum length.", "input_data": "Find_Max([['A'],['A','B'],['A','B','C']])", "expected_output": "['A','B','C']", "assertion": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assertion_": null}
{"problem_name": "585", "generated_code": "```python\ndef expensive_items(items, n):\n    # Sort the items by their price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_items[:n]\n\n# Example usage:\n# Assuming each item is a dictionary with a 'name' and a 'price'\nitems = [\n    {'name': 'Laptop', 'price': 1200},\n    {'name': 'Smartphone', 'price': 800},\n    {'name': 'Headphones', 'price': 150},\n    {'name': 'Monitor', 'price': 300},\n    {'name': 'Keyboard', 'price': 100}\n]\n\n# Find the 3 most expensive items\nmost_expensive = expensive_items(items, 3)\nprint(most_expensive)  # Output should be the items for Laptop, Smartphone, and Monitor\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n most expensive items in a given dataset.", "input_data": "expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)", "expected_output": "[{'name': 'Item-2', 'price': 555.22}]", "assertion": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]", "assertion_": null}
{"problem_name": "239", "generated_code": "```python\ndef get_total_number_of_sequences(m, n):\n    # Base case: If n is 0, there's only one sequence: the empty sequence\n    if n == 0:\n        return 1\n    # Base case: If m is 0, no sequence can be formed\n    if m == 0:\n        return 0\n    \n    # Initialize a variable to store the total number of sequences\n    total_sequences = 0\n    \n    # Iterate through all possible starting values for the sequence\n    for start in range(1, m + 1):\n        # Recursively find the number of sequences that can be formed\n        # with the remaining length (n - 1) and the next element being\n        # at least twice the current starting value\n        total_sequences += get_total_number_of_sequences(m // 2, n - 1)\n    \n    return total_sequences\n\n# Example usage:\n# m = 5, n = 2\n# Possible sequences: (1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5)\n# Total number of sequences: 6\nprint(get_total_number_of_sequences(5, 2))  # Output should be 6\n```\n\nPlease note that the provided function uses a recursive approach, which may not be efficient for large values of `m` and `n` due to the exponential growth of recursive calls. For larger values, a dynamic programming approach or memoization would be more appropriate to avoid redundant calculations.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "input_data": "get_total_number_of_sequences(10, 4)", "expected_output": "4", "assertion": "assert get_total_number_of_sequences(10, 4) == 4", "assertion_": null}
{"problem_name": "734", "generated_code": "```python\ndef sum_Of_Subarray_Prod(arr):\n    # Initialize result\n    result = 0\n    n = len(arr)\n    \n    # Compute sum of subarray products\n    for i in range(n):\n        # Contribution of the element arr[i] to the sum is equal to\n        # arr[i] * (number of subarrays it is part of)\n        # Each element arr[i] appears in (i + 1) * (n - i) subarrays\n        result += arr[i] * (i + 1) * (n - i)\n    \n    # Return the final result\n    return result\n\n# Example usage:\n# arr = [1, 2, 3]\n# print(sum_Of_Subarray_Prod(arr))  # Output: 20\n```\n\nThis function calculates the sum of products of all possible subarrays of a given list by iterating through each element and calculating its contribution to the sum based on the number of subarrays it is part of. Each element `arr[i]` is part of `(i + 1) * (n - i)` subarrays, where `n` is the length of the array.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "input_data": "sum_Of_Subarray_Prod([1,2,3])", "expected_output": "20", "assertion": "assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assertion_": null}
{"problem_name": "429", "generated_code": "```python\ndef and_tuples(test_tup1, test_tup2):\n    # Using zip() + generator expression + tuple()\n    # to perform bitwise and of two tuples\n    res = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    \n    return res\n\n# Example usage:\n# test_tup1 = (5, 7, 9, 4)\n# test_tup2 = (12, 3, 10, 1)\n# print(and_tuples(test_tup1, test_tup2))  # Output: (4, 3, 8, 0)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the elementwise and tuples from the given two tuples.", "input_data": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(0, 0, 2, 1)", "assertion": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assertion_": null}
{"problem_name": "569", "generated_code": "```python\ndef sort_sublists(list1):\n    # Iterate through each sublist in the list and sort it\n    for sublist in list1:\n        sublist.sort()\n    return list1\n\n# Example usage:\n# sorted_list = sort_sublists([[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]])\n# print(sorted_list)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion_": null}
{"problem_name": "135", "generated_code": "```python\ndef hexagonal_num(n):\n    # The formula for the nth hexagonal number is n * (2n - 1)\n    return n * (2 * n - 1)\n\n# Example usage:\n# Get the 3rd hexagonal number\nprint(hexagonal_num(3))  # Output should be 15\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth hexagonal number.", "input_data": "hexagonal_num(10)", "expected_output": "190", "assertion": "assert hexagonal_num(10) == 190", "assertion_": null}
{"problem_name": "412", "generated_code": "```python\ndef remove_odd(l):\n    # Use list comprehension to filter out odd numbers\n    return [num for num in l if num % 2 == 0]\n\n# Example usage:\n# my_list = [1, 2, 3, 4, 5, 6]\n# print(remove_odd(my_list))  # Output: [2, 4, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove odd numbers from a given list.", "input_data": "remove_odd([1,2,3])", "expected_output": "[2]", "assertion": "assert remove_odd([1,2,3]) == [2]", "assertion_": null}
{"problem_name": "232", "generated_code": "```python\ndef larg_nnum(list1, n):\n    # Sort the list in descending order\n    sorted_list = sorted(list1, reverse=True)\n    # Return the first n elements from the sorted list\n    return sorted_list[:n]\n\n# Example usage:\n# list1 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n# n = 3\n# print(larg_nnum(list1, n))  # Output: [9, 8, 7]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "441", "generated_code": "```python\ndef surfacearea_cube(l):\n    # The surface area of a cube is 6 times one of its sides squared\n    return 6 * (l ** 2)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a cube of a given size.", "input_data": "surfacearea_cube(5)", "expected_output": "150", "assertion": "assert surfacearea_cube(5)==150", "assertion_": null}
{"problem_name": "563", "generated_code": "```python\nimport re\n\ndef extract_values(text):\n    # Use regular expression to find all occurrences of text between quotation marks\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\n# text = 'He said, \"Hello, how are you?\" and she replied, \"I am fine, thank you.\"'\n# values = extract_values(text)\n# print(values)  # Output: ['Hello, how are you?', 'I am fine, thank you.']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract values between quotation marks from a string.", "input_data": "extract_values('\"Python\", \"PHP\", \"Java\"')", "expected_output": "['Python', 'PHP', 'Java']", "assertion": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "assertion_": null}
{"problem_name": "74", "generated_code": "```python\ndef is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True\n\n# Example usage:\n# colors = [\"red\", \"green\", \"green\"]\n# patterns = [\"a\", \"b\", \"b\"]\n# print(is_samepatterns(colors, patterns))  # Output: True\n\n# colors = [\"red\", \"green\", \"greenn\"]\n# patterns = [\"a\", \"b\", \"b\"]\n# print(is_samepatterns(colors, patterns))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether it follows the sequence given in the patterns array.", "input_data": "is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])", "expected_output": "True", "assertion": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assertion_": null}
{"problem_name": "792", "generated_code": "```python\ndef count_list(input_list):\n    # Initialize a counter for the number of lists\n    list_count = 0\n    \n    # Iterate over each item in the input list\n    for item in input_list:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            # Increment the counter if it is a list\n            list_count += 1\n    \n    # Return the final count of lists\n    return list_count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of lists in a given number of lists.", "input_data": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "4", "assertion": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assertion_": null}
{"problem_name": "265", "generated_code": "```python\ndef list_split(S, step):\n    # Check if step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    \n    # Split the list for every nth element\n    return [S[i:i + step] for i in range(0, len(S), step)]\n\n# Example usage:\n# S = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# step = 3\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "input_data": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)", "expected_output": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assertion": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assertion_": null}
{"problem_name": "427", "generated_code": "```python\ndef change_date_format(dt):\n    # Split the input date by '-'\n    parts = dt.split('-')\n    # Reorder the parts to dd-mm-yyyy format\n    new_format = parts[2] + '-' + parts[1] + '-' + parts[0]\n    return new_format\n\n# Example usage:\n# date = \"2023-04-01\"\n# print(change_date_format(date))  # Output: \"01-04-2023\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "input_data": "change_date_format(\"2026-01-02\")", "expected_output": "'02-01-2026'", "assertion": "assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assertion_": null}
{"problem_name": "750", "generated_code": "```python\ndef add_tuple(test_list, test_tup):\n    # Adding tuple to the list\n    test_list.append(test_tup)\n    return test_list\n\n# Example usage:\n# my_list = [1, 2, 3]\n# my_tuple = (4, 5)\n# result = add_tuple(my_list, my_tuple)\n# print(result)  # Output: [1, 2, 3, (4, 5)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to add the given tuple to the given list.", "input_data": "add_tuple([5, 6, 7], (9, 10))", "expected_output": "[5, 6, 7, 9, 10]", "assertion": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assertion_": null}
{"problem_name": "751", "generated_code": "```python\ndef check_min_heap(arr):\n    n = len(arr)\n    \n    # Start from root and go till the last internal node\n    for i in range((n - 2) // 2 + 1):\n        # If left child is greater, return false\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # If right child is greater, return false\n        # Check if right child exists before comparing\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n\n# Example usage:\n# arr = [10, 15, 14, 25, 30]\n# print(check_min_heap(arr)) # Should return True if arr is a min heap\n```\nThis function checks if the given array `arr` represents a min heap. It iterates over all non-leaf nodes and checks if the current node is less than or equal to its children. If any child is smaller than the current node, the function returns `False`, indicating that the array does not represent a min heap. If the loop completes without finding any such case, the function returns `True`, indicating that the array is a min heap.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "input_data": "check_min_heap([1, 2, 3, 4, 5, 6])", "expected_output": "True", "assertion": "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assertion_": null}
{"problem_name": "474", "generated_code": "```python\ndef replace_char(str1, ch, newch):\n    # Replace all occurrences of 'ch' with 'newch' in the string 'str1'\n    return str1.replace(ch, newch)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace characters in a string.", "input_data": "replace_char(\"polygon\",'y','l')", "expected_output": "(\"pollgon\")", "assertion": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assertion_": null}
{"problem_name": "164", "generated_code": "```python\ndef sum_of_divisors(n):\n    # Initialize sum of divisors to 1 because 1 is a divisor of all numbers\n    sum_divisors = 1\n    # Loop from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            # If divisors are equal, add only once\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors\n\ndef are_equivalent(num1, num2):\n    # Calculate the sum of divisors for both numbers\n    sum1 = sum_of_divisors(num1)\n    sum2 = sum_of_divisors(num2)\n    # Check if the sums are equal\n    return sum1 == sum2\n\n# Example usage:\n# print(are_equivalent(10, 20))  # Should return False\n# print(are_equivalent(6, 28))   # Should return False\n# print(are_equivalent(15, 9))   # Should return True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to determine if the sum of the divisors of two integers are the same.", "input_data": "are_equivalent(36, 57)", "expected_output": "False", "assertion": "assert are_equivalent(36, 57) == False", "assertion_": null}
{"problem_name": "765", "generated_code": "```python\ndef is_polite(n):\n    # Function to check if a number is a power of 2\n    def is_power_of_2(num):\n        return (num & (num - 1)) == 0\n\n    # Function to find the nth polite number\n    def nth_polite_number(nth):\n        count = 0\n        num = 0\n        while count < nth:\n            num += 1\n            if not is_power_of_2(num):\n                count += 1\n        return num\n\n    return nth_polite_number(n)\n```\n\nThis function `is_polite` takes an integer `n` and returns the nth polite number. A polite number is defined as a number that can be expressed as the sum of two or more consecutive positive integers. The function `is_power_of_2` is a helper function used to check if a number is a power of 2, as numbers that are powers of 2 cannot be expressed as the sum of two or more consecutive positive integers and are therefore not polite numbers. The function `nth_polite_number` iterates through the natural numbers, skipping those that are powers of 2, until it finds the nth polite number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "input_data": "is_polite(7)", "expected_output": "11", "assertion": "assert is_polite(7) == 11", "assertion_": null}
{"problem_name": "297", "generated_code": "```python\ndef flatten_list(list1):\n    # This function takes a nested list and returns a flat list\n    \n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Helper function to flatten the list\n    def flatten(item):\n        # If the item is a list, iterate through its elements\n        if isinstance(item, list):\n            for subitem in item:\n                flatten(subitem)\n        else:\n            # If the item is not a list, append it to the flat_list\n            flat_list.append(item)\n    \n    # Start flattening the input list\n    flatten(list1)\n    \n    # Return the flattened list\n    return flat_list\n\n# Example usage:\n# nested_list = [[1, 2, [3, 4]], [5, 6], 7]\n# print(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5, 6, 7]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten a given nested list structure.", "input_data": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "expected_output": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assertion": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assertion_": null}
{"problem_name": "284", "generated_code": "```python\ndef check_element(lst, element):\n    # Check if all items in the list are equal to the given element\n    return all(item == element for item in lst)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "input_data": "check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')", "expected_output": "False", "assertion": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assertion_": null}
{"problem_name": "635", "generated_code": "```python\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(iterable):\n    n = len(iterable)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, i, 0)\n\n    return iterable\n\n# Example usage:\n# unsorted_list = [12, 11, 13, 5, 6, 7]\n# sorted_list = heap_sort(unsorted_list)\n# print(sorted_list)  # Output: [5, 6, 7, 11, 12, 13]\n```\nThis function `heap_sort` takes an iterable (like a list) and sorts it in ascending order using the heap sort algorithm.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort the given list.", "input_data": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assertion": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assertion_": null}
{"problem_name": "398", "generated_code": "```python\ndef sum_of_digits(nums):\n    # Initialize an empty list to store the sums\n    sums = []\n    \n    # Iterate over each number in the given list\n    for num in nums:\n        # Convert the number to a string to iterate over each digit\n        str_num = str(num)\n        # Calculate the sum of digits for the current number\n        digit_sum = sum(int(digit) for digit in str_num)\n        # Append the sum to the sums list\n        sums.append(digit_sum)\n    \n    # Return the list of sums\n    return sums\n\n# Example usage:\n# nums = [123, 456, 789]\n# print(sum_of_digits(nums))  # Output: [6, 15, 24]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to compute the sum of digits of each number of a given list.", "input_data": "sum_of_digits([10,2,56])", "expected_output": "14", "assertion": "assert sum_of_digits([10,2,56])==14", "assertion_": null}
{"problem_name": "560", "generated_code": "```python\ndef union_elements(test_tup1, test_tup2):\n    # Combine the tuples and convert to a set to remove duplicates\n    result_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a tuple and sort it\n    result_tuple = tuple(sorted(result_set))\n    return result_tuple\n\n# Example usage:\n# test_tup1 = (1, 5, 7, 9)\n# test_tup2 = (9, 4, 5)\n# print(union_elements(test_tup1, test_tup2))  # Output: (1, 4, 5, 7, 9)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the union of the elements of two given tuples and output them in sorted order.", "input_data": "union_elements((3, 4, 5, 6),(5, 7, 4, 10) )", "expected_output": "(3, 4, 5, 6, 7, 10)", "assertion": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)", "assertion_": null}
{"problem_name": "558", "generated_code": "```python\ndef digit_distance_nums(n1, n2):\n    # Convert the integers to strings to be able to iterate through each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter string with zeros on the left if the numbers have different lengths\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of the absolute differences of each digit\n    digit_distance_sum = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2))\n    \n    return digit_distance_sum\n\n# Example usage:\n# The per-digit differences are 2 (5-3), 1 (4-3), and 0 (2-2), so the sum is 2 + 1 + 0 = 3.\nprint(digit_distance_nums(542, 332))  # Output: 3\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the per-digit difference between two integers.", "input_data": "digit_distance_nums(1,2)", "expected_output": "1", "assertion": "assert digit_distance_nums(1,2) == 1", "assertion_": null}
{"problem_name": "106", "generated_code": "```python\ndef add_lists(test_list, test_tup):\n    # Convert tuple to list and append the test_list\n    result = list(test_tup) + test_list\n    # Convert the result back to tuple\n    return tuple(result)\n\n# Example usage:\ntest_list = [5, 6, 7]\ntest_tup = (1, 2, 3, 4)\nprint(add_lists(test_list, test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to append the given list to the given tuples.", "input_data": "add_lists([5, 6, 7], (9, 10))", "expected_output": "(9, 10, 5, 6, 7)", "assertion": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assertion_": null}
{"problem_name": "311", "generated_code": "```python\ndef set_left_most_unset_bit(n):\n    # If n is 0, then the left most unset bit is the least significant bit\n    if n == 0:\n        return 1\n    \n    # Create a mask with all bits set\n    mask = ~0\n    \n    # Shift the mask to the left until we find the left most unset bit\n    while n & mask:\n        mask <<= 1\n    \n    # Set the left most unset bit\n    return n | ~mask\n\n# Example usage:\n# n = 18 (binary: 10010), the left most unset bit is the third bit from the left\n# After setting it, n should become 26 (binary: 11010)\nprint(set_left_most_unset_bit(18))  # Output: 26\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to set the left most unset bit.", "input_data": "set_left_most_unset_bit(10)", "expected_output": "14", "assertion": "assert set_left_most_unset_bit(10) == 14", "assertion_": null}
{"problem_name": "283", "generated_code": "```python\ndef validate(n):\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    \n    # Iterate over each digit in the string\n    for digit in str_n:\n        # If the digit is already in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            freq_dict[digit] = 1\n    \n    # Iterate over the dictionary to check the condition\n    for digit, freq in freq_dict.items():\n        # If the frequency of any digit is greater than the digit itself (as an integer),\n        # return False\n        if freq > int(digit):\n            return False\n    \n    # If the loop completes without returning False, the condition is satisfied for all digits\n    return True\n\n# Example usage:\nprint(validate(112233))  # True, because the frequency of each digit is equal to the digit itself\nprint(validate(123456))  # True, because the frequency of each digit (1) is less than or equal to the digit itself\nprint(validate(122333))  # False, because the frequency of '3' is 3 which is not less than or equal to 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "input_data": "validate(1234)", "expected_output": "True", "assertion": "assert validate(1234) == True", "assertion_": null}
{"problem_name": "170", "generated_code": "```python\ndef sum_range_list(list1, m, n):\n    # Ensure that m is not greater than n\n    if m > n:\n        m, n = n, m\n    \n    # Ensure that m and n are within the bounds of the list\n    m = max(0, m)\n    n = min(n, len(list1) - 1)\n    \n    # Calculate the sum of the specified range\n    return sum(list1[m:n+1])\n\n# Example usage:\n# list1 = [1, 2, 3, 4, 5]\n# m = 1\n# n = 3\n# The function should return 9, because 2 + 3 + 4 = 9\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "input_data": "sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)", "expected_output": "29", "assertion": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assertion_": null}
{"problem_name": "71", "generated_code": "```python\ndef comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3  # shrink factor\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True  # If we are at the last comb, we are done\n\n        # A single \"comb\" over the input list\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                # Swap values\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n\n# Example usage:\n# nums = [64, 34, 25, 12, 22, 11, 90]\n# sorted_nums = comb_sort(nums)\n# print(sorted_nums)\n```\nThis function `comb_sort` takes a list of elements `nums` and sorts them in ascending order using the comb sort algorithm. The comb sort is an improvement on the bubble sort algorithm, where elements are compared and swapped over a larger gap, which is reduced in size each iteration until it becomes 1. The shrink factor determines the rate at which the gap size is reduced.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of elements.", "input_data": "comb_sort([5, 15, 37, 25, 79])", "expected_output": "[5, 15, 25, 37, 79]", "assertion": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assertion_": null}
{"problem_name": "796", "generated_code": "```python\ndef return_sum(dict):\n    # Initialize the sum to zero\n    sum_total = 0\n    \n    # Iterate over all the values in the dictionary\n    for value in dict.values():\n        # Add the value to the sum_total\n        sum_total += value\n    \n    # Return the sum of all items\n    return sum_total\n\n# Example usage:\n# my_dict = {'a': 100, 'b': 200, 'c': 300}\n# print(return_sum(my_dict))  # Output: 600\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write function to find the sum of all items in the given dictionary.", "input_data": "return_sum({'a': 100, 'b':200, 'c':300})", "expected_output": "600", "assertion": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assertion_": null}
{"problem_name": "105", "generated_code": "```python\ndef count(lst):\n    return sum(1 for element in lst if element is True)\n\n# Example usage:\n# lst = [True, False, True, True, False]\n# print(count(lst))  # Output: 3\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count true booleans in the given list.", "input_data": "count([True,False,True])", "expected_output": "2", "assertion": "assert count([True,False,True]) == 2", "assertion_": null}
{"problem_name": "84", "generated_code": "```python\ndef sequence(n):\n    # Base cases\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize the sequence with base values\n    newman_conway_seq = [0, 1, 1]\n\n    # Calculate the sequence up to the nth number\n    for i in range(3, n + 1):\n        newman_conway_seq.append(newman_conway_seq[newman_conway_seq[i - 1]] + newman_conway_seq[i - newman_conway_seq[i - 1]])\n\n    # Return the nth number in the sequence\n    return newman_conway_seq[n]\n\n# Example usage:\n# To find the 10th number in the newman conway sequence\nprint(sequence(10))  # Output should be the 10th number in the sequence\n```\n\nThis function calculates the Newman-Conway sequence iteratively and returns the nth number in the sequence. The sequence is defined as follows:\n\nP(1) = 1\nP(2) = 1\nfor all n > 2, P(n) = P(P(n - 1)) + P(n - P(n - 1))\n\nThe function handles the base cases for n = 1 and n = 2, then iteratively builds the sequence up to the nth number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth number in the newman conway sequence.", "input_data": "sequence(10)", "expected_output": "6", "assertion": "assert sequence(10) == 6", "assertion_": null}
{"problem_name": "410", "generated_code": "```python\ndef min_val(listval):\n    # Initialize a variable to store the minimum value\n    # Start with None to handle an empty list or a list without any numeric values\n    min_value = None\n    \n    # Iterate over each element in the list\n    for val in listval:\n        # Check if the element is a number (int or float)\n        if isinstance(val, (int, float)):\n            # If min_value is None or the element is less than the current min_value, update min_value\n            if min_value is None or val < min_value:\n                min_value = val\n    \n    # Return the minimum value found, or None if no numeric value was present\n    return min_value\n```\n\nThis function will iterate through the list, checking each element to see if it is a number (either an integer or a float). If it finds a number, it will compare it to the current minimum value and update the minimum if necessary. If the list contains no numeric values, the function will return `None`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the minimum value in a given heterogeneous list.", "input_data": "min_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "2", "assertion": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assertion_": null}
{"problem_name": "438", "generated_code": "```python\ndef count_bidirectional(test_list):\n    # Initialize a set to store unique bidirectional pairs\n    seen = set()\n    # Initialize a counter for bidirectional pairs\n    count = 0\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Check if the reverse tuple is in the set\n        if (tup[1], tup[0]) in seen:\n            # If it is, increment the counter\n            count += 1\n        else:\n            # Otherwise, add the current tuple to the set\n            seen.add(tup)\n    \n    # Return the count of bidirectional pairs\n    return count\n\n# Example usage:\ntest_list = [(1, 2), (2, 1), (4, 5), (5, 4), (9, 8)]\nprint(count_bidirectional(test_list))  # Output: 2\n```\nThis function `count_bidirectional` iterates through a list of tuples, `test_list`, and counts the number of bidirectional pairs, i.e., pairs where if (a, b) is in the list, then (b, a) is also in the list. It uses a set to keep track of the tuples it has seen, and a counter to count the bidirectional pairs.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count bidirectional tuple pairs.", "input_data": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )", "expected_output": "3", "assertion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assertion_": null}
{"problem_name": "117", "generated_code": "```python\ndef list_to_float(test_list):\n    # Iterate through each sublist in the list\n    for i in range(len(test_list)):\n        # Iterate through each element in the sublist\n        for j in range(len(test_list[i])):\n            # Try to convert the element to a float\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                # If conversion fails, pass and leave the element unchanged\n                pass\n    return test_list\n\n# Example usage:\n# input_list = [['1', '2', 'three'], ['4.5', 'six', '7.89']]\n# result = list_to_float(input_list)\n# print(result)  # Output: [[1.0, 2.0, 'three'], [4.5, 'six', 7.89]]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert all possible convertible elements in a list of lists to floats.", "input_data": "list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )", "expected_output": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assertion": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assertion_": null}
{"problem_name": "259", "generated_code": "```python\ndef maximize_elements(test_tup1, test_tup2):\n    # Using zip() + max() to combine the tuples by taking the maximum elements at each index\n    result = tuple(max(pair) for pair in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# test_tup1 = (5, 7, 9, 4, 3)\n# test_tup2 = (3, 9, 2, 8, 10)\n# print(maximize_elements(test_tup1, test_tup2))  # Output: (5, 9, 9, 8, 10)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to maximize the given two tuples.", "input_data": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((6, 7), (4, 9), (2, 9), (7, 10))", "assertion": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assertion_": null}
{"problem_name": "227", "generated_code": "```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find minimum of three numbers.", "input_data": "min_of_three(10,20,0)", "expected_output": "0", "assertion": "assert min_of_three(10,20,0)==0", "assertion_": null}
{"problem_name": "794", "generated_code": "```python\nimport re\n\ndef text_starta_endb(text):\n    # Define the regular expression pattern\n    pattern = r'a.*b$'\n    \n    # Use re.match to check if the pattern matches the entire string\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\n# text = \"a random string ending with b\"\n# result = text_starta_endb(text)\n# print(result)  # Output: True or False depending on the input string\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "input_data": "text_starta_endb(\"aabbbb\")", "expected_output": "True", "assertion": "assert text_starta_endb(\"aabbbb\")", "assertion_": null}
{"problem_name": "479", "generated_code": "```python\ndef first_Digit(n):\n    # Convert the number to a string to easily access the first character\n    n_str = str(n)\n    \n    # Check if the first character is a digit (it could be a '-' sign if the number is negative)\n    if n_str[0].isdigit():\n        return int(n_str[0])\n    else:\n        # If the first character is not a digit, then the first digit is the second character\n        return int(n_str[1])\n\n# Example usage:\nprint(first_Digit(1234))  # Output: 1\nprint(first_Digit(-567))  # Output: 5\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first digit of a given number.", "input_data": "first_Digit(123)", "expected_output": "1", "assertion": "assert first_Digit(123) == 1", "assertion_": null}
{"problem_name": "293", "generated_code": "```python\nimport math\n\ndef otherside_rightangle(w, h):\n    # Use the Pythagorean theorem to calculate the third side\n    # c^2 = a^2 + b^2, where c is the hypotenuse and a, b are the other two sides\n    # If one of the sides (w or h) is the hypotenuse, then we solve for the other side\n    # If neither w nor h is the hypotenuse, we assume the third side is the hypotenuse and solve for it\n    \n    # Check if w is the hypotenuse\n    if w > h:\n        return math.sqrt(w**2 - h**2)\n    # Check if h is the hypotenuse\n    elif h > w:\n        return math.sqrt(h**2 - w**2)\n    # If neither w nor h is larger, we assume the triangle is isosceles and return the same length for the third side\n    else:\n        return w\n\n# Example usage:\n# If the width is 3 and the height is 4, and we assume the hypotenuse is not given, the function should return 5.\nprint(otherside_rightangle(3, 4))  # Expected output is 5\n\n# If the width is 5 (hypotenuse) and the height is 3, the function should return 4.\nprint(otherside_rightangle(5, 3))  # Expected output is 4\n\n# If the width is 3 and the height is 5 (hypotenuse), the function should return 4.\nprint(otherside_rightangle(3, 5))  # Expected output is 4\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the third side of a right angled triangle.", "input_data": "otherside_rightangle(7,8)", "expected_output": "10.63014581273465", "assertion": "assert otherside_rightangle(7,8)==10.63014581273465", "assertion_": null}
{"problem_name": "615", "generated_code": "```python\ndef average_tuple(nums):\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input tuple of tuples\n    for num_tuple in nums:\n        # Calculate the average of the current tuple and append it to the averages list\n        averages.append(sum(num_tuple) / len(num_tuple))\n    \n    # Return the list of averages\n    return averages\n\n# Example usage:\n# Input: ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 40))\n# Output: [10.5, 44.0, 60.0]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "input_data": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))", "expected_output": "[30.5, 34.25, 27.0, 23.25]", "assertion": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assertion_": null}
{"problem_name": "757", "generated_code": "```python\ndef count_reverse_pairs(test_list):\n    # Initialize a counter for reverse pairs\n    reverse_pairs_count = 0\n    \n    # Create a set to store unique strings\n    seen_strings = set()\n    \n    # Iterate over each string in the list\n    for string in test_list:\n        # Check if the reverse of the current string is in the set\n        if string[::-1] in seen_strings:\n            # Increment the counter if a reverse pair is found\n            reverse_pairs_count += 1\n        else:\n            # Add the current string to the set\n            seen_strings.add(string)\n    \n    # Return the count of reverse pairs\n    return reverse_pairs_count\n\n# Example usage:\ntest_list = [\"geeks\", \"keeg\", \"abc\", \"cba\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "input_data": "count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])", "expected_output": "2", "assertion": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assertion_": null}
{"problem_name": "610", "generated_code": "```python\ndef remove_kth_element(list1, k):\n    # Check if k is within the range of the list indices\n    if k < 1 or k > len(list1):\n        raise ValueError(\"k is out of bounds.\")\n    # Remove the k'th element (considering k is 1-based index)\n    del list1[k-1]\n    return list1\n\n# Example usage:\n# my_list = [1, 2, 3, 4, 5]\n# k = 3\n# new_list = remove_kth_element(my_list, k)\n# print(new_list)  # Output: [1, 2, 4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "input_data": "remove_kth_element([1,1,2,3,4,4,5,1],3)", "expected_output": "[1, 1, 3, 4, 4, 5, 1]", "assertion": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assertion_": null}
{"problem_name": "809", "generated_code": "```python\ndef check_smaller(test_tup1, test_tup2):\n    # Using zip to pair elements and all to check all conditions\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n\n# Example usage:\n# test_tup1 = (10, 4, 5, 6)\n# test_tup2 = (5, 2, 3, 4)\n# print(check_smaller(test_tup1, test_tup2))  # Output: True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "input_data": "check_smaller((1, 2, 3), (2, 3, 4))", "expected_output": "False", "assertion": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assertion_": null}
{"problem_name": "281", "generated_code": "```python\ndef all_unique(test_list):\n    # Using set to check if length remains same\n    # when duplicates are removed\n    return len(test_list) == len(set(test_list))\n\n# Example usage:\n# test_list = [1, 2, 3, 4, 5]\n# print(all_unique(test_list))  # Output: True\n\n# test_list = [1, 2, 3, 3, 4]\n# print(all_unique(test_list))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check if the elements of a given list are unique or not.", "input_data": "all_unique([1,2,3])", "expected_output": "True", "assertion": "assert all_unique([1,2,3]) == True", "assertion_": null}
{"problem_name": "395", "generated_code": "```python\ndef first_non_repeating_character(str1):\n    # Create a dictionary to keep track of character counts\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n\n# Example usage:\nprint(first_non_repeating_character(\"swiss\"))  # Output should be 'w'\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first non-repeated character in a given string.", "input_data": "first_non_repeating_character(\"abcabc\")", "expected_output": "None", "assertion": "assert first_non_repeating_character(\"abcabc\") == None", "assertion_": null}
{"problem_name": "772", "generated_code": "```python\ndef remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    \n    # Use list comprehension to filter out words with length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the words back into a string\n    result_str = ' '.join(filtered_words)\n    \n    return result_str\n\n# Example usage:\ntest_str = \"This is a test string with some words of varying lengths\"\nK = 4\nprint(remove_length(test_str, K))  # Output: \"This is test string with some of varying lengths\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all the words with k length in the given string.", "input_data": "remove_length('The person is most value tet', 3)", "expected_output": "'person is most value'", "assertion": "assert remove_length('The person is most value tet', 3) == 'person is most value'", "assertion_": null}
{"problem_name": "579", "generated_code": "```python\ndef find_dissimilar(test_tup1, test_tup2):\n    # Using set operations to find dissimilar elements in tuples\n    dissimilar_elements = set(test_tup1).symmetric_difference(set(test_tup2))\n    return tuple(dissimilar_elements)\n\n# Example usage:\n# test_tup1 = (1, 2, 3, 4)\n# test_tup2 = (3, 4, 5, 6)\n# print(find_dissimilar(test_tup1, test_tup2))  # Output: (1, 2, 5, 6)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the dissimilar elements in the given two tuples.", "input_data": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))", "expected_output": "(3, 6, 7, 10)", "assertion": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "assertion_": null}
{"problem_name": "433", "generated_code": "```python\ndef check_greater(arr, number):\n    # Check if all elements in the array are less than the given number\n    return all(x < number for x in arr)\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# number = 6\n# print(check_greater(arr, number))  # Output: True\n\n# number = 3\n# print(check_greater(arr, number))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the entered number is greater than the elements of the given array.", "input_data": "check_greater([1, 2, 3, 4, 5], 4)", "expected_output": "False", "assertion": "assert check_greater([1, 2, 3, 4, 5], 4) == False", "assertion_": null}
{"problem_name": "742", "generated_code": "```python\nimport math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron with a given side length.\n    \n    :param side: Length of a side of the tetrahedron\n    :return: Surface area of the tetrahedron\n    \"\"\"\n    # The formula for the surface area of a regular tetrahedron is:\n    # A = sqrt(3) * a^2, where a is the side length of the tetrahedron.\n    return math.sqrt(3) * side ** 2\n\n# Example usage:\n# side_length = 5\n# print(area_tetrahedron(side_length))  # Should print the surface area of a tetrahedron with side length 5\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to caluclate the area of a tetrahedron.", "input_data": "area_tetrahedron(3)", "expected_output": "15.588457268119894", "assertion": "assert area_tetrahedron(3)==15.588457268119894", "assertion_": null}
{"problem_name": "171", "generated_code": "```python\ndef perimeter_pentagon(a):\n    return 5 * a\n\n# Example usage:\n# If the side length of the pentagon is 10 units\nprint(perimeter_pentagon(10))  # Output should be 50 units\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "input_data": "perimeter_pentagon(5)", "expected_output": "25", "assertion": "assert perimeter_pentagon(5) == 25", "assertion_": null}
{"problem_name": "603", "generated_code": "```python\ndef get_ludic(n):\n    # Create a list of numbers from 2 to n\n    numbers = list(range(2, n + 1))\n    ludic = [1]  # 1 is always a ludic number\n\n    while numbers:\n        # The first number in the list is always a ludic number\n        first = numbers[0]\n        ludic.append(first)\n\n        # Remove every 'first'-th number from the list (1-indexed)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % first != 0]\n\n    return ludic\n\n# Example usage:\nprint(get_ludic(25))  # Output should be the ludic numbers up to 25\n```\n\nThis function `get_ludic` calculates all ludic numbers up to a given integer `n`. It starts with a list of numbers from 2 to `n` and iteratively picks the first number in the list as a ludic number, then removes every 'first'-th number from the list (considering 1-indexed positions). The process repeats until there are no more numbers left in the list.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "input_data": "get_ludic(10)", "expected_output": "[1, 2, 3, 5, 7]", "assertion": "assert get_ludic(10) == [1, 2, 3, 5, 7]", "assertion_": null}
{"problem_name": "728", "generated_code": "```python\ndef sum_list(lst1, lst2):\n    # Check if the lists are of the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Sum corresponding elements of both lists\n    result = [a + b for a, b in zip(lst1, lst2)]\n    \n    return result\n\n# Example usage:\n# lst1 = [1, 2, 3]\n# lst2 = [4, 5, 6]\n# print(sum_list(lst1, lst2))  # Output: [5, 7, 9]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "input_data": "sum_list([10,20,30],[15,25,35])", "expected_output": "[25,45,65]", "assertion": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assertion_": null}
{"problem_name": "118", "generated_code": "```python\ndef string_to_list(string):\n    return string.split(' ')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a string to a list of strings split on the space character.", "input_data": "string_to_list(\"python programming\")", "expected_output": "['python','programming']", "assertion": "assert string_to_list(\"python programming\")==['python','programming']", "assertion_": null}
{"problem_name": "251", "generated_code": "```python\ndef insert_element(lst, element):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each item in the original list\n    for item in lst:\n        # Insert the element before the current item\n        result.append(element)\n        # Append the current item\n        result.append(item)\n        \n    # Return the resulting list\n    return result\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "input_data": "insert_element(['Red', 'Green', 'Black'] ,'c')", "expected_output": "['c', 'Red', 'c', 'Green', 'c', 'Black']", "assertion": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assertion_": null}
{"problem_name": "555", "generated_code": "```python\ndef difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    \n    # Calculate the difference\n    diff = sum_of_cubes - sum_of_numbers\n    \n    return diff\n\n# Example usage:\n# print(difference(5))  # Output should be the difference between 1^3 + 2^3 + ... + 5^3 and 1 + 2 + ... + 5\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "input_data": "difference(3)", "expected_output": "30", "assertion": "assert difference(3) == 30", "assertion_": null}
{"problem_name": "803", "generated_code": "```python\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return n == root * root\n\n# Example usage:\n# print(is_perfect_square(16))  # Should return True\n# print(is_perfect_square(14))  # Should return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "input_data": "is_perfect_square(10)", "expected_output": "False", "assertion": "assert not is_perfect_square(10)", "assertion_": null}
{"problem_name": "747", "generated_code": "```python\ndef lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D array to store the lengths of LCS\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Build the LCS table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # LCS of three strings is L[m][n][o]\n    return L[m][n][o]\n\n# Example usage:\nX = \"AGGT12\"\nY = \"12TXAYB\"\nZ = \"12XBA\"\nprint(\"Length of LCS is\", lcs_of_three(X, Y, Z))\n```\n\nThis function `lcs_of_three` computes the length of the longest common subsequence of three strings `X`, `Y`, and `Z`. It uses dynamic programming to build a 3D table `L` where `L[i][j][k]` stores the length of the LCS of the strings `X[0..i-1]`, `Y[0..j-1]`, and `Z[0..k-1]`. The function returns the length of the LCS for the full strings, which is stored in `L[m][n][o]` where `m`, `n`, and `o` are the lengths of `X`, `Y`, and `Z`, respectively.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "input_data": "lcs_of_three('AGGT12', '12TXAYB', '12XBA')", "expected_output": "2", "assertion": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assertion_": null}
{"problem_name": "779", "generated_code": "```python\ndef unique_sublists(list1):\n    # Initialize an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    \n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple so it can be used as a dictionary key\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_counts\n\n# Example usage:\n# list1 = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [3, 4]]\n# print(unique_sublists(list1))\n# Output: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion_": null}
{"problem_name": "573", "generated_code": "```python\ndef unique_product(list_data):\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n    \n    # Initialize the product result to 1 (neutral element for multiplication)\n    product = 1\n    \n    # Iterate over the set and multiply the elements to get the product\n    for number in unique_numbers:\n        product *= number\n    \n    return product\n\n# Example usage:\n# list_data = [1, 2, 3, 2]\n# print(unique_product(list_data))  # Output should be 6 (1*2*3)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to calculate the product of the unique numbers in a given list.", "input_data": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])", "expected_output": "720000000", "assertion": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "assertion_": null}
{"problem_name": "749", "generated_code": "```python\ndef sort_numeric_strings(nums_str):\n    # Convert each string to an integer and sort the list\n    return sorted(nums_str, key=int)\n\n# Example usage:\nnums_str = ['4', '12', '45', '7', '0', '100', '18', '-2']\nsorted_nums_str = sort_numeric_strings(nums_str)\nprint(sorted_nums_str)  # Output should be ['-2', '0', '4', '7', '12', '18', '45', '100']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "input_data": "sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])", "expected_output": "[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assertion": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assertion_": null}
{"problem_name": "296", "generated_code": "```python\ndef get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Example usage:\n# arr = [1, 20, 6, 4, 5]\n# print(get_Inv_Count(arr))  # Output: 5\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count inversions in an array.", "input_data": "get_Inv_Count([1,20,6,4,5])", "expected_output": "5", "assertion": "assert get_Inv_Count([1,20,6,4,5]) == 5", "assertion_": null}
{"problem_name": "738", "generated_code": "```python\ndef geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n# Example usage:\n# Calculate the geometric sum of 4-1\nprint(geometric_sum(4))  # Should print the sum of 1/1 + 1/2 + 1/4 + 1/8\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "input_data": "geometric_sum(7)", "expected_output": "1.9921875", "assertion": "assert geometric_sum(7) == 1.9921875", "assertion_": null}
{"problem_name": "745", "generated_code": "```python\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_its_digits(num):\n        # Convert the number to a string to iterate over its digits\n        for digit in str(num):\n            # Skip the division by zero case or if the digit does not divide the number\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    # Use a list comprehension to filter the numbers that satisfy the condition\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_its_digits(num)]\n\n# Example usage:\nprint(divisible_by_digits(1, 22))\n```\n\nThis function `divisible_by_digits` takes two arguments `startnum` and `endnum` and returns a list of numbers within the given range where each number is divisible by every non-zero digit it contains. The helper function `is_divisible_by_its_digits` checks whether a given number meets the condition. The list comprehension filters out the numbers that do not satisfy the condition.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "input_data": "divisible_by_digits(1,22)", "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assertion": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assertion_": null}
{"problem_name": "261", "generated_code": "```python\ndef division_elements(test_tup1, test_tup2):\n    # Using zip() to pair up elements and perform division\n    # Using try-except to handle division by zero\n    result = ()\n    for i, j in zip(test_tup1, test_tup2):\n        try:\n            div_result = i / j\n        except ZeroDivisionError:\n            div_result = 'Error: Division by zero'\n        result += (div_result,)\n    return result\n\n# Example usage:\n# test_tup1 = (10, 4, 5, 6)\n# test_tup2 = (2, 2, 0, 3)\n# print(division_elements(test_tup1, test_tup2))\n# Output: (5.0, 2.0, 'Error: Division by zero', 2.0)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "input_data": "division_elements((10, 4, 6, 9),(5, 2, 3, 3))", "expected_output": "(2, 2, 2, 3)", "assertion": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assertion_": null}
{"problem_name": "578", "generated_code": "```python\ndef interleave_lists(list1, list2, list3):\n    # Check if all lists are of the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Use zip to iterate over the lists in parallel and chain them together\n    interleaved = [element for trio in zip(list1, list2, list3) for element in trio]\n    \n    return interleaved\n\n# Example usage:\n# list1 = [1, 2, 3]\n# list2 = ['a', 'b', 'c']\n# list3 = [4.0, 5.0, 6.0]\n# print(interleave_lists(list1, list2, list3))\n# Output: [1, 'a', 4.0, 2, 'b', 5.0, 3, 'c', 6.0]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to interleave 3 lists of the same length into a single flat list.", "input_data": "interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])", "expected_output": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assertion": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assertion_": null}
{"problem_name": "801", "generated_code": "```python\ndef test_three_equal(x, y, z):\n    # Initialize a counter for the number of equal numbers\n    equal_count = 0\n    \n    # Check if any two or all three numbers are equal and increment the counter accordingly\n    if x == y == z:\n        equal_count = 3\n    elif x == y or y == z or x == z:\n        equal_count = 2\n    \n    # Return the count of equal numbers\n    return equal_count\n\n# Example usage:\n# Should return 3 because all numbers are equal\nprint(test_three_equal(5, 5, 5))\n\n# Should return 2 because two numbers are equal\nprint(test_three_equal(3, 3, 1))\n\n# Should return 0 because no numbers are equal\nprint(test_three_equal(1, 2, 3))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of equal numbers from three given integers.", "input_data": "test_three_equal(1,1,1)", "expected_output": "3", "assertion": "assert test_three_equal(1,1,1) == 3", "assertion_": null}
{"problem_name": "455", "generated_code": "```python\ndef check_monthnumb_number(monthnum2):\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list of months with 31 days\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(check_monthnumb_number(1))  # January has 31 days, should return True\n# print(check_monthnumb_number(4))  # April does not have 31 days, should return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given month number contains 31 days or not.", "input_data": "check_monthnumb_number(5)", "expected_output": "True", "assertion": "assert check_monthnumb_number(5)==True", "assertion_": null}
{"problem_name": "444", "generated_code": "```python\ndef trim_tuple(test_list, K):\n    # Using list comprehension and tuple slicing to trim each tuple\n    return [tup[K:] for tup in test_list]\n\n# Example usage:\n# Given a list of tuples\ntest_list = [(5, 6, 7, 8), (9, 2, 3, 1), (4, 5, 1, 3)]\n# Trim each tuple by K=2\nK = 2\n# The expected output should be [(7, 8), (3, 1), (1, 3)]\nprint(trim_tuple(test_list, K))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to trim each tuple by k in the given tuple list.", "input_data": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)", "expected_output": "'[(2,), (9,), (2,), (2,)]'", "assertion": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assertion_": null}
{"problem_name": "64", "generated_code": "```python\ndef subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    # The key parameter to the sort function is a lambda function that gets the second element of each tuple (index 1)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n\n# Example usage:\n# sorted_marks = subject_marks([('Math', 95), ('Science', 90), ('English', 88), ('History', 80)])\n# print(sorted_marks)  # Output should be [('History', 80), ('English', 88), ('Science', 90), ('Math', 95)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of tuples using the second value of each tuple.", "input_data": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])", "expected_output": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assertion": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assertion_": null}
{"problem_name": "773", "generated_code": "```python\ndef occurance_substring(text, pattern):\n    # Initialize a list to store the positions of occurrence\n    positions = []\n    \n    # Use a sliding window to check for pattern match\n    for i in range(len(text) - len(pattern) + 1):\n        # Check if the substring matches the pattern\n        if text[i:i+len(pattern)] == pattern:\n            # If it matches, append the start index to the positions list\n            positions.append(i)\n    \n    # Check if we found any occurrences\n    if positions:\n        # If we found occurrences, return them\n        return positions\n    else:\n        # If no occurrences were found, return None\n        return None\n\n# Example usage:\n# text = \"This is a test string to test the function.\"\n# pattern = \"test\"\n# print(occurance_substring(text, pattern))  # Output: [10, 29]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "input_data": "occurance_substring('python programming, python language','python')", "expected_output": "('python', 0, 6)", "assertion": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assertion_": null}
{"problem_name": "89", "generated_code": "```python\ndef closest_num(N):\n    # Since we need the closest smaller number than N,\n    # we simply return N - 1\n    return N - 1\n\n# Example usage:\n# If N is 10, the closest smaller number is 9\nprint(closest_num(10))  # Output: 9\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the closest smaller number than n.", "input_data": "closest_num(11)", "expected_output": "10", "assertion": "assert closest_num(11) == 10", "assertion_": null}
{"problem_name": "471", "generated_code": "```python\ndef find_remainder(arr, n):\n    # Initialize result as 1\n    result = 1\n    \n    # Iterate through the array and calculate the product\n    for num in arr:\n        result = (result * num) % n\n    \n    # Return the result\n    return result\n\n# Example usage:\n# arr = [1, 2, 3, 4, 5]\n# n = 7\n# print(find_remainder(arr, n))  # Output should be (1*2*3*4*5) % 7 = 120 % 7 = 1\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the product of the array multiplication modulo n.", "input_data": "find_remainder([ 100, 10, 5, 25, 35, 14 ],11)", "expected_output": "9", "assertion": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assertion_": null}
{"problem_name": "246", "generated_code": "```python\ndef babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number\")\n    \n    if number == 0:\n        return 0\n    \n    # Initial guess will be half of the number\n    guess = number / 2.0\n    \n    # Loop until the square of the guess is close enough to the original number\n    while abs(guess * guess - number) > 1e-10:\n        # Compute a new guess using the Babylonian method\n        guess = (guess + number / guess) / 2.0\n    \n    return guess\n\n# Example usage:\nprint(babylonian_squareroot(25))  # Should print a number close to 5\nprint(babylonian_squareroot(2))   # Should print a number close to 1.41421\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function for computing square roots using the babylonian method.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "97", "generated_code": "```python\ndef frequency_lists(list1):\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the flattened list and count the occurrences of each element\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n            \n    return frequency\n\n# Example usage:\n# nested_list = [[1, 2, 2], [3, 4, 4, 4], [5]]\n# print(frequency_lists(nested_list))\n# Output: {1: 1, 2: 2, 3: 1, 4: 3, 5: 1}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "input_data": "frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])", "expected_output": "{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assertion": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assertion_": null}
{"problem_name": "616", "generated_code": "```python\ndef tuple_modulo(test_tup1, test_tup2):\n    # Using zip() to pair up elements and then perform modulo\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# test_tup1 = (10, 4, 5, 6)\n# test_tup2 = (3, 5, 2, 3)\n# print(tuple_modulo(test_tup1, test_tup2))  # Output: (1, 4, 1, 0)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "input_data": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))", "expected_output": "(0, 4, 5, 1)", "assertion": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assertion_": null}
{"problem_name": "767", "generated_code": "```python\ndef get_pairs_count(arr, sum):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize count of pairs\n    count = 0\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Check if there is a number which can be paired with num to equal sum\n        if (sum - num) in freq:\n            count += freq[sum - num]\n        \n        # If there are two identical numbers that form a pair, we need to decrement the count by one\n        if (sum - num) == num:\n            count -= 1\n    \n    # Each pair is counted twice, so we need to halve the count\n    return count // 2\n\n# Example usage:\narr = [1, 5, 7, -1, 5]\nsum = 6\nprint(get_pairs_count(arr, sum))  # Output should be 3\n```\nThis function works by first creating a frequency dictionary to count the occurrences of each element in the array. Then, for each element, it checks if there is a complement that can be paired with it to make the sum. If a pair is found, it increments the count. Since each pair is counted twice (once for each number in the pair), the final count is halved before being returned.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "input_data": "get_pairs_count([1,1,1,1],2)", "expected_output": "6", "assertion": "assert get_pairs_count([1,1,1,1],2) == 6", "assertion_": null}
{"problem_name": "430", "generated_code": "```python\ndef parabola_directrix(a, b, c):\n    # The directrix of a parabola y = ax^2 + bx + c is y = k, where k is a constant.\n    # The vertex form of a parabola is y = a(x - h)^2 + k, where (h, k) is the vertex of the parabola.\n    # The directrix is then k - (1/(4a)) if the parabola opens upwards or downwards.\n    \n    # To find the vertex (h, k), we complete the square:\n    # y = a(x^2 + (b/a)x) + c\n    # y = a(x^2 + (b/a)x + (b/2a)^2 - (b/2a)^2) + c\n    # y = a((x + b/2a)^2 - (b/2a)^2) + c\n    # y = a(x + b/2a)^2 - ab^2/4a^2 + c\n    # y = a(x + b/2a)^2 + c - b^2/4a\n    \n    # The vertex (h, k) is then (-b/2a, c - b^2/4a)\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    \n    # The directrix y = k - (1/(4a)) if a > 0 (parabola opens upwards)\n    # or y = k + (1/(4a)) if a < 0 (parabola opens downwards)\n    directrix = k - (1 / (4 * a)) if a > 0 else k + (1 / (4 * a))\n    \n    return directrix\n\n# Example usage:\n# For the parabola y = 2x^2 + 4x + 6, the coefficients are a=2, b=4, c=6\nprint(parabola_directrix(2, 4, 6))  # Output should be the y-value of the directrix\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the directrix of a parabola.", "input_data": "parabola_directrix(5,3,2)", "expected_output": "-198", "assertion": "assert parabola_directrix(5,3,2)==-198", "assertion_": null}
{"problem_name": "464", "generated_code": "```python\ndef check_value(dict, n):\n    # Get all values from the dictionary\n    values = list(dict.values())\n    \n    # Check if all values in the list are the same as the first value\n    return all(value == values[0] for value in values)\n\n# Example usage:\n# my_dict = {'a': 1, 'b': 1, 'c': 1}\n# print(check_value(my_dict, len(my_dict)))  # Output: True\n\n# my_dict = {'a': 1, 'b': 2, 'c': 1}\n# print(check_value(my_dict, len(my_dict)))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if all values are same in a dictionary.", "input_data": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)", "expected_output": "False", "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assertion_": null}
{"problem_name": "277", "generated_code": "```python\ndef dict_filter(input_dict, n):\n    # Use dictionary comprehension to filter out items with values less than n\n    filtered_dict = {key: value for key, value in input_dict.items() if value >= n}\n    return filtered_dict\n\n# Example usage:\n# my_dict = {'a': 1, 'b': 5, 'c': 10}\n# print(dict_filter(my_dict, 5))\n# Output: {'b': 5, 'c': 10}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "input_data": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)", "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assertion_": null}
{"problem_name": "435", "generated_code": "```python\ndef last_Digit(n):\n    # Get the last digit using modulo operator\n    last_digit = n % 10\n    return last_digit\n\n# Example usage:\n# print(last_Digit(123))  # Output: 3\n# print(last_Digit(987654))  # Output: 4\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last digit of a given number.", "input_data": "last_Digit(123)", "expected_output": "3", "assertion": "assert last_Digit(123) == 3", "assertion_": null}
{"problem_name": "753", "generated_code": "```python\ndef min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the first K elements from the sorted list\n    return sorted_list[:K]\n\n# Example usage:\ntest_list = [(4, 5), (1, 2), (6, 7), (3, 8)]\nK = 2\nprint(min_k(test_list, K))  # Output: [(1, 2), (4, 5)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "input_data": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)", "expected_output": "[('Akash', 2), ('Akshat', 4)]", "assertion": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assertion_": null}
{"problem_name": "411", "generated_code": "```python\ndef snake_to_camel(word):\n    # Split the snake case word by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    # and join them together\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n\n# Example usage:\nsnake_str = \"this_is_a_snake_case_string\"\ncamel_str = snake_to_camel(snake_str)\nprint(camel_str)  # Output: thisIsASnakeCaseString\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given snake case string to camel case string.", "input_data": "snake_to_camel('android_tv')", "expected_output": "'AndroidTv'", "assertion": "assert snake_to_camel('android_tv') == 'AndroidTv'", "assertion_": null}
{"problem_name": "624", "generated_code": "```python\ndef is_upper(string):\n    return string.upper()\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert a given string to uppercase.", "input_data": "is_upper(\"person\")", "expected_output": "\"PERSON\"", "assertion": "assert is_upper(\"person\") ==\"PERSON\"", "assertion_": null}
{"problem_name": "102", "generated_code": "```python\ndef snake_to_camel(word):\n    # Split the snake case word by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    # and join them together\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_word\n\n# Example usage:\n# snake_str = \"this_is_a_snake_case_string\"\n# camel_str = snake_to_camel(snake_str)\n# print(camel_str)  # Output: thisIsASnakeCaseString\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a snake case string to camel case string.", "input_data": "snake_to_camel('python_program')", "expected_output": "'PythonProgram'", "assertion": "assert snake_to_camel('python_program')=='PythonProgram'", "assertion_": null}
{"problem_name": "632", "generated_code": "```python\ndef move_zero(num_list):\n    # Count the number of zeros in the list\n    zero_count = num_list.count(0)\n    \n    # Remove all zeros from the original list\n    num_list = [num for num in num_list if num != 0]\n    \n    # Add the zeros back at the end of the list\n    num_list.extend([0] * zero_count)\n    \n    return num_list\n\n# Example usage:\n# my_list = [1, 0, 2, 0, 4, 0]\n# result = move_zero(my_list)\n# print(result)  # Output should be [1, 2, 4, 0, 0, 0]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to move all zeroes to the end of the given list.", "input_data": "move_zero([1,0,2,0,3,4])", "expected_output": "[1,2,3,4,0,0]", "assertion": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assertion_": null}
{"problem_name": "266", "generated_code": "```python\ndef lateralsurface_cube(l):\n    # The lateral surface area of a cube is the area of all the sides except the top and bottom.\n    # Since a cube has 6 faces and the top and bottom are two of them, we only calculate for 4 faces.\n    # Each face is a square with area equal to side length squared.\n    # So, the lateral surface area is 4 times one face area.\n    return 4 * l * l\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cube given its side length.", "input_data": "lateralsurface_cube(5)", "expected_output": "100", "assertion": "assert lateralsurface_cube(5)==100", "assertion_": null}
{"problem_name": "566", "generated_code": "```python\ndef sum_digits(n):\n    # Convert the integer to a string to iterate over each digit\n    n_str = str(n)\n    # Initialize the sum to zero\n    digit_sum = 0\n    # Iterate over each character in the string, convert it back to an integer, and add it to the sum\n    for digit in n_str:\n        digit_sum += int(digit)\n    # Return the sum of the digits\n    return digit_sum\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the sum of the digits of a non-negative integer.", "input_data": "sum_digits(345)", "expected_output": "12", "assertion": "assert sum_digits(345)==12", "assertion_": null}
{"problem_name": "83", "generated_code": "```python\ndef get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    ascii_sum = sum(ord(char) for char in strr)\n    \n    # Find the remainder when ascii_sum is divided by 26\n    remainder = ascii_sum % 26\n    \n    # Convert the remainder to the corresponding character in the alphabet\n    # 'A' has an ASCII value of 65, so we add the remainder to 65 to get the new character\n    result_char = chr(65 + remainder)\n    \n    return result_char\n\n# Example usage:\n# print(get_Char(\"hello\"))  # This would output a character based on the sum of ASCII values of 'hello' modulo 26\n```\n\nThis function calculates the sum of ASCII values of all characters in the input string, then finds the remainder when this sum is divided by 26. It then converts this remainder to a character by adding it to the ASCII value of 'A' (65). The result is a character that represents the sum of the ASCII values modulo 26.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "input_data": "get_Char(\"abc\")", "expected_output": "\"f\"", "assertion": "assert get_Char(\"abc\") == \"f\"", "assertion_": null}
{"problem_name": "249", "generated_code": "```python\ndef intersection_array(array_nums1, array_nums2):\n    # Using set intersection to find common elements\n    result = list(set(array_nums1) & set(array_nums2))\n    return result\n\n# Example usage:\n# array1 = [1, 2, 3, 4, 5]\n# array2 = [4, 5, 6, 7, 8]\n# print(intersection_array(array1, array2))  # Output: [4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the intersection of two arrays.", "input_data": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])", "expected_output": "[1, 2, 8, 9]", "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assertion_": null}
{"problem_name": "99", "generated_code": "```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "input_data": "decimal_to_binary(8)", "expected_output": "'1000'", "assertion": "assert decimal_to_binary(8) == '1000'", "assertion_": null}
{"problem_name": "292", "generated_code": "```python\ndef find(n, m):\n    # Check if m is zero to avoid division by zero error\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    # Calculate the quotient and round down to the nearest integer\n    quotient = n // m\n    \n    return quotient\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "input_data": "find(10,3)", "expected_output": "3", "assertion": "assert find(10,3) == 3", "assertion_": null}
{"problem_name": "785", "generated_code": "```python\ndef tuple_str_int(test_str):\n    # Convert the string representation of tuple to an actual tuple\n    # by using the eval function which can evaluate a string as a Python expression\n    try:\n        # Evaluate the string to a tuple\n        result = eval(test_str)\n        # Check if the result is indeed a tuple\n        if isinstance(result, tuple):\n            # Convert all elements to integers\n            return tuple(map(int, result))\n        else:\n            raise ValueError(\"Input string does not represent a tuple.\")\n    except (SyntaxError, NameError, TypeError, ValueError):\n        # Handle possible exceptions that can be raised by eval and int conversion\n        raise ValueError(\"Invalid tuple string or contents cannot be converted to integers.\")\n\n# Example usage:\n# test_str = \"(1, 2, 3)\"\n# print(tuple_str_int(test_str))  # Output: (1, 2, 3)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert tuple string to integer tuple.", "input_data": "tuple_str_int(\"(7, 8, 9)\")", "expected_output": "(7, 8, 9)", "assertion": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assertion_": null}
{"problem_name": "577", "generated_code": "```python\ndef last_Digit_Factorial(n):\n    # If n is 0 or 1, the factorial is 1, so the last digit is 1\n    if n in [0, 1]:\n        return 1\n    \n    # For n >= 5, the factorial will end in 0 because it will contain at least one 2 and one 5\n    if n >= 5:\n        return 0\n    \n    # For n = 2, 3, or 4, calculate the factorial and return the last digit\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit *= i\n        last_digit %= 10  # Keep only the last digit\n    \n    return last_digit\n\n# Example usage:\nprint(last_Digit_Factorial(5))  # Output: 0\nprint(last_Digit_Factorial(4))  # Output: 4\nprint(last_Digit_Factorial(1))  # Output: 1\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last digit in factorial of a given number.", "input_data": "last_Digit_Factorial(4)", "expected_output": "4", "assertion": "assert last_Digit_Factorial(4) == 4", "assertion_": null}
{"problem_name": "95", "generated_code": "```python\ndef Find_Min_Length(lst):\n    # Check if the input is a list of lists\n    if not all(isinstance(i, list) for i in lst):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    # Initialize the minimum length with infinity\n    min_length = float('inf')\n    \n    # Iterate through the list of lists\n    for sublist in lst:\n        # Update the minimum length if the current list is smaller\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Return the minimum length found\n    return min_length\n\n# Example usage:\n# smallest_length = Find_Min_Length([[1, 2], [1, 2, 3], [1]])\n# print(smallest_length)  # Output: 1\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the smallest list in a list of lists.", "input_data": "Find_Min_Length([[1],[1,2]])", "expected_output": "1", "assertion": "assert Find_Min_Length([[1],[1,2]]) == 1", "assertion_": null}
{"problem_name": "90", "generated_code": "```python\ndef len_log(list1):\n    # Check if the input is a list and contains at least one element\n    if not list1 or not isinstance(list1, list):\n        return \"Invalid input: The input should be a non-empty list of words.\"\n    \n    # Initialize the length of the longest word to zero\n    longest_length = 0\n    \n    # Iterate through each word in the list\n    for word in list1:\n        # Check if the current word's length is greater than the longest found so far\n        if len(word) > longest_length:\n            # Update the longest length\n            longest_length = len(word)\n    \n    # Return the length of the longest word\n    return longest_length\n\n# Example usage:\n# words = [\"hello\", \"world\", \"python\", \"programming\"]\n# print(len_log(words))  # Output should be 11, since \"programming\" is the longest word\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the longest word.", "input_data": "len_log([\"python\",\"PHP\",\"bigdata\"])", "expected_output": "7", "assertion": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assertion_": null}
{"problem_name": "581", "generated_code": "```python\ndef surface_Area(b, h):\n    # Calculate the slant height of the pyramid using the Pythagorean theorem\n    l = (b**2 + h**2)**0.5\n    \n    # Calculate the base area\n    base_area = b**2\n    \n    # Calculate the lateral surface area (4 times the area of one triangle)\n    lateral_area = 2 * b * l\n    \n    # The total surface area is the sum of the base area and the lateral surface area\n    total_surface_area = base_area + lateral_area\n    \n    return total_surface_area\n\n# Example usage:\n# base_edge = 4\n# height = 6\n# print(surface_Area(base_edge, height))  # Should print the surface area of the pyramid with base edge 4 and height 6\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the surface area of a square pyramid with a given base edge and height.", "input_data": "surface_Area(3,4)", "expected_output": "33", "assertion": "assert surface_Area(3,4) == 33", "assertion_": null}
{"problem_name": "294", "generated_code": "```python\ndef max_val(listval):\n    # Initialize a variable to store the maximum value found\n    max_value = None\n    \n    # Iterate over each element in the list\n    for val in listval:\n        # Check if the element is a number (int or float)\n        if isinstance(val, (int, float)):\n            # If max_value is None or the element is greater than max_value, update max_value\n            if max_value is None or val > max_value:\n                max_value = val\n    \n    # Return the maximum value found, or None if no number was found\n    return max_value\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum value in a given heterogeneous list.", "input_data": "max_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "5", "assertion": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assertion_": null}
{"problem_name": "614", "generated_code": "```python\ndef cummulative_sum(test_list):\n    # Initialize the cumulative sum list\n    cum_sum_list = []\n    # Initialize a variable to keep track of the running sum\n    running_sum = 0\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Iterate over each element in the tuple\n        for num in tup:\n            # Add the number to the running sum\n            running_sum += num\n            # Append the current running sum to the cumulative sum list\n            cum_sum_list.append(running_sum)\n    # Return the cumulative sum list\n    return cum_sum_list\n```\n\n# Example usage:\n```python\n# Given list of tuples\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n\n# Call the function\ncumulative_sums = cummulative_sum(test_list)\n\n# Print the result\nprint(cumulative_sums)  # Output: [1, 3, 6, 10, 15, 21, 28, 36]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "input_data": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])", "expected_output": "30", "assertion": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assertion_": null}
{"problem_name": "16", "generated_code": "```python\ndef text_lowercase_underscore(text):\n    import re\n    # Regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    # Search for the pattern in the input text\n    return bool(re.match(pattern, text))\n\n# Example usage:\n# Should return True\nprint(text_lowercase_underscore(\"this_is_a_test\"))\n# Should return False (contains uppercase letters)\nprint(text_lowercase_underscore(\"This_is_Not_a_Test\"))\n# Should return False (contains spaces)\nprint(text_lowercase_underscore(\"this is not a test\"))\n# Should return False (contains numbers)\nprint(text_lowercase_underscore(\"this_is_a_test123\"))\n# Should return True (single lowercase word)\nprint(text_lowercase_underscore(\"test\"))\n# Should return False (starts with an underscore)\nprint(text_lowercase_underscore(\"_this_is_not_allowed\"))\n# Should return False (ends with an underscore)\nprint(text_lowercase_underscore(\"this_is_not_allowed_\"))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "input_data": "text_lowercase_underscore(\"aab_cbbbc\")", "expected_output": "(True)", "assertion": "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assertion_": null}
{"problem_name": "101", "generated_code": "```python\ndef kth_element(arr, k):\n    # Check if k is within the bounds of the array\n    if k > 0 and k <= len(arr):\n        # Return the kth element using 1-based indexing\n        return arr[k-1]\n    else:\n        # If k is out of bounds, return None or raise an exception\n        return None  # or raise IndexError(\"k is out of the bounds of the array\")\n\n# Example usage:\n# arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n# k = 5\n# print(kth_element(arr, k))  # Output: 5\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the kth element in the given array using 1-based indexing.", "input_data": "kth_element([12,3,5,7,19], 2)", "expected_output": "3", "assertion": "assert kth_element([12,3,5,7,19], 2) == 3", "assertion_": null}
{"problem_name": "589", "generated_code": "```python\ndef perfect_squares(a, b):\n    # List to store perfect squares\n    perfect_squares_list = []\n    \n    # Start from the smallest integer greater than or equal to the square root of a\n    start = int(a**0.5)\n    if start**2 < a:\n        start += 1\n    \n    # Calculate perfect squares up to b\n    for i in range(start, int(b**0.5) + 1):\n        square = i**2\n        if square > b:\n            break\n        perfect_squares_list.append(square)\n    \n    return perfect_squares_list\n```\n\nThis function calculates the perfect squares between two numbers `a` and `b` by starting at the square root of `a` and squaring integers until the result is greater than `b`. It returns a list of all perfect squares in the range.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find perfect squares between two given numbers.", "input_data": "perfect_squares(1,30)", "expected_output": "[1, 4, 9, 16, 25]", "assertion": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "assertion_": null}
{"problem_name": "626", "generated_code": "```python\nimport math\n\ndef triangle_area(r):\n    # The largest triangle inscribed in a semicircle is a right-angled triangle\n    # with its hypotenuse equal to the diameter of the semicircle and the other two sides\n    # are equal, forming a 45-45-90 triangle.\n    \n    # The diameter of the semicircle is twice the radius\n    diameter = 2 * r\n    \n    # The sides of the triangle are equal to the radius of the semicircle\n    side = r\n    \n    # The area of a right-angled triangle is 1/2 * base * height\n    # Here, base and height are both equal to the radius (r)\n    area = 0.5 * side * side\n    \n    return area\n\n# Example usage:\nradius = 5\nprint(\"The area of the largest triangle inscribed in a semicircle of radius\", radius, \"is:\", triangle_area(radius))\n```\n\nThis function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius. The largest triangle is a right-angled isosceles triangle with legs equal to the radius of the semicircle. The area is calculated using the formula for the area of a right-angled triangle, which is 1/2 * base * height. In this case, the base and height are both equal to the radius.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "input_data": "triangle_area(-1)", "expected_output": "None", "assertion": "assert triangle_area(-1) == None", "assertion_": null}
{"problem_name": "130", "generated_code": "```python\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item\n    frequency = {}\n    for num in nums:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Find the item with the maximum frequency\n    max_freq = max(frequency.values())\n    max_items = [num for num, freq in frequency.items() if freq == max_freq]\n    \n    # Return the item with maximum frequency\n    # If there are multiple items with the same maximum frequency, return the first one\n    return max_items[0]\n\n# Example usage:\n# nums = [1, 3, 2, 1, 4, 1]\n# print(max_occurrences(nums))  # Output: 1\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the item with maximum frequency in a given list.", "input_data": "max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])", "expected_output": "2", "assertion": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assertion_": null}
{"problem_name": "406", "generated_code": "```python\ndef find_Parity(x):\n    # Count the number of set bits (1s) in the binary representation of x\n    set_bits_count = 0\n    while x:\n        set_bits_count += x & 1\n        x >>= 1\n    \n    # If the count of set bits is odd, return True, else return False\n    return set_bits_count % 2 != 0\n\n# Example usage:\n# number = 7 (binary: 111) has odd parity because it has 3 set bits (1s)\nprint(find_Parity(7))  # Output: True\n\n# number = 4 (binary: 100) has even parity because it has 1 set bit (1)\nprint(find_Parity(4))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find whether the parity of a given number is odd.", "input_data": "find_Parity(12)", "expected_output": "False", "assertion": "assert find_Parity(12) == False", "assertion_": null}
{"problem_name": "630", "generated_code": "```python\ndef get_coordinates(test_tup):\n    # List to store the adjacent coordinates\n    adjacent_coords = []\n    \n    # Offsets for all adjacent positions (including diagonals)\n    offsets = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    \n    # Generate all adjacent coordinates by adding offsets to the original coordinate\n    for offset in offsets:\n        adjacent_coord = (test_tup[0] + offset[0], test_tup[1] + offset[1])\n        adjacent_coords.append(adjacent_coord)\n    \n    return adjacent_coords\n\n# Example usage:\ncoordinate = (3, 3)\nprint(get_coordinates(coordinate))\n```\n\nThis function `get_coordinates` takes a tuple `test_tup` representing a coordinate and returns a list of tuples representing all adjacent coordinates, including diagonals. The function calculates the adjacent coordinates by adding predefined offsets to the original coordinate.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "input_data": "get_coordinates((3, 4))", "expected_output": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assertion": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assertion_": null}
{"problem_name": "274", "generated_code": "```python\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum of even binomial coefficients\n    sum_even_binomials = 0\n    \n    # Calculate the sum of binomial coefficients at even indices\n    for k in range(0, n+1, 2):\n        sum_even_binomials += binomial_coefficient(n, k)\n    \n    return sum_even_binomials\n\ndef binomial_coefficient(n, k):\n    # Calculate binomial coefficient \"n choose k\"\n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    return result\n\n# Example usage:\n# n = 4, the even index binomial coefficients are C(4,0) + C(4,2) + C(4,4) = 1 + 6 + 1 = 8\nprint(even_binomial_Coeff_Sum(4))  # Output: 8\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "input_data": "even_binomial_Coeff_Sum(4)", "expected_output": "8", "assertion": "assert even_binomial_Coeff_Sum(4) == 8", "assertion_": null}
{"problem_name": "736", "generated_code": "```python\ndef left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x: left = mid + 1\n        else: right = mid\n    return left\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "input_data": "left_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert left_insertion([1,2,4,5],6)==4", "assertion_": null}
{"problem_name": "799", "generated_code": "```python\ndef left_rotate(n, d):\n    # Assuming n is a 32-bit integer\n    # The mask 0xFFFFFFFF is used to ensure the result is within 32 bits\n    BITS = 32\n    \n    # Left rotate is done by shifting n left by d and taking the d rightmost bits shifted to the left side\n    # The mask is used to ensure the result is within 32 bits\n    rotated = ((n << d) | (n >> (BITS - d))) & 0xFFFFFFFF\n    \n    return rotated\n\n# Example usage:\n# Rotate the bits of the number 16 (binary: 0001 0000) 2 bits to the left\n# Expected output: 64 (binary: 0100 0000)\nprint(left_rotate(16, 2))\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "input_data": "left_rotate(16,2)", "expected_output": "64", "assertion": "assert left_rotate(16,2) == 64", "assertion_": null}
{"problem_name": "451", "generated_code": "```python\ndef remove_whitespaces(text):\n    return text.replace(\" \", \"\")\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all whitespaces from the given string.", "input_data": "remove_whitespaces(' Google    Flutter ')", "expected_output": "'GoogleFlutter'", "assertion": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assertion_": null}
{"problem_name": "304", "generated_code": "```python\ndef rotate_subarray(arr, left, right):\n    # Rotate the subarray arr[left:right+1] to the left by one position\n    temp = arr[left]\n    for i in range(left, right):\n        arr[i] = arr[i + 1]\n    arr[right] = temp\n\ndef find_Element(arr, ranges, rotations, index):\n    # Apply the rotations\n    for i in range(rotations):\n        # Get the left and right indices for the current rotation\n        left, right = ranges[i % len(ranges)]\n        # Rotate the subarray from left to right\n        rotate_subarray(arr, left, right)\n    \n    # Return the element at the given index after all rotations\n    return arr[index]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nranges = [(0, 2), (0, 3)]\nrotations = 4\nindex = 1\nelement = find_Element(arr, ranges, rotations, index)\nprint(f\"Element at index {index} after {rotations} rotations is: {element}\")\n```\n\nThis function `find_Element` takes an array `arr`, a list of ranges `ranges` where each range is a tuple `(left, right)` representing the indices of the subarray to be rotated, the number of rotations `rotations`, and the index `index` at which we want to find the element after all the rotations have been performed.\n\nThe function first defines a helper function `rotate_subarray` to rotate a subarray to the left by one position. Then, it applies the rotations as specified by the `ranges` and `rotations`. After all rotations are applied, it returns the element at the given `index`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find element at a given index after number of rotations.", "input_data": "find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)", "expected_output": "3", "assertion": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assertion_": null}
{"problem_name": "80", "generated_code": "```python\ndef tetrahedral_number(n):\n    # The nth tetrahedral number is given by the formula T(n) = n*(n+1)*(n+2)/6\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:\n# print(tetrahedral_number(4))  # Should print 20, which is the 4th tetrahedral number\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth tetrahedral number.", "input_data": "tetrahedral_number(5)", "expected_output": "35", "assertion": "assert tetrahedral_number(5) == 35", "assertion_": null}
{"problem_name": "586", "generated_code": "```python\ndef split_Arr(l, n):\n    # Check if n is within the range of the list\n    if n < 0 or n > len(l):\n        return \"Invalid n: n should be within the range of the list length\"\n    \n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    \n    # Add the first part to the end of the second part\n    result = second_part + first_part\n    \n    return result\n\n# Example usage:\n# split_Arr([1, 2, 3, 4, 5], 2) should return [3, 4, 5, 1, 2]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to split a list at the nth eelment and add the first part to the end.", "input_data": "split_Arr([12,10,5,6,52,36],2)", "expected_output": "[5,6,52,36,12,10]", "assertion": "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]", "assertion_": null}
{"problem_name": "308", "generated_code": "```python\nfrom heapq import nlargest\nfrom itertools import product\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible products using a generator expression\n    all_products = (x * y for x, y in product(nums1, nums2))\n    \n    # Use nlargest to find the N largest products\n    largest_products = nlargest(N, all_products)\n    \n    return largest_products\n\n# Example usage:\n# nums1 = [1, 2, 3]\n# nums2 = [4, 5, 6]\n# N = 3\n# print(large_product(nums1, nums2, N))  # Output should be [18, 15, 12]\n```\nThis function uses the `nlargest` function from the `heapq` module to efficiently find the N largest products. It also uses `itertools.product` to generate all possible combinations of one element from each list.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "input_data": "large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)", "expected_output": "[60, 54, 50]", "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assertion_": null}
{"problem_name": "447", "generated_code": "```python\ndef cube_nums(nums):\n    # Use list comprehension to create a new list with cubes of the original numbers\n    return [num ** 3 for num in nums]\n\n# Example usage:\n# nums_list = [1, 2, 3, 4]\n# print(cube_nums(nums_list))  # Output: [1, 8, 27, 64]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find cubes of individual elements in a list.", "input_data": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assertion": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assertion_": null}
{"problem_name": "392", "generated_code": "```python\ndef get_max_sum(n, memo={}):\n    # Base case: if n is 0 or 1, the maximum sum is n itself\n    if n < 2:\n        return n\n    \n    # Check if the result is already computed and stored in memo dictionary\n    if n in memo:\n        return memo[n]\n    \n    # Recursive case: calculate the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    # and compare it with n to find the maximum\n    max_sum = max(\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo),\n        n\n    )\n    \n    # Store the computed result in memo dictionary for future reference\n    memo[n] = max_sum\n    \n    # Return the maximum sum for the current value of n\n    return max_sum\n\n# Example usage:\n# print(get_max_sum(10))  # Should return the maximum sum for n = 10\n```\n\nThis function uses memoization to store previously computed results in a dictionary to avoid redundant calculations, which significantly improves the efficiency for large values of `n`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "input_data": "get_max_sum(60)", "expected_output": "106", "assertion": "assert get_max_sum(60) == 106", "assertion_": null}
{"problem_name": "309", "generated_code": "```python\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the maximum of two numbers.", "input_data": "maximum(5,10)", "expected_output": "10", "assertion": "assert maximum(5,10) == 10", "assertion_": null}
{"problem_name": "595", "generated_code": "```python\ndef min_Swaps(str1, str2):\n    # First, we need to check if the two strings have the same number of 1's and 0's\n    # If not, it's impossible to convert str1 to str2 by swapping\n    if str1.count('1') != str2.count('1') or str1.count('0') != str2.count('0'):\n        return -1\n\n    # Count the number of mismatches where str1 has '1' and str2 has '0'\n    # Since the number of 1's and 0's are the same, we only need to count one type of mismatch\n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            swap_count += 1\n\n    return swap_count\n\n# Example usage:\n# str1 = \"1100\"\n# str2 = \"1001\"\n# print(min_Swaps(str1, str2))  # Output should be 1\n```\n\nThis function works under the assumption that the strings are of equal length and only contain '1' and '0'. If the strings contain other characters or are of different lengths, the function will not work correctly and additional validation would be needed.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.", "input_data": "min_Swaps(\"1101\",\"1110\")", "expected_output": "1", "assertion": "assert min_Swaps(\"1101\",\"1110\") == 1", "assertion_": null}
{"problem_name": "628", "generated_code": "```python\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace all spaces in the given string with '%20'.", "input_data": "replace_spaces(\"My Name is Dawood\")", "expected_output": "'My%20Name%20is%20Dawood'", "assertion": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assertion_": null}
{"problem_name": "238", "generated_code": "```python\ndef number_of_substrings(str):\n    # The number of non-empty substrings of a string of length n is n*(n+1)/2\n    n = len(str)\n    return (n * (n + 1)) // 2\n\n# Example usage:\n# str = \"abc\"\n# print(number_of_substrings(str))  # Output: 6 (Substrings: \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\")\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of non-empty substrings of a given string.", "input_data": "number_of_substrings(\"abc\")", "expected_output": "6", "assertion": "assert number_of_substrings(\"abc\") == 6", "assertion_": null}
{"problem_name": "142", "generated_code": "```python\ndef count_samepair(list1, list2, list3):\n    # Ensure all lists are of the same length to avoid IndexError\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    # Initialize a counter for the number of identical items\n    count = 0\n    \n    # Iterate through the lists up to the length of the shortest list\n    for i in range(min_length):\n        # Check if the items at the current position are identical in all three lists\n        if list1[i] == list2[i] == list3[i]:\n            count += 1  # Increment the counter if they are identical\n    \n    # Return the final count of identical items\n    return count\n```\n\nThis function `count_samepair` takes three lists as input and returns the count of items that are identical at the same position in all three lists. It first determines the length of the shortest list to avoid going out of bounds during iteration. Then, it iterates through the lists, comparing items at the same index in each list. If all three items match, it increments the counter. Finally, it returns the total count of identical items.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count number items that are identical in the same position of three given lists.", "input_data": "count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])", "expected_output": "3", "assertion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assertion_": null}
{"problem_name": "807", "generated_code": "```python\ndef first_odd(nums):\n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Return the first odd number found\n            return num\n    # If no odd number is found, return None\n    return None\n\n# Example usage:\n# nums_list = [2, 4, 6, 8, 10, 11, 14]\n# print(first_odd(nums_list))  # Output: 11\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first odd number in a given list of numbers.", "input_data": "first_odd([1,3,5])", "expected_output": "1", "assertion": "assert first_odd([1,3,5]) == 1", "assertion_": null}
{"problem_name": "14", "generated_code": "```python\ndef find_Volume(l, b, h):\n    # Calculate the area of the triangular base\n    base_area = (l * b) / 2\n    # Calculate the volume of the prism\n    volume = base_area * h\n    return volume\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the volume of a triangular prism.", "input_data": "find_Volume(10,8,6)", "expected_output": "240", "assertion": "assert find_Volume(10,8,6) == 240", "assertion_": null}
{"problem_name": "224", "generated_code": "```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage:\n# n = 13 (binary: 1101) has 3 set bits\nprint(count_Set_Bits(13))  # Output: 3\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "input_data": "count_Set_Bits(2)", "expected_output": "1", "assertion": "assert count_Set_Bits(2) == 1", "assertion_": null}
{"problem_name": "290", "generated_code": "```python\ndef max_length(list1):\n    # Initialize a variable to keep track of the maximum length found\n    max_len = 0\n    # Initialize a variable to keep track of the list with maximum length\n    max_list = []\n    \n    # Iterate through each list in the list of lists\n    for sublist in list1:\n        # Check if the current list's length is greater than the maximum length found so far\n        if len(sublist) > max_len:\n            # Update the maximum length and the list with maximum length\n            max_len = len(sublist)\n            max_list = sublist\n    \n    # Return the list with maximum length\n    return max_list\n\n# Example usage:\n# Define a list of lists\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\n# Call the function and print the result\nprint(max_length(list_of_lists))  # Output should be [6, 7, 8, 9]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the list of maximum length in a list of lists.", "input_data": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assertion_": null}
{"problem_name": "12", "generated_code": "```python\ndef sort_matrix(M):\n    # Calculate the sum of each row and pair it with the row index\n    row_sums_with_index = [(sum(row), index) for index, row in enumerate(M)]\n    \n    # Sort the pairs according to the sum, this will give us the sorted order of indices\n    sorted_indices = [index for _, index in sorted(row_sums_with_index)]\n    \n    # Reorder the matrix rows according to the sorted indices\n    sorted_M = [M[index] for index in sorted_indices]\n    \n    return sorted_M\n\n# Example usage:\n# matrix = [\n#     [5, 2, 3],\n#     [1, 4, 6],\n#     [7, 8, 9]\n# ]\n# sorted_matrix = sort_matrix(matrix)\n# print(sorted_matrix)\n# Output should be:\n# [\n#     [5, 2, 3],\n#     [1, 4, 6],\n#     [7, 8, 9]\n# ]\n# as the rows sums are 10, 11, and 24 respectively.\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "input_data": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])", "expected_output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assertion": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assertion_": null}
{"problem_name": "446", "generated_code": "```python\ndef count_occurrence(tup, lst):\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Initialize the count for each element in the list to 0\n    for element in lst:\n        count_dict[element] = 0\n    \n    # Iterate over the tuple and increment the count for each element found in the list\n    for item in tup:\n        if item in count_dict:\n            count_dict[item] += 1\n    \n    # Return the dictionary with the counts\n    return count_dict\n\n# Example usage:\n# tuple_elements = ('apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'apple')\n# list_elements = ['apple', 'banana', 'cherry', 'date']\n# print(count_occurrence(tuple_elements, list_elements))\n# Output should be: {'apple': 3, 'banana': 2, 'cherry': 2, 'date': 0}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the occurence of all elements of list in a tuple.", "input_data": "count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )", "expected_output": "3", "assertion": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assertion_": null}
{"problem_name": "96", "generated_code": "```python\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the number of divisors of a given integer.", "input_data": "divisor(15)", "expected_output": "4", "assertion": "assert divisor(15) == 4", "assertion_": null}
{"problem_name": "109", "generated_code": "```python\ndef odd_Equivalent(s, n):\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Length of the binary string\n    length = len(s)\n    # Counter for odd numbers\n    odd_count = 0\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        # Check if the number is odd\n        if num % 2 == 1:\n            odd_count += 1\n        # Rotate the number by shifting it left by 1 and moving the shifted out bit to the right end\n        num = (num << 1) | (num >> (length - 1))\n        # Mask the number to maintain the same length as the original binary string\n        num &= (1 << length) - 1\n    \n    return odd_count\n\n# Example usage:\ns = \"1011\"\nn = 5\nprint(odd_Equivalent(s, n))  # Output should be the number of odd numbers after rotating 5 times\n```\n\nThis function takes a binary string `s` and an integer `n`, and it rotates the binary representation of `s` `n` times to the left. After each rotation, it checks if the resulting number is odd and increments the `odd_count` if it is. The function then returns the total count of odd numbers obtained through this process.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "input_data": "odd_Equivalent(\"011001\",6)", "expected_output": "3", "assertion": "assert odd_Equivalent(\"011001\",6) == 3", "assertion_": null}
{"problem_name": "587", "generated_code": "```python\ndef list_tuple(listx):\n    return tuple(listx)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a list to a tuple.", "input_data": "list_tuple([5, 10, 7, 4, 15, 3])", "expected_output": "(5, 10, 7, 4, 15, 3)", "assertion": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "assertion_": null}
{"problem_name": "94", "generated_code": "```python\ndef index_minimum(test_list):\n    # Initialize the minimum value and the index of the minimum value\n    min_value = float('inf')\n    min_index = None\n    \n    # Iterate through the list of tuples\n    for i, (first_val, second_val) in enumerate(test_list):\n        # Update the minimum value and index if a new minimum is found\n        if second_val < min_value:\n            min_value = second_val\n            min_index = first_val\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_index\n\n# Example usage:\n# test_list = [(4, 5), (1, 2), (6, 1)]\n# print(index_minimum(test_list))  # Output: 6\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "input_data": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])", "expected_output": "'Varsha'", "assertion": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assertion_": null}
{"problem_name": "459", "generated_code": "```python\ndef remove_uppercase(str1):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word is not uppercase\n        if not word.isupper():\n            # Add the word to the result string with a space\n            result += word + \" \"\n    \n    # Return the result string without the trailing space\n    return result.strip()\n\n# Example usage:\nprint(remove_uppercase(\"Hello WORLD I am a PYTHON programmer\"))  # Output: \"Hello I am a programmer\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove uppercase substrings from a given string.", "input_data": "remove_uppercase('cAstyoUrFavoRitETVshoWs')", "expected_output": "'cstyoravoitshos'", "assertion": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assertion_": null}
{"problem_name": "722", "generated_code": "```python\ndef filter_data(students, h, w):\n    # Create a dictionary to store the filtered students\n    filtered_students = {}\n    \n    # Iterate over the students dictionary\n    for student, (height, weight) in students.items():\n        # Check if both height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered dictionary\n            filtered_students[student] = (height, weight)\n    \n    # Return the filtered dictionary\n    return filtered_students\n```\n\nYou can use this function by passing a dictionary of students with their heights and weights, and the minimum height and weight you want to filter by. For example:\n\n```python\nstudents_data = {\n    \"Alice\": (170.0, 60.0),\n    \"Bob\": (150.0, 55.0),\n    \"Charlie\": (180.0, 75.0),\n    \"David\": (160.0, 70.0)\n}\n\nmin_height = 165.0\nmin_weight = 65.0\n\nfiltered_students = filter_data(students_data, min_height, min_weight)\nprint(filtered_students)  # Output should be {'Charlie': (180.0, 75.0), 'David': (160.0, 70.0)}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "input_data": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)", "expected_output": "{'Cierra Vega': (6.2, 70)}", "assertion": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assertion_": null}
{"problem_name": "732", "generated_code": "```python\ndef replace_specialchar(text):\n    # Define the characters to be replaced\n    chars_to_replace = [' ', ',', '.']\n    \n    # Replace each character with a colon\n    for char in chars_to_replace:\n        text = text.replace(char, ':')\n    \n    return text\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "input_data": "replace_specialchar('Python language, Programming language.')", "expected_output": "('Python:language::Programming:language:')", "assertion": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assertion_": null}
{"problem_name": "67", "generated_code": "```python\ndef bell_number(n):\n    \"\"\"\n    Compute the nth Bell number, which is the number of ways to partition a set of size n.\n    \"\"\"\n    # Create an empty list to store Bell numbers, initialize the first Bell number\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        # Explicitly set the first entry of the current row to the last entry of the previous row\n        bell[i][0] = bell[i-1][i-1]\n\n        # Fill the rest of the entries of the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    # The nth Bell number is the first entry of the nth row\n    return bell[n][0]\n\n# Example usage:\nprint(bell_number(0))  # Output: 1\nprint(bell_number(1))  # Output: 1\nprint(bell_number(2))  # Output: 2\nprint(bell_number(3))  # Output: 5\nprint(bell_number(5))  # Output: 52\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the number of ways to partition a set of Bell numbers.", "input_data": "bell_number(2)", "expected_output": "2", "assertion": "assert bell_number(2)==2", "assertion_": null}
{"problem_name": "59", "generated_code": "```python\ndef is_octagonal(n):\n    # Using the formula for the nth octagonal number: n * (3n - 2)\n    if n < 1:\n        return False  # There is no 0th or negative octagonal number\n    return n * (3 * n - 2)\n\n# Example usage:\n# To find the 5th octagonal number\nprint(is_octagonal(5))  # Output should be 5 * (3*5 - 2) = 5 * 13 = 65\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth octagonal number.", "input_data": "is_octagonal(5)", "expected_output": "65", "assertion": "assert is_octagonal(5) == 65", "assertion_": null}
{"problem_name": "61", "generated_code": "```python\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(char) for char in substring if char.isdigit())\n            if digit_sum == len(substring):\n                count += 1\n    return count\n\n# Example usage:\n# s = \"1234\"\n# print(count_Substrings(s))  # Output should be 4, as there are 4 substrings with sum of digits equal to their length: \"1\", \"2\", \"3\", \"4\"\n```\nThis function iterates over all possible substrings of the input string `s` and checks if the sum of the digits within each substring is equal to the length of that substring. If it is, it increments the count. Finally, it returns the total count of such substrings.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "input_data": "count_Substrings('112112')", "expected_output": "6", "assertion": "assert count_Substrings('112112') == 6", "assertion_": null}
{"problem_name": "783", "generated_code": "```python\ndef rgb_to_hsv(r, g, b):\n    # Normalize the RGB values by scaling them to be between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Find the maximum and minimum values of R, G and B\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    # Calculate H\n    if delta == 0:\n        h = 0\n    elif max_rgb == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_rgb == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_rgb == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n\n    # Calculate S\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = (delta / max_rgb) * 100\n\n    # Calculate V\n    v = max_rgb * 100\n\n    return h, s, v\n\n# Example usage:\nh, s, v = rgb_to_hsv(255, 0, 0)\nprint(f\"Hue: {h}, Saturation: {s}%, Value: {v}%\")\n```\n\nThis function takes in the RGB values (r, g, b), where each parameter is an integer between 0 and 255, and returns the corresponding HSV values (h, s, v). Hue (h) is in degrees (0 to 360), while Saturation (s) and Value (v) are given as percentages (0 to 100).", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "input_data": "rgb_to_hsv(255, 255, 255)", "expected_output": "(0, 0.0, 100.0)", "assertion": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assertion_": null}
{"problem_name": "617", "generated_code": "```python\ndef min_Jumps(steps, d):\n    # Initialize the current position and jump counter\n    position = 0\n    jumps = 0\n    \n    # Loop until the position is less than the distance d\n    while position < d:\n        # Increase the jump counter\n        jumps += 1\n        # Calculate the next position by adding the step size\n        # The step size is the minimum of the remaining distance and the steps[jumps-1]\n        # If the steps list is exhausted, use the last element\n        step_size = steps[min(jumps - 1, len(steps) - 1)]\n        position += step_size\n    \n    # Return the number of jumps required\n    return jumps\n\n# Example usage:\n# steps = [1, 2, 3, 4] and d = 10\n# The function should return 4 because the jumps will be 1, 2, 3, 4 and the total distance covered will be 10.\nprint(min_Jumps([1, 2, 3, 4], 10))  # Output: 4\n```\n\nThis function `min_Jumps` takes a list of step lengths `steps` and a distance `d` and calculates the minimum number of jumps required to reach at least distance `d` from the origin on a 2D plane, assuming each jump moves you along the x-axis. The function iterates through the steps, adding the step size to the current position until the position is greater than or equal to `d`. If the number of jumps exceeds the length of the `steps` list, the last element of the list is used for all subsequent jumps.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "input_data": "min_Jumps((3,4),11)", "expected_output": "3.5", "assertion": "assert min_Jumps((3,4),11)==3.5", "assertion_": null}
{"problem_name": "762", "generated_code": "```python\ndef check_monthnumber_number(monthnum3):\n    # List of months with 30 days\n    months_with_30_days = [4, 6, 9, 11]  # April, June, September, November\n    \n    # Check if the given month number is in the list of months with 30 days\n    if monthnum3 in months_with_30_days:\n        return True\n    else:\n        return False\n\n# Example usage:\n# Should return True, since April has 30 days\nprint(check_monthnumber_number(4))\n\n# Should return False, since May does not have 30 days\nprint(check_monthnumber_number(5))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "input_data": "check_monthnumber_number(6)", "expected_output": "True", "assertion": "assert check_monthnumber_number(6)==True", "assertion_": null}
{"problem_name": "739", "generated_code": "```python\nimport math\n\ndef find_Index(n):\n    # Function to check if x is a triangular number\n    def is_triangular(x):\n        # A number is triangular if 8*x + 1 is a perfect square\n        return (math.sqrt(8*x + 1) - 1) / 2 % 1 == 0\n\n    # Start with the smallest n-digit number\n    smallest_n_digit = 10**(n-1)\n    \n    # Calculate the index of the smallest n-digit triangular number\n    # using the inverse of the triangular number formula\n    # t = (i * (i + 1)) / 2\n    # i = (-1 + sqrt(1 + 8*t)) / 2\n    # We start with the smallest n-digit number and find the smallest i\n    # such that t is a triangular number and has n digits\n    i = math.ceil((-1 + math.sqrt(1 + 8*smallest_n_digit)) / 2)\n    \n    # If the calculated triangular number has less than n digits, increment i\n    while not is_triangular(i * (i + 1) // 2) or len(str(i * (i + 1) // 2)) < n:\n        i += 1\n    \n    # Return the index of the smallest n-digit triangular number\n    return i\n\n# Example usage:\n# Find the index of the smallest triangular number with 2 digits\nprint(find_Index(2))  # Output should be the index of the smallest 2-digit triangular number\n```\n\nThis function calculates the index of the smallest triangular number with `n` digits. It first defines a helper function to check if a number is triangular. Then it calculates the index `i` of the smallest `n`-digit triangular number using the inverse of the triangular number formula. If the calculated triangular number has less than `n` digits, it increments `i` until it finds the correct triangular number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "input_data": "find_Index(2)", "expected_output": "4", "assertion": "assert find_Index(2) == 4", "assertion_": null}
{"problem_name": "137", "generated_code": "```python\ndef zero_count(nums):\n    if not nums:  # Check if the list is empty\n        return None  # Return None for empty list as there is no ratio to calculate\n\n    zero_count = nums.count(0)  # Count the number of zeroes in the list\n    non_zero_count = len(nums) - zero_count  # Calculate the number of non-zeroes\n\n    if non_zero_count == 0:  # Check if there are no non-zeroes to avoid division by zero\n        return float('inf')  # Return infinity if all numbers are zero\n\n    return zero_count / non_zero_count  # Return the ratio of zeroes to non-zeroes\n\n# Example usage:\nnums = [1, 0, 2, 0, 3, 0, 4]\nratio = zero_count(nums)\nprint(f\"The ratio of zeroes to non-zeroes is: {ratio}\")\n```\n\nThis function `zero_count` calculates the ratio of zeroes to non-zeroes in a given list of integers. If the list is empty, it returns `None`. If there are no non-zeroes, it returns infinity (`float('inf')`) to represent an undefined ratio, as division by zero is not possible. Otherwise, it returns the calculated ratio as a floating-point number.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "4", "generated_code": "```python\nimport heapq\n\ndef heap_queue_largest(nums, n):\n    # Use nlargest from heapq to find the n largest elements\n    return heapq.nlargest(n, nums)[::-1]  # Reverse to get descending order\n\n# Example usage:\n# nums_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n# print(heap_queue_largest(nums_list, 3))  # Output: [9, 5, 5]\n```\n\nThis function uses the `heapq` module, which provides an efficient implementation of the heap queue algorithm, also known as the priority queue algorithm. The `nlargest` function is particularly useful for this problem as it can find the `n` largest elements in a dataset without having to sort the entire list. After finding the `n` largest elements, the result is reversed to ensure the output is in descending order.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "input_data": "heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)", "expected_output": "[85, 75, 65]", "assertion": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]", "assertion_": null}
{"problem_name": "250", "generated_code": "```python\ndef count_X(tup, x):\n    # Use the count method of tuple to find the number of occurrences of x\n    return tup.count(x)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "input_data": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)", "expected_output": "0", "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assertion_": null}
{"problem_name": "228", "generated_code": "```python\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with all bits set in the given range [l, r]\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Use bitwise AND to check if all bits are set in the given range\n    return (n & mask) == mask\n\n# Example usage:\n# n = 31 (11111 in binary), l = 1, r = 3\n# Expected output: True, because bits in range [1, 3] are all set (11111)\nprint(all_Bits_Set_In_The_Given_Range(31, 1, 3))  # Output: True\n\n# n = 16 (10000 in binary), l = 2, r = 4\n# Expected output: False, because bits in range [2, 4] are not all set (10000)\nprint(all_Bits_Set_In_The_Given_Range(16, 2, 4))  # Output: False\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether all the bits are unset in the given range or not.", "input_data": "all_Bits_Set_In_The_Given_Range(4,1,2)", "expected_output": "True", "assertion": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assertion_": null}
{"problem_name": "602", "generated_code": "```python\ndef first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None\n\n# Example usage:\n# print(first_repeated_char(\"abca\"))  # Output: a\n# print(first_repeated_char(\"abc\"))   # Output: None\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first repeated character in a given string.", "input_data": "first_repeated_char(\"abcabc\")", "expected_output": "\"a\"", "assertion": "assert first_repeated_char(\"abcabc\") == \"a\"", "assertion_": null}
{"problem_name": "301", "generated_code": "```python\ndef dict_depth(d, level=1):\n    if not isinstance(d, dict) or not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())\n\n# Example usage:\n# my_dict = {'a': 1, 'b': {'c': {'d': {}}}}\n# print(dict_depth(my_dict))  # Output: 4\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the depth of a dictionary.", "input_data": "dict_depth({'a':1, 'b': {'c': {'d': {}}}})", "expected_output": "4", "assertion": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assertion_": null}
{"problem_name": "431", "generated_code": "```python\ndef common_element(list1, list2):\n    # Convert the first list to a set for faster lookup\n    set1 = set(list1)\n    # Iterate through the second list and check if any element is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    # If no common element is found, return False\n    return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes two lists and returns true if they have at least one common element.", "input_data": "common_element([1,2,3,4,5], [5,6,7,8,9])", "expected_output": "True", "assertion": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assertion_": null}
{"problem_name": "790", "generated_code": "```python\ndef even_position(nums):\n    # Iterate over the list, checking only even indices\n    for i in range(0, len(nums), 2):\n        # If the number at the even index is not even, return False\n        if nums[i] % 2 != 0:\n            return False\n    # If all even indices contain even numbers, return True\n    return True\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether every even index contains even numbers of a given list.", "input_data": "even_position([3,2,1])", "expected_output": "False", "assertion": "assert even_position([3,2,1]) == False", "assertion_": null}
{"problem_name": "726", "generated_code": "```python\ndef multiply_elements(test_tup):\n    # Using tuple comprehension to generate the result tuple\n    result = tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n    return result\n\n# Example usage:\n# input_tuple = (1, 2, 3, 4, 5)\n# output_tuple = multiply_elements(input_tuple)\n# print(output_tuple)  # Output: (2, 6, 12, 20)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "input_data": "multiply_elements((1, 5, 7, 8, 10))", "expected_output": "(5, 35, 56, 80)", "assertion": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assertion_": null}
{"problem_name": "461", "generated_code": "```python\ndef upper_ctr(str):\n    return sum(1 for c in str if c.isupper())\n\n# Example usage:\n# input_string = \"Hello World!\"\n# print(upper_ctr(input_string))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the upper case characters in a given string.", "input_data": "upper_ctr('PYthon')", "expected_output": "1", "assertion": "assert upper_ctr('PYthon') == 1", "assertion_": null}
{"problem_name": "470", "generated_code": "```python\ndef add_pairwise(test_tup):\n    # Using zip and list comprehension to add pairwise elements\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n\n# Example usage:\n# Input tuple\ninput_tuple = (1, 5, 3, 4, 6)\n# Function call to add pairwise elements\nresult = add_pairwise(input_tuple)\nprint(result)  # Output will be (6, 8, 7, 10)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "input_data": "add_pairwise((1, 5, 7, 8, 10))", "expected_output": "(6, 12, 15, 18)", "assertion": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assertion_": null}
{"problem_name": "72", "generated_code": "```python\ndef dif_Square(n):\n    # A number can be represented as the difference of two squares\n    # if and only if it is not of the form 4k+2 for any integer k.\n    # This is because n = x^2 - y^2 = (x + y)(x - y)\n    # For n to be the difference of two squares, both (x + y) and (x - y) must be integers.\n    # If n is of the form 4k+2, then one of (x + y) or (x - y) must be odd and the other even, which is not possible.\n    \n    # Check if n is of the form 4k+2\n    if n % 4 == 2:\n        return False\n    else:\n        return True\n\n# Example usage:\n# Should return True as 5 can be represented as 3^2 - 2^2\nprint(dif_Square(5))\n\n# Should return False as 6 cannot be represented as the difference of two squares\nprint(dif_Square(6))\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "input_data": "dif_Square(5)", "expected_output": "True", "assertion": "assert dif_Square(5) == True", "assertion_": null}
{"problem_name": "473", "generated_code": "```python\ndef tuple_intersection(test_list1, test_list2):\n    # Convert tuples in both lists to frozensets for order-agnostic comparison\n    set_list1 = [frozenset(tup) for tup in test_list1]\n    set_list2 = [frozenset(tup) for tup in test_list2]\n    \n    # Find the intersection of the frozenset lists\n    intersection = set(set_list1).intersection(set_list2)\n    \n    # Convert the frozensets back to tuples\n    result = [tuple(fs) for fs in intersection]\n    \n    return result\n\n# Example usage:\n# test_list1 = [(1, 2), (3, 4), (5, 6)]\n# test_list2 = [(3, 4), (5, 7), (1, 2)]\n# print(tuple_intersection(test_list1, test_list2))  # Output: [(1, 2), (3, 4)]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "input_data": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])", "expected_output": "{(4, 5), (3, 4), (5, 6)}", "assertion": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assertion_": null}
{"problem_name": "806", "generated_code": "```python\ndef max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n\n# Example usage:\n# test_str = \"This is a TeST StrIng With SOME UPPERCASE RUNS\"\n# print(max_run_uppercase(test_str))  # Output should be 4, because of \"SOME\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find maximum run of uppercase characters in the given string.", "input_data": "max_run_uppercase('GeMKSForGERksISBESt')", "expected_output": "5", "assertion": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assertion_": null}
{"problem_name": "791", "generated_code": "```python\ndef remove_nested(test_tup):\n    # Using list comprehension to remove nested tuples\n    return tuple(ele for ele in test_tup if not isinstance(ele, tuple))\n\n# Example usage:\n# Input: a tuple with nested tuples\ninput_tuple = (5, (1, 2), 3, (4, 5), 6, (7, 8))\n# Output: a tuple without nested tuples\noutput_tuple = remove_nested(input_tuple)\nprint(output_tuple)  # Output should be (5, 3, 6)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove tuples from the given tuple.", "input_data": "remove_nested((1, 5, 7, (4, 6), 10))", "expected_output": "(1, 5, 7, 10)", "assertion": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assertion_": null}
{"problem_name": "226", "generated_code": "```python\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove the characters which have odd index values of a given string.", "input_data": "odd_values_string('abcdef')", "expected_output": "'ace'", "assertion": "assert odd_values_string('abcdef') == 'ace'", "assertion_": null}
{"problem_name": "272", "generated_code": "```python\ndef rear_extract(test_list):\n    # Extract the last element of each tuple using list comprehension\n    return [item[-1] for item in test_list]\n\n# Example usage:\n# test_list = [(4, 5), (1, 2), (6, 7)]\n# print(rear_extract(test_list))  # Output: [5, 2, 7]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "input_data": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])", "expected_output": "[21, 20, 19]", "assertion": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assertion_": null}
{"problem_name": "756", "generated_code": "```python\nimport re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\nprint(text_match_zero_one(\"ab\"))  # Should print 'Found a match!'\nprint(text_match_zero_one(\"aabbb\"))  # Should print 'Found a match!'\nprint(text_match_zero_one(\"ac\"))  # Should print 'Not matched!'\nprint(text_match_zero_one(\"b\"))  # Should print 'Not matched!'\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "input_data": "text_match_zero_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_zero_one(\"ac\")==False", "assertion_": null}
{"problem_name": "443", "generated_code": "```python\ndef largest_neg(list1):\n    # Initialize a variable to store the largest negative number\n    largest_negative = float('-inf')\n    \n    # Iterate through the list to find the largest negative number\n    for num in list1:\n        # Check if the current number is negative and greater than the current largest\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    \n    # If a negative number was found, return it, otherwise return None\n    return largest_negative if largest_negative != float('-inf') else None\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the largest negative number from the given list.", "input_data": "largest_neg([1,2,3,-4,-6])", "expected_output": "-6", "assertion": "assert largest_neg([1,2,3,-4,-6]) == -6", "assertion_": null}
{"problem_name": "424", "generated_code": "```python\ndef extract_rear(test_tuple):\n    # Using list comprehension to iterate and extract the last character of each string\n    return tuple([ele[-1] for ele in test_tuple])\n\n# Example usage:\ntest_tuple = (\"hello\", \"world\", \"python\", \"programming\")\nprint(extract_rear(test_tuple))  # Output: ('o', 'd', 'n', 'g')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract only the rear index element of each string in the given tuple.", "input_data": "extract_rear(('Mers', 'for', 'Vers') )", "expected_output": "['s', 'r', 's']", "assertion": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assertion_": null}
{"problem_name": "2", "generated_code": "```python\ndef similar_elements(test_tup1, test_tup2):\n    # Using set intersection to find common elements\n    return list(set(test_tup1) & set(test_tup2))\n\n# Example usage:\n# test_tup1 = (1, 2, 3, 4, 5)\n# test_tup2 = (4, 5, 6, 7, 8)\n# print(similar_elements(test_tup1, test_tup2))  # Output: [4, 5]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the shared elements from the given two lists.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "724", "generated_code": "```python\ndef power_base_sum(base, power):\n    # Calculate the base to the specified power\n    number = base ** power\n    \n    # Convert the number to a string to iterate over its digits\n    number_str = str(number)\n    \n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in number_str)\n    \n    return digit_sum\n\n# Example usage:\n# print(power_base_sum(2, 15))  # Should output the sum of the digits of 2^15\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "input_data": "power_base_sum(2,100)", "expected_output": "115", "assertion": "assert power_base_sum(2,100)==115", "assertion_": null}
{"problem_name": "143", "generated_code": "```python\ndef find_lists(Input):\n    # Initialize a counter for lists\n    list_count = 0\n    \n    # Iterate over each item in the tuple\n    for item in Input:\n        # Check if the current item is a list\n        if isinstance(item, list):\n            # Increment the counter\n            list_count += 1\n    \n    # Return the total count of lists\n    return list_count\n\n# Example usage:\n# Input tuple containing various types including lists\ninput_tuple = (1, 'a', [1, 2, 3], {'key': 'value'}, [4, 5, 6], 7, (8, 9))\n# Call the function and print the result\nprint(find_lists(input_tuple))  # Output should be 2, as there are two lists in the tuple\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find number of lists present in the given tuple.", "input_data": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))", "expected_output": "2", "assertion": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assertion_": null}
{"problem_name": "448", "generated_code": "```python\ndef perrin_number(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return perrin_number(n - 2) + perrin_number(n - 3)\n\ndef cal_sum(n):\n    sum_perrin = 0\n    for i in range(n):\n        sum_perrin += perrin_number(i)\n    return sum_perrin\n\n# Example usage:\n# Calculate the sum of the first 10 Perrin numbers\nprint(cal_sum(10))  # Output should be the sum of the first 10 Perrin numbers\n```\n\nPlease note that the above implementation of `perrin_number` is a recursive function without memoization or dynamic programming, which can be very inefficient for larger values of `n`. If you need to calculate the sum for large `n`, consider using a more efficient approach.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum of perrin numbers.", "input_data": "cal_sum(9)", "expected_output": "49", "assertion": "assert cal_sum(9) == 49", "assertion_": null}
{"problem_name": "457", "generated_code": "```python\ndef Find_Min(lst):\n    # Initialize the minimum length to a large number\n    min_length = float('inf')\n    min_sublist = None\n    \n    # Iterate through the list to find the sublist with minimum length\n    for sublist in lst:\n        # Check if the current sublist is a list and update min_length and min_sublist if it's shorter\n        if isinstance(sublist, list) and len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist\n\n# Example usage:\n# lst = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\n# print(Find_Min(lst))  # Output: [6]\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sublist having minimum length.", "input_data": "Find_Min([[1],[1,2],[1,2,3]])", "expected_output": "[1]", "assertion": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assertion_": null}
{"problem_name": "426", "generated_code": "```python\ndef filter_oddnumbers(nums):\n    # Using list comprehension to filter odd numbers\n    return [num for num in nums if num % 2 != 0]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to filter odd numbers.", "input_data": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1,3,5,7,9]", "assertion": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assertion_": null}
{"problem_name": "755", "generated_code": "```python\ndef second_smallest(numbers):\n    # First, we remove duplicates by converting the list to a set\n    unique_numbers = set(numbers)\n    \n    # If there are less than 2 unique numbers, we cannot find the second smallest\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Convert the set back to a list and sort it\n    sorted_numbers = sorted(unique_numbers)\n    \n    # Return the second element in the sorted list\n    return sorted_numbers[1]\n\n# Example usage:\n# print(second_smallest([1, 2, 3, 4]))  # Output: 2\n# print(second_smallest([4, 4, 4, 4]))  # Output: None (since there's no second smallest)\n# print(second_smallest([5, 1, 5, 2, 5, 3]))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the second smallest number in a list.", "input_data": "second_smallest([1, 2, -8, -2, 0, -2])", "expected_output": "-2", "assertion": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assertion_": null}
{"problem_name": "163", "generated_code": "```python\nimport math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Parameters:\n    s (int): The number of sides of the polygon.\n    l (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the polygon.\n    \"\"\"\n    # The formula for the area of a regular polygon is:\n    # (s * l^2) / (4 * tan(pi / s))\n    # where s is the number of sides and l is the length of each side.\n    area = (s * l**2) / (4 * math.tan(math.pi / s))\n    return area\n\n# Example usage:\n# Calculate the area of a regular pentagon with side length 5\nprint(area_polygon(5, 5))  # Output should be the area of the pentagon\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "6", "generated_code": "```python\ndef differ_At_One_Bit_Pos(a, b):\n    # XOR of a and b will give us a number that has bits set\n    # at positions where a and b differ\n    xor_result = a ^ b\n    \n    # Check if the XOR result is a power of two, which means\n    # it has only one bit set, and thus a and b differ at one bit position only\n    return (xor_result & (xor_result - 1)) == 0 and xor_result != 0\n\n# Example usage:\n# Should return True as 2 (10 in binary) and 3 (11 in binary) differ by one bit\nprint(differ_At_One_Bit_Pos(2, 3))\n\n# Should return False as 4 (100 in binary) and 7 (111 in binary) differ by more than one bit\nprint(differ_At_One_Bit_Pos(4, 7))\n```\n\nThis function works by first calculating the XOR of the two numbers, which will have bits set only at positions where the two numbers differ. If the result is a power of two (i.e., it has only one bit set), then the numbers differ at exactly one bit position. We check if a number is a power of two by using the trick `(xor_result & (xor_result - 1)) == 0`, which will be true only for numbers that are powers of two. We also check that `xor_result` is not zero to ensure that the numbers are not the same.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the two numbers differ at one bit position only or not.", "input_data": "differ_At_One_Bit_Pos(13,9)", "expected_output": "True", "assertion": "assert differ_At_One_Bit_Pos(13,9) == True", "assertion_": null}
{"problem_name": "70", "generated_code": "```python\ndef get_equal(input_list):\n    # Check if the list is empty\n    if not input_list:\n        return True  # An empty list satisfies the condition trivially\n    \n    # Get the length of the first tuple\n    first_length = len(input_list[0])\n    \n    # Compare the length of the first tuple with the rest\n    for item in input_list:\n        if len(item) != first_length:\n            return False  # Found a tuple with a different length\n    \n    return True  # All tuples have the same length\n\n# Example usage:\n# tuples_list = [(1, 2), (3, 4), (5, 6)]\n# print(get_equal(tuples_list))  # Output: True\n\n# tuples_list = [(1, 2, 3), (3, 4), (5, 6)]\n# print(get_equal(tuples_list))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find whether all the given tuples have equal length or not.", "input_data": "get_equal([(11, 22, 33), (44, 55, 66)])", "expected_output": "True", "assertion": "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assertion_": null}
{"problem_name": "763", "generated_code": "```python\ndef find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize difference as infinite\n    diff = float('inf')\n    \n    # Find the min diff by comparing adjacent pairs in sorted array\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    \n    # Return the minimum difference found\n    return diff\n\n# Example usage:\n# arr = [1, 5, 3, 19, 18, 25]\n# n = len(arr)\n# print(find_min_diff(arr, n))  # Output should be 1\n```\nThis function first sorts the array, which takes O(n log n) time. Then it iterates through the array once, which takes O(n) time, to find the minimum difference between adjacent elements. The overall time complexity is dominated by the sorting step, making it O(n log n).", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "input_data": "find_min_diff((1,5,3,19,18,25),6)", "expected_output": "1", "assertion": "assert find_min_diff((1,5,3,19,18,25),6) == 1", "assertion_": null}
{"problem_name": "600", "generated_code": "```python\ndef is_Even(n):\n    # Check if the number is even\n    return n % 2 == 0\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number is even or not.", "input_data": "is_Even(1)", "expected_output": "False", "assertion": "assert is_Even(1) == False", "assertion_": null}
{"problem_name": "56", "generated_code": "```python\ndef check(n):\n    # Convert the number to a string to reverse it\n    reverse_str = str(n)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reverse_int = int(reverse_str)\n    \n    # Check if the given number is one less than twice its reverse\n    return n == 2 * reverse_int - 1\n\n# Example usage:\n# print(check(47))  # Should return True because 47 is one less than twice 74 (which is 148 - 1)\n# print(check(23))  # Should return False because 23 is not one less than twice 32\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check if a given number is one less than twice its reverse.", "input_data": "check(70)", "expected_output": "False", "assertion": "assert check(70) == False", "assertion_": null}
{"problem_name": "394", "generated_code": "```python\ndef check_distinct(test_tup):\n    # Using set to check for duplicates as set contains only unique elements\n    return len(test_tup) == len(set(test_tup))\n\n# Example usage:\n# Should return True as all elements are distinct\nprint(check_distinct((1, 2, 3, 4, 5))) \n\n# Should return False as there are duplicates (2, 2)\nprint(check_distinct((1, 2, 2, 4, 5))) \n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if given tuple contains no duplicates.", "input_data": "check_distinct((1, 4, 5, 6, 1, 4))", "expected_output": "False", "assertion": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assertion_": null}
{"problem_name": "778", "generated_code": "```python\ndef pack_consecutive_duplicates(list1):\n    if not list1:  # If the list is empty, return an empty list\n        return []\n\n    packed_list = []  # This will be the list of packed duplicates\n    current_sublist = [list1[0]]  # Initialize the first sublist with the first element\n\n    # Iterate over the list starting from the second element\n    for item in list1[1:]:\n        if item == current_sublist[-1]:\n            # If the current item is the same as the last item in the current sublist, append it\n            current_sublist.append(item)\n        else:\n            # If the current item is different, append the current sublist to the packed list\n            packed_list.append(current_sublist)\n            # Start a new sublist with the current item\n            current_sublist = [item]\n\n    # Don't forget to append the last sublist after the loop ends\n    packed_list.append(current_sublist)\n\n    return packed_list\n\n# Example usage:\nprint(pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'c', 'c', 'a']))  # Output: [['a', 'a'], ['b'], ['c', 'c', 'c'], ['a']]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "input_data": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])", "expected_output": "[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assertion": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assertion_": null}
{"problem_name": "389", "generated_code": "```python\ndef find_lucas(n):\n    # Base cases\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    # Initialize the first two Lucas numbers\n    a, b = 2, 1\n    \n    # Calculate the n'th Lucas number\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b\n\n# Example usage:\n# print(find_lucas(10))  # Output: 123\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n'th lucas number.", "input_data": "find_lucas(9)", "expected_output": "76", "assertion": "assert find_lucas(9) == 76", "assertion_": null}
{"problem_name": "760", "generated_code": "```python\ndef unique_element(arr):\n    # Check if all elements in the array are the same as the first element\n    return all(x == arr[0] for x in arr)\n\n# Example usage:\n# arr = [1, 1, 1, 1]\n# print(unique_element(arr))  # Output: True\n\n# arr = [1, 2, 1, 1]\n# print(unique_element(arr))  # Output: False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "input_data": "unique_Element([1,1,1])", "expected_output": "True", "assertion": "assert unique_Element([1,1,1]) == True", "assertion_": null}
{"problem_name": "556", "generated_code": "```python\ndef find_Odd_Pair(A, N):\n    # Initialize counts of even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd elements\n    for i in range(N):\n        if A[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # The number of pairs with odd XOR is given by the product\n    # of the count of even numbers and the count of odd numbers\n    # because even ^ odd = odd and odd ^ even = odd\n    odd_pairs = even_count * odd_count\n    \n    return odd_pairs\n\n# Example usage:\n# A = [1, 2, 3, 4, 5]\n# N = len(A)\n# print(find_Odd_Pair(A, N))  # Output: 6\n```\nThis function `find_Odd_Pair` takes an array `A` and its size `N` as arguments and returns the number of pairs with an odd XOR value. It works by counting the number of even and odd elements in the array and then calculating the number of odd pairs as the product of these two counts.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of pairs whose xor value is odd.", "input_data": "find_Odd_Pair([5,4,7,2,1],5)", "expected_output": "6", "assertion": "assert find_Odd_Pair([5,4,7,2,1],5) == 6", "assertion_": null}
{"problem_name": "454", "generated_code": "```python\nimport re\n\ndef text_match_wordz(text):\n    # Regular expression pattern to match any word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matched words\n    return matches\n```\n\n# Example usage:\ntext = \"The zebra at the zoo was quite a sight to see.\"\nprint(text_match_wordz(text))  # Output: ['zebra', 'zoo']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a word containing 'z'.", "input_data": "text_match_wordz(\"pythonz.\")", "expected_output": "True", "assertion": "assert text_match_wordz(\"pythonz.\")==True", "assertion_": null}
{"problem_name": "422", "generated_code": "```python\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average of the cubes\n    average = sum_of_cubes / n\n    return average\n\n# Example usage:\nn = 4\nprint(f\"The average of cubes of first {n} natural numbers is: {find_Average_Of_Cube(n)}\")\n```\n\nThis function `find_Average_Of_Cube` takes an integer `n` and returns the average of the cubes of the first `n` natural numbers. The sum of cubes is calculated using a generator expression within the `sum` function, and the average is then computed by dividing this sum by `n`.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the average of cubes of first n natural numbers.", "input_data": "find_Average_Of_Cube(2)", "expected_output": "4.5", "assertion": "assert find_Average_Of_Cube(2) == 4.5", "assertion_": null}
{"problem_name": "256", "generated_code": "```python\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            # Mark all multiples of i as non-prime\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of prime numbers\n    return sum(is_prime)\n\n# Example usage:\nprint(count_Primes_nums(10))  # Should return 4, as there are 4 prime numbers less than 10: 2, 3, 5, 7\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "input_data": "count_Primes_nums(5)", "expected_output": "2", "assertion": "assert count_Primes_nums(5) == 2", "assertion_": null}
{"problem_name": "237", "generated_code": "```python\ndef check_occurences(test_list):\n    # Create an empty dictionary to store the count of each tuple\n    occurences = {}\n    \n    # Iterate over each tuple in the list\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if item in occurences:\n            occurences[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurences[item] = 1\n    \n    # Return the dictionary with the count of each tuple\n    return occurences\n\n# Example usage:\n# test_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2)]\n# print(check_occurences(test_list))\n# Output: {(1, 2): 3, (3, 4): 2, (5, 6): 1}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "input_data": "check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )", "expected_output": "{(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assertion": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assertion_": null}
{"problem_name": "82", "generated_code": "```python\nimport math\n\ndef volume_sphere(r):\n    # Volume of a sphere formula: V = 4/3 * π * r^3\n    volume = (4.0/3.0) * math.pi * (r ** 3)\n    return volume\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a sphere.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "639", "generated_code": "```python\ndef sample_nam(sample_names):\n    # Filter out names that start with a lowercase letter\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    \n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n    \n    return total_length\n\n# Example usage:\n# sample_names = [\"Alice\", \"bob\", \"Charlie\", \"david\"]\n# print(sample_nam(sample_names))  # Output should be 11 (Alice + Charlie)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "input_data": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])", "expected_output": "16", "assertion": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assertion_": null}
{"problem_name": "145", "generated_code": "```python\ndef max_Abs_Diff(arr):\n    # First, we check if the array has at least two elements\n    if len(arr) < 2:\n        return \"Array must have at least two elements\"\n    \n    # Initialize the maximum and minimum elements with the first element of the array\n    max_element = min_element = arr[0]\n    \n    # Loop through the array to find the maximum and minimum elements\n    for num in arr:\n        if num > max_element:\n            max_element = num\n        elif num < min_element:\n            min_element = num\n    \n    # The maximum absolute difference will be the difference between the maximum and minimum elements\n    return max_element - min_element\n\n# Example usage:\n# arr = [2, 3, 10, 6, 4, 8, 1]\n# print(max_Abs_Diff(arr))  # Output should be 9\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the maximum difference between any two elements in a given array.", "input_data": "max_Abs_Diff((2,1,5,3))", "expected_output": "4", "assertion": "assert max_Abs_Diff((2,1,5,3)) == 4", "assertion_": null}
{"problem_name": "230", "generated_code": "```python\ndef replace_blank(str1, char):\n    # Replace blank spaces with the specified character\n    return str1.replace(' ', char)\n\n# Example usage:\n# result = replace_blank(\"Hello World\", \"-\")\n# print(result)  # Output: \"Hello-World\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "input_data": "replace_blank(\"hello people\",'@')", "expected_output": "(\"hello@people\")", "assertion": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assertion_": null}
{"problem_name": "612", "generated_code": "```python\ndef merge(lst):\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Append the first element to the first_elements list\n        first_elements.append(sublist[0])\n        # Append the second element to the second_elements list\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists\n    return [first_elements, second_elements]\n\n# Example usage:\n# merged_list = merge([[1, 2], [3, 4], [5, 6]])\n# print(merged_list)  # Output: [[1, 3, 5], [2, 4, 6]]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "input_data": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])", "expected_output": "[['x', 'a', 'm'], ['y', 'b', 'n']]", "assertion": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assertion_": null}
{"problem_name": "740", "generated_code": "```python\ndef tuple_to_dict(test_tup):\n    # Using dictionary comprehension to convert tuple to dictionary\n    # with adjacent elements as key-value pairs\n    res = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    return res\n\n# Example usage:\n# test_tup = ('Gfg', 1, 'is', 2, 'Best', 3)\n# print(tuple_to_dict(test_tup))\n# Output: {'Gfg': 1, 'is': 2, 'Best': 3}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "input_data": "tuple_to_dict((1, 5, 7, 10, 13, 5))", "expected_output": "{1: 5, 7: 10, 13: 5}", "assertion": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assertion_": null}
{"problem_name": "465", "generated_code": "```python\ndef drop_empty(dict1):\n    # Use dictionary comprehension to filter out items with empty values\n    return {k: v for k, v in dict1.items() if v}\n\n# Example usage:\n# my_dict = {'a': 1, 'b': '', 'c': [], 'd': {}, 'e': 'something'}\n# print(drop_empty(my_dict))\n# Output should be: {'a': 1, 'e': 'something'}\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to drop empty items from a given dictionary.", "input_data": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})", "expected_output": "{'c1': 'Red', 'c2': 'Green'}", "assertion": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assertion_": null}
{"problem_name": "802", "generated_code": "```python\ndef count_rotation(arr):\n    # Find the index of the minimum element\n    # Assuming no duplicates in the array\n    min_index = arr.index(min(arr))\n    \n    # The number of rotations is equal to the index of the minimum element\n    return min_index\n\n# Example usage:\n# The array is rotated 2 times to the right\n# Original sorted array: [1, 2, 3, 4, 5]\n# After 2 rotations: [4, 5, 1, 2, 3]\n# So the function should return 2\nprint(count_rotation([4, 5, 1, 2, 3]))  # Output: 2\n```\n\nThis function assumes that the array is rotated in such a way that it can be made sorted by a single rotation. If the array contains duplicates or is not rotated in a way that can be sorted by a single rotation, the function may not work correctly.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "input_data": "count_rotation([3,2,1])", "expected_output": "1", "assertion": "assert count_rotation([3,2,1]) == 1", "assertion_": null}
{"problem_name": "139", "generated_code": "```python\ndef circle_circumference(r):\n    # The formula for the circumference of a circle is C = 2 * pi * r\n    import math\n    return 2 * math.pi * r\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the circumference of a circle.", "input_data": null, "expected_output": null, "assertion": null, "assertion_": null}
{"problem_name": "9", "generated_code": "```python\ndef find_Rotations(s):\n    # The original string and its length\n    original_str = s\n    length = len(s)\n    \n    # If the string is empty or has a length of 1, no rotations are needed\n    if length <= 1:\n        return 0\n    \n    # Append the string to itself\n    temp_str = s + s\n    \n    # Try all rotations one by one and check if it matches the original string\n    for i in range(1, length + 1):\n        # Substring from i to i+length of temp_str is the rotated string\n        substring = temp_str[i:i+length]\n        \n        # If the substring matches the original string, return the number of rotations\n        if substring == original_str:\n            return i\n    \n    # If no rotation matches the original string, return length (which means no rotation brings the original string)\n    return length\n\n# Example usage:\nprint(find_Rotations(\"abc\"))  # Output: 3\nprint(find_Rotations(\"aaaa\"))  # Output: 1\nprint(find_Rotations(\"abab\"))  # Output: 2\n```\n\nThis function checks each possible rotation of the string by creating a temporary string that is the concatenation of the original string with itself. It then checks each substring of the length of the original string within this temporary string to see if it matches the original string. If a match is found, it returns the number of rotations that were required to match the original string. If no match is found after checking all possible rotations, it returns the length of the string, which implies that no rotation will bring the original string back.", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "input_data": "find_Rotations(\"aaaa\")", "expected_output": "1", "assertion": "assert find_Rotations(\"aaaa\") == 1", "assertion_": null}
{"problem_name": "737", "generated_code": "```python\nimport re\n\ndef check_str(string):\n    # Define the regex pattern to check if the string starts with a vowel\n    pattern = r\"^[aeiouAEIOU]\"\n    \n    # Use the re.match function to check if the pattern matches the start of the string\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(check_str(\"apple\"))  # Should return True\n# print(check_str(\"banana\")) # Should return False\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given string is starting with a vowel or not using regex.", "input_data": "check_str(\"annie\")", "expected_output": "True", "assertion": "assert check_str(\"annie\")", "assertion_": null}
{"problem_name": "20", "generated_code": "```python\ndef is_woodall(x):\n    # Woodall numbers are of the form n * 2^n - 1\n    # To check if x is a Woodall number, we need to solve for n in the equation x = n * 2^n - 1\n    # We will iterate through possible values of n and check if the equation holds true\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n# Example usage:\n# print(is_woodall(7))  # True, because 7 = 3 * 2^3 - 1\n# print(is_woodall(8))  # False, 8 is not a Woodall number\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given number is woodball or not.", "input_data": "is_woodall(383)", "expected_output": "True", "assertion": "assert is_woodall(383) == True", "assertion_": null}
{"problem_name": "419", "generated_code": "```python\ndef round_and_sum(list1):\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in list1]\n    # Calculate the sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    # Multiply the sum by the length of the list\n    result = total_sum * len(list1)\n    # Print the result\n    print(result)\n    # Optionally, return the result if needed\n    return result\n\n# Example usage:\n# round_and_sum([1.1, 2.5, 3.6]) should print and return 21 because\n# after rounding we have [1, 3, 4], the sum is 8, and 8 * 3 (length of the list) is 24.\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "input_data": "round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])", "expected_output": "243", "assertion": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assertion_": null}
{"problem_name": "584", "generated_code": "```python\nimport re\n\ndef find_adverbs(text):\n    # Use regular expression to find all words ending with 'ly'\n    matches = re.finditer(r'\\b\\w+ly\\b', text)\n    \n    # Try to get the first match, if it exists\n    first_match = next(matches, None)\n    \n    if first_match:\n        # Return the word and its start and end positions\n        return first_match.group(), first_match.start(), first_match.end()\n    else:\n        # If no match is found, return None\n        return None\n\n# Example usage:\ntext = \"He quickly realized that the beautifully arranged flowers were actually artificial.\"\nresult = find_adverbs(text)\nprint(result)  # Output should be ('quickly', 3, 10)\n```\n", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the first adverb ending with ly and its positions in a given string.", "input_data": "find_adverbs(\"Clearly, he has no excuse for such behavior.\")", "expected_output": "'0-7: Clearly'", "assertion": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'", "assertion_": null}
{"problem_name": "306", "generated_code": "```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the dp array where dp[i] will store the maximum sum of increasing subsequence\n    # ending with a[i]\n    dp = [0] * n\n    dp[0] = a[0]\n\n    # Fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j]:\n                dp[i] = dp[j]\n        dp[i] += a[i]\n\n    # Find the maximum sum of increasing subsequence from prefix until index\n    max_sum = 0\n    for i in range(index + 1):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    # Include the kth element in the sum\n    if a[k] > a[index]:\n        max_sum += a[k]\n\n    return max_sum\n\n# Example usage:\na = [1, 101, 2, 3, 100, 4, 5]\nn = len(a)\nindex = 3\nk = 4\nprint(max_sum_increasing_subseq(a, n, index, k))  # Output should be 106 (1 + 2 + 3 + 100)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "input_data": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)", "expected_output": "11", "assertion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assertion_": null}
{"problem_name": "748", "generated_code": "```python\ndef capital_words_spaces(str1):\n    # Initialize an empty list to store the characters with spaces\n    result = []\n    \n    for i, char in enumerate(str1):\n        # If the character is uppercase and it's not the first character,\n        # add a space before it\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n\n# Example usage:\nprint(capital_words_spaces(\"HelloWorld\"))  # Output: \"Hello World\"\nprint(capital_words_spaces(\"ThisIsAString\"))  # Output: \"This Is A String\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to put spaces between words starting with capital letters in a given string.", "input_data": "capital_words_spaces(\"Python\")", "expected_output": "'Python'", "assertion": "assert capital_words_spaces(\"Python\") == 'Python'", "assertion_": null}
{"problem_name": "743", "generated_code": "```python\ndef rotate_right(lst, m):\n    # If the list is empty or the rotation number is zero, return the original list\n    if not lst or m == 0:\n        return lst\n    \n    # Calculate the effective rotation\n    m = m % len(lst)\n    \n    # Perform the rotation\n    rotated_lst = lst[-m:] + lst[:-m]\n    \n    return rotated_lst\n\n# Example usage:\n# rotated_list = rotate_right([1, 2, 3, 4, 5], 2)\n# print(rotated_list)  # Output: [4, 5, 1, 2, 3]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "input_data": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)", "expected_output": "[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assertion": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assertion_": null}
{"problem_name": "643", "generated_code": "```python\nimport re\n\ndef text_match_wordz_middle(text):\n    # Define the regular expression pattern to match 'z' not at the start or end\n    pattern = r'\\Bz\\B'\n    \n    # Search for the pattern in the text\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\n# text = \"The lazy dog jumps over the lazy fox.\"\n# result = text_match_wordz_middle(text)\n# print(result)  # Output: True, because 'lazy' contains 'z' not at the start or end\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "input_data": "text_match_wordz_middle(\"pythonzabc.\")", "expected_output": "True", "assertion": "assert text_match_wordz_middle(\"pythonzabc.\")==True", "assertion_": null}
{"problem_name": "606", "generated_code": "```python\nimport math\n\ndef radian_degree(degree):\n    # Convert degrees to radians\n    radians = degree * (math.pi / 180)\n    return radians\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert degrees to radians.", "input_data": "radian_degree(90)", "expected_output": "1.5707963267948966", "assertion": "assert radian_degree(90)==1.5707963267948966", "assertion_": null}
{"problem_name": "596", "generated_code": "```python\nimport sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n\n# Example usage:\n# my_tuple = (1, 2, 3, \"text\", None)\n# print(tuple_size(my_tuple))  # This will print the size in bytes of my_tuple\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the size in bytes of the given tuple.", "input_data": "tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )", "expected_output": "sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assertion": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assertion_": null}
{"problem_name": "593", "generated_code": "```python\ndef removezero_ip(ip):\n    # Split the IP address into its components\n    ip_parts = ip.split('.')\n    \n    # Remove leading zeros from each part of the IP address\n    stripped_parts = [str(int(part)) for part in ip_parts]\n    \n    # Reassemble the IP address\n    stripped_ip = '.'.join(stripped_parts)\n    \n    return stripped_ip\n\n# Example usage:\n# ip = \"192.168.001.002\"\n# print(removezero_ip(ip))  # Output: \"192.168.1.2\"\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove leading zeroes from an ip address.", "input_data": "removezero_ip(\"216.08.094.196\")", "expected_output": "('216.8.94.196')", "assertion": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')", "assertion_": null}
{"problem_name": "305", "generated_code": "```python\ndef start_withp(words):\n    # Initialize an empty list to store words starting with 'p'\n    p_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word starts with 'p' or 'P'\n        if word.lower().startswith('p'):\n            # Add the word to the p_words list\n            p_words.append(word)\n            # If we have found two words, break out of the loop\n            if len(p_words) == 2:\n                break\n    \n    # Return the list of words starting with 'p'\n    return p_words\n\n# Example usage:\nwords_list = [\"apple\", \"pear\", \"banana\", \"peach\", \"plum\", \"orange\"]\nprint(start_withp(words_list))  # Output should be ['pear', 'peach']\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to return two words from a list of words starting with letter 'p'.", "input_data": "start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])", "expected_output": "('Python', 'PHP')", "assertion": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assertion_": null}
{"problem_name": "629", "generated_code": "```python\ndef Split(list):\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n\n# Example usage:\n# my_list = [1, 2, 3, 4, 5, 6]\n# print(Split(my_list))  # Output: [2, 4, 6]\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find even numbers from a list of numbers.", "input_data": "Split([1,2,3,4,5])", "expected_output": "[2,4]", "assertion": "assert Split([1,2,3,4,5]) == [2,4]", "assertion_": null}
{"problem_name": "119", "generated_code": "```python\ndef search(arr):\n    # Initialize left and right pointers\n    left, right = 0, len(arr) - 1\n    \n    # Binary search approach\n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if the single element is on the left or right half\n        # If mid is even and the next element is the same, the single element is on the right\n        # If mid is odd and the previous element is the same, the single element is on the right\n        if (mid % 2 == 0 and mid + 1 < len(arr) and arr[mid] == arr[mid + 1]) or \\\n           (mid % 2 == 1 and mid - 1 >= 0 and arr[mid] == arr[mid - 1]):\n            left = mid + 1\n        else:\n            right = mid\n    \n    # When left == right, we have found the single element\n    return arr[left]\n\n# Example usage:\n# The array must be sorted and all elements except one appear exactly twice.\narr = [1, 1, 2, 3, 3, 4, 4, 8, 8]\nprint(search(arr))  # Output: 2\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the element that appears only once in a sorted array.", "input_data": "search([1,1,2,2,3])", "expected_output": "3", "assertion": "assert search([1,1,2,2,3]) == 3", "assertion_": null}
{"problem_name": "172", "generated_code": "```python\ndef count_occurrence(s):\n    # Use the count method of string to find the number of occurrences of 'std'\n    return s.count('std')\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of occurence of the string 'std' in a given string.", "input_data": "count_occurance(\"letstdlenstdporstd\")", "expected_output": "3", "assertion": "assert count_occurance(\"letstdlenstdporstd\") == 3", "assertion_": null}
{"problem_name": "252", "generated_code": "```python\nimport cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append(cmath.polar(num))\n    return polar_coordinates\n\n# Example usage:\n# complex_numbers = [complex(1, 2), complex(3, 4)]\n# polar_coords = convert(complex_numbers)\n# print(polar_coords)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert complex numbers to polar coordinates.", "input_data": "convert(1)", "expected_output": "(1.0, 0.0)", "assertion": "assert convert(1) == (1.0, 0.0)", "assertion_": null}
{"problem_name": "168", "generated_code": "```python\ndef frequency(a, x):\n    # Count the occurrences of x in list a\n    return a.count(x)\n```", "model_name": "GPT_4", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of occurrences of a number in a given list.", "input_data": "frequency([1,2,3], 4)", "expected_output": "0", "assertion": "assert frequency([1,2,3], 4) == 0", "assertion_": null}
