{"problem_name": "793", "generated_code": "<s> [INST]Your task is to write a Python function ```def last(arr,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the last position of an element in a sorted array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef last(arr,x):\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last position of an element in a sorted array.", "input_data": "last([1,2,3],1)", "expected_output": "0", "assertion": "assert last([1,2,3],1) == 0"}
{"problem_name": "637", "generated_code": "<s> [INST]Your task is to write a Python function ```def noprofit_noloss(actual_cost,sale_amount)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given amount has no profit and no loss\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given amount has no profit and no loss", "input_data": "noprofit_noloss(1500,1200)", "expected_output": "False", "assertion": "assert noprofit_noloss(1500,1200)==False"}
{"problem_name": "587", "generated_code": "<s> [INST]Your task is to write a Python function ```def list_tuple(listx)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a list to a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef list_tuple(listx):\n    return tuple(listx)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a list to a tuple.", "input_data": "list_tuple([5, 10, 7, 4, 15, 3])", "expected_output": "(5, 10, 7, 4, 15, 3)", "assertion": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"problem_name": "2", "generated_code": "<s> [INST]Your task is to write a Python function ```def similar_elements(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the shared elements from the given two lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef similar_elements(test_tup1,test_tup2):\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Find the intersection of the two lists\n    intersection = list1 & list2\n    \n    # Convert the intersection back to a tuple and return it\n    return tuple(intersection)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the shared elements from the given two lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "460", "generated_code": "<s> [INST]Your task is to write a Python function ```def Extract(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to get the first element of each sublist.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to get the first element of each sublist.", "input_data": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])", "expected_output": "[1, 3, 6]", "assertion": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"problem_name": "142", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_samepair(list1,list2,list3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count number items that are identical in the same position of three given lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count number items that are identical in the same position of three given lists.", "input_data": "count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])", "expected_output": "3", "assertion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"problem_name": "396", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_char(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given string starts and ends with the same character or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_char(string):\n    first_char = string[0]\n    last_char = string[-1]\n    return first_char == last_char\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given string starts and ends with the same character or not.", "input_data": "check_char(\"abba\")", "expected_output": "\"Valid\"", "assertion": "assert check_char(\"abba\") == \"Valid\""}
{"problem_name": "436", "generated_code": "<s> [INST]Your task is to write a Python function ```def neg_nos(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to return the negative numbers in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef neg_nos(list1):\n    return [num for num in list1 if num < 0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to return the negative numbers in a list.", "input_data": "neg_nos([-1,4,5,-6])", "expected_output": "[-1,-6]", "assertion": "assert neg_nos([-1,4,5,-6]) == [-1,-6]"}
{"problem_name": "618", "generated_code": "<s> [INST]Your task is to write a Python function ```def div_list(nums1,nums2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to divide two lists element wise.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef div_list(nums1,nums2):\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to divide two lists element wise.", "input_data": "div_list([4,5,6],[1, 2, 3])", "expected_output": "[4.0,2.5,2.0]", "assertion": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"}
{"problem_name": "594", "generated_code": "<s> [INST]Your task is to write a Python function ```def diff_even_odd(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the difference of the first even and first odd number of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef diff_even_odd(list1):\n    if len(list1) < 2:\n        return None\n    else:\n        even = list1[0]\n        odd = list1[1]\n        if even % 2 == 0 and odd % 2 != 0:\n            return even - odd\n        elif even % 2 != 0 and odd % 2 == 0:\n            return odd - even\n        else:\n            return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the difference of the first even and first odd number of a given list.", "input_data": "diff_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "3", "assertion": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3"}
{"problem_name": "77", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_Diff(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find whether a number is divisible by 11.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find whether a number is divisible by 11.", "input_data": "is_Diff (12345)", "expected_output": "False", "assertion": "assert is_Diff (12345) == False"}
{"problem_name": "435", "generated_code": "<s> [INST]Your task is to write a Python function ```def last_Digit(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the last digit of a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef last_Digit(n):\n    return n % 10\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last digit of a given number.", "input_data": "last_Digit(123)", "expected_output": "3", "assertion": "assert last_Digit(123) == 3"}
{"problem_name": "803", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_perfect_square(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = n ** 0.5\n    return sqrt.is_integer()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "input_data": "is_perfect_square(10)", "expected_output": "False", "assertion": "assert not is_perfect_square(10)"}
{"problem_name": "758", "generated_code": "<s> [INST]Your task is to write a Python function ```def unique_sublists(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in sublists:\n                sublists.append(sublist)\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[tuple(sublist)] = sublist_count.get(tuple(sublist), 0) + 1\n    return sublist_count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"problem_name": "4", "generated_code": "<s> [INST]Your task is to write a Python function ```def heap_queue_largest(nums,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef heap_queue_largest(nums, n):\n    # Create a heap queue with the first n elements of the list\n    heapq.heapify(nums[:n])\n    \n    # Iterate over the remaining elements of the list\n    for num in nums[n:]:\n        # If the current element is larger than the root of the heap,\n        # remove the root and insert the current element\n        if num > nums[0]:\n            heapq.heappop(nums)\n            heapq.heappush(nums, num)\n    \n    # Return the n largest elements in descending order\n    return nums[::-1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "input_data": "heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)", "expected_output": "[85, 75, 65]", "assertion": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"problem_name": "794", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_starta_endb(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_starta_endb(text):\n    if 'a' in text and text[-1] == 'b':\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "input_data": "text_starta_endb(\"aabbbb\")", "expected_output": "True", "assertion": "assert text_starta_endb(\"aabbbb\")"}
{"problem_name": "471", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_remainder(arr,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the product of the array multiplication modulo n.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the product of the array multiplication modulo n.", "input_data": "find_remainder([ 100, 10, 5, 25, 35, 14 ],11)", "expected_output": "9", "assertion": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9"}
{"problem_name": "775", "generated_code": "<s> [INST]Your task is to write a Python function ```def odd_position(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 != 0 and nums[i] % 2 == 1:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether every odd index contains odd numbers of a given list.", "input_data": "odd_position([2,1,4,3,6,7,6,3])", "expected_output": "True", "assertion": "assert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"problem_name": "740", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_to_dict(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_to_dict(test_tup):\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "input_data": "tuple_to_dict((1, 5, 7, 10, 13, 5))", "expected_output": "{1: 5, 7: 10, 13: 5}", "assertion": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"problem_name": "743", "generated_code": "<s> [INST]Your task is to write a Python function ```def rotate_right(list,m)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef rotate_right(list, m):\n    # Check if the list is empty or the number of elements to rotate is 0\n    if not list or m == 0:\n        return list\n    \n    # Rotate the list by m elements to the right\n    list = list[m:] + list[:m]\n    \n    return list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "input_data": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)", "expected_output": "[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assertion": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"problem_name": "123", "generated_code": "<s> [INST]Your task is to write a Python function ```def amicable_numbers_sum(limit)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sum all amicable numbers from 1 to a specified number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef amicable_numbers_sum(limit):\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        for i in range(num, limit+1):\n            if num % i == 0 and i % num == 0:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sum all amicable numbers from 1 to a specified number.", "input_data": "amicable_numbers_sum(999)", "expected_output": "504", "assertion": "assert amicable_numbers_sum(999)==504"}
{"problem_name": "724", "generated_code": "<s> [INST]Your task is to write a Python function ```def power_base_sum(base,power)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef power_base_sum(base, power):\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base = base // 10\n        power -= 1\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "input_data": "power_base_sum(2,100)", "expected_output": "115", "assertion": "assert power_base_sum(2,100)==115"}
{"problem_name": "165", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_char_position(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord(str1[i]) - ord('a') + 1) or str1[i] == chr(ord(str1[i]) - ord('A') + 1):\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "input_data": "count_char_position(\"xbcefg\")", "expected_output": "2", "assertion": "assert count_char_position(\"xbcefg\") == 2"}
{"problem_name": "754", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_index_list(l1,l2,l3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_index_list(l1, l2, l3):\n    common_index = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_index.append(i)\n    return common_index\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "input_data": "extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])", "expected_output": "[1, 7]", "assertion": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]"}
{"problem_name": "272", "generated_code": "<s> [INST]Your task is to write a Python function ```def rear_extract(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef rear_extract(test_list):\n    return [tuple[-1] for tuple in test_list]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "input_data": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])", "expected_output": "[21, 20, 19]", "assertion": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"problem_name": "223", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_majority(arr,n,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "input_data": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)", "expected_output": "True", "assertion": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"problem_name": "788", "generated_code": "<s> [INST]Your task is to write a Python function ```def new_tuple(test_list,test_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to create a new tuple from the given string and list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef new_tuple(test_list, test_str):\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to create a new tuple from the given string and list.", "input_data": "new_tuple([\"WEB\", \"is\"], \"best\")", "expected_output": "('WEB', 'is', 'best')", "assertion": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"problem_name": "143", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_lists(Input)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find number of lists present in the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find number of lists present in the given tuple.", "input_data": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))", "expected_output": "2", "assertion": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"problem_name": "772", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_length(test_str,K)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove all the words with k length in the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_length(test_str,K):\n    # Split the string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to k\n        if len(word) != K:\n            # Append the word to the filtered list\n            filtered_words.append(word)\n    # Join the filtered list into a string and return it\n    return ' '.join(filtered_words)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all the words with k length in the given string.", "input_data": "remove_length('The person is most value tet', 3)", "expected_output": "'person is most value'", "assertion": "assert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"problem_name": "106", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_lists(test_list,test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to append the given list to the given tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_lists(test_list,test_tup):\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the list to the tuple\n    test_tup += test_list\n    # Convert the tuple back to a tuple\n    test_tup = tuple(test_tup)\n    return test_tup\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to append the given list to the given tuples.", "input_data": "add_lists([5, 6, 7], (9, 10))", "expected_output": "(9, 10, 5, 6, 7)", "assertion": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"problem_name": "610", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_kth_element(list1,L)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_kth_element(list1,L):\n    list1.pop(L-1)\n    return list1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "input_data": "remove_kth_element([1,1,2,3,4,4,5,1],3)", "expected_output": "[1, 1, 3, 4, 4, 5, 1]", "assertion": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]"}
{"problem_name": "747", "generated_code": "<s> [INST]Your task is to write a Python function ```def lcs_of_three(X,Y,Z)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef lcs_of_three(X,Y,Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for j in range(n+1)] for i in range(m+1)] for k in range(o+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                dp[i][j][0] = dp[i-1][j-1][0] + 1\n            else:\n                dp[i][j][0] = max(dp[i-1][j][0], dp[i][j-1][0], dp[i-1][j-1][0])\n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][0] > dp[i][j-1][0]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "input_data": "lcs_of_three('AGGT12', '12TXAYB', '12XBA')", "expected_output": "2", "assertion": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"}
{"problem_name": "792", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_list(input_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of lists in a given number of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of lists in a given number of lists.", "input_data": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "4", "assertion": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"problem_name": "597", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_kth(arr1,arr2,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find kth element from the given two sorted arrays.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    arr = sorted(arr1 + arr2)\n    # Find the kth element in the merged array\n    return arr[k-1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find kth element from the given two sorted arrays.", "input_data": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)", "expected_output": "6", "assertion": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"problem_name": "451", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_whitespaces(text1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove all whitespaces from the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_whitespaces(text1):\n    return text1.replace(\" \", \"\")\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all whitespaces from the given string.", "input_data": "remove_whitespaces(' Google    Flutter ')", "expected_output": "'GoogleFlutter'", "assertion": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"problem_name": "558", "generated_code": "<s> [INST]Your task is to write a Python function ```def digit_distance_nums(n1,n2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of the per-digit difference between two integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef digit_distance_nums(n1, n2):\n    n1_str = str(n1)\n    n2_str = str(n2)\n    sum = 0\n    for i in range(len(n1_str)):\n        if n1_str[i] != n2_str[i]:\n            sum += int(n1_str[i]) - int(n2_str[i])\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the per-digit difference between two integers.", "input_data": "digit_distance_nums(1,2)", "expected_output": "1", "assertion": "assert digit_distance_nums(1,2) == 1"}
{"problem_name": "565", "generated_code": "<s> [INST]Your task is to write a Python function ```def split(word)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to split a string into characters.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to split a string into characters.", "input_data": "split('python')", "expected_output": "['p','y','t','h','o','n']", "assertion": "assert split('python') == ['p','y','t','h','o','n']"}
{"problem_name": "577", "generated_code": "<s> [INST]Your task is to write a Python function ```def last_Digit_Factorial(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the last digit in factorial of a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef last_Digit_Factorial(n):\n    result = 1\n    while n > 0:\n        result = result * n % 10\n        n = n // 10\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the last digit in factorial of a given number.", "input_data": "last_Digit_Factorial(4)", "expected_output": "4", "assertion": "assert last_Digit_Factorial(4) == 4"}
{"problem_name": "172", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_occurance(s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the number of occurence of the string 'std' in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_occurance(s):\n    count = s.count('std')\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of occurence of the string 'std' in a given string.", "input_data": "count_occurance(\"letstdlenstdporstd\")", "expected_output": "3", "assertion": "assert count_occurance(\"letstdlenstdporstd\") == 3"}
{"problem_name": "733", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_first_occurrence(A,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_first_occurrence(A, x):\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "input_data": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "expected_output": "1", "assertion": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"problem_name": "395", "generated_code": "<s> [INST]Your task is to write a Python function ```def first_non_repeating_character(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the first non-repeated character in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef first_non_repeating_character(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first non-repeated character in a given string.", "input_data": "first_non_repeating_character(\"abcabc\")", "expected_output": "None", "assertion": "assert first_non_repeating_character(\"abcabc\") == None"}
{"problem_name": "732", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_specialchar(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_specialchar(text):\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "input_data": "replace_specialchar('Python language, Programming language.')", "expected_output": "('Python:language::Programming:language:')", "assertion": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"problem_name": "412", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_odd(l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to remove odd numbers from a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_odd(l):\n    return [num for num in l if num % 2 == 0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove odd numbers from a given list.", "input_data": "remove_odd([1,2,3])", "expected_output": "[2]", "assertion": "assert remove_odd([1,2,3]) == [2]"}
{"problem_name": "785", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_str_int(test_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert tuple string to integer tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_str_int(test_str):\n    # Split the string by comma and convert each element to an integer\n    return tuple(int(x) for x in test_str.split(','))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert tuple string to integer tuple.", "input_data": "tuple_str_int(\"(7, 8, 9)\")", "expected_output": "(7, 8, 9)", "assertion": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"problem_name": "742", "generated_code": "<s> [INST]Your task is to write a Python function ```def area_tetrahedron(side)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to caluclate the area of a tetrahedron.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n    \"\"\"\n    return 0.5 * side ** 2 * (3 * side - 1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to caluclate the area of a tetrahedron.", "input_data": "area_tetrahedron(3)", "expected_output": "15.588457268119894", "assertion": "assert area_tetrahedron(3)==15.588457268119894"}
{"problem_name": "757", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_reverse_pairs(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "input_data": "count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])", "expected_output": "2", "assertion": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2"}
{"problem_name": "270", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_even_and_even_index(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of even numbers at even positions of a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of even numbers at even positions of a list.", "input_data": "sum_even_and_even_index([5, 6, 12, 1, 18, 8])", "expected_output": "30", "assertion": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"problem_name": "431", "generated_code": "<s> [INST]Your task is to write a Python function ```def common_element(list1,list2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes two lists and returns true if they have at least one common element.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes two lists and returns true if they have at least one common element.", "input_data": "common_element([1,2,3,4,5], [5,6,7,8,9])", "expected_output": "True", "assertion": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True"}
{"problem_name": "301", "generated_code": "<s> [INST]Your task is to write a Python function ```def dict_depth(d)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the depth of a dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the depth of a dictionary.", "input_data": "dict_depth({'a':1, 'b': {'c': {'d': {}}}})", "expected_output": "4", "assertion": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"problem_name": "294", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_val(listval)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum value in a given heterogeneous list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum value in a given heterogeneous list.", "input_data": "max_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "5", "assertion": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"problem_name": "735", "generated_code": "<s> [INST]Your task is to write a Python function ```def toggle_middle_bits(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef toggle_middle_bits(n):\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    \n    # Find the length of the binary number\n    length = len(binary)\n    \n    # Toggle the bits in the middle of the number\n    for i in range(length // 2):\n        binary = binary[:i] + '0' + binary[i:]\n    \n    # Convert the binary number back to an integer\n    result = int(binary, 2)\n    \n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "input_data": "toggle_middle_bits(9)", "expected_output": "15", "assertion": "assert toggle_middle_bits(9) == 15"}
{"problem_name": "801", "generated_code": "<s> [INST]Your task is to write a Python function ```def test_three_equal(x,y,z)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of equal numbers from three given integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count = 1\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of equal numbers from three given integers.", "input_data": "test_three_equal(1,1,1)", "expected_output": "3", "assertion": "assert test_three_equal(1,1,1) == 3"}
{"problem_name": "809", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_smaller(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_smaller(test_tup1,test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "input_data": "check_smaller((1, 2, 3), (2, 3, 4))", "expected_output": "False", "assertion": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
{"problem_name": "639", "generated_code": "<s> [INST]Your task is to write a Python function ```def sample_nam(sample_names)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sample_nam(sample_names):\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in filtered_names)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "input_data": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])", "expected_output": "16", "assertion": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"problem_name": "741", "generated_code": "<s> [INST]Your task is to write a Python function ```def all_Characters_Same(s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether all the characters are same or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef all_Characters_Same(s):\n    if len(s) > 1:\n        return False\n    else:\n        return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether all the characters are same or not.", "input_data": "all_Characters_Same(\"python\")", "expected_output": "False", "assertion": "assert all_Characters_Same(\"python\") == False"}
{"problem_name": "723", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_same_pair(nums1,nums2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "input_data": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])", "expected_output": "4", "assertion": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"problem_name": "417", "generated_code": "<s> [INST]Your task is to write a Python function ```def group_tuples(Input)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find common first element in given list of tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef group_tuples(Input):\n    # Create an empty dictionary to store the first element of each tuple\n    first_elements = {}\n    \n    # Iterate over each tuple in the input list\n    for tuple in Input:\n        # If the first element of the tuple is not in the dictionary, add it with a value of 1\n        if tuple[0] not in first_elements:\n            first_elements[tuple[0]] = 1\n        # If the first element of the tuple is already in the dictionary, increment its value by 1\n        else:\n            first_elements[tuple[0]] += 1\n    \n    # Create an empty list to store the groups of tuples with the same first element\n    groups = []\n    \n    # Iterate over the first elements in the dictionary\n    for first_element, count in first_elements.items():\n        # Create a list of tuples with the same first element\n        group = [tuple for tuple in Input if tuple[0] == first_element]\n        # Add the group of tuples to the list of groups\n        groups.append(group)\n    \n    # Return the list of groups\n    return groups\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find common first element in given list of tuple.", "input_data": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])", "expected_output": "[('x', 'y', 'z'), ('w', 't')]", "assertion": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"}
{"problem_name": "766", "generated_code": "<s> [INST]Your task is to write a Python function ```def pair_wise(l1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to return a list of all pairs of consecutive items in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append(tuple(l1[i:i+2]))\n    return pairs\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to return a list of all pairs of consecutive items in a given list.", "input_data": "pair_wise([1,1,2,3,3,4,4,5])", "expected_output": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assertion": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"problem_name": "264", "generated_code": "<s> [INST]Your task is to write a Python function ```def dog_age(h_age)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate a dog's age in dog's years.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef dog_age(h_age):\n    return h_age / 12\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate a dog's age in dog's years.", "input_data": "dog_age(12)", "expected_output": "61", "assertion": "assert dog_age(12)==61"}
{"problem_name": "439", "generated_code": "<s> [INST]Your task is to write a Python function ```def multiple_to_single(L)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to join a list of multiple integers into a single integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef multiple_to_single(L):\n    return sum(L)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to join a list of multiple integers into a single integer.", "input_data": "multiple_to_single([11, 33, 50])", "expected_output": "113350", "assertion": "assert multiple_to_single([11, 33, 50])==113350"}
{"problem_name": "248", "generated_code": "<s> [INST]Your task is to write a Python function ```def harmonic_sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "771", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_expression(exp)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_expression(exp):\n    stack = []\n    for token in exp.split():\n        if token == '(':\n            stack.append(token)\n        elif token == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "input_data": "check_expression(\"{()}[{}]\")", "expected_output": "True", "assertion": "assert check_expression(\"{()}[{}]\") == True"}
{"problem_name": "398", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_of_digits(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to compute the sum of digits of each number of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_of_digits(nums):\n    sum_list = []\n    for num in nums:\n        sum_list.append(sum(int(digit) for digit in str(num)))\n    return sum_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to compute the sum of digits of each number of a given list.", "input_data": "sum_of_digits([10,2,56])", "expected_output": "14", "assertion": "assert sum_of_digits([10,2,56])==14"}
{"problem_name": "235", "generated_code": "<s> [INST]Your task is to write a Python function ```def even_bit_set_number(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to set all even bits of a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef even_bit_set_number(n):\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    \n    # Set all even bits to 1\n    binary = binary.replace(\"0\", \"1\")\n    \n    # Convert the binary back to decimal\n    result = int(binary, 2)\n    \n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to set all even bits of a given number.", "input_data": "even_bit_set_number(10)", "expected_output": "10", "assertion": "assert even_bit_set_number(10) == 10"}
{"problem_name": "456", "generated_code": "<s> [INST]Your task is to write a Python function ```def reverse_string_list(stringlist)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to reverse each string in a given list of string values.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to reverse each string in a given list of string values.", "input_data": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "expected_output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assertion": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"problem_name": "593", "generated_code": "<s> [INST]Your task is to write a Python function ```def removezero_ip(ip)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove leading zeroes from an ip address.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef removezero_ip(ip):\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"0.0.0.0\", \"\")\n    ip = ip.replace(\"", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove leading zeroes from an ip address.", "input_data": "removezero_ip(\"216.08.094.196\")", "expected_output": "('216.8.94.196')", "assertion": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')"}
{"problem_name": "591", "generated_code": "<s> [INST]Your task is to write a Python function ```def swap_List(newList)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to interchange the first and last elements in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef swap_List(newList):\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to interchange the first and last elements in a list.", "input_data": "swap_List([12, 35, 9, 56, 24])", "expected_output": "[24, 35, 9, 56, 12]", "assertion": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"problem_name": "392", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_max_sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_max_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "input_data": "get_max_sum(60)", "expected_output": "106", "assertion": "assert get_max_sum(60) == 106"}
{"problem_name": "442", "generated_code": "<s> [INST]Your task is to write a Python function ```def positive_count(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the ration of positive numbers in an array of integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ration of positive numbers in an array of integers.", "input_data": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "expected_output": "0.54", "assertion": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54"}
{"problem_name": "127", "generated_code": "<s> [INST]Your task is to write a Python function ```def multiply_int(x,y)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to multiply two integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef multiply_int(x,y):\n    result = x * y\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to multiply two integers.", "input_data": "multiply_int(10,20)", "expected_output": "200", "assertion": "assert multiply_int(10,20)==200"}
{"problem_name": "425", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_element_in_list(list1,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the number of sublists containing a particular element.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_element_in_list(list1,x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i:]:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of sublists containing a particular element.", "input_data": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)", "expected_output": "3", "assertion": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"problem_name": "478", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_lowercase(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove lowercase substrings from a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_lowercase(str1):\n    return ''.join(filter(str.isupper, str1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove lowercase substrings from a given string.", "input_data": "remove_lowercase(\"PYTHon\")", "expected_output": "('PYTH')", "assertion": "assert remove_lowercase(\"PYTHon\")==('PYTH')"}
{"problem_name": "68", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_Monotonic(A)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given array is monotonic or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given array is monotonic or not.", "input_data": "is_Monotonic([6, 5, 4, 4])", "expected_output": "True", "assertion": "assert is_Monotonic([6, 5, 4, 4]) == True"}
{"problem_name": "222", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_type(test_tuple)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if all the elements in tuple have same data type or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in a tuple have the same data type.\n    \"\"\"\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if type(element) != type(first_element):\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if all the elements in tuple have same data type or not.", "input_data": "check_type((5, 6, 7, 3, 5, 6) )", "expected_output": "True", "assertion": "assert check_type((5, 6, 7, 3, 5, 6) ) == True"}
{"problem_name": "20", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_woodall(x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given number is woodball or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_woodball(x):\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given number is woodball or not.", "input_data": "is_woodall(383)", "expected_output": "True", "assertion": "assert is_woodall(383) == True"}
{"problem_name": "626", "generated_code": "<s> [INST]Your task is to write a Python function ```def triangle_area(r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport math\n\ndef triangle_area(r):\n    # Find the length of the side of the inscribed triangle\n    a = 2 * r\n    \n    # Find the height of the inscribed triangle\n    b = math.sqrt(r**2 - a**2/4)\n    \n    # Calculate the area of the inscribed triangle\n    c = 0.5 * a * b\n    \n    # Find the length of the side of the circumscribed triangle\n    d = 2 * r\n    \n    # Find the height of the circumscribed triangle\n    e = math.sqrt(r**2 - d**2/4)\n    \n    # Calculate the area of the circumscribed triangle\n    f = 0.5 * d * e\n    \n    # Return the area of the larger triangle (either inscribed or circumscribed)\n    return max(c, f)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "input_data": "triangle_area(-1)", "expected_output": "None", "assertion": "assert triangle_area(-1) == None"}
{"problem_name": "605", "generated_code": "<s> [INST]Your task is to write a Python function ```def prime_num(num)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given integer is a prime number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given integer is a prime number.", "input_data": "prime_num(13)", "expected_output": "True", "assertion": "assert prime_num(13)==True"}
{"problem_name": "9", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Rotations(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j] == str[j:]:\n                return j - i\n    return 0\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "input_data": "find_Rotations(\"aaaa\")", "expected_output": "1", "assertion": "assert find_Rotations(\"aaaa\") == 1"}
{"problem_name": "56", "generated_code": "<s> [INST]Your task is to write a Python function ```def check(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check if a given number is one less than twice its reverse.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check(n):\n    n = abs(n)\n    rev = int(str(n)[::-1])\n    return n == rev - 1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check if a given number is one less than twice its reverse.", "input_data": "check(70)", "expected_output": "False", "assertion": "assert check(70) == False"}
{"problem_name": "67", "generated_code": "<s> [INST]Your task is to write a Python function ```def bell_number(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the number of ways to partition a set of Bell numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return sum(bell_number(i) * bell_number(n - i - 1) for i in range(0, n))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the number of ways to partition a set of Bell numbers.", "input_data": "bell_number(2)", "expected_output": "2", "assertion": "assert bell_number(2)==2"}
{"problem_name": "590", "generated_code": "<s> [INST]Your task is to write a Python function ```def polar_rect(x,y)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert polar coordinates to rectangular coordinates.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef polar_rect(x,y):\n    return (x*math.cos(y) - y*math.sin(y), x*math.sin(y) + y*math.cos(y))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert polar coordinates to rectangular coordinates.", "input_data": "polar_rect(3,4)", "expected_output": "((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assertion": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"problem_name": "166", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_even_pair(A)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "input_data": "find_even_pair([5, 4, 7, 2, 1])", "expected_output": "4", "assertion": "assert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"problem_name": "641", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_nonagonal(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth nonagonal number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_nonagonal(n):\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth nonagonal number.", "input_data": "is_nonagonal(10)", "expected_output": "325", "assertion": "assert is_nonagonal(10) == 325"}
{"problem_name": "124", "generated_code": "<s> [INST]Your task is to write a Python function ```def angle_complex(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to get the angle of a complex number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport math\n\ndef angle_complex(a,b):\n    return math.degrees(math.atan2(b,a))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the angle of a complex number.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "446", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_Occurrence(tup,lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the occurence of all elements of list in a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_Occurrence(tup,lst):\n    count = {}\n    for i in lst:\n        if i in tup:\n            count[i] = count.get(i,0) + 1\n        else:\n            count[i] = 0\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the occurence of all elements of list in a tuple.", "input_data": "count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )", "expected_output": "3", "assertion": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"problem_name": "578", "generated_code": "<s> [INST]Your task is to write a Python function ```def interleave_lists(list1,list2,list3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to interleave 3 lists of the same length into a single flat list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef interleave_lists(list1, list2, list3):\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to interleave 3 lists of the same length into a single flat list.", "input_data": "interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])", "expected_output": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assertion": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"problem_name": "265", "generated_code": "<s> [INST]Your task is to write a Python function ```def list_split(S,step)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "input_data": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)", "expected_output": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assertion": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"problem_name": "463", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_subarray_product(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum product subarray of the given array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum product subarray of the given array.", "input_data": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])", "expected_output": "112", "assertion": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"problem_name": "139", "generated_code": "<s> [INST]Your task is to write a Python function ```def circle_circumference(r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the circumference of a circle.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef circle_circumference(r):\n    return 2 * 3.14159 * r\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the circumference of a circle.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "620", "generated_code": "<s> [INST]Your task is to write a Python function ```def largest_subset(a)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef largest_subset(a):\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subset = a[i:j]\n            if all(gcd(x, y) == 1 for x, y in zip(subset, subset[1:])):\n                max_size = max(max_size, len(subset))\n    return max_size\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "input_data": "largest_subset([ 1, 3, 6, 13, 17, 18 ])", "expected_output": "4", "assertion": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"problem_name": "102", "generated_code": "<s> [INST]Your task is to write a Python function ```def snake_to_camel(word)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a snake case string to camel case string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef snake_to_camel(word):\n    return word.replace('_', '').replace('-', '').capitalize()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a snake case string to camel case string.", "input_data": "snake_to_camel('python_program')", "expected_output": "'PythonProgram'", "assertion": "assert snake_to_camel('python_program')=='PythonProgram'"}
{"problem_name": "407", "generated_code": "<s> [INST]Your task is to write a Python function ```def rearrange_bigger(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef rearrange_bigger(n):\n    # Convert the number to a string and split it into digits\n    digits = str(n)\n    digits = digits[::-1]\n    \n    # Convert the digits back to an integer and check if it is greater than n\n    new_num = int(digits)\n    if new_num > n:\n        return new_num\n    else:\n        # If the new number is not greater than n, return the original number\n        return n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to create the next bigger number by rearranging the digits of a given number.", "input_data": "rearrange_bigger(12)", "expected_output": "21", "assertion": "assert rearrange_bigger(12)==21"}
{"problem_name": "74", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_samepatterns(colors,patterns)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether it follows the sequence given in the patterns array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether it follows the sequence given in the patterns array.", "input_data": "is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])", "expected_output": "True", "assertion": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True"}
{"problem_name": "274", "generated_code": "<s> [INST]Your task is to write a Python function ```def even_binomial_Coeff_Sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial_coefficient(i, n)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return (n choose k) * (n-k choose (n-k-1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "input_data": "even_binomial_Coeff_Sum(4)", "expected_output": "8", "assertion": "assert even_binomial_Coeff_Sum(4) == 8"}
{"problem_name": "581", "generated_code": "<s> [INST]Your task is to write a Python function ```def surface_Area(b,s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef surface_Area(b,s):\n    \"\"\"\n    This function calculates the surface area of a square pyramid.\n    \"\"\"\n    area_of_square = b**2\n    lateral_area = 4*b*s\n    top_area = b**2\n    total_area = area_of_square + 2*lateral_area + top_area\n    return total_area\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the surface area of a square pyramid with a given base edge and height.", "input_data": "surface_Area(3,4)", "expected_output": "33", "assertion": "assert surface_Area(3,4) == 33"}
{"problem_name": "283", "generated_code": "<s> [INST]Your task is to write a Python function ```def validate(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef validate(n):\n    digits = set(str(n))\n    for digit in digits:\n        if int(digit) > len(digits) - int(digit):\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "input_data": "validate(1234)", "expected_output": "True", "assertion": "assert validate(1234) == True"}
{"problem_name": "85", "generated_code": "<s> [INST]Your task is to write a Python function ```def surfacearea_sphere(r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the surface area of a sphere.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nfrom math import pi\n\ndef surfacearea_sphere(r):\n    return 4 * pi * r**2\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a sphere.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "410", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_val(listval)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the minimum value in a given heterogeneous list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_val(listval):\n    \"\"\"\n    This function finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the minimum value in a given heterogeneous list.", "input_data": "min_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "2", "assertion": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"problem_name": "18", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_dirty_chars(string,second_string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove characters from the first string which are present in the second string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_dirty_chars(string, second_string):\n    # Convert both strings to sets\n    set1 = set(string)\n    set2 = set(second_string)\n    \n    # Remove characters from set1 that are present in set2\n    set1.difference_update(set2)\n    \n    # Convert set1 back to string and return\n    return ''.join(set1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove characters from the first string which are present in the second string.", "input_data": "remove_dirty_chars(\"probasscurve\", \"pros\")", "expected_output": "'bacuve'", "assertion": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"problem_name": "65", "generated_code": "<s> [INST]Your task is to write a Python function ```def recursive_list_sum(data_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to flatten a list and sum all of its elements.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten a list and sum all of its elements.", "input_data": "recursive_list_sum(([1, 2, [3,4],[5,6]]))", "expected_output": "21", "assertion": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"}
{"problem_name": "271", "generated_code": "<s> [INST]Your task is to write a Python function ```def even_Power_Sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "input_data": "even_Power_Sum(2)", "expected_output": "1056", "assertion": "assert even_Power_Sum(2) == 1056"}
{"problem_name": "562", "generated_code": "<s> [INST]Your task is to write a Python function ```def Find_Max_Length(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the length of the longest sublists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Find_Max_Length(lst):\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the longest sublists.", "input_data": "Find_Max_Length([[1],[1,4],[5,6,7,8]])", "expected_output": "4", "assertion": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"problem_name": "454", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_wordz(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that matches a word containing 'z'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_match_wordz(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Iterate through each word and check if it contains 'z'\n    for word in words:\n        if 'z' in word:\n            return True\n    \n    # If no word contains 'z', return False\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a word containing 'z'.", "input_data": "text_match_wordz(\"pythonz.\")", "expected_output": "True", "assertion": "assert text_match_wordz(\"pythonz.\")==True"}
{"problem_name": "762", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_monthnumber_number(monthnum3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "input_data": "check_monthnumber_number(6)", "expected_output": "True", "assertion": "assert check_monthnumber_number(6)==True"}
{"problem_name": "413", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_nth_element(list1,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract the nth element from a given list of tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_nth_element(list1,n):\n    return list1[n]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the nth element from a given list of tuples.", "input_data": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)", "expected_output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"problem_name": "59", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_octagonal(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth octagonal number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_octagonal(n):\n    if n % 8 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth octagonal number.", "input_data": "is_octagonal(5)", "expected_output": "65", "assertion": "assert is_octagonal(5) == 65"}
{"problem_name": "253", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_integer(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that returns the number of integer elements in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_integer(list1):\n    count = 0\n    for i in list1:\n        if i.isdigit():\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that returns the number of integer elements in a given list.", "input_data": "count_integer([1,2,'abc',1.2])", "expected_output": "2", "assertion": "assert count_integer([1,2,'abc',1.2]) == 2"}
{"problem_name": "437", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_odd(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove odd characters in a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_odd(str1):\n    return ''.join(filter(str.isdigit, str1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove odd characters in a string.", "input_data": "remove_odd(\"python\")", "expected_output": "(\"yhn\")", "assertion": "assert remove_odd(\"python\")==(\"yhn\")"}
{"problem_name": "447", "generated_code": "<s> [INST]Your task is to write a Python function ```def cube_nums(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find cubes of individual elements in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find cubes of individual elements in a list.", "input_data": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assertion": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"problem_name": "604", "generated_code": "<s> [INST]Your task is to write a Python function ```def reverse_words(s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to reverse words seperated by spaces in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words\n    words = words[::-1]\n    # Join the words back together into a string\n    return ' '.join(words)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to reverse words seperated by spaces in a given string.", "input_data": "reverse_words(\"python program\")", "expected_output": "(\"program python\")", "assertion": "assert reverse_words(\"python program\")==(\"program python\")"}
{"problem_name": "406", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Parity(x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find whether the parity of a given number is odd.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Parity(x):\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find whether the parity of a given number is odd.", "input_data": "find_Parity(12)", "expected_output": "False", "assertion": "assert find_Parity(12) == False"}
{"problem_name": "434", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_one(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that matches a string that has an a followed by one or more b's.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_match_one(text):\n    if 'ab' in text:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an a followed by one or more b's.", "input_data": "text_match_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_one(\"ac\")==False"}
{"problem_name": "582", "generated_code": "<s> [INST]Your task is to write a Python function ```def my_dict(dict1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if a dictionary is empty\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a dictionary is empty", "input_data": "my_dict({10})", "expected_output": "False", "assertion": "assert my_dict({10})==False"}
{"problem_name": "432", "generated_code": "<s> [INST]Your task is to write a Python function ```def median_trapezium(base1,base2,height)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the median length of a trapezium.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef median_trapezium(base1, base2, height):\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the length of the two sides of the trapezium\n    side1 = (base1 + base2) / 2 - height\n    side2 = (base1 + base2) / 2 + height\n    \n    # Sort the two sides in ascending order\n    sorted_sides = sorted([side1, side2])\n    \n    # Calculate the median length of the trapezium\n    median = (sorted_sides[0] + sorted_sides[1]) / 2\n    \n    return median\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median length of a trapezium.", "input_data": "median_trapezium(15,25,35)", "expected_output": "20", "assertion": "assert median_trapezium(15,25,35)==20"}
{"problem_name": "759", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_decimal(num)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a given string is a decimal number with a precision of 2.", "input_data": "is_decimal('123.11')", "expected_output": "True", "assertion": "assert is_decimal('123.11')==True"}
{"problem_name": "168", "generated_code": "<s> [INST]Your task is to write a Python function ```def frequency(a,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the number of occurrences of a number in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of occurrences of a number in a given list.", "input_data": "frequency([1,2,3], 4)", "expected_output": "0", "assertion": "assert frequency([1,2,3], 4) == 0"}
{"problem_name": "726", "generated_code": "<s> [INST]Your task is to write a Python function ```def multiply_elements(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "input_data": "multiply_elements((1, 5, 7, 8, 10))", "expected_output": "(5, 35, 56, 80)", "assertion": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"problem_name": "7", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_char_long(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find all words which are at least 4 characters long in a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_char_long(text):\n    # Split the text into a list of words\n    words = text.split()\n    \n    # Initialize an empty list to store the long words\n    long_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # Append the word to the list of long words\n            long_words.append(word)\n            \n    # Return the list of long words\n    return long_words\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find all words which are at least 4 characters long in a string.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "631", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_spaces(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_spaces(text):\n    # Replace all whitespace characters with underscores\n    return text.replace(\" \", \"_\")\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "input_data": "replace_spaces('Jumanji The Jungle')", "expected_output": "'Jumanji_The_Jungle'", "assertion": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"problem_name": "778", "generated_code": "<s> [INST]Your task is to write a Python function ```def pack_consecutive_duplicates(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef pack_consecutive_duplicates(list1):\n    result = []\n    i = 0\n    while i < len(list1):\n        count = 1\n        while i + 1 < len(list1) and list1[i] == list1[i + 1]:\n            count += 1\n            i += 1\n        result.append(list1[i:i + count])\n        i += count\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "input_data": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])", "expected_output": "[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assertion": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"problem_name": "589", "generated_code": "<s> [INST]Your task is to write a Python function ```def perfect_squares(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find perfect squares between two given numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef perfect_squares(a, b):\n    for i in range(a, b+1):\n        if i**2 == i:\n            return i\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find perfect squares between two given numbers.", "input_data": "perfect_squares(1,30)", "expected_output": "[1, 4, 9, 16, 25]", "assertion": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"problem_name": "799", "generated_code": "<s> [INST]Your task is to write a Python function ```def left_rotate(n,d)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef left_rotate(n,d):\n    return (n << d) & ((1 << 32) - 1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "input_data": "left_rotate(16,2)", "expected_output": "64", "assertion": "assert left_rotate(16,2) == 64"}
{"problem_name": "479", "generated_code": "<s> [INST]Your task is to write a Python function ```def first_Digit(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the first digit of a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef first_Digit(n):\n    return int(str(n)[0])\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first digit of a given number.", "input_data": "first_Digit(123)", "expected_output": "1", "assertion": "assert first_Digit(123) == 1"}
{"problem_name": "450", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_string(str,l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract specified size of strings from a given list of string values.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_string(str_list, l):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for s in str_list:\n        extracted_strings.append(s[:l])\n    return extracted_strings\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract specified size of strings from a given list of string values.", "input_data": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)", "expected_output": "['practice', 'solution']", "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"problem_name": "780", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_combinations(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_combinations(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            sum_tuple = sum(test_list[i:j])\n            if sum_tuple in result:\n                result.append(sum_tuple)\n            else:\n                result.append(sum_tuple)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "input_data": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])", "expected_output": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assertion": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"problem_name": "643", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_wordz_middle(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_match_wordz_middle(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Iterate over each word\n    for word in words:\n        # Check if the word contains 'z' in the middle\n        if 'z' in word and word[0] != 'z' and word[-1] != 'z':\n            return True\n    \n    # If no 'z' is found in the middle of any word, return False\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "input_data": "text_match_wordz_middle(\"pythonzabc.\")", "expected_output": "True", "assertion": "assert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"problem_name": "459", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_uppercase(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove uppercase substrings from a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_uppercase(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # If the word is not uppercase, add it to the filtered list\n        if word.isalpha():\n            filtered_words.append(word)\n    \n    # Join the filtered list back into a string\n    str1 = ' '.join(filtered_words)\n    \n    # Return the filtered string\n    return str1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove uppercase substrings from a given string.", "input_data": "remove_uppercase('cAstyoUrFavoRitETVshoWs')", "expected_output": "'cstyoravoitshos'", "assertion": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"problem_name": "427", "generated_code": "<s> [INST]Your task is to write a Python function ```def change_date_format(dt)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef change_date_format(dt):\n    return dt.split('-')[2] + '-' + dt.split('-')[1] + '-' + dt.split('-')[0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "input_data": "change_date_format(\"2026-01-02\")", "expected_output": "'02-01-2026'", "assertion": "assert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"problem_name": "108", "generated_code": "<s> [INST]Your task is to write a Python function ```def merge_sorted_list(num1,num2,num3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to merge three lists into a single sorted list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = []\n    while num1 or num2 or num3:\n        if not num3:\n            merged_list.append(num1)\n            num1 = num2\n            num2 = num3\n        elif not num2:\n            merged_list.append(num3)\n            num3 = num1\n            num1 = num2\n        else:\n            if num1 < num2:\n                merged_list.append(num1)\n                num1 = num2\n            else:\n                merged_list.append(num2)\n                num2 = num1\n    return merged_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to merge three lists into a single sorted list.", "input_data": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])", "expected_output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assertion": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"problem_name": "453", "generated_code": "<s> [INST]Your task is to write a Python function ```def sumofFactors(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of even factors of a number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of even factors of a number.", "input_data": "sumofFactors(18)", "expected_output": "26", "assertion": "assert sumofFactors(18) == 26"}
{"problem_name": "557", "generated_code": "<s> [INST]Your task is to write a Python function ```def toggle_string(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to toggle the case of all characters in a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n    \"\"\"\n    return string.lower()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to toggle the case of all characters in a string.", "input_data": "toggle_string(\"Python\")", "expected_output": "(\"pYTHON\")", "assertion": "assert toggle_string(\"Python\")==(\"pYTHON\")"}
{"problem_name": "97", "generated_code": "<s> [INST]Your task is to write a Python function ```def frequency_lists(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef frequency_lists(list1):\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "input_data": "frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])", "expected_output": "{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assertion": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"problem_name": "779", "generated_code": "<s> [INST]Your task is to write a Python function ```def unique_sublists(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef unique_sublists(list1):\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in sublists:\n                sublists.append(sublist)\n    sublist_count = {}\n    for sublist in sublists:\n        sublist_count[tuple(sublist)] = sublist_count.get(tuple(sublist), 0) + 1\n    return sublist_count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"problem_name": "608", "generated_code": "<s> [INST]Your task is to write a Python function ```def bell_Number(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find nth bell number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum(bell_Number(i) for i in range(1, n))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find nth bell number.", "input_data": "bell_Number(2)", "expected_output": "2", "assertion": "assert bell_Number(2) == 2"}
{"problem_name": "128", "generated_code": "<s> [INST]Your task is to write a Python function ```def long_words(n,str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find words that are longer than n characters from a given list of words.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef long_words(n,str):\n    # split the string into a list of words\n    words = str.split()\n    # create an empty list to store the long words\n    long_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the word is longer than n characters\n        if len(word) > n:\n            # append the word to the list of long words\n            long_words.append(word)\n    # return the list of long words\n    return long_words\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find words that are longer than n characters from a given list of words.", "input_data": "long_words(3,\"python is a programming language\")", "expected_output": "['python','programming','language']", "assertion": "assert long_words(3,\"python is a programming language\")==['python','programming','language']"}
{"problem_name": "426", "generated_code": "<s> [INST]Your task is to write a Python function ```def filter_oddnumbers(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to filter odd numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to filter odd numbers.", "input_data": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1,3,5,7,9]", "assertion": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"}
{"problem_name": "87", "generated_code": "<s> [INST]Your task is to write a Python function ```def merge_dictionaries_three(dict1,dict2,dict3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to merge three dictionaries into a single dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2:\n            if key in dict3:\n                merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key] + dict2[key]\n        else:\n            if key in dict3:\n                merged_dict[key] = dict3[key]\n            else:\n                merged_dict[key] = dict1[key]\n    return merged_dict\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to merge three dictionaries into a single dictionary.", "input_data": "merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })", "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"problem_name": "233", "generated_code": "<s> [INST]Your task is to write a Python function ```def lateralsuface_cylinder(r,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the lateral surface area of a cylinder.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef lateralsuface_cylinder(r,h):\n    return 2*pi*r*(r+h)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cylinder.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "765", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_polite(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_polite(n):\n    if n < 1:\n        return False\n    for i in range(1, n):\n        if i % 2 == 0:\n            if i != 2:\n                return False\n        elif i % 3 == 0:\n            if i != 3:\n                return False\n        elif i % 5 == 0:\n            if i != 5:\n                return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "input_data": "is_polite(7)", "expected_output": "11", "assertion": "assert is_polite(7) == 11"}
{"problem_name": "72", "generated_code": "<s> [INST]Your task is to write a Python function ```def dif_Square(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef dif_Square(n):\n    for i in range(1, n):\n        for j in range(i+1, n):\n            if (i**2 + j**2) == n:\n                return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "input_data": "dif_Square(5)", "expected_output": "True", "assertion": "assert dif_Square(5) == True"}
{"problem_name": "232", "generated_code": "<s> [INST]Your task is to write a Python function ```def larg_nnum(list1,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef larg_nnum(list1,n):\n    return list1[:n]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "722", "generated_code": "<s> [INST]Your task is to write a Python function ```def filter_data(students,h,w)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef filter_data(students,h,w):\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "input_data": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)", "expected_output": "{'Cierra Vega': (6.2, 70)}", "assertion": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"problem_name": "472", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_Consecutive(l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given list contains consecutive numbers or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given list contains consecutive numbers or not.", "input_data": "check_Consecutive([1,2,3,4,5])", "expected_output": "True", "assertion": "assert check_Consecutive([1,2,3,4,5]) == True"}
{"problem_name": "250", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_X(tup,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_X(tup,x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "input_data": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)", "expected_output": "0", "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0"}
{"problem_name": "443", "generated_code": "<s> [INST]Your task is to write a Python function ```def largest_neg(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the largest negative number from the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef largest_neg(list1):\n    max_neg = list1[0]\n    for num in list1:\n        if num < max_neg:\n            max_neg = num\n    return max_neg\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the largest negative number from the given list.", "input_data": "largest_neg([1,2,3,-4,-6])", "expected_output": "-6", "assertion": "assert largest_neg([1,2,3,-4,-6]) == -6"}
{"problem_name": "280", "generated_code": "<s> [INST]Your task is to write a Python function ```def sequential_search(dlist,item)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "input_data": "sequential_search([11,23,58,31,56,77,43,12,65,19],31)", "expected_output": "(True, 3)", "assertion": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"problem_name": "98", "generated_code": "<s> [INST]Your task is to write a Python function ```def multiply_num(numbers)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "586", "generated_code": "<s> [INST]Your task is to write a Python function ```def split_Arr(l,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef split_Arr(l,n):\n    return l[:n] + l[n:]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to split a list at the nth eelment and add the first part to the end.", "input_data": "split_Arr([12,10,5,6,52,36],2)", "expected_output": "[5,6,52,36,12,10]", "assertion": "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"problem_name": "95", "generated_code": "<s> [INST]Your task is to write a Python function ```def Find_Min_Length(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the length of the smallest list in a list of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Find_Min_Length(lst):\n    return min(len(x) for x in lst)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the smallest list in a list of lists.", "input_data": "Find_Min_Length([[1],[1,2]])", "expected_output": "1", "assertion": "assert Find_Min_Length([[1],[1,2]]) == 1"}
{"problem_name": "226", "generated_code": "<s> [INST]Your task is to write a Python function ```def odd_values_string(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to remove the characters which have odd index values of a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove the characters which have odd index values of a given string.", "input_data": "odd_values_string('abcdef')", "expected_output": "'ace'", "assertion": "assert odd_values_string('abcdef') == 'ace'"}
{"problem_name": "80", "generated_code": "<s> [INST]Your task is to write a Python function ```def tetrahedral_number(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth tetrahedral number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tetrahedral_number(n):\n    return (n*(n+1)*(n+2))/6\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth tetrahedral number.", "input_data": "tetrahedral_number(5)", "expected_output": "35", "assertion": "assert tetrahedral_number(5) == 35"}
{"problem_name": "798", "generated_code": "<s> [INST]Your task is to write a Python function ```def _sum(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of an array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef _sum(arr):\n    total = 0\n    for element in arr:\n        total += element\n    return total\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of an array.", "input_data": "_sum([1, 2, 3])", "expected_output": "6", "assertion": "assert _sum([1, 2, 3]) == 6"}
{"problem_name": "391", "generated_code": "<s> [INST]Your task is to write a Python function ```def convert_list_dictionary(l1,l2,l3)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert more than one list to nested dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = {}\n        for j in range(len(l2)):\n            sub_key = l2[j]\n            sub_value = {}\n            for k in range(len(l3)):\n                nested_key = l3[k]\n                nested_value = l3[k+1]\n                sub_value[nested_key] = nested_value\n            value[sub_key] = sub_value\n        result[key] = value\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert more than one list to nested dictionary.", "input_data": "convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])", "expected_output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assertion": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"problem_name": "133", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_negativenum(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_negativenum(nums):\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "input_data": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])", "expected_output": "-32", "assertion": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32"}
{"problem_name": "90", "generated_code": "<s> [INST]Your task is to write a Python function ```def len_log(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the length of the longest word.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the length of the longest word.", "input_data": "len_log([\"python\",\"PHP\",\"bigdata\"])", "expected_output": "7", "assertion": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"problem_name": "572", "generated_code": "<s> [INST]Your task is to write a Python function ```def two_unique_nums(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to remove duplicate numbers from a given number of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef two_unique_nums(nums):\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is not in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n            # If there are two unique numbers, return them\n            if len(unique_nums) == 2:\n                return unique_nums\n    \n    # If there are more than two unique numbers, return None\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove duplicate numbers from a given number of lists.", "input_data": "two_unique_nums([1,2,3,2,3,4,5])", "expected_output": "[1, 4, 5]", "assertion": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"problem_name": "623", "generated_code": "<s> [INST]Your task is to write a Python function ```def nth_nums(nums,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to compute the n-th power of each number in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef nth_nums(nums,n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to compute the n-th power of each number in a list.", "input_data": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"problem_name": "239", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_total_number_of_sequences(m,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        return sum(get_total_number_of_sequences(m, n-1) for i in range(2, m+1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "input_data": "get_total_number_of_sequences(10, 4)", "expected_output": "4", "assertion": "assert get_total_number_of_sequences(10, 4) == 4"}
{"problem_name": "92", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_undulating(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given number is undulating or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_undulating(n):\n    if n < 2:\n        return False\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is undulating or not.", "input_data": "is_undulating(1212121)", "expected_output": "True", "assertion": "assert is_undulating(1212121) == True"}
{"problem_name": "783", "generated_code": "<s> [INST]Your task is to write a Python function ```def rgb_to_hsv(r,g,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef rgb_to_hsv(r,g,b):\n    # Calculate the maximum and minimum values of R, G and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the hue, saturation and value\n    hue = 0\n    saturation = 0\n    value = 0\n\n    # If all three values are the same, the hue is undefined\n    if r == g == b:\n        hue = 0\n    # If the maximum value is red, the hue is between 0 and 120 degrees\n    elif max_val == r:\n        hue = (g - b) / diff * 60\n    # If the maximum value is green, the hue is between 120 and 240 degrees\n    elif max_val == g:\n        hue = (b - r) / diff * 60 + 120\n    # If the maximum value is blue, the hue is between 240 and 360 degrees\n    else:\n        hue = (r - g) / diff * 60 + 240\n\n    # Calculate the saturation\n    if diff == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the value\n    value = max_val / 255.0\n\n    # Return the hue, saturation and value as a tuple\n    return (hue, saturation, value)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "input_data": "rgb_to_hsv(255, 255, 255)", "expected_output": "(0, 0.0, 100.0)", "assertion": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)"}
{"problem_name": "418", "generated_code": "<s> [INST]Your task is to write a Python function ```def Find_Max(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the element of a list having maximum length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Find_Max(lst):\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the element of a list having maximum length.", "input_data": "Find_Max([['A'],['A','B'],['A','B','C']])", "expected_output": "['A','B','C']", "assertion": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"problem_name": "476", "generated_code": "<s> [INST]Your task is to write a Python function ```def big_sum(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of the largest and smallest value in a given array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef big_sum(nums):\n    return max(nums) + min(nums)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the largest and smallest value in a given array.", "input_data": "big_sum([1,2,3])", "expected_output": "4", "assertion": "assert big_sum([1,2,3]) == 4"}
{"problem_name": "603", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_ludic(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_lucid(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0 and i % 3 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "input_data": "get_ludic(10)", "expected_output": "[1, 2, 3, 5, 7]", "assertion": "assert get_ludic(10) == [1, 2, 3, 5, 7]"}
{"problem_name": "787", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_three(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that matches a string that has an a followed by three 'b'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_match_three(text):\n    if 'abbb' in text:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an a followed by three 'b'.", "input_data": "text_match_three(\"ac\")", "expected_output": "False", "assertion": "assert not text_match_three(\"ac\")"}
{"problem_name": "282", "generated_code": "<s> [INST]Your task is to write a Python function ```def sub_list(nums1,nums2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to subtract two lists element-wise.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sub_list(nums1,nums2):\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to subtract two lists element-wise.", "input_data": "sub_list([1, 2, 3],[4,5,6])", "expected_output": "[-3,-3,-3]", "assertion": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"}
{"problem_name": "100", "generated_code": "<s> [INST]Your task is to write a Python function ```def next_smallest_palindrome(num)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef next_smallest_palindrome(num):\n    # Convert the integer to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    \n    # Check if the reversed string is equal to the original string\n    if num_str == num_str_rev:\n        # If it is, increment the integer and return it\n        return num + 1\n    else:\n        # If it is not, convert the integer back to a string and add the reversed string to it\n        num_str_add_rev = num_str + num_str_rev\n        \n        # Convert the string back to an integer and return it\n        return int(num_str_add_rev)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "input_data": "next_smallest_palindrome(99)", "expected_output": "101", "assertion": "assert next_smallest_palindrome(99)==101"}
{"problem_name": "777", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_sum(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of non-repeated elements in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_sum(arr):\n    sum = 0\n    for num in arr:\n        if num not in sum:\n            sum += num\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of non-repeated elements in a given list.", "input_data": "find_sum([1,2,3,1,1,4,5,6])", "expected_output": "21", "assertion": "assert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"problem_name": "145", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_Abs_Diff(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the maximum difference between any two elements in a given array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the maximum difference between any two elements in a given array.", "input_data": "max_Abs_Diff((2,1,5,3))", "expected_output": "4", "assertion": "assert max_Abs_Diff((2,1,5,3)) == 4"}
{"problem_name": "269", "generated_code": "<s> [INST]Your task is to write a Python function ```def ascii_value(k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the ascii value of a character.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef ascii_value(k):\n    return ord(k)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ascii value of a character.", "input_data": "ascii_value('A')", "expected_output": "65", "assertion": "assert ascii_value('A')==65"}
{"problem_name": "14", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Volume(l,b,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the volume of a triangular prism.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Volume(l,b,h):\n    return l*b*h\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the volume of a triangular prism.", "input_data": "find_Volume(10,8,6)", "expected_output": "240", "assertion": "assert find_Volume(10,8,6) == 240"}
{"problem_name": "126", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of common divisors of two given numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum(a,b):\n    # Find the common divisors of a and b\n    cds = [1]\n    for i in range(2, max(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            cds.append(i)\n    # Sum the common divisors\n    return sum(cds)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of common divisors of two given numbers.", "input_data": "sum(10,15)", "expected_output": "6", "assertion": "assert sum(10,15) == 6"}
{"problem_name": "595", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_Swaps(str1,str2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_Swaps(str1,str2):\n    # Convert strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize swaps count to 0\n    swaps = 0\n\n    # Loop until num1 and num2 are equal\n    while num1 != num2:\n        # If num1 is greater than num2, subtract 2^k from num1\n        if num1 > num2:\n            num1 -= 2**swaps\n            swaps += 1\n        # If num1 is less than num2, add 2^k to num1\n        else:\n            num1 += 2**swaps\n            swaps += 1\n\n    # Return the number of swaps\n    return swaps\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.", "input_data": "min_Swaps(\"1101\",\"1110\")", "expected_output": "1", "assertion": "assert min_Swaps(\"1101\",\"1110\") == 1"}
{"problem_name": "430", "generated_code": "<s> [INST]Your task is to write a Python function ```def parabola_directrix(a,b,c)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the directrix of a parabola.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef parabola_directrix(a,b,c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + sqrt(discriminant)) / (2*a)\n        x2 = (-b - sqrt(discriminant)) / (2*a)\n        return (x1 + x2) / 2\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the directrix of a parabola.", "input_data": "parabola_directrix(5,3,2)", "expected_output": "-198", "assertion": "assert parabola_directrix(5,3,2)==-198"}
{"problem_name": "588", "generated_code": "<s> [INST]Your task is to write a Python function ```def big_diff(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the difference between largest and smallest value in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef big_diff(nums):\n    return max(nums) - min(nums)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the difference between largest and smallest value in a given list.", "input_data": "big_diff([1,2,3,4])", "expected_output": "3", "assertion": "assert big_diff([1,2,3,4]) == 3"}
{"problem_name": "261", "generated_code": "<s> [INST]Your task is to write a Python function ```def division_elements(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef division_elements(test_tup1,test_tup2):\n    # Perform element-wise division of two tuples\n    return (x/y for x,y in zip(test_tup1, test_tup2))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "input_data": "division_elements((10, 4, 6, 9),(5, 2, 3, 3))", "expected_output": "(2, 2, 2, 3)", "assertion": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"problem_name": "624", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_upper(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to convert a given string to uppercase.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_upper(string):\n    return string.isupper()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert a given string to uppercase.", "input_data": "is_upper(\"person\")", "expected_output": "\"PERSON\"", "assertion": "assert is_upper(\"person\") ==\"PERSON\""}
{"problem_name": "420", "generated_code": "<s> [INST]Your task is to write a Python function ```def cube_Sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the cube sum of first n even natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef cube_sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the cube sum of first n even natural numbers.", "input_data": "cube_Sum(2)", "expected_output": "72", "assertion": "assert cube_Sum(2) == 72"}
{"problem_name": "393", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_length_list(input_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the list with maximum length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_length_list(input_list):\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the list with maximum length.", "input_data": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"problem_name": "776", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_vowels(test_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels:\n            count += 1\n        if i < len(test_str)-1 and test_str[i+1] in vowels:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count those characters which have vowels as their neighbors in the given string.", "input_data": "count_vowels('bestinstareels')", "expected_output": "7", "assertion": "assert count_vowels('bestinstareels') == 7"}
{"problem_name": "612", "generated_code": "<s> [INST]Your task is to write a Python function ```def merge(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef merge(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n        result.append(sublist[1])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "input_data": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])", "expected_output": "[['x', 'a', 'm'], ['y', 'b', 'n']]", "assertion": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"problem_name": "760", "generated_code": "<s> [INST]Your task is to write a Python function ```def unique_Element(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef unique_Element(arr):\n    # Using set to remove duplicates from list\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "input_data": "unique_Element([1,1,1])", "expected_output": "True", "assertion": "assert unique_Element([1,1,1]) == True"}
{"problem_name": "244", "generated_code": "<s> [INST]Your task is to write a Python function ```def next_Perfect_Square(N)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the next perfect square greater than a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef next_Perfect_Square(N):\n    sqrt = int(N ** 0.5)\n    if sqrt * sqrt != N:\n        return sqrt * sqrt + 1\n    else:\n        return sqrt + 1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the next perfect square greater than a given number.", "input_data": "next_Perfect_Square(35)", "expected_output": "36", "assertion": "assert next_Perfect_Square(35) == 36"}
{"problem_name": "796", "generated_code": "<s> [INST]Your task is to write a Python function ```def return_sum(dict)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite function to find the sum of all items in the given dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef return_sum(dict):\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write function to find the sum of all items in the given dictionary.", "input_data": "return_sum({'a': 100, 'b':200, 'c':300})", "expected_output": "600", "assertion": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"problem_name": "448", "generated_code": "<s> [INST]Your task is to write a Python function ```def cal_sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the sum of perrin numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum += i**2\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum of perrin numbers.", "input_data": "cal_sum(9)", "expected_output": "49", "assertion": "assert cal_sum(9) == 49"}
{"problem_name": "580", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_even(test_tuple)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove uneven elements in the nested mixed tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_even(test_tuple):\n    \"\"\"\n    This function removes uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_tuple = tuple(filter(lambda x: isinstance(x, tuple) and len(x) % 2 == 0, test_tuple))\n    return even_tuple\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove uneven elements in the nested mixed tuple.", "input_data": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))", "expected_output": "(4, (6, (2, 4)), 6, 8)", "assertion": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"problem_name": "285", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_two_three(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_match_two_three(text):\n    if 'ab' in text or 'abc' in text:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "input_data": "text_match_two_three(\"ac\")", "expected_output": "(False)", "assertion": "assert text_match_two_three(\"ac\")==(False)"}
{"problem_name": "266", "generated_code": "<s> [INST]Your task is to write a Python function ```def lateralsurface_cube(l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the lateral surface area of a cube given its side length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef lateralsurface_cube(l):\n    return 6*l**2\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cube given its side length.", "input_data": "lateralsurface_cube(5)", "expected_output": "100", "assertion": "assert lateralsurface_cube(5)==100"}
{"problem_name": "627", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_First_Missing(array,start,end)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_First_Missing(array,start,end):\n    # Initialize a set to store the elements in the array\n    set_array = set(array)\n    \n    # Iterate over the range of numbers from start to end\n    for i in range(start, end+1):\n        # If the number is not in the set, return it as the missing number\n        if i not in set_array:\n            return i\n    \n    # If no missing number is found, return None\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "input_data": "find_First_Missing([0,1,2,3])", "expected_output": "4", "assertion": "assert find_First_Missing([0,1,2,3]) == 4"}
{"problem_name": "79", "generated_code": "<s> [INST]Your task is to write a Python function ```def word_len(s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the length of the word is odd or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef word_len(s):\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the length of the word is odd or not.", "input_data": "word_len(\"Hadoop\")", "expected_output": "False", "assertion": "assert word_len(\"Hadoop\") == False"}
{"problem_name": "421", "generated_code": "<s> [INST]Your task is to write a Python function ```def concatenate_tuple(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to concatenate each element of tuple by the delimiter.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef concatenate_tuple(test_tup):\n    delimiter = ','\n    result = []\n    for element in test_tup:\n        result.append(str(element) + delimiter)\n    return tuple(result)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to concatenate each element of tuple by the delimiter.", "input_data": "concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )", "expected_output": "'ID-is-4-UTS'", "assertion": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"problem_name": "6", "generated_code": "<s> [INST]Your task is to write a Python function ```def differ_At_One_Bit_Pos(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef differ_At_One_Bit_Pos(a,b):\n    # Convert the binary representation of the two numbers to strings\n    a_str = bin(a)[2:]\n    b_str = bin(b)[2:]\n    \n    # Find the index of the first bit that is different between the two numbers\n    diff_index = a_str.find('1') - b_str.find('1')\n    \n    # If the index is -1, it means that the two numbers do not differ at any bit position\n    if diff_index == -1:\n        return False\n    \n    # If the index is 0, it means that the two numbers differ at the most significant bit position\n    elif diff_index == 0:\n        return True\n    \n    # If the index is not 0, it means that the two numbers differ at a position other than the most significant bit position\n    else:\n        return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the two numbers differ at one bit position only or not.", "input_data": "differ_At_One_Bit_Pos(13,9)", "expected_output": "True", "assertion": "assert differ_At_One_Bit_Pos(13,9) == True"}
{"problem_name": "238", "generated_code": "<s> [INST]Your task is to write a Python function ```def number_of_substrings(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of non-empty substrings of a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef number_of_substrings(str):\n    return len(str)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of non-empty substrings of a given string.", "input_data": "number_of_substrings(\"abc\")", "expected_output": "6", "assertion": "assert number_of_substrings(\"abc\") == 6"}
{"problem_name": "804", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_product_even(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the product of numbers in a list is even or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the product of numbers in a list is even or not.", "input_data": "is_product_even([1,2,3])", "expected_output": "True", "assertion": "assert is_product_even([1,2,3])"}
{"problem_name": "569", "generated_code": "<s> [INST]Your task is to write a Python function ```def sort_sublists(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort each sublist of strings in a given list of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"problem_name": "267", "generated_code": "<s> [INST]Your task is to write a Python function ```def square_Sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i**2\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "input_data": "square_Sum(2)", "expected_output": "10", "assertion": "assert square_Sum(2) == 10"}
{"problem_name": "229", "generated_code": "<s> [INST]Your task is to write a Python function ```def re_arrange_array(arr,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef re_arrange_array(arr, n):\n    # Create two empty lists, one for negative and one for positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the array and add elements to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Combine the two lists and return the result\n    return neg_list + pos_list[:n]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "input_data": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)", "expected_output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assertion": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"problem_name": "465", "generated_code": "<s> [INST]Your task is to write a Python function ```def drop_empty(dict1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to drop empty items from a given dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to drop empty items from a given dictionary.", "input_data": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})", "expected_output": "{'c1': 'Red', 'c2': 'Green'}", "assertion": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"problem_name": "141", "generated_code": "<s> [INST]Your task is to write a Python function ```def pancake_sort(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a list of elements.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef pancake_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the pancake sorting algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Move the sorted part of the list to the end\n        for j in range(i+1, n):\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of elements.", "input_data": "pancake_sort([15, 79, 25, 38, 69])", "expected_output": "[15, 25, 38, 69, 79]", "assertion": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"problem_name": "293", "generated_code": "<s> [INST]Your task is to write a Python function ```def otherside_rightangle(w,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the third side of a right angled triangle.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef otherside_rightangle(w,h):\n    return (w**2 + h**2)**0.5\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the third side of a right angled triangle.", "input_data": "otherside_rightangle(7,8)", "expected_output": "10.63014581273465", "assertion": "assert otherside_rightangle(7,8)==10.63014581273465"}
{"problem_name": "737", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_str(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport re\n\ndef check_str(string):\n    if re.search(r'^[aeiouAEIOU]', string):\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given string is starting with a vowel or not using regex.", "input_data": "check_str(\"annie\")", "expected_output": "True", "assertion": "assert check_str(\"annie\")"}
{"problem_name": "277", "generated_code": "<s> [INST]Your task is to write a Python function ```def dict_filter(dict,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "input_data": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)", "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"problem_name": "8", "generated_code": "<s> [INST]Your task is to write a Python function ```def square_nums(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find squares of individual elements in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef square_nums(nums):\n    # Create an empty list to store the squares\n    squares = []\n    \n    # Iterate over each number in the input list\n    for num in nums:\n        # Add the square of the current number to the list of squares\n        squares.append(num ** 2)\n    \n    # Return the list of squares\n    return squares\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find squares of individual elements in a list.", "input_data": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"problem_name": "644", "generated_code": "<s> [INST]Your task is to write a Python function ```def reverse_Array_Upto_K(input,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to reverse an array upto a given position.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef reverse_Array_Upto_K(input,k):\n    # Initialize start and end indices\n    start = 0\n    end = len(input) - 1\n\n    # Loop until start is less than or equal to end\n    while start <= end:\n        # Swap the current element of start with the current element of end\n        input[start], input[end] = input[end], input[start]\n\n        # Increment start and decrement end\n        start += 1\n        end -= 1\n\n    # Return the reversed array\n    return input\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to reverse an array upto a given position.", "input_data": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)", "expected_output": "[4, 3, 2, 1, 5, 6]", "assertion": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"problem_name": "86", "generated_code": "<s> [INST]Your task is to write a Python function ```def centered_hexagonal_number(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find nth centered hexagonal number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef centered_hexagonal_number(n):\n    # Calculate the number of rows in the hexagonal number\n    rows = n // 2\n    \n    # Calculate the number of digits in the hexagonal number\n    digits = rows * 6\n    \n    # Calculate the sum of digits in the hexagonal number\n    sum_of_digits = sum(range(1, digits + 1))\n    \n    # Calculate the centered hexagonal number\n    centered_hexagonal_number = sum_of_digits - rows\n    \n    return centered_hexagonal_number\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find nth centered hexagonal number.", "input_data": "centered_hexagonal_number(10)", "expected_output": "271", "assertion": "assert centered_hexagonal_number(10) == 271"}
{"problem_name": "419", "generated_code": "<s> [INST]Your task is to write a Python function ```def round_and_sum(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef round_and_sum(list1):\n    total_sum = sum([round(num) for num in list1])\n    return total_sum * len(list1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "input_data": "round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])", "expected_output": "243", "assertion": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"problem_name": "738", "generated_code": "<s> [INST]Your task is to write a Python function ```def geometric_sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "input_data": "geometric_sum(7)", "expected_output": "1.9921875", "assertion": "assert geometric_sum(7) == 1.9921875"}
{"problem_name": "131", "generated_code": "<s> [INST]Your task is to write a Python function ```def reverse_vowels(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "input_data": "reverse_vowels(\"Python\")", "expected_output": "\"Python\"", "assertion": "assert reverse_vowels(\"Python\") == \"Python\""}
{"problem_name": "602", "generated_code": "<s> [INST]Your task is to write a Python function ```def first_repeated_char(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the first repeated character in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef first_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first repeated character in a given string.", "input_data": "first_repeated_char(\"abcabc\")", "expected_output": "\"a\"", "assertion": "assert first_repeated_char(\"abcabc\") == \"a\""}
{"problem_name": "224", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_Set_Bits(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "input_data": "count_Set_Bits(2)", "expected_output": "1", "assertion": "assert count_Set_Bits(2) == 1"}
{"problem_name": "246", "generated_code": "<s> [INST]Your task is to write a Python function ```def babylonian_squareroot(number)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function for computing square roots using the babylonian method.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef babylonian_squareroot(number):\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        while True:\n            better_guess = (guess + number / guess) / 2\n            if abs(guess - better_guess) < 0.000001:\n                return better_guess\n            guess = better_guess\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function for computing square roots using the babylonian method.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "62", "generated_code": "<s> [INST]Your task is to write a Python function ```def smallest_num(xs)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find smallest number in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef smallest_num(xs):\n    return min(xs)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find smallest number in a list.", "input_data": "smallest_num([10, 20, 1, 45, 99])", "expected_output": "1", "assertion": "assert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"problem_name": "281", "generated_code": "<s> [INST]Your task is to write a Python function ```def all_unique(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check if the elements of a given list are unique or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef all_unique(test_list):\n    # Create an empty set\n    unique_set = set()\n    \n    # Iterate over the list\n    for item in test_list:\n        # If the item is not in the set, add it\n        if item not in unique_set:\n            unique_set.add(item)\n        # If the item is in the set, return False\n        else:\n            return False\n    \n    # If all items are unique, return True\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check if the elements of a given list are unique or not.", "input_data": "all_unique([1,2,3])", "expected_output": "True", "assertion": "assert all_unique([1,2,3]) == True"}
{"problem_name": "615", "generated_code": "<s> [INST]Your task is to write a Python function ```def average_tuple(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef average_tuple(nums):\n    result = []\n    for num in nums:\n        sum = 0\n        for item in num:\n            sum += item\n        avg = sum / len(num)\n        result.append(avg)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "input_data": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))", "expected_output": "[30.5, 34.25, 27.0, 23.25]", "assertion": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]"}
{"problem_name": "749", "generated_code": "<s> [INST]Your task is to write a Python function ```def sort_numeric_strings(nums_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sort_numeric_strings(nums_str):\n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers in ascending order\n    nums.sort()\n    \n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # Return the sorted strings\n    return sorted_nums_str\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "input_data": "sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])", "expected_output": "[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assertion": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"problem_name": "473", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_intersection(test_list1,test_list2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_intersection(test_list1,test_list2):\n    # Convert the tuples to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find intersection of sets\n    intersection = set1 & set2\n    \n    # Convert the intersection back to tuple\n    result = tuple(intersection)\n    \n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "input_data": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])", "expected_output": "{(4, 5), (3, 4), (5, 6)}", "assertion": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"problem_name": "82", "generated_code": "<s> [INST]Your task is to write a Python function ```def volume_sphere(r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the volume of a sphere.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef volume_sphere(r):\n    return (4/3) * 3.14159 * r**3\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a sphere.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "600", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_Even(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given number is even or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number is even or not.", "input_data": "is_Even(1)", "expected_output": "False", "assertion": "assert is_Even(1) == False"}
{"problem_name": "573", "generated_code": "<s> [INST]Your task is to write a Python function ```def unique_product(list_data)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to calculate the product of the unique numbers in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to calculate the product of the unique numbers in a given list.", "input_data": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])", "expected_output": "720000000", "assertion": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"problem_name": "120", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_product_tuple(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0] - list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "input_data": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "36", "assertion": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36"}
{"problem_name": "579", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_dissimilar(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the dissimilar elements in the given two tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_dissimilar(test_tup1,test_tup2):\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissimilar.append(i)\n    return dissimilar\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the dissimilar elements in the given two tuples.", "input_data": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))", "expected_output": "(3, 6, 7, 10)", "assertion": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"problem_name": "297", "generated_code": "<s> [INST]Your task is to write a Python function ```def flatten_list(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to flatten a given nested list structure.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef flatten_list(list1):\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten a given nested list structure.", "input_data": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "expected_output": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assertion": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"problem_name": "424", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_rear(test_tuple)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract only the rear index element of each string in the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_rear(test_tuple):\n    \"\"\"\n    Extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [int(s.split('-')[-1]) for s in test_tuple]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract only the rear index element of each string in the given tuple.", "input_data": "extract_rear(('Mers', 'for', 'Vers') )", "expected_output": "['s', 'r', 's']", "assertion": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"problem_name": "242", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_charac(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count the total number of characters in a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_charac(str1):\n    return len(str1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count the total number of characters in a string.", "input_data": "count_charac(\"python programming\")", "expected_output": "18", "assertion": "assert count_charac(\"python programming\")==18"}
{"problem_name": "462", "generated_code": "<s> [INST]Your task is to write a Python function ```def combinations_list(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find all possible combinations of the elements of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef combinations_list(list1):\n    # Using the built-in itertools module to generate all possible combinations\n    # of the elements in the input list\n    return list(itertools.combinations(list1, r=len(list1)))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find all possible combinations of the elements of a given list.", "input_data": "combinations_list(['orange', 'red', 'green', 'blue'])", "expected_output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assertion": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"problem_name": "596", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_size(tuple_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the size in bytes of the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the size in bytes of the given tuple.", "input_data": "tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )", "expected_output": "sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assertion": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"problem_name": "429", "generated_code": "<s> [INST]Your task is to write a Python function ```def and_tuples(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract the elementwise and tuples from the given two tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef and_tuples(test_tup1,test_tup2):\n    # Extracting elementwise and tuples from the given two tuples\n    elementwise = list(zip(test_tup1, test_tup2))\n    tuples = [tuple(elem) for elem in elementwise]\n    return elementwise, tuples\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the elementwise and tuples from the given two tuples.", "input_data": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(0, 0, 2, 1)", "assertion": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"problem_name": "58", "generated_code": "<s> [INST]Your task is to write a Python function ```def opposite_Signs(x,y)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given two integers have opposite sign or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef opposite_Signs(x,y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given two integers have opposite sign or not.", "input_data": "opposite_Signs(1,-2)", "expected_output": "True", "assertion": "assert opposite_Signs(1,-2) == True"}
{"problem_name": "132", "generated_code": "<s> [INST]Your task is to write a Python function ```def tup_string(tup1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a tuple to a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tup_string(tup1):\n    return str(tup1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a tuple to a string.", "input_data": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "expected_output": "(\"exercises\")", "assertion": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")"}
{"problem_name": "461", "generated_code": "<s> [INST]Your task is to write a Python function ```def upper_ctr(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the upper case characters in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the upper case characters in a given string.", "input_data": "upper_ctr('PYthon')", "expected_output": "1", "assertion": "assert upper_ctr('PYthon') == 1"}
{"problem_name": "474", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_char(str1,ch,newch)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to replace characters in a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace characters in a string.", "input_data": "replace_char(\"polygon\",'y','l')", "expected_output": "(\"pollgon\")", "assertion": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"problem_name": "237", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_occurences(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_occurences(test_list):\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Iterate through each tuple in the list\n    for tuple in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tuple in count_dict:\n            count_dict[tuple] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tuple] = 1\n    \n    # Return the dictionary\n    return count_dict\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "input_data": "check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )", "expected_output": "{(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assertion": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"problem_name": "125", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_length(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zero += 1\n            elif string[j] == '1':\n                count_one += 1\n        diff = abs(count_zero - count_one)\n        max_diff = max(max_diff, diff)\n    return max_diff\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "input_data": "find_length(\"11000010001\")", "expected_output": "6", "assertion": "assert find_length(\"11000010001\") == 6"}
{"problem_name": "633", "generated_code": "<s> [INST]Your task is to write a Python function ```def pair_xor_Sum(arr,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "input_data": "pair_xor_Sum([5,9,7,6],4)", "expected_output": "47", "assertion": "assert pair_xor_Sum([5,9,7,6],4) == 47"}
{"problem_name": "278", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_first_elements(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] != test_tup[i+1]:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "input_data": "count_first_elements((1, 5, 7, (4, 6), 10) )", "expected_output": "3", "assertion": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"problem_name": "628", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_spaces(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to replace all spaces in the given string with '%20'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to replace all spaces in the given string with '%20'.", "input_data": "replace_spaces(\"My Name is Dawood\")", "expected_output": "'My%20Name%20is%20Dawood'", "assertion": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"problem_name": "257", "generated_code": "<s> [INST]Your task is to write a Python function ```def swap_numbers(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef swap_numbers(a,b):\n    return (b, a)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "input_data": "swap_numbers(10,20)", "expected_output": "(20,10)", "assertion": "assert swap_numbers(10,20)==(20,10)"}
{"problem_name": "622", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_median(arr1,arr2,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the median of two sorted lists of same size.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_median(arr1, arr2, n):\n    # Merge the two sorted lists\n    merged_list = sorted(arr1 + arr2)\n\n    # Find the length of the merged list\n    length = len(merged_list)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If it's even, return the average of the middle two elements\n        return (merged_list[length//2 - 1] + merged_list[length//2]) / 2\n    else:\n        # If it's odd, return the middle element\n        return merged_list[length//2]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median of two sorted lists of same size.", "input_data": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)", "expected_output": "16.0", "assertion": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"problem_name": "592", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_Of_product(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_Of_product(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i * (i-1) * (i-2)\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of the product of consecutive binomial co-efficients.", "input_data": "sum_Of_product(3)", "expected_output": "15", "assertion": "assert sum_Of_product(3) == 15"}
{"problem_name": "746", "generated_code": "<s> [INST]Your task is to write a Python function ```def sector_area(r,a)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        angle = a/360\n        area = (1/2) * r**2 * angle\n        return area\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "input_data": "sector_area(4,45)", "expected_output": "6.283185307179586", "assertion": "assert sector_area(4,45)==6.283185307179586"}
{"problem_name": "617", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_Jumps(steps,d)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_Jumps(steps,d):\n    def min_Jumps_helper(x,y,jumps):\n        if jumps == 0:\n            return False\n        if x == d and y == 0:\n            return True\n        if x < 0 or y < 0:\n            return False\n        if x > d or y > 0:\n            return True\n        if x > d or y < 0:\n            return True\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x < d and y > 0:\n            return False\n        if x > d and y < 0:\n            return False\n        if x > d and y > 0:\n            return False\n        if x < d and y < 0:\n            return False\n        if x", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "input_data": "min_Jumps((3,4),11)", "expected_output": "3.5", "assertion": "assert min_Jumps((3,4),11)==3.5"}
{"problem_name": "444", "generated_code": "<s> [INST]Your task is to write a Python function ```def trim_tuple(test_list,K)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to trim each tuple by k in the given tuple list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a value K as input and returns a new list of tuples where each tuple is trimmed by K.\n    \"\"\"\n    new_list = []\n    for tuple in test_list:\n        new_tuple = tuple[:K] + tuple[K:]\n        new_list.append(new_tuple)\n    return new_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to trim each tuple by k in the given tuple list.", "input_data": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)", "expected_output": "'[(2,), (9,), (2,), (2,)]'", "assertion": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"}
{"problem_name": "259", "generated_code": "<s> [INST]Your task is to write a Python function ```def maximize_elements(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to maximize the given two tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef maximize_elements(test_tup1,test_tup2):\n    # Convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Find maximum element in list1\n    max_list1 = max(list1)\n    \n    # Find maximum element in list2\n    max_list2 = max(list2)\n    \n    # Return maximum element from list1 and list2\n    return max_list1, max_list2\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to maximize the given two tuples.", "input_data": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((6, 7), (4, 9), (2, 9), (7, 10))", "assertion": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"problem_name": "89", "generated_code": "<s> [INST]Your task is to write a Python function ```def closest_num(N)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the closest smaller number than n.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef closest_num(N):\n    closest = N - 1\n    for i in range(closest, 0, -1):\n        if i < N:\n            closest = i\n            break\n    return closest\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the closest smaller number than n.", "input_data": "closest_num(11)", "expected_output": "10", "assertion": "assert closest_num(11) == 10"}
{"problem_name": "311", "generated_code": "<s> [INST]Your task is to write a Python function ```def set_left_most_unset_bit(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to set the left most unset bit.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef set_left_most_unset_bit(n):\n    # Find the left most unset bit\n    while n & 1:\n        n >>= 1\n    \n    # Set the left most unset bit\n    n |= 1\n    \n    return n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to set the left most unset bit.", "input_data": "set_left_most_unset_bit(10)", "expected_output": "14", "assertion": "assert set_left_most_unset_bit(10) == 14"}
{"problem_name": "138", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_Sum_Of_Powers_Of_Two(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "input_data": "is_Sum_Of_Powers_Of_Two(10)", "expected_output": "True", "assertion": "assert is_Sum_Of_Powers_Of_Two(10) == True"}
{"problem_name": "111", "generated_code": "<s> [INST]Your task is to write a Python function ```def common_in_nested_lists(nestedlist)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the common elements in given nested lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef common_in_nested_lists(nestedlist):\n    result = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in result:\n                continue\n            else:\n                result.append(item)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the common elements in given nested lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "764", "generated_code": "<s> [INST]Your task is to write a Python function ```def number_ctr(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count number of digits in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count number of digits in a given string.", "input_data": "number_ctr('program2bedone')", "expected_output": "1", "assertion": "assert number_ctr('program2bedone') == 1"}
{"problem_name": "104", "generated_code": "<s> [INST]Your task is to write a Python function ```def sort_sublists(input_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort each sublist of strings in a given list of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"problem_name": "164", "generated_code": "<s> [INST]Your task is to write a Python function ```def are_equivalent(num1,num2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to determine if the sum of the divisors of two integers are the same.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef are_equivalent(num1, num2):\n    divs1 = set(range(1, num1+1))\n    divs2 = set(range(1, num2+1))\n    return sum(divs1) == sum(divs2)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to determine if the sum of the divisors of two integers are the same.", "input_data": "are_equivalent(36, 57)", "expected_output": "False", "assertion": "assert are_equivalent(36, 57) == False"}
{"problem_name": "408", "generated_code": "<s> [INST]Your task is to write a Python function ```def k_smallest_pairs(nums1,nums2,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 < num2:\n                pairs.append((num1, num2))\n    pairs.sort()\n    return pairs[:k]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "input_data": "k_smallest_pairs([1,3,7],[2,4,6],2)", "expected_output": "[[1, 2], [1, 4]]", "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]"}
{"problem_name": "721", "generated_code": "<s> [INST]Your task is to write a Python function ```def maxAverageOfPath(cost)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef maxAverageOfPath(cost):\n    N = len(cost)\n    max_sum = 0\n    max_count = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == N-1 and j == N-1:\n                max_sum += cost[i][j]\n                max_count += 1\n            elif cost[i][j] == 0:\n                continue\n            else:\n                max_sum += cost[i][j]\n                max_count += 1\n    return max_sum / max_count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "input_data": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])", "expected_output": "5.2", "assertion": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"problem_name": "751", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_min_heap(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if arr[i] > arr[2*i+1]:\n            return False\n        if arr[i] > arr[2*i+2]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "input_data": "check_min_heap([1, 2, 3, 4, 5, 6])", "expected_output": "True", "assertion": "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"problem_name": "563", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_values(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract values between quotation marks from a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    values = []\n    for word in text.split():\n        if word.startswith('\"') and word.endswith('\"'):\n            values.append(word[1:-1])\n    return values\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract values between quotation marks from a string.", "input_data": "extract_values('\"Python\", \"PHP\", \"Java\"')", "expected_output": "['Python', 'PHP', 'Java']", "assertion": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"problem_name": "260", "generated_code": "<s> [INST]Your task is to write a Python function ```def newman_prime(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth newman–shanks–williams prime number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef newman_prime(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth newman–shanks–williams prime number.", "input_data": "newman_prime(3)", "expected_output": "7", "assertion": "assert newman_prime(3) == 7"}
{"problem_name": "755", "generated_code": "<s> [INST]Your task is to write a Python function ```def second_smallest(numbers)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the second smallest number in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef second_smallest(numbers):\n    numbers.sort()\n    return numbers[1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the second smallest number in a list.", "input_data": "second_smallest([1, 2, -8, -2, 0, -2])", "expected_output": "-2", "assertion": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2"}
{"problem_name": "415", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_Product(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find a pair with highest product from a given array of integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_Product(arr):\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find a pair with highest product from a given array of integers.", "input_data": "max_Product([1,2,3,4,7,0,8,4])", "expected_output": "(7,8)", "assertion": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"}
{"problem_name": "129", "generated_code": "<s> [INST]Your task is to write a Python function ```def magic_square_test(my_matrix)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate whether the matrix is a magic square.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef magic_square_test(my_matrix):\n    n = len(my_matrix)\n    total_sum = (n*(n**2+1))//2\n    sum_row = sum(my_matrix[i]) for i in range(n)\n    sum_col = sum(my_matrix[j][i] for j in range(n)) for i in range(n)\n    return sum_row == total_sum and sum_col == total_sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate whether the matrix is a magic square.", "input_data": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])", "expected_output": "True", "assertion": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True"}
{"problem_name": "64", "generated_code": "<s> [INST]Your task is to write a Python function ```def subject_marks(subjectmarks)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a list of tuples using the second value of each tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of tuples using the second value of each tuple.", "input_data": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])", "expected_output": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assertion": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"problem_name": "739", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Index(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Index(n):\n    # Initialize the smallest triangular number with n digits\n    smallest_triangular = 1\n    \n    # Loop until the smallest triangular number with n digits is found\n    while True:\n        # Convert the smallest triangular number to a string and check if it has n digits\n        if len(str(smallest_triangular)) == n:\n            # If it does, return the index\n            return smallest_triangular - 1\n        \n        # Increment the smallest triangular number by 1\n        smallest_triangular += 1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "input_data": "find_Index(2)", "expected_output": "4", "assertion": "assert find_Index(2) == 4"}
{"problem_name": "115", "generated_code": "<s> [INST]Your task is to write a Python function ```def empty_dit(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether all dictionaries in a list are empty or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef empty_dit(list1):\n    for i in list1:\n        if not i.values():\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether all dictionaries in a list are empty or not.", "input_data": "empty_dit([{},{},{}])", "expected_output": "True", "assertion": "assert empty_dit([{},{},{}])==True"}
{"problem_name": "445", "generated_code": "<s> [INST]Your task is to write a Python function ```def index_multiplication(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef index_multiplication(test_tup1,test_tup2):\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Create a new tuple with the multiplication of the elements at the same index\n    result = tuple(elem1*elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    # Return the result\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "input_data": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )", "expected_output": "((6, 21), (12, 45), (2, 9), (7, 30))", "assertion": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"problem_name": "307", "generated_code": "<s> [INST]Your task is to write a Python function ```def colon_tuplex(tuplex,m,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to get a colon of a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef colon_tuplex(tuplex,m,n):\n    return tuplex[m:n+1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to get a colon of a tuple.", "input_data": "colon_tuplex((\"HELLO\", 5, [], True) ,2,50)", "expected_output": "(\"HELLO\", 5, [50], True)", "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)"}
{"problem_name": "564", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_Pairs(arr,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.", "input_data": "count_Pairs([1,2,1],3)", "expected_output": "2", "assertion": "assert count_Pairs([1,2,1],3) == 2"}
{"problem_name": "109", "generated_code": "<s> [INST]Your task is to write a Python function ```def odd_Equivalent(s,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[0] == '1':\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "input_data": "odd_Equivalent(\"011001\",6)", "expected_output": "3", "assertion": "assert odd_Equivalent(\"011001\",6) == 3"}
{"problem_name": "308", "generated_code": "<s> [INST]Your task is to write a Python function ```def large_product(nums1,nums2,N)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef large_product(nums1, nums2, N):\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "input_data": "large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)", "expected_output": "[60, 54, 50]", "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"problem_name": "279", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_num_decagonal(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth decagonal number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_num_decagonal(n):\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    # Calculate the number of digits in n\n    digits = len(str(n))\n    # Check if n has exactly 10 digits\n    if digits != 10:\n        return False\n    # Check if n is a multiple of 9\n    if n % 9 != 0:\n        return False\n    # Check if n is a multiple of 10\n    if n % 10 != 0:\n        return False\n    # Check if n is a multiple of 18\n    if n % 18 != 0:\n        return False\n    # Check if n is a multiple of 27\n    if n % 27 != 0:\n        return False\n    # Check if n is a multiple of 36\n    if n % 36 != 0:\n        return False\n    # Check if n is a multiple of 45\n    if n % 45 != 0:\n        return False\n    # Check if n is a multiple of 54\n    if n % 54 != 0:\n        return False\n    # Check if n is a multiple of 63\n    if n % 63 != 0:\n        return False\n    # Check if n is a multiple of 72\n    if n % 72 != 0:\n        return False\n    # Check if n is a multiple of 81\n    if n % 81 != 0:\n        return False\n    # Check if n is a multiple of 90\n    if n % 90 != 0:\n        return False\n    # Check if n is a multiple of 108\n    if n % 108 != 0:\n        return False\n    # Check if n is a multiple of 126\n    if n % 126 != 0:\n        return False\n    # Check if n is a multiple of 144\n    if n % 144 != 0:\n        return False\n    # Check if n is a multiple of 162\n    if", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth decagonal number.", "input_data": "is_num_decagonal(3)", "expected_output": "27", "assertion": "assert is_num_decagonal(3) == 27"}
{"problem_name": "745", "generated_code": "<s> [INST]Your task is to write a Python function ```def divisible_by_digits(startnum,endnum)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef divisible_by_digits(startnum, endnum):\n    for num in range(startnum, endnum+1):\n        if all(num % digit == 0 for digit in str(num)):\n            yield num\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "input_data": "divisible_by_digits(1,22)", "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assertion": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"problem_name": "91", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_substring(str1,sub_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if a string is present as a substring in a given list of string values.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_substring(str1, sub_str):\n    for i in range(len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j+1] == sub_str:\n                return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a string is present as a substring in a given list of string values.", "input_data": "find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")", "expected_output": "True", "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"problem_name": "752", "generated_code": "<s> [INST]Your task is to write a Python function ```def jacobsthal_num(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef jacobsthal_num(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "input_data": "jacobsthal_num(5)", "expected_output": "11", "assertion": "assert jacobsthal_num(5) == 11"}
{"problem_name": "284", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_element(list,element)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "input_data": "check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')", "expected_output": "False", "assertion": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"problem_name": "560", "generated_code": "<s> [INST]Your task is to write a Python function ```def union_elements(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef union_elements(test_tup1,test_tup2):\n    # Convert tuples to sets to remove duplicates and find union\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    \n    # Convert set back to tuple and sort\n    union_tuple = tuple(sorted(union_set))\n    \n    return union_tuple\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the union of the elements of two given tuples and output them in sorted order.", "input_data": "union_elements((3, 4, 5, 6),(5, 7, 4, 10) )", "expected_output": "(3, 4, 5, 6, 7, 10)", "assertion": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"problem_name": "3", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_not_prime(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to identify non-prime numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to identify non-prime numbers.", "input_data": "is_not_prime(2)", "expected_output": "False", "assertion": "assert is_not_prime(2) == False"}
{"problem_name": "388", "generated_code": "<s> [INST]Your task is to write a Python function ```def highest_Power_of_2(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef highest_Power_of_2(n):\n    while n > 1:\n        n = n // 2\n    return n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the highest power of 2 that is less than or equal to n.", "input_data": "highest_Power_of_2(10)", "expected_output": "8", "assertion": "assert highest_Power_of_2(10) == 8"}
{"problem_name": "240", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_list(list1,list2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_list(list1, list2):\n    list1.pop()\n    list1.append(list2)\n    return list1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "input_data": "replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assertion": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"problem_name": "585", "generated_code": "<s> [INST]Your task is to write a Python function ```def expensive_items(items,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the n most expensive items in a given dataset.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef expensive_items(items, n):\n    # sort the items in descending order of their cost\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # return the first n items\n    return items[:n]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n most expensive items in a given dataset.", "input_data": "expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)", "expected_output": "[{'name': 'Item-2', 'price': 555.22}]", "assertion": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"problem_name": "12", "generated_code": "<s> [INST]Your task is to write a Python function ```def sort_matrix(M)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sort_matrix(M):\n    # sort matrix based on sum of rows\n    M.sort(key=sum)\n    return M\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "input_data": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])", "expected_output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assertion": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"problem_name": "629", "generated_code": "<s> [INST]Your task is to write a Python function ```def Split(list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find even numbers from a list of numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find even numbers from a list of numbers.", "input_data": "Split([1,2,3,4,5])", "expected_output": "[2,4]", "assertion": "assert Split([1,2,3,4,5]) == [2,4]"}
{"problem_name": "75", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_tuples(test_list,K)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_tuples(test_list, K):\n    result = []\n    for tuple in test_list:\n        if all(tuple[i] % K == 0 for i in range(len(tuple))):\n            result.append(tuple)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "input_data": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)", "expected_output": "[(6, 24, 12)]", "assertion": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"problem_name": "227", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_of_three(a,b,c)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find minimum of three numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find minimum of three numbers.", "input_data": "min_of_three(10,20,0)", "expected_output": "0", "assertion": "assert min_of_three(10,20,0)==0"}
{"problem_name": "83", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_Char(strr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_Char(strr):\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 97)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "input_data": "get_Char(\"abc\")", "expected_output": "\"f\"", "assertion": "assert get_Char(\"abc\") == \"f\""}
{"problem_name": "457", "generated_code": "<s> [INST]Your task is to write a Python function ```def Find_Min(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sublist having minimum length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Find_Min(lst):\n    min_length = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sublist having minimum length.", "input_data": "Find_Min([[1],[1,2],[1,2,3]])", "expected_output": "[1]", "assertion": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"problem_name": "625", "generated_code": "<s> [INST]Your task is to write a Python function ```def swap_List(newList)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to interchange the first and last element in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef swap_List(newList):\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to interchange the first and last element in a given list.", "input_data": "swap_List([1,2,3])", "expected_output": "[3,2,1]", "assertion": "assert swap_List([1,2,3]) == [3,2,1]"}
{"problem_name": "614", "generated_code": "<s> [INST]Your task is to write a Python function ```def cummulative_sum(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef cummulative_sum(test_list):\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "input_data": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])", "expected_output": "30", "assertion": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"problem_name": "464", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_value(dict,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if all values are same in a dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_value(dict, n):\n    if len(dict) != n:\n        return False\n    for value in dict.values():\n        if value != dict.values()[0]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if all values are same in a dictionary.", "input_data": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)", "expected_output": "False", "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"}
{"problem_name": "105", "generated_code": "<s> [INST]Your task is to write a Python function ```def count(lst)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count true booleans in the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count true booleans in the given list.", "input_data": "count([True,False,True])", "expected_output": "2", "assertion": "assert count([True,False,True]) == 2"}
{"problem_name": "93", "generated_code": "<s> [INST]Your task is to write a Python function ```def power(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the value of 'a' to the power 'b'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef power(a,b):\n    return a**b\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the value of 'a' to the power 'b'.", "input_data": "power(3,4)", "expected_output": "81", "assertion": "assert power(3,4) == 81"}
{"problem_name": "273", "generated_code": "<s> [INST]Your task is to write a Python function ```def substract_elements(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef substract_elements(test_tup1,test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "input_data": "substract_elements((10, 4, 5), (2, 5, 18))", "expected_output": "(8, -1, -13)", "assertion": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"problem_name": "101", "generated_code": "<s> [INST]Your task is to write a Python function ```def kth_element(arr,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the kth element in the given array using 1-based indexing.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef kth_element(arr, k):\n    n = len(arr)\n    return arr[k-1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the kth element in the given array using 1-based indexing.", "input_data": "kth_element([12,3,5,7,19], 2)", "expected_output": "3", "assertion": "assert kth_element([12,3,5,7,19], 2) == 3"}
{"problem_name": "791", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_nested(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove tuples from the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    new_tup = tuple(filter(lambda x: isinstance(x, tuple), test_tup))\n    return new_tup\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove tuples from the given tuple.", "input_data": "remove_nested((1, 5, 7, (4, 6), 10))", "expected_output": "(1, 5, 7, 10)", "assertion": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"problem_name": "11", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_Occ(s,ch)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to remove first and last occurrence of a given character from the string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_Occ(s,ch):\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to remove first and last occurrence of a given character from the string.", "input_data": "remove_Occ(\"hello\",\"l\")", "expected_output": "\"heo\"", "assertion": "assert remove_Occ(\"hello\",\"l\") == \"heo\""}
{"problem_name": "441", "generated_code": "<s> [INST]Your task is to write a Python function ```def surfacearea_cube(l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the surface area of a cube of a given size.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef surfacearea_cube(l):\n    return 6*l**2\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a cube of a given size.", "input_data": "surfacearea_cube(5)", "expected_output": "150", "assertion": "assert surfacearea_cube(5)==150"}
{"problem_name": "753", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_k(test_list,K)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_k(test_list, K):\n    # sort the list in ascending order\n    test_list.sort()\n    # return the first K elements of the sorted list\n    return test_list[:K]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "input_data": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)", "expected_output": "[('Akash', 2), ('Akshat', 4)]", "assertion": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"problem_name": "135", "generated_code": "<s> [INST]Your task is to write a Python function ```def hexagonal_num(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth hexagonal number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef hexagonal_num(n):\n    return sum(range(1, n+1)) * (n // 2)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth hexagonal number.", "input_data": "hexagonal_num(10)", "expected_output": "190", "assertion": "assert hexagonal_num(10) == 190"}
{"problem_name": "781", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_divisors(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "input_data": "count_divisors(10)", "expected_output": "True", "assertion": "assert count_divisors(10)"}
{"problem_name": "630", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_coordinates(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_coordinates(test_tup):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = test_tup\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    adjacent_coords = []\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < len(test_tup) and 0 <= ny < len(test_tup[0]):\n            adjacent_coords.append(test_tup[nx][ny])\n    return adjacent_coords\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "input_data": "get_coordinates((3, 4))", "expected_output": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assertion": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"problem_name": "163", "generated_code": "<s> [INST]Your task is to write a Python function ```def area_polygon(s,l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef area_polygon(s,l):\n    \"\"\"\n    Calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = 0.5 * s * l\n    return area\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "616", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_modulo(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_modulo(test_tup1,test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "input_data": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))", "expected_output": "(0, 4, 5, 1)", "assertion": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"problem_name": "405", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_tuplex(tuplex,tuple1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether an element exists within a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_tuplex(tuplex,tuple1):\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether an element exists within a tuple.", "input_data": "check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')", "expected_output": "True", "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"problem_name": "400", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_freq(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract the number of unique tuples in the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_freq(test_list):\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Convert the set back to a list to return the count\n    return list(unique_tuples)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract the number of unique tuples in the given list.", "input_data": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )", "expected_output": "3", "assertion": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"}
{"problem_name": "306", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_sum_increasing_subseq(a,n,index,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = a[index]\n    curr_sum = a[index]\n    max_sum_index = index\n    curr_sum_index = index\n    \n    # Iterate through the array\n    for i in range(index+1, n):\n        # If the current element is greater than the current sum, update the current sum\n        if a[i] > curr_sum:\n            curr_sum = a[i]\n            curr_sum_index = i\n            \n        # If the current element is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_index = curr_sum_index\n            \n    # If the kth element is not in the increasing subsequence, return the maximum sum\n    if max_sum_index == index and k > index:\n        return max_sum\n    \n    # If the kth element is in the increasing subsequence, return the sum of the increasing subsequence up to the kth element\n    else:\n        return max_sum + a[k]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "input_data": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)", "expected_output": "11", "assertion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"problem_name": "576", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_Sub_Array(A,B)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether a list is sublist of another or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_Sub_Array(A,B):\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i:] == B:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether a list is sublist of another or not.", "input_data": "is_Sub_Array([1,4,3,5],[1,2])", "expected_output": "False", "assertion": "assert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"problem_name": "99", "generated_code": "<s> [INST]Your task is to write a Python function ```def decimal_to_binary(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef decimal_to_binary(n):\n    return bin(n)[2:]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "input_data": "decimal_to_binary(8)", "expected_output": "'1000'", "assertion": "assert decimal_to_binary(8) == '1000'"}
{"problem_name": "17", "generated_code": "<s> [INST]Your task is to write a Python function ```def square_perimeter(a)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that returns the perimeter of a square given its side length as input.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef square_perimeter(a):\n    return 4*a\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns the perimeter of a square given its side length as input.", "input_data": "square_perimeter(10)", "expected_output": "40", "assertion": "assert square_perimeter(10)==40"}
{"problem_name": "69", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_sublist(l,s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether a list contains the given sublist or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a list contains the given sublist or not.", "input_data": "is_sublist([2,4,3,5,7],[3,7])", "expected_output": "False", "assertion": "assert is_sublist([2,4,3,5,7],[3,7])==False"}
{"problem_name": "767", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_pairs_count(arr,sum)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "input_data": "get_pairs_count([1,1,1,1],2)", "expected_output": "6", "assertion": "assert get_pairs_count([1,1,1,1],2) == 6"}
{"problem_name": "475", "generated_code": "<s> [INST]Your task is to write a Python function ```def sort_counter(dict1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a dictionary by value.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a dictionary by value.", "input_data": "sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})", "expected_output": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assertion": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"problem_name": "88", "generated_code": "<s> [INST]Your task is to write a Python function ```def freq_count(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "input_data": "freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])", "expected_output": "({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assertion": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"problem_name": "399", "generated_code": "<s> [INST]Your task is to write a Python function ```def bitwise_xor(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef bitwise_xor(test_tup1,test_tup2):\n    # Convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Perform bitwise xor operation\n    result = [a ^ b for a, b in zip(list1, list2)]\n    \n    # Convert result back to tuple\n    return tuple(result)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "input_data": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(15, 6, 5, 10)", "assertion": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"}
{"problem_name": "161", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_elements(list1,list2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove all elements from a given list present in another list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_elements(list1,list2):\n    # Using list comprehension to remove elements from list1 that are present in list2\n    return [x for x in list1 if x not in list2]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all elements from a given list present in another list.", "input_data": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 10]", "assertion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"problem_name": "296", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_Inv_Count(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count inversions in an array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count inversions in an array.", "input_data": "get_Inv_Count([1,20,6,4,5])", "expected_output": "5", "assertion": "assert get_Inv_Count([1,20,6,4,5]) == 5"}
{"problem_name": "744", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_none(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given tuple has any none value or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given tuple has any none value or not.", "input_data": "check_none((10, 4, 5, 6, None))", "expected_output": "True", "assertion": "assert check_none((10, 4, 5, 6, None)) == True"}
{"problem_name": "300", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_binary_seq(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bit_sum = 0\n        for j in range(n):\n            bit_sum += (i & (1 << j))\n        if bit_sum == (i & (1 << (n-1))):\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "584", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_adverbs(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_adverbs(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i].endswith('ly'):\n            adverbs.append(i)\n    return adverbs\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the first adverb ending with ly and its positions in a given string.", "input_data": "find_adverbs(\"Clearly, he has no excuse for such behavior.\")", "expected_output": "'0-7: Clearly'", "assertion": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'"}
{"problem_name": "438", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_bidirectional(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to count bidirectional tuple pairs.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i] != test_list[j-1] and test_list[i] != test_list[j+1]:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to count bidirectional tuple pairs.", "input_data": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )", "expected_output": "3", "assertion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3"}
{"problem_name": "16", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_lowercase_underscore(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef text_lowercase_underscore(text):\n    return any(any(char.islower() and char != ' ') for char in text)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "input_data": "text_lowercase_underscore(\"aab_cbbbc\")", "expected_output": "(True)", "assertion": "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)"}
{"problem_name": "167", "generated_code": "<s> [INST]Your task is to write a Python function ```def next_power_of_2(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        n += 1\n        if n % 2 == 0:\n            return n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the smallest power of 2 greater than or equal to n.", "input_data": "next_power_of_2(0)", "expected_output": "1", "assertion": "assert next_power_of_2(0) == 1"}
{"problem_name": "249", "generated_code": "<s> [INST]Your task is to write a Python function ```def intersection_array(array_nums1,array_nums2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the intersection of two arrays.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef intersection_array(array_nums1,array_nums2):\n    # Convert both arrays to sets\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find intersection of two sets\n    intersection = set1 & set2\n    \n    # Convert intersection back to list and return\n    return list(intersection)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the intersection of two arrays.", "input_data": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])", "expected_output": "[1, 2, 8, 9]", "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]"}
{"problem_name": "312", "generated_code": "<s> [INST]Your task is to write a Python function ```def volume_cone(r,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the volume of a cone.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef volume_cone(r,h):\n    return (1/3) * math.pi * r**2 * h\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a cone.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "770", "generated_code": "<s> [INST]Your task is to write a Python function ```def odd_num_sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i**4\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "input_data": "odd_num_sum(2)", "expected_output": "82", "assertion": "assert odd_num_sum(2) == 82"}
{"problem_name": "117", "generated_code": "<s> [INST]Your task is to write a Python function ```def list_to_float(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef list_to_float(test_list):\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                element = float(element)\n            else:\n                element = list_to_float(element)\n        test_list[test_list.index(sublist)] = element\n    return test_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert all possible convertible elements in a list of lists to floats.", "input_data": "list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )", "expected_output": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assertion": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"problem_name": "103", "generated_code": "<s> [INST]Your task is to write a Python function ```def eulerian_num(n,m)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the Eulerian number a(n, m).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef eulerian_num(n, m):\n    if n < 0 or m < 0:\n        return None\n    elif n == 0 or m == 0:\n        return 1\n    elif n == m:\n        return 0\n    else:\n        return (eulerian_num(n-1, m) + eulerian_num(n, m-1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the Eulerian number a(n, m).", "input_data": "eulerian_num(3, 1)", "expected_output": "4", "assertion": "assert eulerian_num(3, 1) == 4"}
{"problem_name": "428", "generated_code": "<s> [INST]Your task is to write a Python function ```def shell_sort(my_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort the given array by using shell sort.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef shell_sort(my_list):\n    n = len(my_list)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort the given array by using shell sort.", "input_data": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])", "expected_output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assertion": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"problem_name": "401", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_nested_tuples(test_tup1,test_tup2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_nested_tuples(test_tup1,test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(inner_result)\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "input_data": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((7, 10), (7, 14), (3, 10), (8, 13))", "assertion": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))"}
{"problem_name": "734", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_Of_Subarray_Prod(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_Of_subarray_prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            result += product\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "input_data": "sum_Of_Subarray_Prod([1,2,3])", "expected_output": "20", "assertion": "assert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"problem_name": "255", "generated_code": "<s> [INST]Your task is to write a Python function ```def combinations_colors(l,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef combinations_colors(l, n):\n    result = []\n    for i in range(n):\n        result.append(tuple(l))\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "input_data": "combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)", "expected_output": "[('Red',), ('Green',), ('Blue',)]", "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"problem_name": "61", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_Substrings(s)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "input_data": "count_Substrings('112112')", "expected_output": "6", "assertion": "assert count_Substrings('112112') == 6"}
{"problem_name": "606", "generated_code": "<s> [INST]Your task is to write a Python function ```def radian_degree(degree)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert degrees to radians.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef radian_degree(degree):\n    return degree * math.pi / 180\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert degrees to radians.", "input_data": "radian_degree(90)", "expected_output": "1.5707963267948966", "assertion": "assert radian_degree(90)==1.5707963267948966"}
{"problem_name": "611", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_of_nth(test_list,N)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_of_nth(test_list,N):\n    max_val = test_list[0][N]\n    for row in test_list[1:]:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "input_data": "max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)", "expected_output": "19", "assertion": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"problem_name": "304", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Element(arr,ranges,rotations,index)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find element at a given index after number of rotations.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Element(arr,ranges,rotations,index):\n    # Find the current position of the element\n    current_pos = index\n    for i in range(len(ranges)):\n        if ranges[i][0] <= current_pos <= ranges[i][1]:\n            current_pos = i\n        else:\n            current_pos = (current_pos + rotations) % len(ranges)\n    # Return the element at the current position\n    return arr[current_pos]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find element at a given index after number of rotations.", "input_data": "find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)", "expected_output": "3", "assertion": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3"}
{"problem_name": "440", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_adverb_position(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the first adverb and their positions in a given sentence.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_adverb_position(text):\n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n    \n    # Iterate over the words in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.endswith('ly') or word.endswith('ing'):\n            # Append the position of the adverb to the list\n            adverb_positions.append(i)\n    \n    # Return the list of adverb positions\n    return adverb_positions\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the first adverb and their positions in a given sentence.", "input_data": "find_adverb_position(\"clearly!! we can see the sky\")", "expected_output": "(0, 7, 'clearly')", "assertion": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')"}
{"problem_name": "247", "generated_code": "<s> [INST]Your task is to write a Python function ```def lps(str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef lps(str):\n    n = len(str)\n    max_len = 0\n    start = 0\n    for i in range(n):\n        low = i\n        high = i\n        while low >= 0 and high < n and str[low] == str[high]:\n            if high - low + 1 > max_len:\n                start = low\n                max_len = high - low + 1\n            low -= 1\n            high += 1\n    return max_len\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the length of the longest palindromic subsequence in the given string.", "input_data": "lps(\"TENS FOR TENS\")", "expected_output": "5", "assertion": "assert lps(\"TENS FOR TENS\") == 5"}
{"problem_name": "736", "generated_code": "<s> [INST]Your task is to write a Python function ```def left_insertion(a,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef left_insertion(a, x):\n    for i in range(len(a)):\n        if x < a[i]:\n            a.insert(i, x)\n            return i\n    a.append(x)\n    return len(a)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "input_data": "left_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert left_insertion([1,2,4,5],6)==4"}
{"problem_name": "256", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_Primes_nums(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "input_data": "count_Primes_nums(5)", "expected_output": "2", "assertion": "assert count_Primes_nums(5) == 2"}
{"problem_name": "807", "generated_code": "<s> [INST]Your task is to write a Python function ```def first_odd(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the first odd number in a given list of numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the first odd number in a given list of numbers.", "input_data": "first_odd([1,3,5])", "expected_output": "1", "assertion": "assert first_odd([1,3,5]) == 1"}
{"problem_name": "292", "generated_code": "<s> [INST]Your task is to write a Python function ```def find(n,m)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find(n,m):\n    quotient = round(n/m)\n    return quotient\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "input_data": "find(10,3)", "expected_output": "3", "assertion": "assert find(10,3) == 3"}
{"problem_name": "160", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_solution(a,b,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_solution(a, b, n):\n    x, y = 0, 0\n    while x * a + y * b != n:\n        x += 1\n        y -= 1\n    if x * a + y * b == n:\n        return x, y\n    else:\n        return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "input_data": "find_solution(2, 3, 7)", "expected_output": "(2, 1)", "assertion": "assert find_solution(2, 3, 7) == (2, 1)"}
{"problem_name": "468", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_product(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 1\n    max_product = arr[0]\n    for i in range(1, n):\n        max_product = max(arr[i], max_product * arr[i])\n    return max_product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "input_data": "max_product([3, 100, 4, 5, 150, 6])", "expected_output": "3000", "assertion": "assert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"problem_name": "66", "generated_code": "<s> [INST]Your task is to write a Python function ```def pos_count(list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of positive numbers in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of positive numbers in a list.", "input_data": "pos_count([1,-2,3,-4])", "expected_output": "2", "assertion": "assert pos_count([1,-2,3,-4]) == 2"}
{"problem_name": "113", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_integer(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if a string represents an integer or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if a string represents an integer or not.", "input_data": "check_integer(\"python\")", "expected_output": "False", "assertion": "assert check_integer(\"python\")==False"}
{"problem_name": "404", "generated_code": "<s> [INST]Your task is to write a Python function ```def minimum(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the minimum of two numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum of two numbers.", "input_data": "minimum(1,2)", "expected_output": "1", "assertion": "assert minimum(1,2) == 1"}
{"problem_name": "116", "generated_code": "<s> [INST]Your task is to write a Python function ```def tuple_to_int(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a given tuple of positive integers into a single integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef tuple_to_int(nums):\n    return sum(nums)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a given tuple of positive integers into a single integer.", "input_data": "tuple_to_int((1,2,3))", "expected_output": "123", "assertion": "assert tuple_to_int((1,2,3))==123"}
{"problem_name": "94", "generated_code": "<s> [INST]Your task is to write a Python function ```def index_minimum(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef index_minimum(test_list):\n    return test_list.index(min(test_list, key=lambda x: x[1]))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "input_data": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])", "expected_output": "'Varsha'", "assertion": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"problem_name": "234", "generated_code": "<s> [INST]Your task is to write a Python function ```def volume_cube(l)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the volume of a cube given its side length.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef volume_cube(l):\n    return l**3\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the volume of a cube given its side length.", "input_data": "volume_cube(3)", "expected_output": "27", "assertion": "assert volume_cube(3)==27"}
{"problem_name": "170", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_range_list(list1,m,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_range_list(list1,m,n):\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "input_data": "sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)", "expected_output": "29", "assertion": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"problem_name": "800", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_all_spaces(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove all whitespaces from a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_all_spaces(text):\n    return \"\".join(text)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove all whitespaces from a string.", "input_data": "remove_all_spaces('python  program')", "expected_output": "('pythonprogram')", "assertion": "assert remove_all_spaces('python  program')==('pythonprogram')"}
{"problem_name": "790", "generated_code": "<s> [INST]Your task is to write a Python function ```def even_position(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether every even index contains even numbers of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether every even index contains even numbers of a given list.", "input_data": "even_position([3,2,1])", "expected_output": "False", "assertion": "assert even_position([3,2,1]) == False"}
{"problem_name": "390", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_string(list_,string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to apply a given format string to all of the elements in a list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_string(list_, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for item in list_:\n        result.append(format(item, string))\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to apply a given format string to all of the elements in a list.", "input_data": "add_string([1,2,3,4],'temp{0}')", "expected_output": "['temp1', 'temp2', 'temp3', 'temp4']", "assertion": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"problem_name": "433", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_greater(arr,number)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the entered number is greater than the elements of the given array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_greater(arr,number):\n    for i in range(len(arr)):\n        if arr[i] >= number:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the entered number is greater than the elements of the given array.", "input_data": "check_greater([1, 2, 3, 4, 5], 4)", "expected_output": "False", "assertion": "assert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"problem_name": "171", "generated_code": "<s> [INST]Your task is to write a Python function ```def perimeter_pentagon(a)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef perimeter_pentagon(a):\n    return 5*a\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "input_data": "perimeter_pentagon(5)", "expected_output": "25", "assertion": "assert perimeter_pentagon(5) == 25"}
{"problem_name": "599", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_average(number)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find sum and average of first n natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_average(number):\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find sum and average of first n natural numbers.", "input_data": "sum_average(10)", "expected_output": "(55, 5.5)", "assertion": "assert sum_average(10)==(55, 5.5)"}
{"problem_name": "310", "generated_code": "<s> [INST]Your task is to write a Python function ```def string_to_tuple(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a given string to a tuple of characters.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef string_to_tuple(str1):\n    return tuple(str1)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a given string to a tuple of characters.", "input_data": "string_to_tuple(\"python 3.0\")", "expected_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assertion": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"problem_name": "414", "generated_code": "<s> [INST]Your task is to write a Python function ```def overlapping(list1,list2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef overlapping(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "input_data": "overlapping([1,2,3,4,5],[6,7,8,9])", "expected_output": "False", "assertion": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"problem_name": "773", "generated_code": "<s> [INST]Your task is to write a Python function ```def occurance_substring(text,pattern)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef occurance_substring(text, pattern):\n    if pattern in text:\n        return text.index(pattern)\n    else:\n        return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "input_data": "occurance_substring('python programming, python language','python')", "expected_output": "('python', 0, 6)", "assertion": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"problem_name": "556", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Odd_Pair(A,N)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of pairs whose xor value is odd.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of pairs whose xor value is odd.", "input_data": "find_Odd_Pair([5,4,7,2,1],5)", "expected_output": "6", "assertion": "assert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"problem_name": "769", "generated_code": "<s> [INST]Your task is to write a Python function ```def Diff(li1,li2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to get the difference between two lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Diff(li1,li2):\n    return [x for x in li1 if x not in li2]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to get the difference between two lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "808", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_K(test_tup,K)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if the given tuples contain the k or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_K(test_tup,K):\n    for i in test_tup:\n        if i == K:\n            return True\n    return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if the given tuples contain the k or not.", "input_data": "check_K((10, 4, 5, 6, 8), 6)", "expected_output": "True", "assertion": "assert check_K((10, 4, 5, 6, 8), 6) == True"}
{"problem_name": "291", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_no_of_ways(n,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_no_of_ways(n,k):\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0 for i in range(k)] for j in range(n)]\n\n    # Initialize the first row of the 2D array\n    for i in range(k):\n        dp[0][i] = 1\n\n    # Initialize the first column of the 2D array\n    for i in range(n):\n        dp[i][0] = 1\n\n    # Fill the rest of the 2D array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # Return the number of ways to paint the fence\n    return dp[n-1][k-1]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "input_data": "count_no_of_ways(2, 4)", "expected_output": "16", "assertion": "assert count_no_of_ways(2, 4) == 16"}
{"problem_name": "422", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Average_Of_Cube(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the average of cubes of first n natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the average of cubes of first n natural numbers.", "input_data": "find_Average_Of_Cube(2)", "expected_output": "4.5", "assertion": "assert find_Average_Of_Cube(2) == 4.5"}
{"problem_name": "756", "generated_code": "<s> [INST]Your task is to write a Python function ```def text_match_zero_one(text)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "input_data": "text_match_zero_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_zero_one(\"ac\")==False"}
{"problem_name": "228", "generated_code": "<s> [INST]Your task is to write a Python function ```def all_Bits_Set_In_The_Given_Range(n,l,r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to check whether all the bits are unset in the given range or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if (n & (1<<i)) != 0:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to check whether all the bits are unset in the given range or not.", "input_data": "all_Bits_Set_In_The_Given_Range(4,1,2)", "expected_output": "True", "assertion": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True"}
{"problem_name": "730", "generated_code": "<s> [INST]Your task is to write a Python function ```def consecutive_duplicates(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove consecutive duplicates of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function removes consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            result.append(nums[i])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove consecutive duplicates of a given list.", "input_data": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assertion": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"problem_name": "286", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_sub_array_sum_repeated(a,n,k)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    \n    # Loop through the modified array\n    for i in range(n):\n        # If current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n        # Add the current element to the current sum\n        else:\n            current_sum += a[i]\n        \n        # If current sum is greater than max sum, update max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum\n    return max_sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "input_data": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)", "expected_output": "30", "assertion": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"problem_name": "63", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_difference(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the maximum difference between available pairs in the given tuple list.", "input_data": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])", "expected_output": "7", "assertion": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"problem_name": "748", "generated_code": "<s> [INST]Your task is to write a Python function ```def capital_words_spaces(str1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to put spaces between words starting with capital letters in a given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef capital_words_spaces(str1):\n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Iterate over the list of words\n    for i in range(len(words)):\n        # If the current word starts with a capital letter, add a space before it\n        if words[i][0].isupper():\n            words[i] = \" \" + words[i]\n    \n    # Join the list of words back into a string with spaces between capital words\n    return \" \".join(words)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to put spaces between words starting with capital letters in a given string.", "input_data": "capital_words_spaces(\"Python\")", "expected_output": "'Python'", "assertion": "assert capital_words_spaces(\"Python\") == 'Python'"}
{"problem_name": "19", "generated_code": "<s> [INST]Your task is to write a Python function ```def test_duplicate(arraynums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find whether a given array of integers contains any duplicate element.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef test_duplicate(arraynums):\n    # Create a set from the array to remove duplicates\n    setnums = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(setnums) != len(arraynums):\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find whether a given array of integers contains any duplicate element.", "input_data": "test_duplicate(([1,2,3,4,5]))", "expected_output": "False", "assertion": "assert test_duplicate(([1,2,3,4,5]))==False"}
{"problem_name": "162", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_series(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_series(n):\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "input_data": "sum_series(6)", "expected_output": "12", "assertion": "assert sum_series(6) == 12"}
{"problem_name": "619", "generated_code": "<s> [INST]Your task is to write a Python function ```def move_num(test_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to move all the numbers to the end of the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef move_num(test_str):\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    \n    # Find the index of the first number in the list\n    num_index = char_list.index('0')\n    \n    # Move all the numbers to the end of the list\n    for i in range(num_index, len(char_list)):\n        char_list[i], char_list[num_index] = char_list[num_index], char_list[i]\n    \n    # Join the list back into a string and return it\n    return ''.join(char_list)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to move all the numbers to the end of the given string.", "input_data": "move_num('I1love143you55three3000thousand')", "expected_output": "'Iloveyouthreethousand1143553000'", "assertion": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"problem_name": "607", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_literals(text,pattern)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "input_data": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')", "expected_output": "('fox', 16, 19)", "assertion": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"problem_name": "411", "generated_code": "<s> [INST]Your task is to write a Python function ```def snake_to_camel(word)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert the given snake case string to camel case string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef snake_to_camel(word):\n    return word.replace('_', '').replace('-', '').capitalize()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert the given snake case string to camel case string.", "input_data": "snake_to_camel('android_tv')", "expected_output": "'AndroidTv'", "assertion": "assert snake_to_camel('android_tv') == 'AndroidTv'"}
{"problem_name": "268", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_star_num(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the n'th star number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_star_num(n):\n    return n*(n-1)/2 + 1\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n'th star number.", "input_data": "find_star_num(3)", "expected_output": "37", "assertion": "assert find_star_num(3) == 37"}
{"problem_name": "731", "generated_code": "<s> [INST]Your task is to write a Python function ```def lateralsurface_cone(r,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef lateralsurface_cone(r,h):\n    return 2*pi*r*(r+h)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "input_data": "lateralsurface_cone(5,12)", "expected_output": "204.20352248333654", "assertion": "assert lateralsurface_cone(5,12)==204.20352248333654"}
{"problem_name": "567", "generated_code": "<s> [INST]Your task is to write a Python function ```def issort_list(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether a specified list is sorted or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef issort_list(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether a specified list is sorted or not.", "input_data": "issort_list([1,2,4,6,8,10,12,14,16,17])", "expected_output": "True", "assertion": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"problem_name": "720", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_dict_to_tuple(test_tup,test_dict)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_dict_to_tuple(test_tup,test_dict):\n    return tuple(test_tup + tuple(test_dict.items()))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "input_data": "add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )", "expected_output": "(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assertion": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"problem_name": "728", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_list(lst1,lst2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_list(lst1,lst2):\n    return [a+b for a,b in zip(lst1,lst2)]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "input_data": "sum_list([10,20,30],[15,25,35])", "expected_output": "[25,45,65]", "assertion": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"problem_name": "574", "generated_code": "<s> [INST]Your task is to write a Python function ```def surfacearea_cylinder(r,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the surface area of a cylinder.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef surfacearea_cylinder(r,h):\n    return 2*pi*r*(r+h)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the surface area of a cylinder.", "input_data": "surfacearea_cylinder(10,5)", "expected_output": "942.45", "assertion": "assert surfacearea_cylinder(10,5)==942.45"}
{"problem_name": "559", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_sub_array_sum(a,size)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_sub_array_sum(a, size):\n    max_sum = a[0]\n    for i in range(1, size):\n        max_sum = max(a[i], max_sum + a[i])\n    return max_sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the sum of the largest contiguous sublist in the given list.", "input_data": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)", "expected_output": "7", "assertion": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"problem_name": "290", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_length(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the list of maximum length in a list of lists.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_length(list1):\n    max_list = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the list of maximum length in a list of lists.", "input_data": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"problem_name": "470", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_pairwise(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "input_data": "add_pairwise((1, 5, 7, 8, 10))", "expected_output": "(6, 12, 15, 18)", "assertion": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"problem_name": "452", "generated_code": "<s> [INST]Your task is to write a Python function ```def loss_amount(actual_cost,sale_amount)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "input_data": "loss_amount(1500,1200)", "expected_output": "0", "assertion": "assert loss_amount(1500,1200)==0"}
{"problem_name": "295", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_div(number)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to return the sum of all divisors of a number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_div(number):\n    sum = 1\n    for i in range(2, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to return the sum of all divisors of a number.", "input_data": "sum_div(8)", "expected_output": "7", "assertion": "assert sum_div(8)==7"}
{"problem_name": "397", "generated_code": "<s> [INST]Your task is to write a Python function ```def median_numbers(a,b,c)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the median of three numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        median = (sorted_numbers[length//2] + sorted_numbers[(length//2)-1]) / 2\n    else:\n        median = sorted_numbers[length//2]\n    return median\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the median of three numbers.", "input_data": "median_numbers(25,55,65)", "expected_output": "55.0", "assertion": "assert median_numbers(25,55,65)==55.0"}
{"problem_name": "477", "generated_code": "<s> [INST]Your task is to write a Python function ```def is_lower(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to convert the given string to lower case.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef is_lower(string):\n    return string.lower()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert the given string to lower case.", "input_data": "is_lower(\"InValid\")", "expected_output": "\"invalid\"", "assertion": "assert is_lower(\"InValid\") == \"invalid\""}
{"problem_name": "57", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_Max_Num(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the largest number that can be formed with the given list of digits.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            num = int(''.join(sorted(arr[i:j])))\n            if num > max_num:\n                max_num = num\n    return max_num\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the largest number that can be formed with the given list of digits.", "input_data": "find_Max_Num([1,2,3])", "expected_output": "321", "assertion": "assert find_Max_Num([1,2,3]) == 321"}
{"problem_name": "130", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_occurrences(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the item with maximum frequency in a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = [num for num, freq in freq.items() if freq == max_freq]\n    \n    # Return the item with maximum frequency\n    return max_item[0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the item with maximum frequency in a given list.", "input_data": "max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])", "expected_output": "2", "assertion": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"problem_name": "394", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_distinct(test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check if given tuple contains no duplicates.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_distinct(test_tup):\n    # Create an empty set from the tuple\n    set_tup = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check if given tuple contains no duplicates.", "input_data": "check_distinct((1, 4, 5, 6, 1, 4))", "expected_output": "False", "assertion": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"problem_name": "287", "generated_code": "<s> [INST]Your task is to write a Python function ```def square_Sum(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "input_data": "square_Sum(2)", "expected_output": "20", "assertion": "assert square_Sum(2) == 20"}
{"problem_name": "409", "generated_code": "<s> [INST]Your task is to write a Python function ```def min_product_tuple(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef min_product_tuple(list1):\n    min_product = float('inf')\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1[0] * tuple2[1] < min_product:\n                min_product = tuple1[0] * tuple2[1]\n    return min_product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the minimum product from the pairs of tuples within a given list.", "input_data": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "8", "assertion": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"problem_name": "632", "generated_code": "<s> [INST]Your task is to write a Python function ```def move_zero(num_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to move all zeroes to the end of the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef move_zero(num_list):\n    # Create a new list with all non-zero elements\n    new_list = [x for x in num_list if x != 0]\n    \n    # Add the zeroes to the end of the new list\n    new_list.append(0)\n    \n    # Return the new list\n    return new_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to move all zeroes to the end of the given list.", "input_data": "move_zero([1,0,2,0,3,4])", "expected_output": "[1,2,3,4,0,0]", "assertion": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"problem_name": "455", "generated_code": "<s> [INST]Your task is to write a Python function ```def check_monthnumb_number(monthnum2)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given month number contains 31 days or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if monthnum2 % 4 == 0 and monthnum2 % 100 != 0:\n            return True\n        elif monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given month number contains 31 days or not.", "input_data": "check_monthnumb_number(5)", "expected_output": "True", "assertion": "assert check_monthnumb_number(5)==True"}
{"problem_name": "635", "generated_code": "<s> [INST]Your task is to write a Python function ```def heap_sort(iterable)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef heap_sort(iterable):\n    n = len(iterable)\n    for i in range(n//2, 0, -1):\n        heapify(iterable, i, n)\n    for i in range(n):\n        heapify(iterable, 0, i)\n        swap(iterable[0], iterable[i])\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort the given list.", "input_data": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assertion": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"problem_name": "389", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_lucas(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the n'th lucas number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_lucas(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the n'th lucas number.", "input_data": "find_lucas(9)", "expected_output": "76", "assertion": "assert find_lucas(9) == 76"}
{"problem_name": "299", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_aggregate(stdata)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the maximum aggregate from the list of tuples.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_aggregate(stdata):\n    max_agg = 0\n    for i in range(len(stdata)):\n        max_agg += stdata[i][1]\n    return max_agg\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the maximum aggregate from the list of tuples.", "input_data": "max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])", "expected_output": "('Juan Whelan', 212)", "assertion": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"problem_name": "802", "generated_code": "<s> [INST]Your task is to write a Python function ```def count_rotation(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef count_rotation(arr):\n    n = len(arr)\n    start = 0\n    end = n-1\n    count = 0\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[start]:\n            count += 1\n            start = mid + 1\n        else:\n            end = mid - 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "input_data": "count_rotation([3,2,1])", "expected_output": "1", "assertion": "assert count_rotation([3,2,1]) == 1"}
{"problem_name": "251", "generated_code": "<s> [INST]Your task is to write a Python function ```def insert_element(list,element)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef insert_element(lst, element):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "input_data": "insert_element(['Red', 'Green', 'Black'] ,'c')", "expected_output": "['c', 'Red', 'c', 'Green', 'c', 'Black']", "assertion": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"problem_name": "71", "generated_code": "<s> [INST]Your task is to write a Python function ```def comb_sort(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to sort a list of elements.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef comb_sort(nums):\n    n = len(nums)\n    if n <= 1:\n        return nums\n    else:\n        mid = n // 2\n        left = nums[:mid]\n        right = nums[mid:]\n        left = comb_sort(left)\n        right = comb_sort(right)\n        return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to sort a list of elements.", "input_data": "comb_sort([5, 15, 37, 25, 79])", "expected_output": "[5, 15, 25, 37, 79]", "assertion": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"problem_name": "458", "generated_code": "<s> [INST]Your task is to write a Python function ```def rectangle_area(l,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the area of a rectangle.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef rectangle_area(l, b):\n    return l * b\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the area of a rectangle.", "input_data": "rectangle_area(10,20)", "expected_output": "200", "assertion": "assert rectangle_area(10,20)==200"}
{"problem_name": "583", "generated_code": "<s> [INST]Your task is to write a Python function ```def catalan_number(num)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function which returns nth catalan number.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef catalan_number(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 0\n    else:\n        return (num-1) * (catalan_number(num-2) + catalan_number(num-1))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function which returns nth catalan number.", "input_data": "catalan_number(10)", "expected_output": "16796", "assertion": "assert catalan_number(10)==16796"}
{"problem_name": "555", "generated_code": "<s> [INST]Your task is to write a Python function ```def difference(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "input_data": "difference(3)", "expected_output": "30", "assertion": "assert difference(3) == 30"}
{"problem_name": "119", "generated_code": "<s> [INST]Your task is to write a Python function ```def search(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the element that appears only once in a sorted array.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef search(arr):\n    n = len(arr)\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count == 1:\n            return arr[i]\n    return None\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the element that appears only once in a sorted array.", "input_data": "search([1,1,2,2,3])", "expected_output": "3", "assertion": "assert search([1,1,2,2,3]) == 3"}
{"problem_name": "786", "generated_code": "<s> [INST]Your task is to write a Python function ```def right_insertion(a,x)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to locate the right insertion point for a specified value in sorted order.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef right_insertion(a, x):\n    n = len(a)\n    for i in range(n):\n        if a[i] < x:\n            break\n    return i\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to locate the right insertion point for a specified value in sorted order.", "input_data": "right_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert right_insertion([1,2,4,5],6)==4"}
{"problem_name": "568", "generated_code": "<s> [INST]Your task is to write a Python function ```def empty_list(length)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to create a list of N empty dictionaries.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef empty_list(length):\n    return [{} for i in range(length)]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to create a list of N empty dictionaries.", "input_data": "empty_list(5)", "expected_output": "[{},{},{},{},{}]", "assertion": "assert empty_list(5)==[{},{},{},{},{}]"}
{"problem_name": "252", "generated_code": "<s> [INST]Your task is to write a Python function ```def convert(numbers)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to convert complex numbers to polar coordinates.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\nimport math\n\ndef convert(numbers):\n    real = numbers[0]\n    imag = numbers[1]\n    magnitude = math.sqrt(real**2 + imag**2)\n    phase = math.atan2(imag, real)\n    return magnitude, phase\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to convert complex numbers to polar coordinates.", "input_data": "convert(1)", "expected_output": "(1.0, 0.0)", "assertion": "assert convert(1) == (1.0, 0.0)"}
{"problem_name": "84", "generated_code": "<s> [INST]Your task is to write a Python function ```def sequence(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the nth number in the newman conway sequence.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sequence(n):\n    a = 0\n    b = 1\n    c = 0\n    d = 1\n    e = 0\n    f = 1\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return a\n    else:\n        for i in range(2, n+1):\n            temp = a + b\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = temp\n        return f\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the nth number in the newman conway sequence.", "input_data": "sequence(10)", "expected_output": "6", "assertion": "assert sequence(10) == 6"}
{"problem_name": "305", "generated_code": "<s> [INST]Your task is to write a Python function ```def start_withp(words)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to return two words from a list of words starting with letter 'p'.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef start_withp(words):\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return []\n    else:\n        return p_words[:2]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to return two words from a list of words starting with letter 'p'.", "input_data": "start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])", "expected_output": "('Python', 'PHP')", "assertion": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"}
{"problem_name": "806", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_run_uppercase(test_str)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find maximum run of uppercase characters in the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_run_uppercase(test_str):\n    max_run = 1\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i+1] and test_str[i].isupper():\n            max_run += 1\n        else:\n            max_run = 1\n    return max_run\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find maximum run of uppercase characters in the given string.", "input_data": "max_run_uppercase('GeMKSForGERksISBESt')", "expected_output": "5", "assertion": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"problem_name": "245", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_sum(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        mid = n // 2\n        left = max_sum(arr[:mid])\n        right = max_sum(arr[mid:])\n        return max(left, right) + max(arr[:mid], arr[mid:])\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "input_data": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])", "expected_output": "194", "assertion": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"problem_name": "137", "generated_code": "<s> [INST]Your task is to write a Python function ```def zero_count(nums)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef zero_count(nums):\n    num_zeros = nums.count(0)\n    num_non_zeros = len(nums) - num_zeros\n    ratio = num_zeros / num_non_zeros\n    return ratio\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "797", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_in_range(l,r)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "input_data": "sum_in_range(2,5)", "expected_output": "8", "assertion": "assert sum_in_range(2,5) == 8"}
{"problem_name": "118", "generated_code": "<s> [INST]Your task is to write a Python function ```def string_to_list(string)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to convert a string to a list of strings split on the space character.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef string_to_list(string):\n    return string.split()\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to convert a string to a list of strings split on the space character.", "input_data": "string_to_list(\"python programming\")", "expected_output": "['python','programming']", "assertion": "assert string_to_list(\"python programming\")==['python','programming']"}
{"problem_name": "598", "generated_code": "<s> [INST]Your task is to write a Python function ```def armstrong_number(number)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to check whether the given number is armstrong or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef armstrong_number(number):\n    # Check if the number is negative\n    if number < 0:\n        return False\n    # Convert the number to a string\n    number_str = str(number)\n    # Calculate the sum of the squares of each digit in the number\n    sum_of_squares = sum([int(digit) ** 2 for digit in number_str])\n    # Check if the sum of the squares is equal to the original number\n    return number == sum_of_squares\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to check whether the given number is armstrong or not.", "input_data": "armstrong_number(153)", "expected_output": "True", "assertion": "assert armstrong_number(153)==True"}
{"problem_name": "763", "generated_code": "<s> [INST]Your task is to write a Python function ```def find_min_diff(arr,n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[i] - arr[j]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "input_data": "find_min_diff((1,5,3,19,18,25),6)", "expected_output": "1", "assertion": "assert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"problem_name": "96", "generated_code": "<s> [INST]Your task is to write a Python function ```def divisor(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the number of divisors of a given integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef divisor(n):\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the number of divisors of a given integer.", "input_data": "divisor(15)", "expected_output": "4", "assertion": "assert divisor(15) == 4"}
{"problem_name": "638", "generated_code": "<s> [INST]Your task is to write a Python function ```def wind_chill(v,t)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef wind_chill(v,t):\n    return round(0.4275 * v * (t - 32))\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "input_data": "wind_chill(120,35)", "expected_output": "40", "assertion": "assert wind_chill(120,35)==40"}
{"problem_name": "276", "generated_code": "<s> [INST]Your task is to write a Python function ```def volume_cylinder(r,h)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef volume_cylinder(r,h):\n    return 3.14159 * r**2 * h\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "640", "generated_code": "<s> [INST]Your task is to write a Python function ```def remove_parenthesis(items)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef remove_parenthesis(items):\n    return items.replace('()', '')\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to remove the parenthesis and what is inbetween them from a string.", "input_data": "remove_parenthesis([\"python (chrome)\"])", "expected_output": "(\"python\")", "assertion": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")"}
{"problem_name": "784", "generated_code": "<s> [INST]Your task is to write a Python function ```def mul_even_odd(list1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find the product of first even and odd number of a given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef mul_even_odd(list1):\n    even_num = 0\n    odd_num = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n        product *= num\n    return product\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find the product of first even and odd number of a given list.", "input_data": "mul_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "4", "assertion": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"problem_name": "554", "generated_code": "<s> [INST]Your task is to write a Python function ```def Split(list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function which takes a list of integers and only returns the odd ones.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef Split(list):\n    return [num for num in list if num % 2 != 0]\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function which takes a list of integers and only returns the odd ones.", "input_data": "Split([1,2,3,4,5,6])", "expected_output": "[1,3,5]", "assertion": "assert Split([1,2,3,4,5,6]) == [1,3,5]"}
{"problem_name": "309", "generated_code": "<s> [INST]Your task is to write a Python function ```def maximum(a,b)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the maximum of two numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the maximum of two numbers.", "input_data": "maximum(5,10)", "expected_output": "10", "assertion": "assert maximum(5,10) == 10"}
{"problem_name": "805", "generated_code": "<s> [INST]Your task is to write a Python function ```def max_sum_list(lists)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            max_list = l\n    return max_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "input_data": "max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])", "expected_output": "[10, 11, 12]", "assertion": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"problem_name": "566", "generated_code": "<s> [INST]Your task is to write a Python function ```def sum_digits(n)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to get the sum of the digits of a non-negative integer.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to get the sum of the digits of a non-negative integer.", "input_data": "sum_digits(345)", "expected_output": "12", "assertion": "assert sum_digits(345)==12"}
{"problem_name": "140", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_singly(test_list)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to flatten the list of lists into a single set of numbers.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to flatten the list of lists into a single set of numbers.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "725", "generated_code": "<s> [INST]Your task is to write a Python function ```def extract_quotation(text1)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to extract values between quotation marks \" \" of the given string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    quotation_list = []\n    for word in text1.split():\n        if word.startswith('\"') and word.endswith('\"'):\n            quotation_list.append(word[1:-1])\n    return quotation_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to extract values between quotation marks \" \" of the given string.", "input_data": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')", "expected_output": "['A53', 'multi', 'Processor']", "assertion": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"problem_name": "782", "generated_code": "<s> [INST]Your task is to write a Python function ```def odd_length_sum(arr)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j - i % 2 == 1:\n                sum += arr[i:j]\n    return sum\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "input_data": "odd_length_sum([1,2,4])", "expected_output": "14", "assertion": "assert odd_length_sum([1,2,4]) == 14"}
{"problem_name": "750", "generated_code": "<s> [INST]Your task is to write a Python function ```def add_tuple(test_list,test_tup)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to add the given tuple to the given list.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef add_tuple(test_list,test_tup):\n    test_list.append(test_tup)\n    return test_list\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to add the given tuple to the given list.", "input_data": "add_tuple([5, 6, 7], (9, 10))", "expected_output": "[5, 6, 7, 9, 10]", "assertion": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"problem_name": "262", "generated_code": "<s> [INST]Your task is to write a Python function ```def split_two_parts(list1,L)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef split_two_parts(list1,L):\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "input_data": "split_two_parts([1,1,2,3,4,4,5,1],3)", "expected_output": "([1, 1, 2], [3, 4, 4, 5, 1])", "assertion": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"problem_name": "230", "generated_code": "<s> [INST]Your task is to write a Python function ```def replace_blank(str1,char)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef replace_blank(str1,char):\n    return str1.replace(\" \",char)\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "input_data": "replace_blank(\"hello people\",'@')", "expected_output": "(\"hello@people\")", "assertion": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"problem_name": "70", "generated_code": "<s> [INST]Your task is to write a Python function ```def get_equal(Input)``` to solve a programming problem.\nThe Python code must be between ```python and ``` tags. \n\nProblem:\n```\nWrite a function to find whether all the given tuples have equal length or not.\n```\n\nDo not add any natural language explanation to your response.\n[/INST] ```python\ndef get_equal(Input):\n    # Convert input to list of tuples\n    tuples = Input.split(',')\n    # Check if all tuples have the same length\n    if len(tuples[0].split('-')) != len(tuples[1].split('-')):\n        return False\n    else:\n        # Loop through tuples and check if all have the same length\n        for i in range(len(tuples)):\n            if len(tuples[i].split('-')) != len(tuples[0].split('-')):\n                return False\n        return True\n```</s>", "model_name": "Mistral", "dataset_name": "MBPPNoTest", "nl": "Write a function to find whether all the given tuples have equal length or not.", "input_data": "get_equal([(11, 22, 33), (44, 55, 66)])", "expected_output": "True", "assertion": "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
