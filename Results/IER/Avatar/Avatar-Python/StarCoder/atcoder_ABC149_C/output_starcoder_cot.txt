
Instruction: I want to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
For example:

Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)
What would be the output of the code execution given the following input:
20 2 5
Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
Consider the following code:

import math
N = int ( input ( ) )
def hoge ( n ) :
    if n == 2 :
        return True
    for x in range ( 2, int ( math. sqrt ( n ) + 2 ) ) :
        if n % x == 0 :
            return False
    return True
while True :
    if hoge ( N ) :
        print ( N )
        exit ( )
    N += 1


What would be the output of the code execution given the following input:
9552

Print the answer and end your response with "END-OF-OUTPUT":
The variable N is initialized to 9552.
The code then enters a loop that iterates from 2 to the square root of N (inclusive), meaning it will consider numbers from 2 to 95.
For each number x in this range, it checks if N is divisible by x. If it is, it returns False.
After the loop finishes, the code checks if N is a prime number. If it is, it prints the number and exits the loop.
If N is not a prime number, it adds 1 to N and repeats the loop.
The output of code execution is:
9553
END-OF-OUTPUT

"""

import sys
import math

def hoge(n):
    if n == 2:
        return True
    for x in range(2, int(math.sqrt(n) + 2)):
        if n % x == 0:
            return False
    return True

def main():
    N = int(input())
    while True:
        if hoge(N):
            print(N)
            break
        N += 1

if __name__ == '__main__':
    main()
