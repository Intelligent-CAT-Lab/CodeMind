Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
Below is an example:
[[[Example Start]]]
I want to act as a Java code executor. I will give you a piece of Java code and its input. You need to print the output of the code.
Consider the following code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String strArr[] = br.readLine().split(" ");

            int n = Integer.parseInt(strArr[0]);
            int a = Integer.parseInt(strArr[1]);
            int b = Integer.parseInt(strArr[2]);
            int answer = 0;

            for (int i = 1; i < n + 1; i++) {
                int num = i;
                int sum = 0;

                while (num!= 0) {
                        sum += num % 10;
                        num /= 10;
                }

                if (sum >= a && sum <= b ) {
                        answer = answer + i;
                }
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable `n`, variable `a` and variable `b` are initialized with 20, 2 and 5, respectively. And variable `answer` is initialized with 0.
It enters a for loop and it iterates from 1 to 20 to check each integer `i` in this range.
In each iteration, the value of variable `i` is passed to variable `num` and variable `sum` is first initialized with 0.
Then it calculates the sum of the digits of the variable `num` by repeatedlly extracting the digits of `num` with a while loop and adding it to variable `sum`.
After that it checks if the calculated variable `sum` fall within the range [2, 5]. If it does, it adds the value of variable `i` to variable `answer`. The condition is met when `i` is 2,3,4,5,11,12,13,14 and 20.
When the loop finishes, it print the fianl value of variable `answer` as output, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
import java.util.*;
import java.io.*;
import static java.lang.Math.*;

public class Main {
    public static void main(String[] args) throws IOException {
        OutputStreamWriter osr = new OutputStreamWriter(System.out);
        PrintWriter o = new PrintWriter(osr);
        FastReader fr = new FastReader();
        double n = fr.nextDouble(), m = fr.nextDouble();
        for (int i = 0; i < m - (n % m); i++) {
            o.print((int) (n / m) + " ");
        }
        for (int i = (int) (m - (n % m)); i < m; i++) {
            o.print((int) ceil(n / m) + " ");
        }
        o.close();
    }
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        InputStreamReader isr = new InputStreamReader(System.in);
        br = new BufferedReader(isr);
    }

    public String next() throws IOException {
        while (st == null ||!st.hasMoreTokens()) {
            st = new StringTokenizer(br.readLine());
        }
        return st.nextToken();
    }

    public String nextLine() throws IOException {
        return br.readLine();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    public long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    public int[] intArray(int size) throws IOException {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = nextInt();
        }
        return arr;
    }

    public char[] charArray() throws IOException {
        return nextLine().toCharArray();
    }
}

class Pair {
    int x;
    int y;

    public Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }

    static class Compare implements Comparator<Pair> {
        @Override
        public int compare(Pair o1, Pair o2) {
            return (o1.y - o2.y);
        }
    }
}
<<Question>>
What would be the output of code executiion given the following input:
87 34

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable `n` and `m` are initialized with 87 and 34, respectively.

The for loop is executed 2 times. In the first iteration, the value of `n` is divided by `m` and the result is printed. The value of `n` is then updated to be the remainder of `n` divided by `m`.

In the second iteration, the value of `n` is divided by `m` and the result is printed. The value of `n` is then updated to be the ceiling of `n` divided by `m`.

The output of code execution is:
3 2
END-OF-OUTPUT