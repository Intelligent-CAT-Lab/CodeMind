 <<<Analysis>>>
The function `get_Inv_Count` takes an array `arr` as input. It initializes a variable `inv_count` to 0, which will be used to count the number of inversions in the array.
The code then enters a nested loop that iterates over the array.
For each iteration, it checks if the current element `arr[i]` is greater than the next element `arr[j]`. If it is, it increments the `inv_count` variable.
The condition is met when i is 1 and j is 2, i is 1 and j is 3, i is 1 and j is 4, i is 1 and j is 5, i is 1 and j is 6, i is 1 and j is 7, i is 1 and j is 8, i is 1 and j is 9, i is 1 and j is 10, i is 1 and j is 11, i is 1 and j is 12, i is 1 and j is 13, i is 1 and j is 14, i is 1 and j is 15, i is 1 and j is 16, i is 1 and j is 17, i is 1 and j is 18, i is 1 and j is 19, i is 1 and j is 20, i is 2 and j is 3, i is 2 and j is 4, i is 2 and j is 5, i is 2 and j is 6, i is 2 and j is 7, i is 2 and j is 8, i is 2 and j is 9, i is 2 and j is 10, i is 2 and j is 11, i is 2 and j is 12, i is 2 and j is 13, i is 2 and j is 14, i is 2 and j is 15, i is 2 and j is 16, i is 2 and j is 17, i is 2 and j is 18, i is 2 and j is 19, i is 2 and j is 20, i is 3 and j is 4, i is 3 and j is 5, i is 3 and j is 6, i is 3 and j is 7, i is 3 and j is 8, i is 3 and j is 9, i is 3 and j is 10, i is 3 and j is 11, i is 3 and j is 12, i is 3 and j is 13, i is 3 and j is 14, i is 3 and j is 15, i is 3 and j is 16, i is 3 and j is 17, i is 3 and j is 18, i is 3 and j is 19, i is 3 and j is 20, i is 4 and j is 5, i is 4 and j is 6, i is 4 and j is 7, i is 4 and j is 8, i is 4 and j is 9, i is 4 and j is 10, i is 4 and j is 11, i is 4 and j