<<<Analysis>>>
The function `count_Substrings` is designed to count the number of substrings where the sum of the digits equals the length of the substring. The input string s is '112112'.

1. The length of the string `n` is 6.
2. Two variables `count` and `sum` are initialized to 0. `count` will store the final count of substrings, and `sum` will store the cumulative sum of the digits as we iterate through the string.
3. A defaultdict `mp` is created with a default value of 0 for any key that does not exist.
4. `mp[0]` is incremented by 1 to account for the empty substring.
5. The code enters a loop that iterates over each character in the string.
6. For each character, it updates `sum` by adding the integer value of the character (using `ord` to get the ASCII value and subtracting the ASCII value of '0').
7. It then increments `count` by the value of `mp[sum - (i + 1)]`. This checks if there has been a previous prefix sum that would make a valid substring ending at the current character.
8. It updates `mp[sum - (i + 1)]` by incrementing it by 1, to account for the new prefix sum.
9. After the loop, the function returns the value of `count`.

Let's go through the loop iteration by iteration:
- i = 0, s[i] = '1', sum = 1, sum - (i + 1) = 0, count = 1, mp[0] = 2
- i = 1, s[i] = '1', sum = 2, sum - (i + 1) = 0, count = 2, mp[0] = 3
- i = 2, s[i] = '2', sum = 4, sum - (i + 1) = 1, count = 2, mp[1] = 1
- i = 3, s[i] = '1', sum = 5, sum - (i + 1) = 1, count = 3, mp[1] = 2
- i = 4, s[i] = '1', sum = 6, sum - (i + 1) = 1, count = 4, mp[1] = 3
- i = 5, s[i] = '2', sum = 8, sum - (i + 1) = 2, count = 4, mp[2] = 1

The final value of `count` after the loop is 4, which is the number of substrings where the sum of the digits equals the length of the substring.

<<<Output>>>
4
[END-OF-RESPONSE]