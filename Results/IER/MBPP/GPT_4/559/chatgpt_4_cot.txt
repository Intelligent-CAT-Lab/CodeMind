<<<Analysis>>>
The function `max_sub_array_sum` is designed to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers, which is known as the Kadane's algorithm. The input array is `[-2, -3, 4, -1, -2, 1, 5, -3]` and the size is `8`.

1. Initialize `max_so_far` to 0. This will hold the maximum sum encountered so far.
2. Initialize `max_ending_here` to 0. This will hold the maximum sum of subarray ending at the current position.

The function then enters a loop that iterates over the array elements.

3. For `i = 0`, `a[i]` is `-2`. `max_ending_here` becomes `-2`. Since it's negative, `max_ending_here` is reset to `0`.
4. For `i = 1`, `a[i]` is `-3`. `max_ending_here` remains `0` for the same reason.
5. For `i = 2`, `a[i]` is `4`. `max_ending_here` becomes `4`. Since `max_so_far` is less than `max_ending_here`, `max_so_far` is updated to `4`.
6. For `i = 3`, `a[i]` is `-1`. `max_ending_here` becomes `3` (`4 + (-1)`). No change to `max_so_far`.
7. For `i = 4`, `a[i]` is `-2`. `max_ending_here` becomes `1` (`3 + (-2)`). No change to `max_so_far`.
8. For `i = 5`, `a[i]` is `1`. `max_ending_here` becomes `2` (`1 + 1`). No change to `max_so_far`.
9. For `i = 6`, `a[i]` is `5`. `max_ending_here` becomes `7` (`2 + 5`). Since `max_so_far` is less than `max_ending_here`, `max_so_far` is updated to `7`.
10. For `i = 7`, `a[i]` is `-3`. `max_ending_here` becomes `4` (`7 + (-3)`). No change to `max_so_far`.

After the loop finishes, the function returns the value of `max_so_far`, which is `7`.

<<<Output>>>
7
[END-OF-RESPONSE]