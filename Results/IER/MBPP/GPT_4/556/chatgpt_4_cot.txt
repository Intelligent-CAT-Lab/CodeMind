<<<Analysis>>>
The function `find_Odd_Pair` takes a list `A` and an integer `N` as its parameters. The list `A` contains the elements [5,4,7,2,1], and `N` is 5, indicating the number of elements in the list.

The variable `oddPair` is initialized to 0, which will be used to count the number of pairs that have an odd result when XORed.

The code then enters a nested loop where the outer loop runs from index 0 to `N-1` (inclusive), and the inner loop runs from `i+1` to `N-1` (inclusive). This ensures that each pair of elements is considered only once.

For each pair of elements `(A[i], A[j])`, the code calculates the XOR of the two elements and checks if the result is odd by using the modulo operator `% 2 != 0`. If the result is odd, it increments `oddPair` by 1.

Let's calculate the pairs:
- Pair (5, 4): XOR is 1, which is odd, so `oddPair` becomes 1.
- Pair (5, 7): XOR is 2, which is even, so `oddPair` remains 1.
- Pair (5, 2): XOR is 7, which is odd, so `oddPair` becomes 2.
- Pair (5, 1): XOR is 4, which is even, so `oddPair` remains 2.
- Pair (4, 7): XOR is 3, which is odd, so `oddPair` becomes 3.
- Pair (4, 2): XOR is 6, which is even, so `oddPair` remains 3.
- Pair (4, 1): XOR is 5, which is odd, so `oddPair` becomes 4.
- Pair (7, 2): XOR is 5, which is odd, so `oddPair` becomes 5.
- Pair (7, 1): XOR is 6, which is even, so `oddPair` remains 5.
- Pair (2, 1): XOR is 3, which is odd, so `oddPair` becomes 6.

After the loops finish, the function returns the final value of `oddPair`, which is 6.

<<<Output>>>
6
[END-OF-RESPONSE]