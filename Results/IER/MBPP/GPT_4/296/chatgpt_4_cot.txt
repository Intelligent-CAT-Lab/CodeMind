<<<Analysis>>>
The function `get_Inv_Count` is designed to count the number of inversions in an array, where an inversion is defined as a pair of indices (i, j) such that i < j and arr[i] > arr[j].

The input array is `[1, 20, 6, 4, 5]`.

The function initializes `inv_count` to 0.

The outer loop runs through each element of the array using the index `i` from 0 to the length of the array minus 1.

The inner loop runs through the elements of the array using the index `j`, which starts from `i + 1` to the end of the array.

For each pair of elements `(arr[i], arr[j])`, the function checks if `arr[i]` is greater than `arr[j]`. If it is, it means an inversion is found, and `inv_count` is incremented by 1.

Let's count the inversions:
- For `arr[0] = 1`, there are no elements after it that are smaller, so no inversions.
- For `arr[1] = 20`, there are three elements after it that are smaller (6, 4, 5), so three inversions.
- For `arr[2] = 6`, there are two elements after it that are smaller (4, 5), so two inversions.
- For `arr[3] = 4`, there is one element after it that is smaller (5), so no inversions because 5 is not smaller than 4.
- For `arr[4] = 5`, there are no elements after it, so no inversions.

The total number of inversions is 3 (from 20) + 2 (from 6) = 5.

The function returns the total count of inversions, which is 5.

<<<Output>>>
5
[END-OF-RESPONSE]