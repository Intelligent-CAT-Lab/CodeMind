Below is an instruction that describes a task, paired with an input that provides further context.  Write a response that appropriately completes the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the return value of the code.
Below is an example:
Consider the following code:

[[[Example Start]]]
<Code>
def sum_of_integer(N, A, B):
    sum_1 = 0
    for i in range(1,N+1):
        sum_order = 0
        i_str = str(i)
        n = len(i_str)
        for j in range(0,n):
            sum_order += int(i_str[j])
        if A <= sum_order <= B:
            sum_1 += i
    return sum_1
</Code>
What would be the return value of `sum_of_integer(20, 2, 5)`?
First analyze step by step about how the code processes the input to generate the output. 
<<<Analysis>>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code returns the final value of sum_1, which is 84.
<<<Output>>>
84
[END-OF-RESPONSE]
[[[Example End]]]

Consider the following code:
<Code>
def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return res
<Code>

What would be the return value of `count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )`?

First analyze step by step about how the code processes the input. 
Then print the return value of the code based on your analysis.
<<<Analysis>>>
The variable test_list is initialized to [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)].
The variable res is initialized to 0, which will be used to accumulate the count of bidirectional pairs.
The code then enters two nested loops, one iterating over the indices of the list and the other iterating over the indices of the list starting from the next index.
For each pair of indices (idx, iidx), the code checks if the first element of the pair is equal to the second element of the next pair and the second element of the pair is equal to the first element of the next pair. If all three conditions are met, it increments the count of bidirectional pairs.
After the loops finish, the code returns the final value of res, which is 2.
<<<Output>>>
2