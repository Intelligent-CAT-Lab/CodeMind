Below is an instruction that describes a task, paired with an input that provides further context.  Write a response that appropriately completes the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the return value of the code.
Below is an example:
Consider the following code:

[[[Example Start]]]
<Code>
def sum_of_integer(N, A, B):
    sum_1 = 0
    for i in range(1,N+1):
        sum_order = 0
        i_str = str(i)
        n = len(i_str)
        for j in range(0,n):
            sum_order += int(i_str[j])
        if A <= sum_order <= B:
            sum_1 += i
    return sum_1
</Code>
What would be the return value of `sum_of_integer(20, 2, 5)`?
First analyze step by step about how the code processes the input to generate the output. 
<<<Analysis>>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code returns the final value of sum_1, which is 84.
<<<Output>>>
84
[END-OF-RESPONSE]
[[[Example End]]]

Consider the following code:
<Code>
def find_First_Missing(array,start=0,end=None):
    if end is None:
      end = len(array) - 1   
    if (start > end): 
        return end + 1
    if (start!= array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) 
<Code>

What would be the return value of `find_First_Missing([0,1,2,3])`?

First analyze step by step about how the code processes the input. 
Then print the return value of the code based on your analysis.
<<<Analysis>>>
The variable array is initialized to [0,1,2,3].
The variable start is initialized to 0, and the variable end is initialized to None.
The code checks if end is None, and if it is, it sets end to the last index of the array.
The code then checks if start is greater than end, and if it is, it returns end + 1, which is 4.
The code then checks if start is not equal to array[start], and if it is, it returns start, which is 0.
The code then calculates the midpoint of the array using integer division, and checks if array[mid] is equal to mid.
If it is, it means that the missing number is in the right half of the array, so it recursively calls the function with start and mid as the new start and end, respectively.
If array[mid] is not equal to mid, it means that the missing number is in the left half of the array, so it recursively calls the function with start and mid as the new start and end, respectively.
After the recursive calls, the code returns the final value of the missing number, which is 4.
<<<Output>>>
4