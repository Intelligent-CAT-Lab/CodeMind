  <<<Analysis>>>
The code first defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to 1000000000 and defines a variable mod equal to 10 ** 9 + 7.
The code then defines a function getN() that takes no arguments and returns an integer.
The code then defines a function getNM() that takes no arguments and returns a tuple of two integers, N and K.
The code then defines a function getList() that takes no arguments and returns a list of integers.
The code then defines a function getArray() that takes an integer argument intn and returns a list of integers.
The code then defines a function input() that takes no arguments and returns a string.
The code then imports several modules, including collections, sys, heapq, math, copy, and bisect.
The code then sets the recursion limit to