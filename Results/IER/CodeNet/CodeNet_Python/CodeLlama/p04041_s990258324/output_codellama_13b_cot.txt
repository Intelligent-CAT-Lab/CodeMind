  <<<Analysis>>>
The code first initializes the variables n, X, Y, and Z to 3, 5, 7, and 5, respectively.
It then calculates the value of t as 2^15 = 32768.
The value of haiku is calculated as (2^15 + 2^12 + 2^7) >> 1 = 16384.
The dp array is initialized with 0s.
The code then enters a loop that iterates n times.
For each iteration, it creates a temporary array tm and initializes it with the values of dp.
It then initializes dp with 0s.
The code then enters a loop that iterates over the values of k from 0 to t-1.
For each value of k, it enters a loop that iterates over the values of d from 0 to 9.
For each value of d, it calculates the value of m as (k << (d+1)) + (1 << d).
If m & haiku is equal to haiku, it skips the current iteration.
Otherwise, it calculates the value of dp[int(m) % t] as the sum of tm[k] and dp[int(m) % t].
It then updates dp[int(m) % t] by adding tm[k] and dp[int(m) % t] and taking the result modulo mo.
The code then calculates the value of sub as the sum of the elements of dp.
It then calculates the value of ans as pow(10, n, mo) - sub.
The code then prints the value of ans and sub.
The code then prints the value of dp.
The code then prints the values of n, t, and n*t*10.
<<<Output>>>
