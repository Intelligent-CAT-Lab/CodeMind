  <<<Analysis>>>
The code first imports the necessary libraries and sets the recursion limit to 10000001.
It then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines a function called main that takes two arguments, n and k.
The function checks if n is greater than k and prints 0 if it is.
If n is not greater than k, the function prints 1.
The code then defines a function called prepare that takes two arguments, n and MOD.
The function calculates the factorials of 0 to n and stores them in a list called factorials.
It then calculates the inverse of n! and stores it in a list called invs.
The function returns factorials and invs.
The code then defines