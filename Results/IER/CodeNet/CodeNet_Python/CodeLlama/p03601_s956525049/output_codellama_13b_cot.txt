  <<<Analysis>>>
The code first imports the sys module and defines the input function as sys.stdin.readline.
The code then maps the input to the variables A, B, C, D, E, and F, which are all integers.
The code then initializes two lists, wdp and sdp, with F + 1 elements, each initialized to 0.
The code then sets wdp[0] to 1 and sdp[0] to 1.
The code then enters a loop that iterates from 0 to F + 1.
For each iteration, the code checks if i + A * 100 is less than or equal to F, and if so, it adds wdp[i] to wdp[i + A * 100].
The code then checks if i + B * 100 is less than or equal to F, and if so, it adds wdp[i] to wdp[i + B * 100].
The code then enters another loop that iterates from 0 to F + 1.
For each iteration, the code checks if i + C is less than or equal to F, and if so, it adds sdp[i] to sdp[i + C].
The code then checks if i + D is less than or equal to F, and if so, it adds sdp[i] to sdp[i + D].
The code then enters a third loop that iterates from 1 to F + 1.
For each iteration, the code checks if sdp[i] is 0, and if so, it continues to the next iteration.
If sdp[i] is not 0, the code sets w to 0 and enters a nested loop that iterates from 1 to F + 1.
For each iteration, the code checks if i + j is greater than F, and if so, it breaks out of the loop.
The code then checks if wdp[j] is 0, and if so, it continues to the next iteration.
If wdp[j] is not 0, the code checks if i is less than or equal to j * E // 100, and if so, it sets w to j and breaks out of the loop.
The code then checks if w is 0, and if so, it continues to the next iteration.
If w is not 0, the code calculates the ratio of i to i + w and compares it to the ratio of resb to resa.
If the ratio of i to i + w is greater than the ratio of resb to resa, the code sets resb to i and resa to i + w.
The code then prints the final values of resa and resb.
<<<Output>>>
200 100
[END-OF-RESPONSE]