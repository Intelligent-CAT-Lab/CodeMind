<<<Analysis>>>
The code defines a function `koch` that generates the points of a Koch curve between two points `p1` and `p2` with a given recursion depth `n`. The input `1` indicates that the recursion depth is 1.

The function `koch` works as follows:
- If `n` is 0, it simply returns the list containing the start and end points `p1` and `p2`.
- It calculates the points `s` and `t` which divide the line segment `p1`-`p2` into three equal parts.
- It calculates the point `u` which is the peak of the equilateral triangle whose base is the line segment `s`-`t`.
- If `n` is 1, it returns the list of points `[p1, s, u, t, p2]`.
- If `n` is greater than 1, it recursively calls itself for each of the four new line segments `[p1, s]`, `[s, u]`, `[u, t]`, and `[t, p2]`, decreasing `n` by 1 each time, and concatenates the results, excluding the last point of each segment to avoid duplication.

Since the input is `1`, the function will return the points `[p1, s, u, t, p2]` without further recursion. The start and end points are `[0.0, 0.0]` and `[100.0, 0.0]`, respectively.

The points `s` and `t` are calculated as follows:
- `s = [(100.0 + 2*0.0)/3.0, (0.0 + 2*0.0)/3.0] = [33.333333333333336, 0.0]`
- `t = [(2*100.0 + 0.0)/3.0, (2*0.0 + 0.0)/3.0] = [66.66666666666667, 0.0]`

The point `u` is calculated as follows:
- `u = [(66.66666666666667 + 33.333333333333336 + 1.73205*(0.0 - 0.0))/2.0, (1.73205*(66.66666666666667 - 33.333333333333336) + 0.0 + 0.0)/2.0]`
- `u = [50.0, 28.867513459481287]`

The final list of points is `[p1, s, u, t, p2]`, which is `[[0.0, 0.0], [33.333333333333336, 0.0], [50.0, 28.867513459481287], [66.66666666666667, 0.0], [100.0, 0.0]]`.

The output is the string representation of each point in the list, separated by a space and each pair of points on a new line.

<<<Output>>>
0.0 0.0
33.333333333333336 0.0
50.0 28.867513459481287
66.66666666666667 0.0
100.0 0.0
[END-OF-RESPONSE]