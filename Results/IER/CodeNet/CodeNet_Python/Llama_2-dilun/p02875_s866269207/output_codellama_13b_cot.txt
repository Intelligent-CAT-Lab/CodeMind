
<<<Analysis>>>
The variable n is initialized to 2.
The variable mod is initialized to 998244353.
The function calc is called with the arguments n and mod.
The function calc calculates the factorial of n and the inverse of n.
The variable f is initialized to 1, and the variable fac is initialized to [1].
The variable i is initialized to 1, and the loop iterates from 1 to n + 1 (inclusive).
In each iteration, the variable f is multiplied by i, and the result is divided by mod.
The variable f is then stored in the variable fac.
The variable inv is initialized to the inverse of f, and the variable invs is initialized to [1] * (n + 1).
The variable invs[n] is set to inv.
The variable i is initialized to n, and the loop iterates from n to 1, decreasing by 1.
In each iteration, the variable inv is multiplied by i, and the result is divided by mod.
The variable invs[i - 1] is set to inv.
The function cnk is called with the arguments n, r, mod, fac, and inv.
The variable ans is initialized to the power of 3 modulo mod.
The variable p is initialized to [1].
For i in range(n // 2 + 10):
    p.append(p[-1] * 2 % mod)
For k in range(n // 2 + 1, n + 1):
    cur = 2 * cnk(n, k, mod, f, inv) * p[n - k]
    ans -= cur
    ans %= mod
The function calc is called with the arguments n and mod.
The function calc calculates the factorial of n and the inverse of n.
The variable f is initialized to 1, and the variable fac is initialized to [1].
The variable i is initialized to 1, and the loop iterates from 1 to n + 1 (inclusive).
In each iteration, the variable f is multiplied by i, and the result is divided by mod.
The variable f is then stored in the variable fac.
The variable inv is initialized to the inverse of f, and the variable invs is initialized to [1] * (n + 1).
The variable invs[n] is set to inv.
The variable i is initialized to n, and the loop iterates from n to 1, decreasing by 1.
In each iteration, the variable inv is multiplied by i, and the result is divided by mod.
The variable invs[i - 1] is set to inv.
The function cnk is called with the arguments n, r, mod, fac, and inv.
The variable ans is initialized to the power of 3 modulo mod.
The variable p is initialized to [1].
For i in range(n // 2 + 10):
    p.append(p[-1] * 2 % mod)
For k in range(n // 2 + 1, n + 1):
    cur = 2 * cnk(n, k, mod, f, inv) * p[n - k]
    ans -= cur
    ans %= mod
The function calc is called with the arguments n and mod.
The function calc calculates the factorial of n and the inverse of n.
The variable f is initialized to 1, and the variable fac is initialized to [1].
The variable i is initialized to 1, and the loop iterates from 1 to n + 1 (inclusive).
In each iteration, the variable f is multiplied by i, and the result is divided by mod.
The variable f is then stored in the variable fac.
The variable inv is initialized to the inverse of f, and the variable invs is initialized to [1] * (n + 1).
The variable invs[n] is set to inv.
The variable i is initialized to n, and the loop iterates from n to 1, decreasing by 1.
In each iteration, the variable inv is multiplied by i, and the result is divided by mod.
The variable invs[i - 1] is set to inv.
The function cnk is called with the arguments n, r, mod, fac, and inv.
The variable ans is initialized to the power of 3