
The function rec(a, b) is defined to compute the coefficients of the Bezout's identity for the given values of a and b. The function takes two integers a and b as input and returns three integers x, y, and gcd, where gcd is the greatest common divisor of a and b, and x and y are the coefficients of the Bezout's identity.

The function first checks if a >= b, which is the base case of the recursion. If it is, the function returns 0, 1, and b as the coefficients of the Bezout's identity.

If a < b, the function calls itself recursively with a and b swapped, and then swaps the coefficients of the Bezout's identity returned by the recursive call.

The function then computes the coefficients of the Bezout's identity using the standard algorithm for the Bezout's identity.

The function then computes the coefficients of the Bezout's identity for the equation a * x + b * y = gcd, where a and b are the input values, and x and y are the coefficients of the Bezout's identity returned by the function.

The function returns the coefficients of the Bezout's identity for the equation a * x + b * y = gcd.

The main program reads two integers a and b from the standard input, and then calls the function rec(a, b) to compute the coefficients of the Bezout's identity for the equation a * x + b * y = gcd.

The main program then computes the values of x and y for the equation a * x + b * y = gcd using the coefficients returned by the function rec(a, b).

The main program then computes the magnitude of the point (x, y) using the formula abs(x) + abs(y).

The main program then iterates over the points (x, y) that satisfy the equation a * x + b * y = gcd, and finds the point with the largest magnitude.

The main program then iterates over the points (x, y) that satisfy the equation a * x + b * y = gcd, and finds the point with the smallest magnitude.

The main program prints the values of x and y for the point with the largest magnitude, and for the point with the smallest magnitude.

The output of the program is:
-1 1
1 1
