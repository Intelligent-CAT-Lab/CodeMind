Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
Below is an example:
[[[Example Start]]]
Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)

<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.


The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
# -*- coding: utf-8 -*-

def solve(sx, sy, tx, ty):
    first = "U"*(ty-sy)+"R"*(tx-sx)
    second = "D"*(ty-sy)+"L"*(tx-sx)
    third = "L"+"U"*(ty-sy+1)+"R"*(tx-sx+1)+"D"
    forth = "R"+"D"*(ty-sy+1)+"L"*(tx-sx+1)+"U"
    
    print(first+second+third+forth)
    
if __name__ == '__main__': 
    sx, sy, tx, ty = map(int, input().split())
    
    solve(sx, sy, tx, ty)
<<Question>>
What would be the output of code executiion given the following input:
0 0 1 2

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable sx, sy, tx, and ty are initialized to 0, 0, 1, and 2, respectively.
The function solve() takes four arguments: sx, sy, tx, and ty.
The first line of the function creates a string called first, which is a concatenation of two strings: "U"*(ty-sy) and "R"*(tx-sx). The first string is created by repeating the character "U" (which stands for up) ty-sy times, and the second string is created by repeating the character "R" (which stands for right) tx-sx times.
The second line of the function creates a string called second, which is a concatenation of two strings: "D"*(ty-sy) and "L"*(tx-sx). The first string is created by repeating the character "D" (which stands for down) ty-sy times, and the second string is created by repeating the character "L" (which stands for left) tx-sx times.
The third line of the function creates a string called third, which is a concatenation of three strings: "L", "U"*(ty-sy+1), and "R"*(tx-sx+1). The first string is the character "L", which stands for left. The second string is created by repeating the character "U" (which stands for up) ty-sy+1 times, and the third string is created by repeating the character "R" (which stands for right) tx-sx+1 times.
The fourth line of the function creates a string called forth, which is a concatenation of three strings: "R", "D"*(ty-sy+1), and "L"*(tx-sx+1). The first string is the character "R", which stands for right. The second string is created by repeating the character "D" (which stands for down) ty-sy+1 times, and the third string is created by repeating the character "L" (which stands for left) tx-sx+1 times.
The function then prints the concatenation of the four strings: first+second+third+forth.

The main program reads the input values and calls the solve() function with these values.

The output of code execution is:
UR
END-OF-OUTPUT