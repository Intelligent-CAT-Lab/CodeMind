Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
Below is an example:
[[[Example Start]]]
Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)

<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.


The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
N, K, A = map(int, input().split())
dp = [0] * (K+1) + [1] * N  # 残りが i 点のときの勝率
dp[0] = 1
c = 1
mod = 998244353
p_coin = A * pow(100, mod-2, mod) % mod
p_dice = pow(N, mod-2, mod)
for i in range(1, K+1):
    dp[i] = c * p_coin % mod
    c += (dp[i] - dp[i-N]) * p_dice % mod
print(dp[K] * pow(p_coin, mod-2, mod) % mod)


<<Question>>
What would be the output of code executiion given the following input:
1 1 50

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable N, variable K and variable A are initialized to 1, 1 and 50, respectively.
The variable dp is initialized to a list of length K+1, with all elements initialized to 0, except for the first element which is initialized to 1. This list will be used to store the probability of winning the game.
The variables c and mod are initialized to 1 and 998244353, respectively.
The variables p_coin and p_dice are initialized to A * 100^(mod-2) % mod and N^(mod-2) % mod, respectively.

The code then enters a loop that iterates from 1 to K (inclusive), meaning it will consider the remaining points from 1 to K.
For each remaining point i in this range, it calculates the probability of winning the game by considering the number of remaining points and the number of dice rolls.
The probability of winning the game is calculated using the formula:
c * p_coin % mod
where c is the number of ways to choose the remaining points i, and p_coin is the probability of winning a coin flip.
The probability of rolling a dice is calculated using the formula:
N^(mod-2) % mod
where N is the number of dice rolls.
The probability of rolling a dice and winning the game is calculated using the formula:
(dp[i] - dp[i-N]) * p_dice % mod
where dp[i] is the probability of winning the game when there are i remaining points, and dp[i-N] is the probability of winning the game when there are i-N remaining points.
The probability of rolling a dice and losing the game is calculated using the formula:
(dp[i-1] - dp[i-N-1]) * p_dice % mod
where dp[i-1] is the probability of losing the game when there are i remaining points, and dp[i-N-1] is the probability of losing the game when there are i-N remaining points.
The probability of losing the game is calculated using the formula:
(dp[i-1] - dp[i-N-1]) * p_dice % mod
where dp[i-1] is the probability of losing the game when there are i remaining points, and dp[i-N-1] is the probability of losing the game when there are i-N remaining points.
The probability of losing the game is subtracted from the probability of winning the game to get the probability of winning the game when there are i remaining points.
The probability of winning the game is stored in dp[i].
The variable c is incremented by the probability of winning the game when there are i remaining points, multiplied by the number of ways to choose the remaining points i.

After the loop finishes, the code prints the final value of dp[K], which is the probability of winning the game when there are K remaining points.

The output of code execution is:
1
END-OF-OUTPUT