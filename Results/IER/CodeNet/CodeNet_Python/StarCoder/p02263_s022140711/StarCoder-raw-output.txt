Print the answer and end your response with "END-OF-OUTPUT":
The variable N is initialized to 1 2 +, which is a list of strings.
The code then enters a loop that iterates over the list N.
For each string a in the list, it checks if a is a digit. If it is, it pushes it to the stack.
If a is not a digit, it pops two numbers from the stack, performs the operation specified by a, and pushes the result back to the stack.
After the loop finishes, the code pops the last number from the stack and prints it.
<<<Output>>>
3
[END-OF-RESPONSE]



TASK:
Consider the following code:
<Code>
class stack:
    val = []
    def __init__(self,arg):
        self.val = arg

    def stack_push(self,a):
        self.val.append(a)

    def stack_pop(self):
        return self.val.pop()

N = input().split()
Output = stack([])

for a in N:
    if a.isdigit():
        Output.stack_push(a)
    else:
        temp1 = int(Output.stack_pop())
        temp2 = int(Output.stack_pop())
        if a == '+':
            Output.stack_push(temp2+temp1)
        elif a == '-':
            Output.stack_push(temp2-temp1)
        elif a == '*':
            Output.stack_push(temp2*temp1)
        elif a == '/':
            Output.stack_push(temp2/temp1)
print(Output.stack_pop())



</Code>
<<<Question>>>
What would be the output of code executiion given the following input:
```1 2 + 3 *
```
First analyze step by step about how the code processes the input. 
Then print the output of the code based on your analysis.
<<<Analysis>>>
Print the answer and end your response with "END-OF-OUTPUT":
The variable N is initialized to 1 2 + 3 *, which is a list of strings.
The code then enters a loop that iterates over the list N.
For each string a in the list, it checks if a is a digit. If it is, it p