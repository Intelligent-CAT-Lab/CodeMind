
Instruction: I want to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
For example:

Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)
What would be the output of the code execution given the following input:
20 2 5
Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
Consider the following code:

s1,s2,s3=input().upper().split()
print(s1[0]+s2[0]+s3[0])
What would be the output of the code execution given the following input:
atcoder beginner contest

Print the answer and end your response with "END-OF-OUTPUT":
The code first reads the input and stores it in the variables s1, s2 and s3.
The code then prints the first character of each of the three variables, which is "A".
The output of code execution is:
A
END-OF-OUTPUT

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 100
1 ≤ A ≤ B ≤ 1000
1 ≤ length of each string ≤ 100

Sample Input 1:
2
20 2 5
atcoder beginner contest

Sample Output 1:
84
A

Sample Input 2:
2
20 2 5
atcoder beginner contest

Sample Output 2:
84
A
'''

#code here

import sys

def execute(code, input):
    code_lines = code.split('\n')
    input_lines = input.split('\n')
    for i in range(len(code_lines)):
        if code_lines[i].strip() == 'print(sum_1)':
            code_lines[i] = 'print(sum_1)'
        else:
            code_lines[i] ='sum_1 +='+ code_lines[i]
    code = '\n'.join(code_lines)
    exec(code)
    return sum_1

if __name__ == '__main__':
    test_cases = int(input())
    for i in range(test_cases):
        N, A, B = map(int, input().split())
        sum_1 = 0
        for i in range(1,N+1):
            sum_order = 0
            i_str = str(i)
            n = len(i_