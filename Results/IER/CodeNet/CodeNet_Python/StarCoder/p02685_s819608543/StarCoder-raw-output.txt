Print the answer and end your response with "END-OF-OUTPUT":
The code first imports the sys module, which is used to set the recursion limit.
The code then defines a function power that takes two arguments x and y.
If y is 0, the function returns 1.
If y is 1, the function returns x % mod.
If y is even, the function returns power(x, y//2)**2 % mod.
If y is odd, the function returns power(x, (y-1)//2)**2 * x % mod.
The code then defines a function mul that takes two arguments a and b.
The function returns ((a % mod) * (b % mod)) % mod.
The code then defines a function div that takes two arguments a and b.
The function returns mul(a, power(b, mod-2)).
The code then defines a function div2 that takes two arguments a and b.
The function returns mul(a, modinv(b)).
The code then defines a function modinv that takes one argument a.
The function returns the inverse of a modulo mod.
The code then defines a constant NNN that is equal to 10**6.
The code then defines a list g1 that is equal to [1, 1].
The code then defines a list g2 that is equal to [1, 1].
The code then defines a list inverse that is equal to [0, 1].
The code then enters a loop that iterates from 2 to NNN (inclusive), meaning it will consider numbers from 2 to 10**6.
The code then appends to g1 the product of the previous value of g1 and i.
The code then appends to inverse the product of the previous value of inverse and the mod inverse of i.
The code then appends to g2 the product of the previous value of g2 and the previous value of inverse.
After the loop finishes, the code enters a loop that iterates from 0 to K (inclusive), meaning it will consider numbers from 0 to 1.
The code then adds to r the product of the binomial coefficient of N-1 and i, the product of M and the mod inverse of M-1, and the power of M-1 and N-i-1.
The code then prints the final value of r, which is 1.
<<<Output>>>
1
[END-OF-RESPONSE]

"""

import sys
mod = 998244353
sys.setrecursionlimit(pow(10, 8))

def power(x, y):
    if   y == 0: return 1
    elif y == 1	 : return x % mod
    elif y % 2 == 0 : return power(x, y//2)**2 % mod
    else: return power(x, (y-1)//2)**2 * x % mod
    
def mul(a, b):
    return ((a % mod) * (b % mod)) % mod

def div(a, b):
    return mul(a, power(b, mod-2))
def div2(a, b):
    return mul(a, modinv(b))

def modinv(a):
    b, u, v = mod, 1, 0
    while b:
        t = a//b
        a, u = a-t*b, u-t*v
        a, b, u, v = b, a, v, u
    u %= mod
    return u

def cmb(n, r):
    if ( r<0