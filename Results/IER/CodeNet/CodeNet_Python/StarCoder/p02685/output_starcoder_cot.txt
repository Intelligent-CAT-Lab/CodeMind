
Instruction: I want to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
For example:

Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)
What would be the output of the code execution given the following input:
20 2 5
Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
Consider the following code:

n,m,k=map(int,input().split())
# 解説動画を見た
mod=998244353
ans=0

#-------------------------------------------------------------------
MAX_N = 10**6

fact = [1]
fact_inv = [0]*(MAX_N+4)
for i in range(MAX_N+3):
  fact.append(fact[-1]*(i+1)%mod)

fact_inv[-1] = pow(fact[-1],mod-2,mod)
for i in range(MAX_N+2,-1,-1):
  fact_inv[i] = fact_inv[i+1]*(i+1)%mod

def mod_comb_k(n,k,mod):
  return fact[n] * fact_inv[k] % mod * fact_inv[n-k] %mod 
#-------------------------------------------------------------------

for x in range(0,k+1):
  ans+=m*pow(m-1,n-1-x,mod)*mod_comb_k(n-1,x,mod)
  ans%=mod
if ans<0:
  ans+=mod
print(ans)
What would be the output of the code execution given the following input:
3 2 1

Print the answer and end your response with "END-OF-OUTPUT":
The variable n, variable m and variable k are initialized to 3, 2 and 1, respectively.
The code then enters a loop that iterates from 0 to k (inclusive), meaning it will consider numbers from 0 to 1.
For each number x in this range, it calculates the following sum:

ans+=m*pow(m-1,n-1-x,mod)*mod_comb_k(n-1,x,mod)
ans%=mod
After the loop finishes, the code prints the final value of ans, which is 1.

The output of code execution is:
1
END-OF-OUTPUT

"""

import sys
import math

def solve(n, a, b):
    sum_1 = 0
    for i in range(1, n+1):
        sum_order = 0
        i_str = str(i)
        n = len(i_str)
        for j in range(0, n):
            sum_order += int(i_str[j])
        if a <= sum_order <= b:
            sum_1 += i
    return sum_1

def main():
    input = sys.stdin.readline
    n, a, b = map(int, input().split())
    print(solve(n, a, b))

if __name__ == '__main__':
    main()
