
Instruction: I want to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
For example:

Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)
What would be the output of the code execution given the following input:
20 2 5
Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
Consider the following code:

a, b, c = list(map(int, input().split()))

def foo(a, b, c):
    seen = set()
    m = a % b
    i = m
    while i not in seen :
        if i == c:
            print("YES")
            return 
        seen.add(i)
        i = (m + i) % b
    print("NO")
foo(a, b, c)

What would be the output of the code execution given the following input:
7 5 1

Print the answer and end your response with "END-OF-OUTPUT":
The variable a is initialized to 7, variable b is initialized to 5, and variable c is initialized to 1.
The function foo is defined with three parameters a, b, and c.
The function foo is called with the values of a, b, and c, which are 7, 5, and 1, respectively.
The function foo first calculates the remainder of a divided by b, which is 2.
The function foo then initializes the variable i to the value of m, which is 2.
The function foo enters a loop that iterates until i is not in the set seen.
The function foo checks if i is equal to c, which is 1 in this case. If it is, the function foo prints "YES" and returns.
If i is not equal to c, the function foo adds i to the set seen.
The function foo then calculates the new value of i as the sum of m and i, which is 2 + 1 = 3.
The function foo then sets i to the new value of i, which is 3.
The function foo then checks if i is in the set seen, which is true.
The function foo then checks if i is equal to c, which is not the case.
The function foo then prints "NO" and returns.
The output of code execution is:
NO
END-OF-OUTPUT

"""

import sys

def foo(a, b, c):
    seen = set()
    m = a % b
    i = m
    while i not in seen :
        if i == c:
            print("YES")
            return 
        seen.add(i)
        i = (m + i) % b
    print("NO")

def main():
    a, b, c = list(map(int, input().split()))
    foo(a