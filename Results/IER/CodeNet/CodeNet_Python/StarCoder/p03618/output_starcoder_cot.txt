
Instruction: I want to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the output of the code.
For example:

Consider the following code:
N, A, B = map(int, input().split())
sum_1 = 0
for i in range(1,N+1):
    sum_order = 0
    i_str = str(i)
    n = len(i_str)
    for j in range(0,n):
        sum_order += int(i_str[j])
    if A <= sum_order <= B:
        sum_1 += i
print(sum_1)
What would be the output of the code execution given the following input:
20 2 5
Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code prints the final value of sum_1, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
Consider the following code:

import sys
from fractions import gcd
from itertools import groupby as gb
from itertools import permutations as perm
from collections import Counter as C
from collections import defaultdict as dd
sys.setrecursionlimit(10**5)

s = input()
s = sorted(s)
g = gb(s)
l = len(s)

res = l * (l - 1) // 2 + 1
for k, v in g:
    p = len(list(v))
    res -= p * (p - 1) // 2
print(res)

What would be the output of the code execution given the following input:
aatt

Print the answer and end your response with "END-OF-OUTPUT":
The code first reads a string s from the input. It then sorts the string s and stores it in the variable s.
The code then uses the itertools.groupby function to group the characters in s. The result is stored in the variable g.
The code then calculates the length of the string s and stores it in the variable l.
The code then initializes the variable res to l * (l - 1) // 2 + 1, which is 10.
The code then iterates over the elements in g. For each element, it calculates the length of the group and stores it in the variable p.
The code then subtracts p * (p - 1) // 2 from res, which is 10 - 1 * (1 - 1) // 2 = 10 - 1 = 9.
The code then prints the final value of res, which is 9.

The output of code execution is:
9
END-OF-OUTPUT

"""

import sys
from fractions import gcd
from itertools import groupby as gb
from itertools import permutations as perm
from collections import Counter as C
from collections import defaultdict as dd
sys.setrecursionlimit(10**5)

s = input()
s = sorted(s)
g = gb(s)
l = len(s)

res = l * (l - 1) // 2 + 1
for k, v in g:
    p = len(list(v))
    res -= p * (p - 1) // 2
print(res)
