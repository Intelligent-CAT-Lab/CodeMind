Print the answer and end your response with "END-OF-OUTPUT":
The variable N, variable K and variable A are initialized to 1, 1 and 50, respectively.
The variable dp is initialized to an array of length K+1, which is 2 in this case.
The first element of dp is initialized to 0, and the rest of the elements are initialized to 1.
The variable c is initialized to 1, which will be used to accumulate the number of ways to make change for each amount of money.
The variable mod is initialized to 998244353, which is the modulo.
The variable p_coin is initialized to A * pow(100, mod-2, mod) % mod, which is 50 * pow(100, 998244351, 998244353) % 998244353.
The variable p_dice is initialized to pow(N, mod-2, mod), which is pow(1, 998244351, 998244353).
The code then enters a loop that iterates from 1 to K (inclusive), meaning it will consider amounts of money from 1 to K.
For each amount of money i in this range, it calculates the number of ways to make change for this amount of money and stores it in dp[i].
The code also calculates the number of ways to make change for the amount of money i-N, which is the amount of money that can be made by taking N coins.
The number of ways to make change for the amount of money i is c * p_coin % mod, which is 1 * 50 * pow(100, 998244351, 998244353) % 998244353.
The number of ways to make change for the amount of money i-N is (dp[i] - dp[i-N]) * p_dice % mod, which is (1 - 1) * pow(1, 998244351, 998244353) % 998244353.
The code then updates c to c + (dp[i] - dp[i-N]) * p_dice % mod, which is 1 + (1 - 1) * pow(1, 998244351, 998244353) % 998244353.
After the loop finishes, the code prints the final value of dp[K] * pow(p_coin, mod-2, mod) % mod, which is 1 * pow(50, 998244351, 998244353) % 998244353.
