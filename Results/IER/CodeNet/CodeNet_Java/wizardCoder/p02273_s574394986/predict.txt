
The variable `n` is initialized with 1.
The function `kock` is called with `n` as 1, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
The function `kock` is recursively called with `n` as 0, `p1` as (0.0, 0.0) and `p2` as (100.0, 0.0).
