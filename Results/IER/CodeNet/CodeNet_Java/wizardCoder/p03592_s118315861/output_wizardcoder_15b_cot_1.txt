Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
Below is an example:
[[[Example Start]]]
I want to act as a Java code executor. I will give you a piece of Java code and its input. You need to print the output of the code.
Consider the following code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String strArr[] = br.readLine().split(" ");

            int n = Integer.parseInt(strArr[0]);
            int a = Integer.parseInt(strArr[1]);
            int b = Integer.parseInt(strArr[2]);
            int answer = 0;

            for (int i = 1; i < n + 1; i++) {
                int num = i;
                int sum = 0;

                while (num!= 0) {
                        sum += num % 10;
                        num /= 10;
                }

                if (sum >= a && sum <= b ) {
                        answer = answer + i;
                }
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable `n`, variable `a` and variable `b` are initialized with 20, 2 and 5, respectively. And variable `answer` is initialized with 0.
It enters a for loop and it iterates from 1 to 20 to check each integer `i` in this range.
In each iteration, the value of variable `i` is passed to variable `num` and variable `sum` is first initialized with 0.
Then it calculates the sum of the digits of the variable `num` by repeatedlly extracting the digits of `num` with a while loop and adding it to variable `sum`.
After that it checks if the calculated variable `sum` fall within the range [2, 5]. If it does, it adds the value of variable `i` to variable `answer`. The condition is met when `i` is 2,3,4,5,11,12,13,14 and 20.
When the loop finishes, it print the fianl value of variable `answer` as output, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
import java.io.*;
import java.util.*;

public class Main {

	final static long MOD = 1000000007L;
	public static String[] Ws = null;
	public static int wsIndx = 0;
	public static BufferedReader in = null;
	public static ArrayList<int[]> list = new ArrayList<>();
	public static void main(String[] args) throws Exception {

		int N = nextInt();
		int M = nextInt();
		int K = nextInt();

		int[][] b = new int[N][M];
		for(int i=0;i<b.length;i++){
			Arrays.fill(b[i], 1);
		}

		for(int i=0;i<=N;i++){
			for(int k=0;k<=M;k++){
				if(K==(M*i+N*k-2*i*k)){
					System.out.println("Yes");
					return;
				}
			}
		}
		System.out.println("No");

	}


	public static String[] toStringArray(String s) {
		String[] tmp = new String[s.length()];
		char[] c = s.toCharArray();
		for (int i = 0; i < tmp.length; i++) {
			tmp[i] = String.valueOf(c[i]);
		}
		return tmp;
	}

	public static String concatStringArray(String[] s){
		StringBuffer sb = new StringBuffer();
		for(String x:s){
			sb.append(x);
		}
		return sb.toString();
	}

	public static void check() throws Exception{
		if(in == null){
			in = new BufferedReader(new InputStreamReader(System.in));
		}
		if(Ws==null || Ws.length<=wsIndx){
			Ws = in.readLine().split(" ");
			wsIndx=0;
		}
	}
	public static int nextInt()throws Exception{
		check();
		return Integer.parseInt(Ws[wsIndx++]);
	}

	public static long nextLong()throws Exception{
		check();
		return Long.parseLong(Ws[wsIndx++]);
	}

	public static String nextString()throws Exception{
		check();
		return Ws[wsIndx++];
	}

	public static int[] nextInts()throws Exception{
		check();
		int[] tmp = new int[Ws.length];
		for(int i=0;i<tmp.length;i++){
			tmp[i]=Integer.parseInt(Ws[i]);
		}
		wsIndx=Ws.length;
		return tmp;
	}

	public static long[] nextLongs()throws Exception{
		check();
		long[] tmp = new long[Ws.length];
		for(int i=0;i<tmp.length;i++){
			tmp[i]=Long.parseLong(Ws[i]);
		}
		wsIndx=Ws.length;
		return tmp;
	}

	public static String[] nextStrings()throws Exception{
		check();
		wsIndx=Ws.length;
		return Ws;
	}


}
<<Question>>
What would be the output of code executiion given the following input:
2 2 2

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable `N`, `M` and `K` are initialized with 2, 2 and 2, respectively.

The variable `b` is initialized with a 2x2 matrix filled with 1's.

The for loop iterates from 0 to 2 and 0 to 2 to check if the given condition `K==(M*i+N*k-2*i*k)` is true or not.

The condition is true when `K` is