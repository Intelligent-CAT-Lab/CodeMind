Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
Below is an example:
[[[Example Start]]]
I want to act as a Java code executor. I will give you a piece of Java code and its input. You need to print the output of the code.
Consider the following code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String strArr[] = br.readLine().split(" ");

            int n = Integer.parseInt(strArr[0]);
            int a = Integer.parseInt(strArr[1]);
            int b = Integer.parseInt(strArr[2]);
            int answer = 0;

            for (int i = 1; i < n + 1; i++) {
                int num = i;
                int sum = 0;

                while (num!= 0) {
                        sum += num % 10;
                        num /= 10;
                }

                if (sum >= a && sum <= b ) {
                        answer = answer + i;
                }
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable `n`, variable `a` and variable `b` are initialized with 20, 2 and 5, respectively. And variable `answer` is initialized with 0.
It enters a for loop and it iterates from 1 to 20 to check each integer `i` in this range.
In each iteration, the value of variable `i` is passed to variable `num` and variable `sum` is first initialized with 0.
Then it calculates the sum of the digits of the variable `num` by repeatedlly extracting the digits of `num` with a while loop and adding it to variable `sum`.
After that it checks if the calculated variable `sum` fall within the range [2, 5]. If it does, it adds the value of variable `i` to variable `answer`. The condition is met when `i` is 2,3,4,5,11,12,13,14 and 20.
When the loop finishes, it print the fianl value of variable `answer` as output, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
import java.util.*;
import java.io.*;

public class Main {

	private static void solve(){
		//Implement solution here.
		int N = ni();
		System.out.println((N - 2) * 180);
	}

	//Switch input source (stdin/file)
	private static BufferedReader br;
	public static void main(String[] args){
		br = new BufferedReader(new InputStreamReader(System.in));
		String debugDataPath = System.getenv("DD_PATH");        
		if(debugDataPath!= null){
			try{
				br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(debugDataPath))));
			}catch(Exception e){
				throw new RuntimeException(e);
			}
		}
		boolean hasNext = true;
		while(hasNext){
			solve();	
			try{
				br.mark(1);
				if(br.read() > 0){
					br.reset();			
					System.out.println("---");
				} else {
					hasNext = false;
				}
			}catch(Exception e){
				throw new RuntimeException(e);
			} 
		}
	}

	//Input read utility
	private static StringTokenizer tokenizer = null;
	public static String next() {
		while (tokenizer == null ||!tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(br.readLine());
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}
	//Get next single int
	private static int ni() {
		return Integer.parseInt(next());
	}
	//Get next single long
	private static long nl() {
		return Long.parseLong(next());
	}
	//Get next single double
	private static double nd() {
		return Double.parseDouble(next());
	}
	//Get next int array from one line
	private static int[] na(int n) {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = ni();
		return a;
	}
	//Get next char array from one line
	private static char[] ns() {
		return next().toCharArray();
	}
	//Get next long array from one line
	private static long[] nal(int n) {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nl();
		return a;
	}
}
<<Question>>
What would be the output of code executiion given the following input:
3

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable `N` is initialized with 3.
The code calculates the area of a triangle with base 1 and height `N`. The formula for area of a triangle is `0.5 * base * height`. So, the area of the triangle is `0.5 * 1 * N = N/2`.
The output of code execution is:
180
END-OF-OUTPUT