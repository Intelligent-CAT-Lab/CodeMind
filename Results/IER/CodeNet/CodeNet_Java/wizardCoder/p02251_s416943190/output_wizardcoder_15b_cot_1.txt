Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
Below is an example:
[[[Example Start]]]
I want to act as a Java code executor. I will give you a piece of Java code and its input. You need to print the output of the code.
Consider the following code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String strArr[] = br.readLine().split(" ");

            int n = Integer.parseInt(strArr[0]);
            int a = Integer.parseInt(strArr[1]);
            int b = Integer.parseInt(strArr[2]);
            int answer = 0;

            for (int i = 1; i < n + 1; i++) {
                int num = i;
                int sum = 0;

                while (num!= 0) {
                        sum += num % 10;
                        num /= 10;
                }

                if (sum >= a && sum <= b ) {
                        answer = answer + i;
                }
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable `n`, variable `a` and variable `b` are initialized with 20, 2 and 5, respectively. And variable `answer` is initialized with 0.
It enters a for loop and it iterates from 1 to 20 to check each integer `i` in this range.
In each iteration, the value of variable `i` is passed to variable `num` and variable `sum` is first initialized with 0.
Then it calculates the sum of the digits of the variable `num` by repeatedlly extracting the digits of `num` with a while loop and adding it to variable `sum`.
After that it checks if the calculated variable `sum` fall within the range [2, 5]. If it does, it adds the value of variable `i` to variable `answer`. The condition is met when `i` is 2,3,4,5,11,12,13,14 and 20.
When the loop finishes, it print the fianl value of variable `answer` as output, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = {25, 10, 5, 1};
        int count = 0;
        for (int i = 0; i < 4; i++) {
            if (n!= 0) {
                count += n / a[i];
                n %= a[i];
            }
        }
        System.out.println(count);
    }
}


<<Question>>
What would be the output of code executiion given the following input:
100

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable `n` is initialized with 100. The array `a` is initialized with {25, 10, 5, 1}. The variable `count` is initialized with 0.

The for loop iterates from 0 to 3. In each iteration, the value of `n` is divided by the value of `a[i]` and the result is added to `count`. The remainder of the division is assigned to `n`.

The first iteration of the loop, `i=0`, divides `n` by 25, which gives a quotient of 4 and a remainder of 1. So `count` is incremented by 4 and `n` is assigned the value of 1.

The second iteration of the loop, `i=1`, divides `n` by 10, which gives a quotient of 1 and a remainder of 0. So `count` is incremented by 1 and `n` is assigned the value of 0.

The third iteration of the loop, `i=2`, divides `n` by 5, which gives a quotient of 2 and a remainder of 0. So `count` is incremented by 2 and `n` is assigned the value of 0.

The fourth iteration of the loop, `i=3`, divides `n` by 1, which gives a quotient of 100 and a remainder of 0. So `count` is incremented by 100 and `n` is assigned the value of 0.

Finally, the value of `count` is printed as output, which is 104.

The output of code execution is:
104
END-OF-OUTPUT