Below is an instruction that describes a task, paired with an input that
provides further context.  Write a response that appropriately completes
the request.

### Instruction:
Below is an example:
[[[Example Start]]]
I want to act as a Java code executor. I will give you a piece of Java code and its input. You need to print the output of the code.
Consider the following code:
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

    public static void main(String[] args) {
        try {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr);
            String strArr[] = br.readLine().split(" ");

            int n = Integer.parseInt(strArr[0]);
            int a = Integer.parseInt(strArr[1]);
            int b = Integer.parseInt(strArr[2]);
            int answer = 0;

            for (int i = 1; i < n + 1; i++) {
                int num = i;
                int sum = 0;

                while (num!= 0) {
                        sum += num % 10;
                        num /= 10;
                }

                if (sum >= a && sum <= b ) {
                        answer = answer + i;
                }
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
<<Question>>
What would be the output of code executiion given the following input:
20 2 5
First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT".
<<Answer>>
The variable `n`, variable `a` and variable `b` are initialized with 20, 2 and 5, respectively. And variable `answer` is initialized with 0.
It enters a for loop and it iterates from 1 to 20 to check each integer `i` in this range.
In each iteration, the value of variable `i` is passed to variable `num` and variable `sum` is first initialized with 0.
Then it calculates the sum of the digits of the variable `num` by repeatedlly extracting the digits of `num` with a while loop and adding it to variable `sum`.
After that it checks if the calculated variable `sum` fall within the range [2, 5]. If it does, it adds the value of variable `i` to variable `answer`. The condition is met when `i` is 2,3,4,5,11,12,13,14 and 20.
When the loop finishes, it print the fianl value of variable `answer` as output, which is 84.

The output of code execution is:
84
END-OF-OUTPUT
[[[Example End]]]


Consider the following code: 
import java.io.*;
import java.util.*;

public class Main {
    
    class Answer {
        int X, Y;
        
        public int solve() {
            if (X % Y == 0) return -1;
            
            for (int i = 2; i < Integer.MAX_VALUE; i++) {
                if ( (X * i) % Y!= 0 ) {
                    return X * i;
                }
            }
            return -1;
        }
        
        public void main(FastScanner in, PrintWriter out) {
            X = in.nextInt();
            Y = in.nextInt();
            out.println( solve() );
        }
        
        public void p(Object o) { System.out.print(o); }
        public void pl(Object o) { System.out.println(o); }
        public void arp(int[] o) { pl( Arrays.toString(o) ); }
        public void arpp(int[][] o) { 
            for (int i = 0; i < o.length; i++) {
                for (int j = 0; j < o[0].length; j++) { p(o[i][j] + " "); }
                pl("");
            }
        }
        public void ck(Object o1, Object o2) { pl(o1 + " " + o2); }
        public void ckk(Object o1, Object o2, Object o3) { pl(o1 + " " + o2 + " " + o3); }
        public void ckkk(Object o1, Object o2, Object o3, Object o4) { 
            pl(o1 + " " + o2 + " " + o3 + " " + o4);
        }
    }

    public static void main(String[] args) throws Exception {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        FastScanner in = new FastScanner(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        
        Main problem = new Main();
        Answer ans = problem.new Answer();
        ans.main(in, out);
        
        out.close();
        in.close();
    }
    
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;
        public FastScanner(InputStream in) { br = new BufferedReader(new InputStreamReader(in)); }
        public int nextInt() { return Integer.parseInt(next()); }
        public long nextLong() { return Long.parseLong(next()); }
        public double nextDouble() { return Double.parseDouble(next()); }
        public String next() {
            while (st == null ||!st.hasMoreTokens()) {
                try { st = new StringTokenizer(br.readLine()); } 
                catch (IOException e) { e.printStackTrace(); }
            }
            return st.nextToken();
        }
        public String nextLine() {
            String str = "";
            try { str = br.readLine();
            } catch (IOException e) { e.printStackTrace(); }
            return str;
        }
        public void close() throws IOException { br.close(); }
    }
}
<<Question>>
What would be the output of code executiion given the following input:
8 6

First think step by step then print the output of code execution and end the output with "END-OF-OUTPUT"\<<Answer>>
### Response:
The variable `X` and variable `Y` are initialized with 8 and 6, respectively.
The `solve()` method is called to solve the problem.
The `main()` method is called to read the input and print the output.
The `p()`, `pl()`, `arp()`, `arpp()`, `ck()`, `ckk()` and `ckkk()` methods are used to print the output.

The `solve()` method first checks if `X` is divisible by `Y`. If it is, it returns -1.
Otherwise, it enters a for loop and it iterates from 2 to `Integer.MAX_VALUE` to find the smallest positive integer `i` such that `X * i` is not divisible by `Y`.
If such an integer `i` is found, it returns `X * i`. Otherwise, it returns -1.

The `main()` method reads the input values of `X` and `Y` from the standard input and calls the `solve()` method to solve the problem.

The output of code execution is:
42
END-OF-OUTPUT