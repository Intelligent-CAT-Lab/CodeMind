
<<<Analysis>>>
The variable w, h, v, t, x, y, p, q are initialized with 10, 10, 1, 10, 3, 3, 7, 7 respectively according to the input.
It enters a for loop and it iterates from 1 to 10 to check each integer i in this range. The value of variable i is also passed to variable mx.
Inside the for loop, it calculates the reflected wave distance as powered by repeatedlly extracting the digits of number with a while loop and adding it to variable wp.
Then it checks if the calculated variable wp falls within the range [0, 1000000000]. If it does, it adds the current interger i to variable ans. The condition is met when i is 1,2,3,4,5,6,7,8,9,10.
After the loop finishes, it print the fianl value of variable ans as output, which is 100.
<<<Output>>>
100
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Main {
	static boolean debug = true;

	public static void main(String[] args) throws IOException {

		UserScanner scan = new UserScanner(System.in);
		PrintWriter pwriter = new PrintWriter(System.out);

		int w = scan.nextInt();
		int h = scan.nextInt();
		int v = scan.nextInt();
		int t = scan.nextInt();
		int x = scan.nextInt();
		int y = scan.nextInt();
		int p = scan.nextInt();
		int q = scan.nextInt();
		Wave wave = new Wave(w, h, v, t, x, y, p, q);
		pwriter.println(wave.attack());

		pwriter.flush();

		scan.close();
		System.exit(0);
	}
}

class Wave {
	int w, h, v, t, x, y, p, q;

	public Wave(int w, int h, int v, int t, int x, int y, int p, int q) {
		this.w = w;
		this.h = h;
		this.v = v;
		this.t = t;
		this.x = x;
		this.y = y;
		this.p = p;
		this.q = q;
	}

	public long attack() {
		int maxW, maxH;

		double maxDist = v * t;
		maxDist = maxDist * maxDist;

		for (maxW = 0; getPowDistance(maxW, 0) <= maxDist; maxW++)
			;
		if (maxW == 0)
			return 0;

		// count reachable in w,h are positive
		//... it means that first reflect wall is right, back
		long ans = maxW;
		int w = maxW - 1;
		for (int h = 1; w >= 0; h++)
			if (getPowDistance(w, h) <= maxDist)
				ans += (w + 1);
			else
				for (w = w - 1; w >= 0; w--)
					if (getPowDistance(w, h) <= maxDist) {
						ans += (w + 1);
						break;
					}

		// same for w is positive, h is negative
		w = maxW - 1;
		for (int h = -1; w >= 0; h--)