
<<<Analysis>>>
The variable ai, variable aj, variable al, variable at, variable aj, variable as and variable az are initialized with 2, 1, 1, 0, 0, 0 and 0 respectively according to the input.
It enters a if statement and it checks if ai % 2 + aj % 2 + al % 2 == 3. If it does, it adds ai + aj + al to variable ans.
It enters another if statement and it checks if ai % 2 + aj % 2 + al % 2 == 2. If it does, it adds ai + aj + al - 1 to variable ans.
It enters another if statement and it checks if ai % 2 + aj % 2 + al % 2 == 1. If it does, it adds ai + aj + al - 1 to variable ans.
It enters another if statement and it checks if ai % 2 + aj % 2 + al % 2 == 0. If it does, it adds ai + aj + al to variable ans.
After the loop finishes, it print the fianl value of variable ans as output, which is 10.
<<<Output>>>
10
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringJoiner;
import java.util.StringTokenizer;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;

public class Main {
    static In in = new In();
    static Out out = new Out();
    static long mod = 1000000007;
    static int iinf = 0xfffffff;
    static long inf = 0xfffffffffffffffL;

    void solve() {
        long ai = in.nextInt();
        long ao = in.nextInt();
        long at = in.nextInt();
        long aj = in.nextInt();
        long al = in.nextInt();
        long as = in.nextInt();
        long az = in.nextInt();
        long ans = 0;
        ans += ao;
        if (ai % 2 + aj % 2 + al % 2 == 3) {
            ans += ai + aj + al;
        } else if (ai % 2 + aj % 2 + al % 2 == 2) {
            if (ai!= 0 && aj!= 0 && al!= 0) {
                ans += ai + aj + al - 1;
            } else {
                ans += ai + aj + al - 2;
            }
        } else if (ai % 2 + aj % 2 + al % 2 == 1) {
            ans += ai + aj + al - 1;
        } else {
            ans += ai + aj + al;
        }
        out.println(ans);
    }

    public static void main(String[]$) {
        new Main().solve();
        out.flush();
    }
}

class In {
    private BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 0x10000);
    private StringTokenizer tokenizer;

    String next() {
        try {
            while (tokenizer == null ||!tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(reader.readLine());
            }
        } catch (IOException ignored) {
        }
        return tokenizer.nextToken();
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }

    char[][] nextCharArray(int n, int m) {
        char[][] a = new char[n][m];
        for (int i = 0; i < n; i++) {
            a[i] = next().toCharArray();
        }
        return a;
    }

    int[] nextIntArray(int n) {
        int[] a = new int