
<<<Analysis>>>
The variable n, variable a and variable b are initialized with 2, 5 and 4 respectively according to the input. And variable sum is initialized with 0.
It enters a for loop and it iterates from 1 to 2 to check each integer i in this range. The value of variable i is also passed to variable num.
Inside the for loop, it calculates the sum of the digits of the current interger num by repeatedlly extracting the digits of number with a while loop and adding it to variable sum.
Then it checks if the calculated variable sum falls within the range [2, 5]. If it does, it adds the current interger i to variable answer. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, it print the fianl value of variable answer as output, which is 84.
<<<Output>>>
84
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Iterator;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.Supplier;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Main{
	static FastScanner s=new FastScanner(System.in);

	void solve(){
		int[] a={gInt(),gInt(),gInt()};
		Arrays.sort(a);
		int[] m={a[0]%2,a[1]%2,a[2]%2};

		int r=0;
		if(m[0]==m[1]&&m[1]==m[2]){
		}else{
			++r;
			if(m[0]==m[1]){
				a[0]++;
				a[1]++;
			}else if(m[1]==m[2]){
				a[1]++;
				a[2]++;
			}else if(m[2]==m[0]){
				a[2]++;
				a[0]++;
			}
		}
		Arrays.sort(a);
		System.out.println(r+(a[2]*2-a[1]-a[0])/2);
	}

	public static void main(String[] $){
		new Main().solve();
	}

	int gInt(){
		return s.nextInt();
	}
	long gLong(){
		return s.nextLong();
	}
	double gDouble(){
		return Double.parseDouble(s.next());
	}

	SupplyingIterator<Integer> ints(int n){
		return new SupplyingIterator<>(n,this::gInt);
	}
	SupplyingIterator<Long> longs(int n){
		return new SupplyingIterator<>(n,this::gLong);
	}
	SupplyingIterator<Double> doubles(int n){
		return new SupplyingIterator<>(n,this::gDouble);
	}
	SupplyingIterator<String> strs(int n){
		return new SupplyingIterator<>(n,s::next);
	}

	Range rep(int i){
		return Range.rep(i);
	}
	Range rep(int f,int t,int d){
		return Range.rep(f,t,d);
	}
	Range rep(int f,int t){
		return rep(f,t,1);
	}
	Range rrep(int f,int t){
		return rep(t,f,-1);
	}

	IntStream INTS(int n){
		return IntStream.generate(this::gInt).limit(n);