
<<<Analysis>>>
The variable a, variable b and variable c are initialized with 10, 10 and 5 respectively according to the input.
It enters a for loop and it iterates from 0 to 999 to check each integer i in this range. The value of variable i is also passed to variable e.
Inside the for loop, it calculates the sum of the digits of the current interger i by repeatedlly extracting the digits of number with a while loop and adding it to variable e.
Then it checks if the calculated variable e falls within the range [0, 5]. If it does, it adds the current interger i to variable e. The condition is met when i is 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.
After the loop finishes, it print the fianl value of variable e as output, which is 10.
<<<Output>>>
10
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>

import java.util.*;
import java.io.*;

public class Main{
    static final Reader sc = new Reader();
    static final PrintWriter out = new PrintWriter(System.out,false);

    public static void main(String[] args) throws Exception {
    	int a = sc.nextInt();
    	int b = sc.nextInt();
    	int c = sc.nextInt();
    	int d = a + b;
    	int e = -1;
    	for(int i=0;i<1000;i++){
    		if(0<=(60*i+c)%d && (60*i+c)%d<=a){
    			e = i;
    			break;
    		}
    	}
    	if(e==-1){
    		out.println(-1);
    	}
    	else{
    		out.println(60*e+c);
    	}
    	out.flush();
        sc.close();
        out.close();
    }

    static void trace(Object... o) { System.out.println(Arrays.deepToString(o));}
}

class Reader {

    private final InputStream in;
    private final byte[] buf = new byte[1024];
    private int ptr = 0;
    private int buflen = 0;

    public Reader() { this(System.in);}
    public Reader(InputStream source) { this.in = source;}

    private boolean hasNextByte() {
        if (ptr < buflen) return true;
        ptr = 0;
        try{
            buflen = in.read(buf);
        }catch (IOException e) {e.printStackTrace();}
        if (buflen <= 0) return false;
        return true;
    }

    private int readByte() { if (hasNextByte()) return buf[ptr++]; else return -1;}

    private boolean isPrintableChar(int c)