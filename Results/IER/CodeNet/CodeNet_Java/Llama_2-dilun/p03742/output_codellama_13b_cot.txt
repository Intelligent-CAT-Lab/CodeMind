
<<<Analysis>>>
The variable n, variable a and variable b are initialized with 2 and 1 respectively according to the input. And variable sum is initialized with 0.
It enters a for loop and it iterates from 1 to 2 to check each integer i in this range. The value of variable i is also passed to variable num.
Inside the for loop, it calculates the sum of the digits of the current interger num by repeatedlly extracting the digits of number with a while loop and adding it to variable sum.
Then it checks if the calculated variable sum falls within the range [1, 2]. If it does, it adds the current interger i to variable answer. The condition is met when i is 1.
After the loop finishes, it print the fianl value of variable answer as output, which is 1.
<<<Output>>>
1
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.*;
import java.lang.reflect.Array;
import java.util.*;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.stream.Collectors;

@SuppressWarnings("unused")
public class Main {
    FastScanner in = new FastScanner(System.in);
    PrintWriter out = new PrintWriter(System.out);
    final int MOD = (int)1e9+7;
    void printlnYN(boolean b){out.println((b? "Brown" : "Alice"));}

    boolean[][] dp = new boolean[100][100], visited = new boolean[100][100];

    //System.out.println();はつかわない！！
    void solve() throws Exception{
        long X = in.nextLong(), Y = in.nextLong();
        /*
        for(int i = 0; i <= 10; i++){
            for(int j = 0; j <= 10; j++){
                boolean b = dfs(i, j);
                out.print((b? "O" : "X") + " ");
            }
            out.println();
        }
        */

        printlnYN(Math.abs(X-Y) <= 1);
    }

    boolean dfs(int x, int y){
        if(visited[x][y]) return dp[x][y];
        if(x <= 1 && y <= 1){
            dp[x][y] = false;
            visited[x][y] = true;
            return false;
        }

        for(int i = 2; i <= x; i += 2){
            if(!dfs(x-i, y+i/2)){
                dp[x][y] = true;
                visited[x][y] = true;
                return true;
            }
        }

        for(int i = 2; i <= y; i += 2){
            if(!dfs(x+i/2, y-i)){
                dp[x][y] = true;
                visited[x][y] = true;
                return true;
            }
        }

        dp[x][y] = false;
        visited[x][y] = true;
        return false;
    }

    public static void main(String[] args) throws Exception {
        new Main().m();
    }

    void m() throws Exception {
        solve();
        out.flush();
    }

    class FastScanner {
        Reader input;

        FastScanner() {this(System.in);}
        FastScanner(InputStream stream) {this.input = new BufferedReader(new InputStreamReader(stream));}

        int nextInt() {return (int) nextLong();}

        long nextLong() {
            try {
                int sign = 1;
                int b = input.read();
                while ((b < '0' || '9' < b) && b!= '-' && b!= '+') {
                    b = input.read();
                }
                if (b == '-') {
                    sign = -1;
