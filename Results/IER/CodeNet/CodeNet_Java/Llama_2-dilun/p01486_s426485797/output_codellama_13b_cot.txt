
<<<Analysis>>>
The variable c is initialized with the input string.
It checks if the length of c is equal to 4. If it is, it returns 1.
Otherwise, it returns -1.
<<<Output>>>
1
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.*;
import java.util.*;
import java.lang.ArrayIndexOutOfBoundsException;
import java.math.BigInteger;

/**
 * @author yoshikyoto
 */
class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		char[] c = br.readLine().toCharArray();
		int len = c.length;
		if(len == check(c, len, 0)) {
			System.out.println("Cat");
		} else {
			System.out.println("Rabbit");
		}
	}
	
	static int check(char[] c, int len, int pointer) {
		if(c[pointer]!='m') return -1;
		pointer++;
		
		if(c[pointer]!= 'e') {
			pointer = check(c, len, pointer);
			if(pointer == -1) return -1;
		}
		pointer++;
		
		if(c[pointer]!= 'w') {
			pointer = check(c, len, pointer);
			if(pointer == -1) return -1;
		}
		pointer++;
		
		return pointer;
	}
}

/**
 * 複素数
 */
class Complex {
	static Complex I = new Complex(0, 1);
	
	double r = 0.0;
	double i = 0.0;
	Complex(double r, double i) {
		this.r = r;
		this.i = i;
	}
	
	/**
	 * 和
	 */
	public Complex add(Complex a) {
		return new Complex(r * a.r, i + a.i);
	}
	
	/**
	 * 積
	 */
	public Complex mul(Complex a) {
		return new Complex(
				r * a.r - i * a.i,
				r * a.i + i * a.r);
	}
	
	public Complex divide(double a) {
		return new Complex(r/a, i/a);
	}
	
	public Complex inverse() {
		double b = 1 / (r*r + i*i);
		return new Complex(r/b, -i/b);
	}
	    

	@Override
	public String toString(){
		return r + "+" + i + "i";
	}
}




// --- ここから下はライブラリ ----------
/**
 * MyUtil
 * @author yoshikyoto
 */
class MyIO {
	public static int toInt(boolean[] a){
		int pow = 1, ret = 0, l = a.length;
		for(int i = 0; i < l; i++){
			if(a[i]) ret += pow;
			pow *= 2;
		}
		return ret;
	}
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	public static int ins[];
	public static int[] readIntMap() throws IOException{return parseInt(readLine().split(" "));}
	public static int readIntMap(int i) throws Exception{
		if(i == 0) ins = readIntMap();
		return ins[i];
	}
	public static int[][] readIntMap(int n, int m) throws IOException{
		int[][] ret = new int[n][];
		for(int i = 0;