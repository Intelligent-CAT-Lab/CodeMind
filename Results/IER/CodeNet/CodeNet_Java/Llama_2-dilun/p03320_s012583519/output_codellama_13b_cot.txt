
<<<Analysis>>>
The variable k is initialized with 10 according to the input.
It enters a for loop and it iterates from 1 to 9 to check each integer i in this range. The value of variable i is also passed to variable len.
Inside the for loop, it calculates the sum of the digits of the current interger len by repeatedlly extracting the digits of number with a while loop and adding it to variable sum.
Then it checks if the calculated variable sum falls within the range [1, 10]. If it does, it adds the current interger i to variable k. The condition is met when i is 1,2,3,4,5,6,7,8 and 9.
After the loop finishes, it print the fianl value of variable k as output, which is 9.
<<<Output>>>
9
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.io.Closeable;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.io.InputStream;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
    public static void main(String[] args) throws Exception {
        Thread thread = new Thread(null, new TaskAdapter(), "", 1 << 27);
        thread.start();
        thread.join();
    }

    static class TaskAdapter implements Runnable {
        @Override
        public void run() {
            InputStream inputStream = System.in;
            OutputStream outputStream = System.out;
            FastInput in = new FastInput(inputStream);
            FastOutput out = new FastOutput(outputStream);
            TaskD solver = new TaskD();
            solver.solve(1, in, out);
            out.close();
        }
    }

    static class TaskD {
        public void solve(int testNumber, FastInput in, FastOutput out) {
            int k = in.readInt();
            for (int i = 1; i <= 9 && k > 0; i++, k--) {
                out.println(i);
            }
            for (int i = 1; i <= 9 && k > 0; i++, k--) {
                out.println(i * 10 + 9);
            }
            for (int len = 3; k > 0; len++) {
                long base = 1;
                for (int i = 0; i < len - 3; i++) {
                    base *= 10;
                }
                long[] val = new long[1000];
                double[] div = new double[1000];
                double[] min = new double[1000];
                for (int i = 100; i <= 999; i++) {
                    val[i] = (i + 1) * base - 1;
                    div[i] = val[i] / (double) sum(val[i]);
                }
                min[999] = div[999];
                for (int i = 998; i >= 100; i--) {
                    min[i] = Math.min(min[i + 1], div[i]);
                }

                for (int i = 100; i <= 999 && k > 0; i++) {
                    if (min[i] == div[i]) {
                        k--;
                        out.println(val[i]);
                    }
                }
            }
        }

        public long sum(long x) {
            return x == 0? 0 : (x % 10 + sum(x / 10));
        }

    }

    static class FastOutput implements AutoCloseable, Closeable, Appendable {
        private StringBuilder cache = new StringBuilder(10 << 20);
        private final W