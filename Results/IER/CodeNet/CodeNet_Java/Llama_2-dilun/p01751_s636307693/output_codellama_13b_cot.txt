
<<<Analysis>>>
The variable a, variable b and variable c are initialized with 10, 10 and 5 respectively according to the input.
It enters a for loop and it iterates from 0 to 120 to check each integer i in this range. The value of variable i is also passed to variable when.
Inside the for loop, it calculates the value of variable roop, which is the quotient of variable when divided by the sum of variable a and variable b.
Then it checks if the value of variable roop is less than or equal to the value of variable when and the value of variable when is less than or equal to the value of variable roop plus variable a.
If it does, it prints the value of variable when and exits the program.
After the loop finishes, it prints -1 and exits the program.
<<<Output>>>
10
[END-OF-RESPONSE]
[INST]
    Consider the following code:
<Code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) {
		SC sc = new SC(System.in);

		int a=sc.nextInt();
		int b=sc.nextInt();
		int c=sc.nextInt();
		//寝て起きての周期が60の倍数または約数でない
		/*
		 * 降車できるとき、最大でも山手線は119週しかしない(寝て起きての周期、60)の最小公倍数を60で割ったときの最大値が119であるから
		 */
		if(a+b==0) {
			pl(-1);
			System.exit(0);
		}
		else {
			for(int i=0; i<=120; i++) {
				int when=60*i+c;
				int roop=when/(a+b);
				if(roop*(a+b)<=when && when<=roop*(a+b)+a) {
					pl(when);
					System.exit(0);
				}
			}
		}
		pl(-1);
		System.exit(0);
	}
	static class SC {
		private BufferedReader reader = null;
		private StringTokenizer tokenizer = null;
		public SC(InputStream in) {
			reader = new BufferedReader(new InputStreamReader(in));
		}
		public String next() {
			if (tokenizer == null ||!tokenizer.hasMoreTokens()) {
				try {
					tokenizer = new StringTokenizer(reader.readLine());
				} catch (IOException e) {
					throw new UncheckedIOException(e);
				}
			}
			return tokenizer.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
		public long nextLong() {
			return Long.parseLong(next());
		}
		public double nextDouble() {
			return Double.parseDouble(next());
		}
		public String nextLine() {
			try {
				return reader.readLine();
			} catch (IOException e) {
				throw new UncheckedIOException(e);
			}
		}
	}
	public static void pl(Object o) {
		System.out.println(o);
	}
	public static void pl() {
		System.out.println();
	}
	public static void p(Object o)