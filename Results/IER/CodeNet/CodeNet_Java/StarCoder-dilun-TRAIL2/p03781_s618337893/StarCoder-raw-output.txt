e variable X is initialized with 6.
It enters a for loop and it iterates from 0 to infinity to check each integer time in this range. The value of variable time is also passed to variable pow.
Inside the for loop, it calculates the sum of the current interger time by adding it to variable pow.
Then it checks if the calculated variable pow is less than or equal to the input X. If it is, it prints the current interger time as output, which is 2.
<<<Output>>>
2
[END-OF-RESPONSE]



TASK:
Consider the following code:
<Code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws IOException {
		final Scanner sc = new Scanner(System.in);
		
		final int N = sc.nextInt();
		final int M = sc.nextInt();
		
		final Map<Integer, Integer> map = new HashMap<>();
		
		for(int i = 0; i < N; i++){
			map.put(sc.nextInt(), i);
		}
		
		for(int i = 0; i < M; i++){
			final int key = sc.nextInt();
			if(map.containsKey(key)){
				System.out.println(map.get(key));
			}else{
				System.out.println(-1);
			}
		}
		
	}
	
	public static class Scanner implements Closeable {
		private BufferedReader br;
		private StringTokenizer tok;
 
		public Scanner(InputStream is) throws IOException {
			br = new BufferedReader(new InputStreamReader(is));
		}
 
		private void getLine() throws IOException {
			while (!hasNext()) {
				tok = new StringTokenizer(br.readLine());
			}
		}
 
		private boolean hasNext() {
			return tok!= null && tok.hasMoreTokens();
		}
 
		public String next() throws IOException {
			getLine();
			return tok.nextToken();
		}
 
		public int nextInt() throws IOException {
			return