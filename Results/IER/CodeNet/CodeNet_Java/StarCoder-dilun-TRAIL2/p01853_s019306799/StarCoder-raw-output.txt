ariable n is initialized with 3 and variable m is initialized with 100.
The code first checks if n is odd or even. If n is odd, it calculates the value of variable fst as n/2 + 1 and variable snd as n/2.
Then it enters a for loop and it iterates from 0 to fst - 1 to print 0.
Then it enters another for loop and it iterates from 0 to snd - 1 to print m.
After the loop finishes, it prints a new line.
<<<Output>>>
0 100 100
[END-OF-RESPONSE]



TASK:
Consider the following code:
<Code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		
		final int n = sc.nextInt();
		final int m = sc.nextInt();
		
		int[] arr = new int[n];
		
		for(int i = 0; i < n; i++){
			arr[i] = sc.nextInt();
		}
		
		Arrays.sort(arr);
		
		int sum = 0;
		
		for(int i = 0; i < n; i++){
			sum += arr[i];
		}
		
		System.out.println(sum);
	}

	public static class Scanner implements Closeable {
		private BufferedReader br;
		private StringTokenizer tok;

		public Scanner(InputStream is) throws IOException {
			br = new BufferedReader(new InputStreamReader(is));
		}

		private void getLine() throws IOException {
			while (!hasNext()) {
				tok = new StringTokenizer(br.readLine());
			}
		}

		private boolean hasNext() {
			return tok!= null && tok.hasMoreTokens();
		}

		public String next() throws IOException {
			getLine();
			return tok.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public long nextLong() throws IOException {
			return Long