e variable x is initialized with 33.
It enters a while loop and it iterates until the condition is met.
Inside the while loop, it calculates the value of variable powVal by calling the pow() method.
Then it adds the current value of variable powVal to the hashmap with key as the value of variable powVal and value as the value of variable base.
Then it checks if the difference between the current value of variable powVal and the previous value of variable powVal is greater than the value of variable x.
If it is, it breaks out of the loop.
After the loop finishes, it enters a for loop and it iterates through the hashmap to find the values of variables powVal and diff.
Then it checks if the value of variable diff is present in the hashmap.
If it is, it prints the values of variables powVal and diff.
<<<Output>>>
1 2
[END-OF-RESPONSE]



TASK:
Consider the following code:
<Code>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
	
	long maxDiff = 1_000_000_000;

	public static void main(String[] args) throws IOException {
		Main mainObj = new Main();
		mainObj.solve();
	}

	public void solve() throws IOException {
		FastScanner fs = new FastScanner();
		int x = fs.nextInt();
		
		HashMap<Long, Integer> powMap = new HashMap<>();
		powMap.put(0L, 0);
		powMap.put(1L, 1);
		
		long beforePow = 1;
		long base = 2;
		while(true) {
			long powVal = pow(base, 5);
			powMap.put(powVal, (int)base);
			if(powVal - beforePow > x) {
				break;
			}
			base++;
			beforePow = powVal;
		}
		
		for(Map.Entry<Long, Integer> mapEntry : powMap.entrySet()) {
			long powVal = map