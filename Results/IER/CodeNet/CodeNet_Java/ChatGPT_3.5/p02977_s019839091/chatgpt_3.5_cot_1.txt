<<<Analysis>>>
The variable n is initialized with 3 according to the input. And variable h is calculated as the highest power of 2 that is less than or equal to n+1.
If n is less than or equal to 2 or n is equal to h+1, it prints "No" and returns.
Otherwise, it initializes an empty list called ans to store the answers.
It also initializes two arrays called sum and index with size 2*h+1 and 2*(h+1)+1 respectively.
Then it enters a for loop from 1 to 2*h and calculates the value of q based on the value of i and n.
Inside the loop, it adds the pair (p, q) to the list ans if p is not -1.
Then it updates the value of p to q and calculates the value of cur based on the value of i and h.
It also calculates the value of sum[i] by taking the xor of sum[i-1] and cur.
Finally, it updates the value of index[sum[i]] to q.
After the loop finishes, it checks if n is not equal to h. If it is not, it adds four pairs of values to the list ans and enters another for loop from h+3 to n.
Inside the inner loop, it checks if there exists an index in the index array that is not equal to 0 and can be obtained by taking the xor of i and (h+j) where j is either 1 or 2.
If such an index exists, it adds two pairs of values to the list ans and breaks the loop.
If no such index exists, it throws a RuntimeException.
Finally, it prints "Yes" and then prints each pair of values in the list ans.
<<<Output>>>
Yes
4 1
5 2
6 3
7 4
8 5
9 6
10 7
11 8
12 9
13 10
14 11
15 12
16 13
17 14
18 15
19 16
20 17
21 18
22 19
23 20
24 21
25 22
26 23
27 24
28 25
29 26
30 27
31 28
32 29
33 30
34 31
35 32
36 33
37 34
38 35
39 36
40 37
41 38
42 39
43 40
44 41
45 42
46 43
47 44
48 45
49 46
50 47
51 48
52 49
53 50
54 51
55 52
56 53
57 54
58 55
59 56
60 57
61 58
62 59
63 60
64 61
65 62
66 63
67 64
68 65
69 66
70 67
71 68
72 69
73 70
74 71
75 72
76 73
77 74
78 75
79 76
80 77
81 78
82 79
83 80
84 81
85 82
86 83
87 84
88 85
89 86
90 87
91 88
92 89
93 90
94 91
95 92
96 93
97 94
98 95
99 96
100 97
101 98
102 99
103 100
104 101
105 102
106 103
107 104
108 105
109 106
110 107
111 108
112 109
113 110
114 111
115 112
116 113
117 114
118 115
119 116
120 117
121 118
122 119
123 120
124 121
125 122
126 123
127 124
128 125
129 126
130 127
131 128
132 129
133 130
134 131
135 132
136 133
137 134
138 135
139 136
140 137
141 138
142 139
143 140
144 141
145 142
146 143
147 144
148 145
149 146
150 147
151 148
152 149
153 150
154 151
155 152
156 153
157 154
158 155
159 156
160 157
161 158
