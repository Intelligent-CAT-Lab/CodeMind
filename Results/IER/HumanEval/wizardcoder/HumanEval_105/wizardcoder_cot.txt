Below is an instruction that describes a task, paired with an input that provides further context.  Write a response that appropriately completes the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the return value of the code.
Below is an example:
Consider the following code:

[[[Example Start]]]
<Code>
def sum_of_integer(N, A, B):
    sum_1 = 0
    for i in range(1,N+1):
        sum_order = 0
        i_str = str(i)
        n = len(i_str)
        for j in range(0,n):
            sum_order += int(i_str[j])
        if A <= sum_order <= B:
            sum_1 += i
    return sum_1
</Code>
What would be the return value of `sum_of_integer(20, 2, 5)`?
First analyze step by step about how the code processes the input to generate the output. 
<<<Analysis>>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code returns the final value of sum_1, which is 84.
<<<Output>>>
84
[END-OF-RESPONSE]
[[[Example End]]]

Consider the following code:
<Code>
def by_length(arr):
    dic = {
        1: "One",
        2: "Two",
        3: "Three",
        4: "Four",
        5: "Five",
        6: "Six",
        7: "Seven",
        8: "Eight",
        9: "Nine",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr

<Code>

What would be the return value of `by_length([2, 1, 1, 4, 5, 8, 2, 3]) `?

First analyze step by step about how the code processes the input. 
Then print the return value of the code based on your analysis.
<<<Analysis>>>
The variable arr is initialized to [2, 1, 1, 4, 5, 8, 2, 3].
The code creates a dictionary called dic that maps each integer from 1 to 9 to its corresponding word.
The sorted_arr is created by sorting the input array in descending order.
The new_arr is initialized as an empty list.
The code then enters a loop that iterates over each element in sorted_arr.
For each element, the code tries to append the corresponding word from the dic dictionary to the new_arr list.
If the element is not in the dic dictionary, the code simply skips it and moves on to the next element.
After the loop finishes, the code returns the final value of new_arr, which is ["Two", "One", "One", "Four", "Five", "Eight", "Two"].
<<<Output>>>
["Two", "One", "One", "Four", "Five", "Eight", "Two"]