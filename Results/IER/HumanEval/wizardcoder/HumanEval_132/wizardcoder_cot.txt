Below is an instruction that describes a task, paired with an input that provides further context.  Write a response that appropriately completes the request.

### Instruction:
I want you to act as a Python code executor. I will give you a piece of Python code and its input. You need to print the return value of the code.
Below is an example:
Consider the following code:

[[[Example Start]]]
<Code>
def sum_of_integer(N, A, B):
    sum_1 = 0
    for i in range(1,N+1):
        sum_order = 0
        i_str = str(i)
        n = len(i_str)
        for j in range(0,n):
            sum_order += int(i_str[j])
        if A <= sum_order <= B:
            sum_1 += i
    return sum_1
</Code>
What would be the return value of `sum_of_integer(20, 2, 5)`?
First analyze step by step about how the code processes the input to generate the output. 
<<<Analysis>>>
The variable N, variable A and variable B are initialized to 20, 2 and 5, respectively.
variable sum_1 is initialized to 0, which will be used to accumulate the sum of numbers meeting the condition.
The code then enters a loop that iterates from 1 to N (inclusive), meaning it will consider numbers from 1 to 20.
For each number i in this range, it calculates the sum of its digits and stores it in sum_order.
The code checks if sum_order is within the range [A, B], which is [2, 5] in this case. If it is, it adds the current number i to sum_1. The condition is met when i is 2,3,4,5,11,12,13,14 and 20.
After the loop finishes, the code returns the final value of sum_1, which is 84.
<<<Output>>>
84
[END-OF-RESPONSE]
[[[Example End]]]

Consider the following code:
<Code>
def is_nested(string):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    

<Code>

What would be the return value of `is_nested('[[]]') `?

First analyze step by step about how the code processes the input. 
Then print the return value of the code based on your analysis.
<<<Analysis>>>
The function is_nested takes a string as input and returns True if the string contains at least two nested brackets, and False otherwise.

The function initializes two empty lists, opening_bracket_index and closing_bracket_index, to keep track of the indices of opening and closing brackets, respectively.

The function then loops through the string and appends the index of each opening bracket to opening_bracket_index and the index of each closing bracket to closing_bracket_index.

The function then reverses the order of closing_bracket_index, since we want to start checking for nested brackets from the outermost brackets.

The function initializes a counter cnt to 0 and an index i to 0.

The function then loops through opening_bracket_index and checks if the current index is less than the length of closing_bracket_index and if the current index is less than the corresponding closing bracket index. If both conditions are met, it increments cnt and increments i.

After the loop finishes, the function returns True if cnt is greater than or equal to 2, and False otherwise.

<<<Output>>>
True