{"problem_name": "131", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n```\nTest:\n```\nassert reverse_vowels(\"Python\") == \"Python\"\n```\n\n\n\nAnswer:\n```python\ndef reverse_vowels(s):\n    vowels = \"aeiou\"\n    s_list = list(s)\n    for i, c in enumerate(s_list):\n        if c.lower() in vowels:\n            s_list[i] = vowels[-vowels.index(c.lower())]\n    return \"\".join(s_list)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).", "input_data": "reverse_vowels(\"Python\")", "expected_output": "\"Python\"", "assertion": "assert reverse_vowels(\"Python\") == \"Python\""}
{"problem_name": "554", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function which takes a list of integers and only returns the odd ones.\n```\nTest:\n```\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n```\n\n\n\nAnswer:\n```python\ndef Split(lst):\n    return [x for x in lst if x % 2 == 1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function which takes a list of integers and only returns the odd ones.", "input_data": "Split([1,2,3,4,5,6])", "expected_output": "[1,3,5]", "assertion": "assert Split([1,2,3,4,5,6]) == [1,3,5]"}
{"problem_name": "415", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find a pair with highest product from a given array of integers.\n```\nTest:\n```\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n```\n\n\n\nAnswer:\n```python\ndef max_Product(arr):\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find a pair with highest product from a given array of integers.", "input_data": "max_Product([1,2,3,4,7,0,8,4])", "expected_output": "(7,8)", "assertion": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"}
{"problem_name": "279", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth decagonal number.\n```\nTest:\n```\nassert is_num_decagonal(3) == 27\n```\n\n\n\nAnswer:\n```python\ndef is_num_decagonal(n):\n    return n * (3 * n - 1) // 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth decagonal number.", "input_data": "is_num_decagonal(3)", "expected_output": "27", "assertion": "assert is_num_decagonal(3) == 27"}
{"problem_name": "592", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n```\nTest:\n```\nassert sum_Of_product(3) == 15\n```\n\n\n\nAnswer:\n```python\ndef sum_Of_product(n):\n    result = 0\n    for i in range(n):\n        result += (n - 1) * (n - i)\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of the product of consecutive binomial co-efficients.", "input_data": "sum_Of_product(3)", "expected_output": "15", "assertion": "assert sum_Of_product(3) == 15"}
{"problem_name": "247", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n```\nTest:\n```\nassert lps(\"TENS FOR TENS\") == 5\n```\n\n\n\nAnswer:\n```python\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the length of the longest palindromic subsequence in the given string.", "input_data": "lps(\"TENS FOR TENS\")", "expected_output": "5", "assertion": "assert lps(\"TENS FOR TENS\") == 5"}
{"problem_name": "744", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given tuple has any none value or not.\n```\nTest:\n```\nassert check_none((10, 4, 5, 6, None)) == True\n```\n\n\n\nAnswer:\n```python\ndef check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given tuple has any none value or not.", "input_data": "check_none((10, 4, 5, 6, None))", "expected_output": "True", "assertion": "assert check_none((10, 4, 5, 6, None)) == True"}
{"problem_name": "257", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n```\nTest:\n```\nassert swap_numbers(10,20)==(20,10)\n```\n\n\n\nAnswer:\n```python\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.", "input_data": "swap_numbers(10,20)", "expected_output": "(20,10)", "assertion": "assert swap_numbers(10,20)==(20,10)"}
{"problem_name": "786", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to locate the right insertion point for a specified value in sorted order.\n```\nTest:\n```\nassert right_insertion([1,2,4,5],6)==4\n```\n\n\n\nAnswer:\n```python\ndef right_insertion(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to locate the right insertion point for a specified value in sorted order.", "input_data": "right_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert right_insertion([1,2,4,5],6)==4"}
{"problem_name": "478", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove lowercase substrings from a given string.\n```\nTest:\n```\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n```\n\n\n\nAnswer:\n```python\ndef remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove lowercase substrings from a given string.", "input_data": "remove_lowercase(\"PYTHon\")", "expected_output": "('PYTH')", "assertion": "assert remove_lowercase(\"PYTHon\")==('PYTH')"}
{"problem_name": "405", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether an element exists within a tuple.\n```\nTest:\n```\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n```\n\n\n\nAnswer:\n```python\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether an element exists within a tuple.", "input_data": "check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')", "expected_output": "True", "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"problem_name": "88", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n```\nTest:\n```\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n```\n\n\n\nAnswer:\n```python\ndef freq_count(lst):\n    return {x: lst.count(x) for x in lst}\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.", "input_data": "freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])", "expected_output": "({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assertion": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})"}
{"problem_name": "166", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n```\nTest:\n```\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n```\n\n\n\nAnswer:\n```python\ndef find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that counts the number of pairs of integers in a list that xor to an even number.", "input_data": "find_even_pair([5, 4, 7, 2, 1])", "expected_output": "4", "assertion": "assert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"problem_name": "559", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n```\nTest:\n```\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n```\n\n\n\nAnswer:\n```python\ndef max_sub_array_sum(nums, k):\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j+1])\n            if sub_array_sum > max_sum and j - i + 1 <= k:\n                max_sum = sub_array_sum\n    return max_sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the sum of the largest contiguous sublist in the given list.", "input_data": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)", "expected_output": "7", "assertion": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"problem_name": "299", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the maximum aggregate from the list of tuples.\n```\nTest:\n```\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n```\n\n\n\nAnswer:\n```python\ndef max_aggregate(tuples):\n    max_value = 0\n    max_name = ''\n    for name, value in tuples:\n        if value > max_value:\n            max_value = value\n            max_name = name\n    return (max_name, max_value)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the maximum aggregate from the list of tuples.", "input_data": "max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])", "expected_output": "('Juan Whelan', 212)", "assertion": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"}
{"problem_name": "472", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given list contains consecutive numbers or not.\n```\nTest:\n```\nassert check_Consecutive([1,2,3,4,5]) == True\n```\n\n\n\nAnswer:\n```python\ndef check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i]!= 1:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given list contains consecutive numbers or not.", "input_data": "check_Consecutive([1,2,3,4,5])", "expected_output": "True", "assertion": "assert check_Consecutive([1,2,3,4,5]) == True"}
{"problem_name": "255", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n```\nTest:\n```\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n```\n\n\n\nAnswer:\n```python\ndef combinations_colors(colors, n):\n    return [tuple(colors)] * n\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.", "input_data": "combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)", "expected_output": "[('Red',), ('Green',), ('Blue',)]", "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"}
{"problem_name": "8", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find squares of individual elements in a list.\n```\nTest:\n```\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n\n\nAnswer:\n```python\ndef square_nums(nums):\n    return [num**2 for num in nums]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find squares of individual elements in a list.", "input_data": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"problem_name": "87", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to merge three dictionaries into a single dictionary.\n```\nTest:\n```\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n```\n\n\n\nAnswer:\n```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to merge three dictionaries into a single dictionary.", "input_data": "merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })", "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"problem_name": "85", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the surface area of a sphere.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef surface_area_of_sphere(radius):\n    return 4 * 3.14 * radius * radius\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the surface area of a sphere.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "404", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the minimum of two numbers.\n```\nTest:\n```\nassert minimum(1,2) == 1\n```\n\n\n\nAnswer:\n```python\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the minimum of two numbers.", "input_data": "minimum(1,2)", "expected_output": "1", "assertion": "assert minimum(1,2) == 1"}
{"problem_name": "788", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to create a new tuple from the given string and list.\n```\nTest:\n```\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n```\n\n\n\nAnswer:\n```python\ndef new_tuple(lst, string):\n    return tuple(lst + [string])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to create a new tuple from the given string and list.", "input_data": "new_tuple([\"WEB\", \"is\"], \"best\")", "expected_output": "('WEB', 'is', 'best')", "assertion": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"problem_name": "428", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort the given array by using shell sort.\n```\nTest:\n```\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n```\n\n\n\nAnswer:\n```python\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort the given array by using shell sort.", "input_data": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])", "expected_output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assertion": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"problem_name": "638", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n```\nTest:\n```\nassert wind_chill(120,35)==40\n```\n\n\n\nAnswer:\n```python\ndef wind_chill(wind_velocity, temperature):\n    if wind_velocity < 4.8:\n        return temperature\n    elif temperature >= 10 and wind_velocity < 12.4:\n        return temperature\n    elif temperature >= 10 and wind_velocity >= 12.4 and wind_velocity < 13.4:\n        return temperature - ((13.4 - wind_velocity) / 4.8) * (temperature - 10.4)\n    elif temperature >= 10 and wind_velocity >= 13.4 and wind_velocity < 15.5:\n        return temperature - 0.2 * (temperature - 10.4) - (15.5 - wind_velocity) * 0.0588\n    else:\n        return temperature - 0.07 * (temperature - 10.4) - (wind_velocity - 15.5) * 0.0018\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "input_data": "wind_chill(120,35)", "expected_output": "40", "assertion": "assert wind_chill(120,35)==40"}
{"problem_name": "271", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n```\nTest:\n```\nassert even_Power_Sum(2) == 1056\n```\n\n\n\nAnswer:\n```python\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.", "input_data": "even_Power_Sum(2)", "expected_output": "1056", "assertion": "assert even_Power_Sum(2) == 1056"}
{"problem_name": "798", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of an array.\n```\nTest:\n```\nassert _sum([1, 2, 3]) == 6\n```\n\n\n\nAnswer:\n```python\ndef _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of an array.", "input_data": "_sum([1, 2, 3])", "expected_output": "6", "assertion": "assert _sum([1, 2, 3]) == 6"}
{"problem_name": "285", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n```\nTest:\n```\nassert text_match_two_three(\"ac\")==(False)\n```\n\n\n\nAnswer:\n```python\ndef text_match_two_three(text):\n    return \"ab\" in text or \"abb\" in text\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.", "input_data": "text_match_two_three(\"ac\")", "expected_output": "(False)", "assertion": "assert text_match_two_three(\"ac\")==(False)"}
{"problem_name": "68", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given array is monotonic or not.\n```\nTest:\n```\nassert is_Monotonic([6, 5, 4, 4]) == True\n```\n\n\n\nAnswer:\n```python\ndef is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n    return increasing or decreasing\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given array is monotonic or not.", "input_data": "is_Monotonic([6, 5, 4, 4])", "expected_output": "True", "assertion": "assert is_Monotonic([6, 5, 4, 4]) == True"}
{"problem_name": "475", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a dictionary by value.\n```\nTest:\n```\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n```\n\n\n\nAnswer:\n```python\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a dictionary by value.", "input_data": "sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})", "expected_output": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assertion": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"problem_name": "400", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract the number of unique tuples in the given list.\n```\nTest:\n```\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n```\n\n\n\nAnswer:\n```python\ndef extract_freq(lst):\n    return len(set(map(tuple, lst)))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract the number of unique tuples in the given list.", "input_data": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )", "expected_output": "3", "assertion": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"}
{"problem_name": "420", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the cube sum of first n even natural numbers.\n```\nTest:\n```\nassert cube_Sum(2) == 72\n```\n\n\n\nAnswer:\n```python\ndef cube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the cube sum of first n even natural numbers.", "input_data": "cube_Sum(2)", "expected_output": "72", "assertion": "assert cube_Sum(2) == 72"}
{"problem_name": "138", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n```\nTest:\n```\nassert is_Sum_Of_Powers_Of_Two(10) == True\n```\n\n\n\nAnswer:\n```python\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "input_data": "is_Sum_Of_Powers_Of_Two(10)", "expected_output": "True", "assertion": "assert is_Sum_Of_Powers_Of_Two(10) == True"}
{"problem_name": "116", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a given tuple of positive integers into a single integer.\n```\nTest:\n```\nassert tuple_to_int((1,2,3))==123\n```\n\n\n\nAnswer:\n```python\ndef tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a given tuple of positive integers into a single integer.", "input_data": "tuple_to_int((1,2,3))", "expected_output": "123", "assertion": "assert tuple_to_int((1,2,3))==123"}
{"problem_name": "93", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the value of 'a' to the power 'b'.\n```\nTest:\n```\nassert power(3,4) == 81\n```\n\n\n\nAnswer:\n```python\ndef power(a, b):\n    return a ** b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the value of 'a' to the power 'b'.", "input_data": "power(3,4)", "expected_output": "81", "assertion": "assert power(3,4) == 81"}
{"problem_name": "572", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to remove duplicate numbers from a given number of lists.\n```\nTest:\n```\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n```\n\n\n\nAnswer:\n```python\ndef two_unique_nums(nums):\n    return list(set(nums))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to remove duplicate numbers from a given number of lists.", "input_data": "two_unique_nums([1,2,3,2,3,4,5])", "expected_output": "[1, 4, 5]", "assertion": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"problem_name": "775", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n```\nTest:\n```\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n```\n\n\n\nAnswer:\n```python\ndef odd_position(lst):\n    return all(lst[i] % 2 == 1 for i in range(len(lst)) if i % 2 == 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether every odd index contains odd numbers of a given list.", "input_data": "odd_position([2,1,4,3,6,7,6,3])", "expected_output": "True", "assertion": "assert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"problem_name": "583", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function which returns nth catalan number.\n```\nTest:\n```\nassert catalan_number(10)==16796\n```\n\n\n\nAnswer:\n```python\ndef catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = 0\n    for i in range(n):\n        catalan += catalan_number(i) * catalan_number(n - i - 1)\n    return catalan\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function which returns nth catalan number.", "input_data": "catalan_number(10)", "expected_output": "16796", "assertion": "assert catalan_number(10)==16796"}
{"problem_name": "641", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth nonagonal number.\n```\nTest:\n```\nassert is_nonagonal(10) == 325\n```\n\n\n\nAnswer:\n```python\ndef is_nonagonal(n):\n    return n * (7 * n - 5) // 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth nonagonal number.", "input_data": "is_nonagonal(10)", "expected_output": "325", "assertion": "assert is_nonagonal(10) == 325"}
{"problem_name": "222", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if all the elements in tuple have same data type or not.\n```\nTest:\n```\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n```\n\n\n\nAnswer:\n```python\ndef check_type(t):\n    return all(type(t[0]) == type(x) for x in t)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if all the elements in tuple have same data type or not.", "input_data": "check_type((5, 6, 7, 3, 5, 6) )", "expected_output": "True", "assertion": "assert check_type((5, 6, 7, 3, 5, 6) ) == True"}
{"problem_name": "477", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to convert the given string to lower case.\n```\nTest:\n```\nassert is_lower(\"InValid\") == \"invalid\"\n```\n\n\n\nAnswer:\n```python\ndef is_lower(string):\n    return string.lower()\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to convert the given string to lower case.", "input_data": "is_lower(\"InValid\")", "expected_output": "\"invalid\"", "assertion": "assert is_lower(\"InValid\") == \"invalid\""}
{"problem_name": "388", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n```\nTest:\n```\nassert highest_Power_of_2(10) == 8\n```\n\n\n\nAnswer:\n```python\ndef highest_Power_of_2(n):\n    return 1 << (n.bit_length() - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the highest power of 2 that is less than or equal to n.", "input_data": "highest_Power_of_2(10)", "expected_output": "8", "assertion": "assert highest_Power_of_2(10) == 8"}
{"problem_name": "618", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to divide two lists element wise.\n```\nTest:\n```\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n```\n\n\n\nAnswer:\n```python\ndef div_list(list1, list2):\n    return [x/y for x, y in zip(list1, list2)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to divide two lists element wise.", "input_data": "div_list([4,5,6],[1, 2, 3])", "expected_output": "[4.0,2.5,2.0]", "assertion": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"}
{"problem_name": "162", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n```\nTest:\n```\nassert sum_series(6) == 12\n```\n\n\n\nAnswer:\n```python\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "input_data": "sum_series(6)", "expected_output": "12", "assertion": "assert sum_series(6) == 12"}
{"problem_name": "235", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to set all even bits of a given number.\n```\nTest:\n```\nassert even_bit_set_number(10) == 10\n```\n\n\n\nAnswer:\n```python\ndef even_bit_set_number(n):\n    return n | (n >> 1) | (n >> 2) | (n >> 3)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to set all even bits of a given number.", "input_data": "even_bit_set_number(10)", "expected_output": "10", "assertion": "assert even_bit_set_number(10) == 10"}
{"problem_name": "234", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the volume of a cube given its side length.\n```\nTest:\n```\nassert volume_cube(3)==27\n```\n\n\n\nAnswer:\n```python\ndef volume_cube(side_length):\n    return side_length ** 3\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the volume of a cube given its side length.", "input_data": "volume_cube(3)", "expected_output": "27", "assertion": "assert volume_cube(3)==27"}
{"problem_name": "128", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find words that are longer than n characters from a given list of words.\n```\nTest:\n```\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n```\n\n\n\nAnswer:\n```python\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find words that are longer than n characters from a given list of words.", "input_data": "long_words(3,\"python is a programming language\")", "expected_output": "['python','programming','language']", "assertion": "assert long_words(3,\"python is a programming language\")==['python','programming','language']"}
{"problem_name": "804", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the product of numbers in a list is even or not.\n```\nTest:\n```\nassert is_product_even([1,2,3])\n```\n\n\n\nAnswer:\n```python\ndef is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the product of numbers in a list is even or not.", "input_data": "is_product_even([1,2,3])", "expected_output": "True", "assertion": "assert is_product_even([1,2,3])"}
{"problem_name": "100", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n```\nTest:\n```\nassert next_smallest_palindrome(99)==101\n```\n\n\n\nAnswer:\n```python\ndef next_smallest_palindrome(n):\n    n = str(n)\n    for i in range(len(n)-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            if n[i] < n[j]:\n                break\n        else:\n            continue\n        break\n    else:\n        return -1\n    for k in range(len(n)-1, i, -1):\n        if n[k] > n[j]:\n            break\n    n[i], n[k] = n[k], n[i]\n    n = n[:j+1][::-1] + n[j+1:]\n    return int(n)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.", "input_data": "next_smallest_palindrome(99)", "expected_output": "101", "assertion": "assert next_smallest_palindrome(99)==101"}
{"problem_name": "276", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef cylinder_volume(radius, height):\n    return 3.14 * radius * radius * height\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in the radius and height of a cylinder and returns the the volume.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "468", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n```\nTest:\n```\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n```\n\n\n\nAnswer:\n```python\ndef max_product(nums):\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "input_data": "max_product([3, 100, 4, 5, 150, 6])", "expected_output": "3000", "assertion": "assert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"problem_name": "733", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n```\nTest:\n```\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n```\n\n\n\nAnswer:\n```python\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "input_data": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)", "expected_output": "1", "assertion": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"problem_name": "800", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove all whitespaces from a string.\n```\nTest:\n```\nassert remove_all_spaces('python  program')==('pythonprogram')\n```\n\n\n\nAnswer:\n```python\ndef remove_all_spaces(string):\n    return string.replace(' ', '')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove all whitespaces from a string.", "input_data": "remove_all_spaces('python  program')", "expected_output": "('pythonprogram')", "assertion": "assert remove_all_spaces('python  program')==('pythonprogram')"}
{"problem_name": "631", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n```\nTest:\n```\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n```\n\n\n\nAnswer:\n```python\ndef replace_spaces(string):\n    return string.replace(' ', '_').replace('_','')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to replace whitespaces with an underscore and vice versa in a given string.", "input_data": "replace_spaces('Jumanji The Jungle')", "expected_output": "'Jumanji_The_Jungle'", "assertion": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"problem_name": "286", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n```\nTest:\n```\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n```\n\n\n\nAnswer:\n```python\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        sub_arr = arr[i:i+k]\n        sub_arr_sum = sum(sub_arr)\n        if sub_arr_sum > max_sum:\n            max_sum = sub_arr_sum\n    return max_sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.", "input_data": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)", "expected_output": "30", "assertion": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"problem_name": "310", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a given string to a tuple of characters.\n```\nTest:\n```\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n```\n\n\n\nAnswer:\n```python\ndef string_to_tuple(string):\n    return tuple(string)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a given string to a tuple of characters.", "input_data": "string_to_tuple(\"python 3.0\")", "expected_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assertion": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"problem_name": "793", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the last position of an element in a sorted array.\n```\nTest:\n```\nassert last([1,2,3],1) == 0\n```\n\n\n\nAnswer:\n```python\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            if mid == right or arr[mid + 1]!= target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the last position of an element in a sorted array.", "input_data": "last([1,2,3],1)", "expected_output": "0", "assertion": "assert last([1,2,3],1) == 0"}
{"problem_name": "223", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n```\nTest:\n```\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n```\n\n\n\nAnswer:\n```python\ndef is_majority(arr, n, element):\n    count = 0\n    for num in arr:\n        if num == element:\n            count += 1\n    return count > n / 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)", "input_data": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)", "expected_output": "True", "assertion": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"problem_name": "439", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to join a list of multiple integers into a single integer.\n```\nTest:\n```\nassert multiple_to_single([11, 33, 50])==113350\n```\n\n\n\nAnswer:\n```python\ndef multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to join a list of multiple integers into a single integer.", "input_data": "multiple_to_single([11, 33, 50])", "expected_output": "113350", "assertion": "assert multiple_to_single([11, 33, 50])==113350"}
{"problem_name": "440", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the first adverb and their positions in a given sentence.\n```\nTest:\n```\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n```\n\n\n\nAnswer:\n```python\ndef find_adverb_position(sentence):\n    adverbs = [\"clearly\", \"easily\", \"simply\", \"effectively\", \"efficiently\", \"smoothly\", \"swiftly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quietly\", \"quiet", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the first adverb and their positions in a given sentence.", "input_data": "find_adverb_position(\"clearly!! we can see the sky\")", "expected_output": "(0, 7, 'clearly')", "assertion": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')"}
{"problem_name": "608", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find nth bell number.\n```\nTest:\n```\nassert bell_Number(2) == 2\n```\n\n\n\nAnswer:\n```python\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [1] * (n + 1)\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                bell[i] += bell[j] * bell[i - j]\n        return bell[n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find nth bell number.", "input_data": "bell_Number(2)", "expected_output": "2", "assertion": "assert bell_Number(2) == 2"}
{"problem_name": "111", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the common elements in given nested lists.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef find_common(list1, list2):\n    common = []\n    for item1 in list1:\n        if isinstance(item1, list):\n            for item2 in list2:\n                if isinstance(item2, list):\n                    common.extend(find_common(item1, item2))\n        else:\n            if item1 in list2:\n                common.append(item1)\n    return common\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the common elements in given nested lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "731", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n```\nTest:\n```\nassert lateralsurface_cone(5,12)==204.20352248333654\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "input_data": "lateralsurface_cone(5,12)", "expected_output": "204.20352248333654", "assertion": "assert lateralsurface_cone(5,12)==204.20352248333654"}
{"problem_name": "607", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n```\nTest:\n```\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n```\n\n\n\nAnswer:\n```python\nimport re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.", "input_data": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')", "expected_output": "('fox', 16, 19)", "assertion": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"problem_name": "396", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given string starts and ends with the same character or not.\n```\nTest:\n```\nassert check_char(\"abba\") == \"Valid\"\n```\n\n\n\nAnswer:\n```python\ndef check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given string starts and ends with the same character or not.", "input_data": "check_char(\"abba\")", "expected_output": "\"Valid\"", "assertion": "assert check_char(\"abba\") == \"Valid\""}
{"problem_name": "442", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the ration of positive numbers in an array of integers.\n```\nTest:\n```\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n```\n\n\n\nAnswer:\n```python\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the ration of positive numbers in an array of integers.", "input_data": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])", "expected_output": "0.54", "assertion": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54"}
{"problem_name": "300", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef count_binary_sequences(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 * count_binary_sequences(n - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "735", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n```\nTest:\n```\nassert toggle_middle_bits(9) == 15\n```\n\n\n\nAnswer:\n```python\ndef toggle_middle_bits(n):\n    return n ^ (n >> 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/", "input_data": "toggle_middle_bits(9)", "expected_output": "15", "assertion": "assert toggle_middle_bits(9) == 15"}
{"problem_name": "253", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that returns the number of integer elements in a given list.\n```\nTest:\n```\nassert count_integer([1,2,'abc',1.2]) == 2\n```\n\n\n\nAnswer:\n```python\ndef count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that returns the number of integer elements in a given list.", "input_data": "count_integer([1,2,'abc',1.2])", "expected_output": "2", "assertion": "assert count_integer([1,2,'abc',1.2]) == 2"}
{"problem_name": "58", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given two integers have opposite sign or not.\n```\nTest:\n```\nassert opposite_Signs(1,-2) == True\n```\n\n\n\nAnswer:\n```python\ndef opposite_Signs(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given two integers have opposite sign or not.", "input_data": "opposite_Signs(1,-2)", "expected_output": "True", "assertion": "assert opposite_Signs(1,-2) == True"}
{"problem_name": "407", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n```\nTest:\n```\nassert rearrange_bigger(12)==21\n```\n\n\n\nAnswer:\n```python\ndef rearrange_bigger(num):\n    num_str = str(num)\n    num_list = list(num_str)\n    num_list.sort(reverse=True)\n    bigger_num = int(''.join(num_list))\n    return bigger_num\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to create the next bigger number by rearranging the digits of a given number.", "input_data": "rearrange_bigger(12)", "expected_output": "21", "assertion": "assert rearrange_bigger(12)==21"}
{"problem_name": "267", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n```\nTest:\n```\nassert square_Sum(2) == 10\n```\n\n\n\nAnswer:\n```python\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i * i\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.", "input_data": "square_Sum(2)", "expected_output": "10", "assertion": "assert square_Sum(2) == 10"}
{"problem_name": "57", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the largest number that can be formed with the given list of digits.\n```\nTest:\n```\nassert find_Max_Num([1,2,3]) == 321\n```\n\n\n\nAnswer:\n```python\ndef find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the largest number that can be formed with the given list of digits.", "input_data": "find_Max_Num([1,2,3])", "expected_output": "321", "assertion": "assert find_Max_Num([1,2,3]) == 321"}
{"problem_name": "17", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that returns the perimeter of a square given its side length as input.\n```\nTest:\n```\nassert square_perimeter(10)==40\n```\n\n\n\nAnswer:\n```python\ndef square_perimeter(side_length):\n    return 4 * side_length\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that returns the perimeter of a square given its side length as input.", "input_data": "square_perimeter(10)", "expected_output": "40", "assertion": "assert square_perimeter(10)==40"}
{"problem_name": "805", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n```\nTest:\n```\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n```\n\n\n\nAnswer:\n```python\ndef max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that returns the list in a list of lists whose sum of elements is the highest.", "input_data": "max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])", "expected_output": "[10, 11, 12]", "assertion": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]"}
{"problem_name": "19", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find whether a given array of integers contains any duplicate element.\n```\nTest:\n```\nassert test_duplicate(([1,2,3,4,5]))==False\n```\n\n\n\nAnswer:\n```python\ndef test_duplicate(arr):\n    return len(arr)!= len(set(arr))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find whether a given array of integers contains any duplicate element.", "input_data": "test_duplicate(([1,2,3,4,5]))", "expected_output": "False", "assertion": "assert test_duplicate(([1,2,3,4,5]))==False"}
{"problem_name": "564", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n```\nTest:\n```\nassert count_Pairs([1,2,1],3) == 2\n```\n\n\n\nAnswer:\n```python\ndef count_Pairs(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == k:\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.", "input_data": "count_Pairs([1,2,1],3)", "expected_output": "2", "assertion": "assert count_Pairs([1,2,1],3) == 2"}
{"problem_name": "127", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to multiply two integers.\n```\nTest:\n```\nassert multiply_int(10,20)==200\n```\n\n\n\nAnswer:\n```python\ndef multiply_int(a, b):\n    return a * b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to multiply two integers.", "input_data": "multiply_int(10,20)", "expected_output": "200", "assertion": "assert multiply_int(10,20)==200"}
{"problem_name": "91", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if a string is present as a substring in a given list of string values.\n```\nTest:\n```\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n```\n\n\n\nAnswer:\n```python\ndef find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if a string is present as a substring in a given list of string values.", "input_data": "find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")", "expected_output": "True", "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"problem_name": "66", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of positive numbers in a list.\n```\nTest:\n```\nassert pos_count([1,-2,3,-4]) == 2\n```\n\n\n\nAnswer:\n```python\ndef pos_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of positive numbers in a list.", "input_data": "pos_count([1,-2,3,-4])", "expected_output": "2", "assertion": "assert pos_count([1,-2,3,-4]) == 2"}
{"problem_name": "780", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n```\nTest:\n```\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n```\n\n\n\nAnswer:\n```python\ndef find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/", "input_data": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])", "expected_output": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assertion": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"problem_name": "567", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether a specified list is sorted or not.\n```\nTest:\n```\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n```\n\n\n\nAnswer:\n```python\ndef issort_list(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether a specified list is sorted or not.", "input_data": "issort_list([1,2,4,6,8,10,12,14,16,17])", "expected_output": "True", "assertion": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True"}
{"problem_name": "619", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to move all the numbers to the end of the given string.\n```\nTest:\n```\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n```\n\n\n\nAnswer:\n```python\ndef move_num(s):\n    return ''.join([c for c in s if not c.isdigit()]) + ''.join([c for c in s if c.isdigit()])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to move all the numbers to the end of the given string.", "input_data": "move_num('I1love143you55three3000thousand')", "expected_output": "'Iloveyouthreethousand1143553000'", "assertion": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"problem_name": "393", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the list with maximum length.\n```\nTest:\n```\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n```\n\n\n\nAnswer:\n```python\ndef max_length_list(lists):\n    max_length = 0\n    max_list = []\n    for l in lists:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_length, max_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the list with maximum length.", "input_data": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"problem_name": "620", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n```\nTest:\n```\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n```\n\n\n\nAnswer:\n```python\ndef largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.", "input_data": "largest_subset([ 1, 3, 6, 13, 17, 18 ])", "expected_output": "4", "assertion": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4"}
{"problem_name": "160", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n```\nTest:\n```\nassert find_solution(2, 3, 7) == (2, 1)\n```\n\n\n\nAnswer:\n```python\ndef find_solution(a, b, n):\n    for x in range(n + 1):\n        if (n - a * x) % b == 0:\n            return (x, (n - a * x) // b)\n    return None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.", "input_data": "find_solution(2, 3, 7)", "expected_output": "(2, 1)", "assertion": "assert find_solution(2, 3, 7) == (2, 1)"}
{"problem_name": "787", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that matches a string that has an a followed by three 'b'.\n```\nTest:\n```\nassert not text_match_three(\"ac\")\n```\n\n\n\nAnswer:\n```python\ndef text_match_three(text):\n    return text.startswith(\"a\") and text[1:].count(\"b\") == 3\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that matches a string that has an a followed by three 'b'.", "input_data": "text_match_three(\"ac\")", "expected_output": "False", "assertion": "assert not text_match_three(\"ac\")"}
{"problem_name": "86", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find nth centered hexagonal number.\n```\nTest:\n```\nassert centered_hexagonal_number(10) == 271\n```\n\n\n\nAnswer:\n```python\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find nth centered hexagonal number.", "input_data": "centered_hexagonal_number(10)", "expected_output": "271", "assertion": "assert centered_hexagonal_number(10) == 271"}
{"problem_name": "436", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to return the negative numbers in a list.\n```\nTest:\n```\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n```\n\n\n\nAnswer:\n```python\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to return the negative numbers in a list.", "input_data": "neg_nos([-1,4,5,-6])", "expected_output": "[-1,-6]", "assertion": "assert neg_nos([-1,4,5,-6]) == [-1,-6]"}
{"problem_name": "568", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to create a list of N empty dictionaries.\n```\nTest:\n```\nassert empty_list(5)==[{},{},{},{},{}]\n```\n\n\n\nAnswer:\n```python\ndef empty_list(N):\n    return [{} for _ in range(N)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to create a list of N empty dictionaries.", "input_data": "empty_list(5)", "expected_output": "[{},{},{},{},{}]", "assertion": "assert empty_list(5)==[{},{},{},{},{}]"}
{"problem_name": "113", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if a string represents an integer or not.\n```\nTest:\n```\nassert check_integer(\"python\")==False\n```\n\n\n\nAnswer:\n```python\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if a string represents an integer or not.", "input_data": "check_integer(\"python\")", "expected_output": "False", "assertion": "assert check_integer(\"python\")==False"}
{"problem_name": "69", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether a list contains the given sublist or not.\n```\nTest:\n```\nassert is_sublist([2,4,3,5,7],[3,7])==False\n```\n\n\n\nAnswer:\n```python\ndef is_sublist(list1, list2):\n    if len(list2) > len(list1):\n        return False\n    for i in range(len(list1) - len(list2) + 1):\n        if list1[i:i+len(list2)] == list2:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether a list contains the given sublist or not.", "input_data": "is_sublist([2,4,3,5,7],[3,7])", "expected_output": "False", "assertion": "assert is_sublist([2,4,3,5,7],[3,7])==False"}
{"problem_name": "125", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n```\nTest:\n```\nassert find_length(\"11000010001\") == 6\n```\n\n\n\nAnswer:\n```python\ndef find_length(s):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for c in s:\n        if c == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "input_data": "find_length(\"11000010001\")", "expected_output": "6", "assertion": "assert find_length(\"11000010001\") == 6"}
{"problem_name": "11", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to remove first and last occurrence of a given character from the string.\n```\nTest:\n```\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n```\n\n\n\nAnswer:\n```python\ndef remove_Occ(string, char):\n    return string.replace(char, \"\", 1).rsplit(char, 1)[0]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to remove first and last occurrence of a given character from the string.", "input_data": "remove_Occ(\"hello\",\"l\")", "expected_output": "\"heo\"", "assertion": "assert remove_Occ(\"hello\",\"l\") == \"heo\""}
{"problem_name": "391", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert more than one list to nested dictionary.\n```\nTest:\n```\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"],[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef convert_list_dictionary(list1, list2, list3):\n    return [{f'S{i+1}': {f'{list2[i]}': list3[i]}} for i in range(len(list1))]\n```\n\nThis implementation uses a list comprehension to iterate over the lists and create a nested dictionary for each element in the first list. The keys of the inner dictionary are the elements of the second list, and the values are the elements of the third list.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert more than one list to nested dictionary.", "input_data": "convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])", "expected_output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assertion": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"problem_name": "108", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to merge three lists into a single sorted list.\n```\nTest:\n```\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n```\n\n\n\nAnswer:\n```python\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            merged_list.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        else:\n            merged_list.append(list3[k])\n            k += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    merged_list += list3[k:]\n    return merged_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to merge three lists into a single sorted list.", "input_data": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])", "expected_output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assertion": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"problem_name": "594", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the difference of the first even and first odd number of a given list.\n```\nTest:\n```\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n```\n\n\n\nAnswer:\n```python\ndef diff_even_odd(nums):\n    even = odd = None\n    for num in nums:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = abs(even - num)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = abs(odd - num)\n    return even - odd\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the difference of the first even and first odd number of a given list.", "input_data": "diff_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "3", "assertion": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3"}
{"problem_name": "591", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to interchange the first and last elements in a list.\n```\nTest:\n```\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n```\n\n\n\nAnswer:\n```python\ndef swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to interchange the first and last elements in a list.", "input_data": "swap_List([12, 35, 9, 56, 24])", "expected_output": "[24, 35, 9, 56, 12]", "assertion": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"problem_name": "63", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n```\nTest:\n```\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n```\n\n\n\nAnswer:\n```python\ndef max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum difference between available pairs in the given tuple list.", "input_data": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])", "expected_output": "7", "assertion": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"problem_name": "759", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n```\nTest:\n```\nassert is_decimal('123.11')==True\n```\n\n\n\nAnswer:\n```python\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether a given string is a decimal number with a precision of 2.", "input_data": "is_decimal('123.11')", "expected_output": "True", "assertion": "assert is_decimal('123.11')==True"}
{"problem_name": "730", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove consecutive duplicates of a given list.\n```\nTest:\n```\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n```\n\n\n\nAnswer:\n```python\ndef consecutive_duplicates(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i-1]:\n            result.append(nums[i])\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove consecutive duplicates of a given list.", "input_data": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assertion": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"problem_name": "397", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the median of three numbers.\n```\nTest:\n```\nassert median_numbers(25,55,65)==55.0\n```\n\n\n\nAnswer:\n```python\ndef median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the median of three numbers.", "input_data": "median_numbers(25,55,65)", "expected_output": "55.0", "assertion": "assert median_numbers(25,55,65)==55.0"}
{"problem_name": "165", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n```\nTest:\n```\nassert count_char_position(\"xbcefg\") == 2\n```\n\n\n\nAnswer:\n```python\ndef count_char_position(s):\n    count = 0\n    for i, c in enumerate(s.lower()):\n        if c == chr(ord('a') + i):\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).", "input_data": "count_char_position(\"xbcefg\")", "expected_output": "2", "assertion": "assert count_char_position(\"xbcefg\") == 2"}
{"problem_name": "123", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sum all amicable numbers from 1 to a specified number.\n```\nTest:\n```\nassert amicable_numbers_sum(999)==504\n```\n\n\n\nAnswer:\n```python\ndef amicable_numbers_sum(n):\n    def get_sum_of_factors(num):\n        sum_of_factors = 0\n        for i in range(1, num):\n            if num % i == 0:\n                sum_of_factors += i\n        return sum_of_factors\n\n    amicable_numbers = []\n    for i in range(1, n+1):\n        sum_of_factors = get_sum_of_factors(i)\n        if sum_of_factors > i and sum_of_factors <= n and get_sum_of_factors(sum_of_factors) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_of_factors)\n\n    return sum(amicable_numbers)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sum all amicable numbers from 1 to a specified number.", "input_data": "amicable_numbers_sum(999)", "expected_output": "504", "assertion": "assert amicable_numbers_sum(999)==504"}
{"problem_name": "723", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n```\nTest:\n```\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n```\n\n\n\nAnswer:\n```python\ndef count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.", "input_data": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])", "expected_output": "4", "assertion": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4"}
{"problem_name": "623", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to compute the n-th power of each number in a list.\n```\nTest:\n```\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n\n\nAnswer:\n```python\ndef nth_nums(nums, n):\n    return [num ** n for num in nums]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to compute the n-th power of each number in a list.", "input_data": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)", "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assertion": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"problem_name": "720", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n```\nTest:\n```\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n```\n\n\n\nAnswer:\n```python\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to add a dictionary to the tuple. The output should be a tuple.", "input_data": "add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )", "expected_output": "(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assertion": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"problem_name": "771", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n```\nTest:\n```\nassert check_expression(\"{()}[{}]\") == True\n```\n\n\n\nAnswer:\n```python\ndef check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in expression:\n        if char in mapping:\n            if not stack or mapping[char]!= stack[-1]:\n                return False\n            stack.pop()\n        else:\n            stack.append(char)\n    return not stack\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/", "input_data": "check_expression(\"{()}[{}]\")", "expected_output": "True", "assertion": "assert check_expression(\"{()}[{}]\") == True"}
{"problem_name": "414", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n```\nTest:\n```\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n```\n\n\n\nAnswer:\n```python\ndef overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether any value in a sequence exists in a sequence or not.", "input_data": "overlapping([1,2,3,4,5],[6,7,8,9])", "expected_output": "False", "assertion": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"problem_name": "161", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove all elements from a given list present in another list.\n```\nTest:\n```\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n```\n\n\n\nAnswer:\n```python\ndef remove_elements(list1, list2):\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove all elements from a given list present in another list.", "input_data": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 10]", "assertion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"problem_name": "746", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n```\nTest:\n```\nassert sector_area(4,45)==6.283185307179586\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    return (angle / 360) * math.pi * radius ** 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.", "input_data": "sector_area(4,45)", "expected_output": "6.283185307179586", "assertion": "assert sector_area(4,45)==6.283185307179586"}
{"problem_name": "633", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n```\nTest:\n```\nassert pair_xor_Sum([5,9,7,6],4) == 47\n```\n\n\n\nAnswer:\n```python\ndef pair_xor_Sum(nums, k):\n    xor_sum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of xor of all pairs of numbers in the given list.", "input_data": "pair_xor_Sum([5,9,7,6],4)", "expected_output": "47", "assertion": "assert pair_xor_Sum([5,9,7,6],4) == 47"}
{"problem_name": "282", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to subtract two lists element-wise.\n```\nTest:\n```\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n```\n\n\n\nAnswer:\n```python\ndef sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to subtract two lists element-wise.", "input_data": "sub_list([1, 2, 3],[4,5,6])", "expected_output": "[-3,-3,-3]", "assertion": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"}
{"problem_name": "770", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n```\nTest:\n```\nassert odd_num_sum(2) == 82\n```\n\n\n\nAnswer:\n```python\ndef odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i ** 4\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "input_data": "odd_num_sum(2)", "expected_output": "82", "assertion": "assert odd_num_sum(2) == 82"}
{"problem_name": "260", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth newman–shanks–williams prime number.\n```\nTest:\n```\nassert newman_prime(3) == 7\n```\n\n\n\nAnswer:\n```python\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth newman–shanks–williams prime number.", "input_data": "newman_prime(3)", "expected_output": "7", "assertion": "assert newman_prime(3) == 7"}
{"problem_name": "458", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the area of a rectangle.\n```\nTest:\n```\nassert rectangle_area(10,20)==200\n```\n\n\n\nAnswer:\n```python\ndef rectangle_area(length, width):\n    return length * width\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the area of a rectangle.", "input_data": "rectangle_area(10,20)", "expected_output": "200", "assertion": "assert rectangle_area(10,20)==200"}
{"problem_name": "725", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract values between quotation marks \" \" of the given string.\n```\nTest:\n```\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53','multi', 'Processor']\n```\n\n\n\nAnswer:\n```python\ndef extract_quotation(string):\n    quotation_marks = '\"'\n    words = string.split()\n    quotation_words = []\n    for word in words:\n        if word.startswith(quotation_marks) and word.endswith(quotation_marks):\n            quotation_words.append(word[1:-1])\n    return quotation_words\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract values between quotation marks \" \" of the given string.", "input_data": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')", "expected_output": "['A53', 'multi', 'Processor']", "assertion": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"problem_name": "776", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n```\nTest:\n```\nassert count_vowels('bestinstareels') == 7\n```\n\n\n\nAnswer:\n```python\ndef count_vowels(s):\n    count = 0\n    vowels = set('aeiou')\n    for i in range(1, len(s)):\n        if s[i] in vowels and s[i-1] in vowels:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count those characters which have vowels as their neighbors in the given string.", "input_data": "count_vowels('bestinstareels')", "expected_output": "7", "assertion": "assert count_vowels('bestinstareels') == 7"}
{"problem_name": "445", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n```\nTest:\n```\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n```\n\n\n\nAnswer:\n```python\ndef index_multiplication(tuple1, tuple2):\n    return tuple(map(lambda x, y: x * y, tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "input_data": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )", "expected_output": "((6, 21), (12, 45), (2, 9), (7, 30))", "assertion": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"problem_name": "599", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find sum and average of first n natural numbers.\n```\nTest:\n```\nassert sum_average(10)==(55, 5.5)\n```\n\n\n\nAnswer:\n```python\ndef sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find sum and average of first n natural numbers.", "input_data": "sum_average(10)", "expected_output": "(55, 5.5)", "assertion": "assert sum_average(10)==(55, 5.5)"}
{"problem_name": "104", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort each sublist of strings in a given list of lists.\n```\nTest:\n```\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n\n\nAnswer:\n```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"problem_name": "92", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given number is undulating or not.\n```\nTest:\n```\nassert is_undulating(1212121) == True\n```\n\n\n\nAnswer:\n```python\ndef is_undulating(num):\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if num_str[i]!= num_str[i-1]:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given number is undulating or not.", "input_data": "is_undulating(1212121)", "expected_output": "True", "assertion": "assert is_undulating(1212121) == True"}
{"problem_name": "248", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef harmonic_sum(n):\n    return sum([1/i for i in range(1, n)])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "291", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n```\nTest:\n```\nassert count_no_of_ways(2, 4) == 16\n```\n\n\n\nAnswer:\n```python\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        return (k * count_no_of_ways(n - 1, k)) + (k * (k - 1) * count_no_of_ways(n - 2, k))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "input_data": "count_no_of_ways(2, 4)", "expected_output": "16", "assertion": "assert count_no_of_ways(2, 4) == 16"}
{"problem_name": "409", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n```\nTest:\n```\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n```\n\n\n\nAnswer:\n```python\ndef min_product_tuple(tuples):\n    min_product = float('inf')\n    for t1 in tuples:\n        for t2 in tuples:\n            if t1!= t2:\n                product = t1[0] * t1[1] * t2[0] * t2[1]\n                min_product = min(min_product, product)\n    return min_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the minimum product from the pairs of tuples within a given list.", "input_data": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "8", "assertion": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"problem_name": "637", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given amount has no profit and no loss\n```\nTest:\n```\nassert noprofit_noloss(1500,1200)==False\n```\n\n\n\nAnswer:\n```python\ndef noprofit_noloss(amount, cost):\n    return amount == cost\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given amount has no profit and no loss", "input_data": "noprofit_noloss(1500,1200)", "expected_output": "False", "assertion": "assert noprofit_noloss(1500,1200)==False"}
{"problem_name": "126", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of common divisors of two given numbers.\n```\nTest:\n```\nassert sum(10,15) == 6\n```\n\n\n\nAnswer:\n```python\ndef sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of common divisors of two given numbers.", "input_data": "sum(10,15)", "expected_output": "6", "assertion": "assert sum(10,15) == 6"}
{"problem_name": "295", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to return the sum of all divisors of a number.\n```\nTest:\n```\nassert sum_div(8)==7\n```\n\n\n\nAnswer:\n```python\ndef sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to return the sum of all divisors of a number.", "input_data": "sum_div(8)", "expected_output": "7", "assertion": "assert sum_div(8)==7"}
{"problem_name": "65", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to flatten a list and sum all of its elements.\n```\nTest:\n```\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n```\n\n\n\nAnswer:\n```python\ndef recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to flatten a list and sum all of its elements.", "input_data": "recursive_list_sum(([1, 2, [3,4],[5,6]]))", "expected_output": "21", "assertion": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"}
{"problem_name": "764", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count number of digits in a given string.\n```\nTest:\n```\nassert number_ctr('program2bedone') == 1\n```\n\n\n\nAnswer:\n```python\ndef number_ctr(string):\n    return len(string)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count number of digits in a given string.", "input_data": "number_ctr('program2bedone')", "expected_output": "1", "assertion": "assert number_ctr('program2bedone') == 1"}
{"problem_name": "758", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n```\nTest:\n```\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef unique_sublists(lst):\n    unique_tuples = set()\n    counts = {}\n\n    for sublist in lst:\n        unique_tuples.add(tuple(sublist))\n\n    for unique_tuple in unique_tuples:\n        counts[unique_tuple] = lst.count(unique_tuple)\n\n    return counts\n```\n\nThis implementation uses a set to store unique tuples and a dictionary to store the counts of each unique tuple. It iterates through the list of lists and converts each list to a tuple. It then adds the tuple to the set if it is not already present. Finally, it iterates through the set of unique tuples and counts the number of occurrences of each tuple in the original list. The counts are stored in the dictionary and returned.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"problem_name": "408", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n```\nTest:\n```\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n```\n\n\n\nAnswer:\n```python\ndef k_smallest_pairs(arr1, arr2, k):\n    result = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            result.append((arr1[i], arr2[j]))\n    result.sort(key=lambda x: x[0])\n    return result[:k]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.", "input_data": "k_smallest_pairs([1,3,7],[2,4,6],2)", "expected_output": "[[1, 2], [1, 4]]", "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]"}
{"problem_name": "622", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the median of two sorted lists of same size.\n```\nTest:\n```\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n```\n\n\n\nAnswer:\n```python\ndef get_median(nums1, nums2, k):\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 > n2:\n        nums1, nums2 = nums2, nums1\n        n1, n2 = n2, n1\n    i_max = min(k, n1)\n    j_max = min(k - i_max, n2)\n    sum_max = float('-inf')\n    for i in range(i_max + 1):\n        j = k - i\n        sum_ij = nums1[i] + nums2[j]\n        if i == 0:\n            sum_max = sum_ij\n        else:\n            if sum_ij < sum_max:\n                break\n            sum_max = sum_ij\n    return sum_max\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the median of two sorted lists of same size.", "input_data": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)", "expected_output": "16.0", "assertion": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"problem_name": "62", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find smallest number in a list.\n```\nTest:\n```\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n```\n\n\n\nAnswer:\n```python\ndef smallest_num(nums):\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find smallest number in a list.", "input_data": "smallest_num([10, 20, 1, 45, 99])", "expected_output": "1", "assertion": "assert smallest_num([10, 20, 1, 45, 99]) == 1"}
{"problem_name": "132", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a tuple to a string.\n```\nTest:\n```\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))==(\"exercises\")\n```\n\n\n\nAnswer:\n```python\ndef tup_string(tup):\n    return ''.join(tup)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a tuple to a string.", "input_data": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))", "expected_output": "(\"exercises\")", "assertion": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")"}
{"problem_name": "784", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the product of first even and odd number of a given list.\n```\nTest:\n```\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n```\n\n\n\nAnswer:\n```python\ndef mul_even_odd(nums):\n    even_product = 1\n    odd_product = 1\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_product *= nums[i]\n        else:\n            odd_product *= nums[i]\n    return even_product * odd_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the product of first even and odd number of a given list.", "input_data": "mul_even_odd([1,3,5,7,4,1,6,8])", "expected_output": "4", "assertion": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"problem_name": "77", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find whether a number is divisible by 11.\n```\nTest:\n```\nassert is_Diff (12345) == False\n```\n\n\n\nAnswer:\n```python\ndef is_Divisible_by_11(num):\n    sum_of_odd_digits = 0\n    sum_of_even_digits = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        if (temp % 2 == 0):\n            sum_of_even_digits += digit\n        else:\n            sum_of_odd_digits += digit\n        temp //= 10\n    return (sum_of_odd_digits - sum_of_even_digits) % 11 == 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find whether a number is divisible by 11.", "input_data": "is_Diff (12345)", "expected_output": "False", "assertion": "assert is_Diff (12345) == False"}
{"problem_name": "644", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to reverse an array upto a given position.\n```\nTest:\n```\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n```\n\n\n\nAnswer:\n```python\ndef reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to reverse an array upto a given position.", "input_data": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)", "expected_output": "[4, 3, 2, 1, 5, 6]", "assertion": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"problem_name": "421", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to concatenate each element of tuple by the delimiter.\n```\nTest:\n```\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n```\n\n\n\nAnswer:\n```python\ndef concatenate_tuple(tuple_to_concatenate):\n    return '-'.join(map(str, tuple_to_concatenate))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to concatenate each element of tuple by the delimiter.", "input_data": "concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )", "expected_output": "'ID-is-4-UTS'", "assertion": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"problem_name": "7", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find all words which are at least 4 characters long in a string.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef find_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find all words which are at least 4 characters long in a string.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "262", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n```\nTest:\n```\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n```\n\n\n\nAnswer:\n```python\ndef split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.", "input_data": "split_two_parts([1,1,2,3,4,4,5,1],3)", "expected_output": "([1, 1, 2], [3, 4, 4, 5, 1])", "assertion": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"problem_name": "417", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find common first element in given list of tuple.\n```\nTest:\n```\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef group_tuples(tuples):\n    grouped_tuples = []\n    for i, (x, y) in enumerate(tuples):\n        if i == 0:\n            grouped_tuples.append((x, y))\n        else:\n            for j, (x1, y1) in enumerate(grouped_tuples):\n                if x == x1:\n                    grouped_tuples[j] = (x, y, y1)\n                    break\n            else:\n                grouped_tuples.append((x, y))\n    return grouped_tuples\n```\n\nThis implementation iterates through the list of tuples and checks if the first element of each tuple is already present in the grouped tuples. If it is, it appends the second element to the existing tuple. If it is not, it creates a new tuple with the first element and the second element.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find common first element in given list of tuple.", "input_data": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])", "expected_output": "[('x', 'y', 'z'), ('w', 't')]", "assertion": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"}
{"problem_name": "278", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n```\nTest:\n```\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n```\n\n\n\nAnswer:\n```python\ndef count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.", "input_data": "count_first_elements((1, 5, 7, (4, 6), 10) )", "expected_output": "3", "assertion": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"}
{"problem_name": "476", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of the largest and smallest value in a given array.\n```\nTest:\n```\nassert big_sum([1,2,3]) == 4\n```\n\n\n\nAnswer:\n```python\ndef big_sum(arr):\n    return max(arr) + min(arr)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of the largest and smallest value in a given array.", "input_data": "big_sum([1,2,3])", "expected_output": "4", "assertion": "assert big_sum([1,2,3]) == 4"}
{"problem_name": "240", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n```\nTest:\n```\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n```\n\n\n\nAnswer:\n```python\ndef replace_list(list1, list2):\n    list1[-len(list2):] = list2\n    return list1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.", "input_data": "replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])", "expected_output": "[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assertion": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"problem_name": "741", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether all the characters are same or not.\n```\nTest:\n```\nassert all_Characters_Same(\"python\") == False\n```\n\n\n\nAnswer:\n```python\ndef all_Characters_same(string):\n    return len(set(string)) == 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether all the characters are same or not.", "input_data": "all_Characters_Same(\"python\")", "expected_output": "False", "assertion": "assert all_Characters_Same(\"python\") == False"}
{"problem_name": "463", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum product subarray of the given array.\n```\nTest:\n```\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n```\n\n\n\nAnswer:\n```python\ndef max_subarray_product(nums):\n    max_product = float('-inf')\n    min_product = float('inf')\n    for num in nums:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n    return max_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum product subarray of the given array.", "input_data": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])", "expected_output": "112", "assertion": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"problem_name": "79", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the length of the word is odd or not.\n```\nTest:\n```\nassert word_len(\"Hadoop\") == False\n```\n\n\n\nAnswer:\n```python\ndef word_len(word):\n    return len(word) % 2!= 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the length of the word is odd or not.", "input_data": "word_len(\"Hadoop\")", "expected_output": "False", "assertion": "assert word_len(\"Hadoop\") == False"}
{"problem_name": "120", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n```\nTest:\n```\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n```\n\n\n\nAnswer:\n```python\ndef max_product_tuple(tuples):\n    max_product = float('-inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = abs(tuples[i][0] * tuples[i][1]) * abs(tuples[j][0] * tuples[j][1])\n            max_product = max(max_product, product)\n    return max_product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "input_data": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )", "expected_output": "36", "assertion": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36"}
{"problem_name": "75", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n```\nTest:\n```\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n```\n\n\n\nAnswer:\n```python\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "input_data": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)", "expected_output": "[(6, 24, 12)]", "assertion": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"problem_name": "244", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the next perfect square greater than a given number.\n```\nTest:\n```\nassert next_Perfect_Square(35) == 36\n```\n\n\n\nAnswer:\n```python\ndef next_Perfect_Square(n):\n    return int(n**0.5 + 1)**2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the next perfect square greater than a given number.", "input_data": "next_Perfect_Square(35)", "expected_output": "36", "assertion": "assert next_Perfect_Square(35) == 36"}
{"problem_name": "434", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that matches a string that has an a followed by one or more b's.\n```\nTest:\n```\nassert text_match_one(\"ac\")==False\n```\n\n\n\nAnswer:\n```python\nimport re\n\ndef text_match_one(text):\n    return bool(re.match(r\"a[b]+\", text))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that matches a string that has an a followed by one or more b's.", "input_data": "text_match_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_one(\"ac\")==False"}
{"problem_name": "721", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n```\nTest:\n```\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    n = len(matrix)\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            total_cost = matrix[i][j]\n            visited_cells = 1\n            if i > 0:\n                total_cost += matrix[i - 1][j]\n                visited_cells += 1\n            if j > 0:\n                total_cost += matrix[i][j - 1]\n                visited_cells += 1\n            avg = total_cost / visited_cells\n            max_avg = max(max_avg, avg)\n\n    return max_avg\n```\n\nThis implementation iterates through each cell in the matrix and calculates the average cost of the path that starts from that cell. It considers the cell itself and the cells above and to the left of it. The average cost is calculated as the total cost of the path divided by the number of cells visited in the path. The maximum average cost is updated as the algorithm progresses.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.", "input_data": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])", "expected_output": "5.2", "assertion": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"problem_name": "129", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate whether the matrix is a magic square.\n```\nTest:\n```\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n```\n\n\n\nAnswer:\n```python\ndef magic_square_test(matrix):\n    # Check if the matrix is a square\n    if len(matrix)!= len(matrix[0]):\n        return False\n\n    # Check if the sum of each row is equal\n    for row in matrix:\n        if sum(row)!= sum(matrix[0]):\n            return False\n\n    # Check if the sum of each column is equal\n    for i in range(len(matrix[0])):\n        column_sum = sum(row[i] for row in matrix)\n        if column_sum!= sum(matrix[0]):\n            return False\n\n    # Check if the sum of the main diagonal is equal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    if main_diagonal_sum!= sum(matrix[0]):\n        return False\n\n    # Check if the sum of the secondary diagonal is equal\n    secondary_diagonal_sum = sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix)))\n    if secondary_diagonal_sum!= sum(matrix[0]):\n        return False\n\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate whether the matrix is a magic square.", "input_data": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])", "expected_output": "True", "assertion": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True"}
{"problem_name": "557", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to toggle the case of all characters in a string.\n```\nTest:\n```\nassert toggle_string(\"Python\")==(\"pYTHON\")\n```\n\n\n\nAnswer:\n```python\ndef toggle_string(s):\n    return s.swapcase()\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to toggle the case of all characters in a string.", "input_data": "toggle_string(\"Python\")", "expected_output": "(\"pYTHON\")", "assertion": "assert toggle_string(\"Python\")==(\"pYTHON\")"}
{"problem_name": "754", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n```\nTest:\n```\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n```\n\n\n\nAnswer:\n```python\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.", "input_data": "extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])", "expected_output": "[1, 7]", "assertion": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]"}
{"problem_name": "264", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate a dog's age in dog's years.\n```\nTest:\n```\nassert dog_age(12)==61\n```\n\n\n\nAnswer:\n```python\ndef dog_age(human_age):\n    dog_age = human_age * 7\n    return dog_age\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate a dog's age in dog's years.", "input_data": "dog_age(12)", "expected_output": "61", "assertion": "assert dog_age(12)==61"}
{"problem_name": "808", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given tuples contain the k or not.\n```\nTest:\n```\nassert check_K((10, 4, 5, 6, 8), 6) == True\n```\n\n\n\nAnswer:\n```python\ndef check_K(tuples, k):\n    return k in tuples\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given tuples contain the k or not.", "input_data": "check_K((10, 4, 5, 6, 8), 6)", "expected_output": "True", "assertion": "assert check_K((10, 4, 5, 6, 8), 6) == True"}
{"problem_name": "782", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n```\nTest:\n```\nassert odd_length_sum([1,2,4]) == 14\n```\n\n\n\nAnswer:\n```python\ndef odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(0, n, 2):\n        for j in range(i, min(i + 2, n)):\n            sum += arr[j]\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/", "input_data": "odd_length_sum([1,2,4])", "expected_output": "14", "assertion": "assert odd_length_sum([1,2,4]) == 14"}
{"problem_name": "450", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract specified size of strings from a given list of string values.\n```\nTest:\n```\nassert extract_string(['Python', 'list', 'exercises', 'practice','solution'],8)==['practice','solution']\n```\n\n\n\nAnswer:\n```python\ndef extract_string(string_list, size):\n    return [string for string in string_list if len(string) == size]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract specified size of strings from a given list of string values.", "input_data": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)", "expected_output": "['practice', 'solution']", "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"}
{"problem_name": "462", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find all possible combinations of the elements of a given list.\n```\nTest:\n```\nassert combinations_list(['orange','red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green','red'], ['green','red', 'orange'], ['blue'], ['blue', 'orange'], ['blue','red'], ['blue','red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green','red'], ['blue', 'green','red', 'orange']]\n```\n\n\n\nAnswer:\n```python\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find all possible combinations of the elements of a given list.", "input_data": "combinations_list(['orange', 'red', 'green', 'blue'])", "expected_output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assertion": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"problem_name": "245", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n```\nTest:\n```\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n```\n\n\n\nAnswer:\n```python\ndef max_sum(arr):\n    max_inc = [arr[0]]\n    max_dec = [arr[0]]\n\n    for i in range(1, len(arr)):\n        max_inc.append(max(max_inc[i - 1], arr[i]))\n        max_dec.append(max(max_dec[i - 1], arr[len(arr) - 1 - i]))\n\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, max_inc[i] + max_dec[len(arr) - 1 - i] - arr[i])\n\n    return max_sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.", "input_data": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])", "expected_output": "194", "assertion": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"problem_name": "18", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove characters from the first string which are present in the second string.\n```\nTest:\n```\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n```\n\n\n\nAnswer:\n```python\ndef remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove characters from the first string which are present in the second string.", "input_data": "remove_dirty_chars(\"probasscurve\", \"pros\")", "expected_output": "'bacuve'", "assertion": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"problem_name": "268", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find then'th star number.\n```\nTest:\n```\nassert find_star_num(3) == 37\n```\n\n\n\nAnswer:\n```python\ndef find_star_num(n):\n    return n * (n + 1) // 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the n'th star number.", "input_data": "find_star_num(3)", "expected_output": "37", "assertion": "assert find_star_num(3) == 37"}
{"problem_name": "233", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the lateral surface area of a cylinder.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef lateral_surface_area(radius, height):\n    return 2 * 3.14 * radius * height\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the lateral surface area of a cylinder.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "269", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the ascii value of a character.\n```\nTest:\n```\nassert ascii_value('A')==65\n```\n\n\n\nAnswer:\n```python\ndef ascii_value(char):\n    return ord(char)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the ascii value of a character.", "input_data": "ascii_value('A')", "expected_output": "65", "assertion": "assert ascii_value('A')==65"}
{"problem_name": "752", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n```\nTest:\n```\nassert jacobsthal_num(5) == 11\n```\n\n\n\nAnswer:\n```python\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...", "input_data": "jacobsthal_num(5)", "expected_output": "11", "assertion": "assert jacobsthal_num(5) == 11"}
{"problem_name": "781", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n```\nTest:\n```\nassert count_divisors(10)\n```\n\n\n\nAnswer:\n```python\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php", "input_data": "count_divisors(10)", "expected_output": "True", "assertion": "assert count_divisors(10)"}
{"problem_name": "627", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n```\nTest:\n```\nassert find_First_Missing([0,1,2,3]) == 4\n```\n\n\n\nAnswer:\n```python\ndef find_First_Missing(nums):\n    if not nums:\n        return 0\n    for i in range(len(nums)):\n        if nums[i]!= i:\n            return i\n    return len(nums)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the smallest missing number from a sorted list of natural numbers.", "input_data": "find_First_Missing([0,1,2,3])", "expected_output": "4", "assertion": "assert find_First_Missing([0,1,2,3]) == 4"}
{"problem_name": "565", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to split a string into characters.\n```\nTest:\n```\nassert split('python') == ['p','y','t','h','o','n']\n```\n\n\n\nAnswer:\n```python\ndef split(string):\n    return list(string)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to split a string into characters.", "input_data": "split('python')", "expected_output": "['p','y','t','h','o','n']", "assertion": "assert split('python') == ['p','y','t','h','o','n']"}
{"problem_name": "590", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert polar coordinates to rectangular coordinates.\n```\nTest:\n```\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n```\n\n\n\nAnswer:\n```python\ndef polar_rect(r, theta):\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return (x, y)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert polar coordinates to rectangular coordinates.", "input_data": "polar_rect(3,4)", "expected_output": "((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assertion": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"problem_name": "797", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n```\nTest:\n```\nassert sum_in_range(2,5) == 8\n```\n\n\n\nAnswer:\n```python\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "input_data": "sum_in_range(2,5)", "expected_output": "8", "assertion": "assert sum_in_range(2,5) == 8"}
{"problem_name": "425", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the number of sublists containing a particular element.\n```\nTest:\n```\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n```\n\n\n\nAnswer:\n```python\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the number of sublists containing a particular element.", "input_data": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)", "expected_output": "3", "assertion": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"}
{"problem_name": "141", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a list of elements.\n```\nTest:\n```\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n```\n\n\n\nAnswer:\n```python\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a list of elements.", "input_data": "pancake_sort([15, 79, 25, 38, 69])", "expected_output": "[15, 25, 38, 69, 79]", "assertion": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"problem_name": "287", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n```\nTest:\n```\nassert square_Sum(2) == 20\n```\n\n\n\nAnswer:\n```python\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.", "input_data": "square_Sum(2)", "expected_output": "20", "assertion": "assert square_Sum(2) == 20"}
{"problem_name": "3", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to identify non-prime numbers.\n```\nTest:\n```\nassert is_not_prime(2) == False\n```\n\n\n\nAnswer:\n```python\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to identify non-prime numbers.", "input_data": "is_not_prime(2)", "expected_output": "False", "assertion": "assert is_not_prime(2) == False"}
{"problem_name": "98", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef multiply_and_divide(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "604", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to reverse words seperated by spaces in a given string.\n```\nTest:\n```\nassert reverse_words(\"python program\")==(\"program python\")\n```\n\n\n\nAnswer:\n```python\ndef reverse_words(s):\n    return \" \".join(s.split()[::-1])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to reverse words seperated by spaces in a given string.", "input_data": "reverse_words(\"python program\")", "expected_output": "(\"program python\")", "assertion": "assert reverse_words(\"python program\")==(\"program python\")"}
{"problem_name": "312", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the volume of a cone.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef cone_volume(radius, height):\n    return (1/3) * 3.14 * radius**2 * height\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the volume of a cone.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "115", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether all dictionaries in a list are empty or not.\n```\nTest:\n```\nassert empty_dit([{},{},{}])==True\n```\n\n\n\nAnswer:\n```python\ndef empty_dit(list_of_dit):\n    for dictionary in list_of_dit:\n        if dictionary:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether all dictionaries in a list are empty or not.", "input_data": "empty_dit([{},{},{}])", "expected_output": "True", "assertion": "assert empty_dit([{},{},{}])==True"}
{"problem_name": "582", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if a dictionary is empty\n```\nTest:\n```\nassert my_dict({10})==False\n```\n\n\n\nAnswer:\n```python\ndef my_dict(d):\n    return bool(d)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if a dictionary is empty", "input_data": "my_dict({10})", "expected_output": "False", "assertion": "assert my_dict({10})==False"}
{"problem_name": "588", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the difference between largest and smallest value in a given list.\n```\nTest:\n```\nassert big_diff([1,2,3,4]) == 3\n```\n\n\n\nAnswer:\n```python\ndef big_diff(nums):\n    return max(nums) - min(nums)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the difference between largest and smallest value in a given list.", "input_data": "big_diff([1,2,3,4])", "expected_output": "3", "assertion": "assert big_diff([1,2,3,4]) == 3"}
{"problem_name": "777", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of non-repeated elements in a given list.\n```\nTest:\n```\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n```\n\n\n\nAnswer:\n```python\ndef find_sum(nums):\n    return sum(set(nums))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of non-repeated elements in a given list.", "input_data": "find_sum([1,2,3,1,1,4,5,6])", "expected_output": "21", "assertion": "assert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"problem_name": "597", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find kth element from the given two sorted arrays.\n```\nTest:\n```\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n```\n\n\n\nAnswer:\n```python\ndef find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    result = []\n    while len(result) < k:\n        if i == len(arr1):\n            result.extend(arr2[j:])\n            break\n        if j == len(arr2):\n            result.extend(arr1[i:])\n            break\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    return result[k - 1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find kth element from the given two sorted arrays.", "input_data": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)", "expected_output": "6", "assertion": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"problem_name": "640", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n```\nTest:\n```\nassert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n```\n\n\n\nAnswer:\n```python\ndef remove_parenthesis(string_list):\n    for i in range(len(string_list)):\n        string_list[i] = string_list[i].replace(\"(\", \"\").replace(\")\", \"\")\n    return string_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove the parenthesis and what is inbetween them from a string.", "input_data": "remove_parenthesis([\"python (chrome)\"])", "expected_output": "(\"python\")", "assertion": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")"}
{"problem_name": "574", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the surface area of a cylinder.\n```\nTest:\n```\nassert surfacearea_cylinder(10,5)==942.45\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef surfacearea_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the surface area of a cylinder.", "input_data": "surfacearea_cylinder(10,5)", "expected_output": "942.45", "assertion": "assert surfacearea_cylinder(10,5)==942.45"}
{"problem_name": "452", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n```\nTest:\n```\nassert loss_amount(1500,1200)==0\n```\n\n\n\nAnswer:\n```python\ndef loss_amount(amount, cost):\n    if amount < cost:\n        return cost - amount\n    else:\n        return 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.", "input_data": "loss_amount(1500,1200)", "expected_output": "0", "assertion": "assert loss_amount(1500,1200)==0"}
{"problem_name": "580", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove uneven elements in the nested mixed tuple.\n```\nTest:\n```\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n```\n\n\n\nAnswer:\n```python\ndef extract_even(mixed_tuple):\n    result = []\n    for item in mixed_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove uneven elements in the nested mixed tuple.", "input_data": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))", "expected_output": "(4, (6, (2, 4)), 6, 8)", "assertion": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"problem_name": "401", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n```\nTest:\n```\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n```\n\n\n\nAnswer:\n```python\ndef add_nested_tuples(tuple1, tuple2):\n    return tuple(map(lambda x, y: (x[0] + y[0], x[1] + y[1]), tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "input_data": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((7, 10), (7, 14), (3, 10), (8, 13))", "assertion": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))"}
{"problem_name": "766", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to return a list of all pairs of consecutive items in a given list.\n```\nTest:\n```\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n```\n\n\n\nAnswer:\n```python\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to return a list of all pairs of consecutive items in a given list.", "input_data": "pair_wise([1,1,2,3,3,4,4,5])", "expected_output": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assertion": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"problem_name": "124", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to get the angle of a complex number.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\nimport cmath\n\ndef get_angle(z):\n    return cmath.phase(z)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to get the angle of a complex number.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "460", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to get the first element of each sublist.\n```\nTest:\n```\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n```\n\n\n\nAnswer:\n```python\ndef Extract(lst):\n    return [lst[i][0] for i in range(len(lst))]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to get the first element of each sublist.", "input_data": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])", "expected_output": "[1, 3, 6]", "assertion": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"problem_name": "611", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function which given a matrix represented as a list of lists returns the max of then'th column.\n```\nTest:\n```\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n```\n\n\n\nAnswer:\n```python\ndef max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.", "input_data": "max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)", "expected_output": "19", "assertion": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"problem_name": "399", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n```\nTest:\n```\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n```\n\n\n\nAnswer:\n```python\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "input_data": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(15, 6, 5, 10)", "assertion": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"}
{"problem_name": "605", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given integer is a prime number.\n```\nTest:\n```\nassert prime_num(13)==True\n```\n\n\n\nAnswer:\n```python\ndef prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given integer is a prime number.", "input_data": "prime_num(13)", "expected_output": "True", "assertion": "assert prime_num(13)==True"}
{"problem_name": "413", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract the nth element from a given list of tuples.\n```\nTest:\n```\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n```\n\n\n\nAnswer:\n```python\ndef extract_nth_element(list_of_tuples, n):\n    return [x[n] for x in list_of_tuples]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract the nth element from a given list of tuples.", "input_data": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)", "expected_output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"problem_name": "437", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove odd characters in a string.\n```\nTest:\n```\nassert remove_odd(\"python\")==(\"yhn\")\n```\n\n\n\nAnswer:\n```python\ndef remove_odd(string):\n    return \"\".join([c for c in string if ord(c)%2==0])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove odd characters in a string.", "input_data": "remove_odd(\"python\")", "expected_output": "(\"yhn\")", "assertion": "assert remove_odd(\"python\")==(\"yhn\")"}
{"problem_name": "167", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n```\nTest:\n```\nassert next_power_of_2(0) == 1\n```\n\n\n\nAnswer:\n```python\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 2**(n.bit_length())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the smallest power of 2 greater than or equal to n.", "input_data": "next_power_of_2(0)", "expected_output": "1", "assertion": "assert next_power_of_2(0) == 1"}
{"problem_name": "456", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to reverse each string in a given list of string values.\n```\nTest:\n```\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n```\n\n\n\nAnswer:\n```python\ndef reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to reverse each string in a given list of string values.", "input_data": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])", "expected_output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assertion": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"problem_name": "229", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n```\nTest:\n```\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n```\n\n\n\nAnswer:\n```python\ndef re_arrange_array(arr, n):\n    negative = [num for num in arr[:n] if num < 0]\n    positive = [num for num in arr[:n] if num >= 0]\n    return negative + positive\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.", "input_data": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)", "expected_output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assertion": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"}
{"problem_name": "576", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether a list is sublist of another or not.\n```\nTest:\n```\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n```\n\n\n\nAnswer:\n```python\ndef is_Sub_Array(arr1, arr2):\n    if len(arr1) < len(arr2):\n        return False\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether a list is sublist of another or not.", "input_data": "is_Sub_Array([1,4,3,5],[1,2])", "expected_output": "False", "assertion": "assert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"problem_name": "625", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to interchange the first and last element in a given list.\n```\nTest:\n```\nassert swap_List([1,2,3]) == [3,2,1]\n```\n\n\n\nAnswer:\n```python\ndef swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to interchange the first and last element in a given list.", "input_data": "swap_List([1,2,3])", "expected_output": "[3,2,1]", "assertion": "assert swap_List([1,2,3]) == [3,2,1]"}
{"problem_name": "270", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of even numbers at even positions of a list.\n```\nTest:\n```\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n```\n\n\n\nAnswer:\n```python\ndef sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of even numbers at even positions of a list.", "input_data": "sum_even_and_even_index([5, 6, 12, 1, 18, 8])", "expected_output": "30", "assertion": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"problem_name": "280", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n```\nTest:\n```\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n```\n\n\n\nAnswer:\n```python\ndef sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).", "input_data": "sequential_search([11,23,58,31,56,77,43,12,65,19],31)", "expected_output": "(True, 3)", "assertion": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"problem_name": "453", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of even factors of a number.\n```\nTest:\n```\nassert sumofFactors(18) == 26\n```\n\n\n\nAnswer:\n```python\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of even factors of a number.", "input_data": "sumofFactors(18)", "expected_output": "26", "assertion": "assert sumofFactors(18) == 26"}
{"problem_name": "390", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to apply a given format string to all of the elements in a list.\n```\nTest:\n```\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n```\n\n\n\nAnswer:\n```python\ndef add_string(list_of_numbers, format_string):\n    return [format_string.format(i) for i in list_of_numbers]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to apply a given format string to all of the elements in a list.", "input_data": "add_string([1,2,3,4],'temp{0}')", "expected_output": "['temp1', 'temp2', 'temp3', 'temp4']", "assertion": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"problem_name": "103", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the Eulerian number a(n, m).\n```\nTest:\n```\nassert eulerian_num(3, 1) == 4\n```\n\n\n\nAnswer:\n```python\ndef eulerian_num(n: int, m: int) -> int:\n    if m == 0:\n        return 1\n    if n == m:\n        return 1\n    return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the Eulerian number a(n, m).", "input_data": "eulerian_num(3, 1)", "expected_output": "4", "assertion": "assert eulerian_num(3, 1) == 4"}
{"problem_name": "307", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to get a colon of a tuple.\n```\nTest:\n```\nassert colon_tuplex((\"HELLO\", 5, [], True),2,50)==(\"HELLO\", 5, [50], True)\n```\n\n\n\nAnswer:\n```python\ndef colon_tuplex(tuplex):\n    return tuplex[:2] + (tuplex[2] + [50],) + tuplex[3:]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to get a colon of a tuple.", "input_data": "colon_tuplex((\"HELLO\", 5, [], True) ,2,50)", "expected_output": "(\"HELLO\", 5, [50], True)", "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)"}
{"problem_name": "140", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to flatten the list of lists into a single set of numbers.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef flatten_list(lst):\n    flattened_list = []\n    for sublist in lst:\n        flattened_list.extend(sublist)\n    return flattened_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to flatten the list of lists into a single set of numbers.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "133", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n```\nTest:\n```\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n```\n\n\n\nAnswer:\n```python\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the sum of the negative numbers of a given list of numbers.", "input_data": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])", "expected_output": "-32", "assertion": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32"}
{"problem_name": "273", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n```\nTest:\n```\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n```\n\n\n\nAnswer:\n```python\ndef substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.", "input_data": "substract_elements((10, 4, 5), (2, 5, 18))", "expected_output": "(8, -1, -13)", "assertion": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"problem_name": "562", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the length of the longest sublists.\n```\nTest:\n```\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n```\n\n\n\nAnswer:\n```python\ndef Find_Max_Length(lists):\n    max_length = 0\n    for sublist in lists:\n        max_length = max(max_length, len(sublist))\n    return max_length\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the length of the longest sublists.", "input_data": "Find_Max_Length([[1],[1,4],[5,6,7,8]])", "expected_output": "4", "assertion": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"problem_name": "598", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given number is armstrong or not.\n```\nTest:\n```\nassert armstrong_number(153)==True\n```\n\n\n\nAnswer:\n```python\ndef armstrong_number(num):\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_cubes = 0\n    for digit in num_str:\n        digit_int = int(digit)\n        sum_of_cubes += digit_int ** num_digits\n    return sum_of_cubes == num\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given number is armstrong or not.", "input_data": "armstrong_number(153)", "expected_output": "True", "assertion": "assert armstrong_number(153)==True"}
{"problem_name": "242", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the total number of characters in a string.\n```\nTest:\n```\nassert count_charac(\"python programming\")==18\n```\n\n\n\nAnswer:\n```python\ndef count_charac(string):\n    return len(string)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the total number of characters in a string.", "input_data": "count_charac(\"python programming\")", "expected_output": "18", "assertion": "assert count_charac(\"python programming\")==18"}
{"problem_name": "432", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the median length of a trapezium.\n```\nTest:\n```\nassert median_trapezium(15,25,35)==20\n```\n\n\n\nAnswer:\n```python\ndef median_trapezium(a, b, c):\n    side_lengths = [a, b, c]\n    side_lengths.sort()\n    return side_lengths[1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the median length of a trapezium.", "input_data": "median_trapezium(15,25,35)", "expected_output": "20", "assertion": "assert median_trapezium(15,25,35)==20"}
{"problem_name": "769", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to get the difference between two lists.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef get_difference(list1, list2):\n    return list(set(list1) - set(list2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to get the difference between two lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "418", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the element of a list having maximum length.\n```\nTest:\n```\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n```\n\n\n\nAnswer:\n```python\ndef Find_Max(list_of_lists):\n    max_length = 0\n    max_list = []\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the element of a list having maximum length.", "input_data": "Find_Max([['A'],['A','B'],['A','B','C']])", "expected_output": "['A','B','C']", "assertion": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"problem_name": "585", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the n most expensive items in a given dataset.\n```\nTest:\n```\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n```\n\n\n\nAnswer:\n```python\ndef expensive_items(data, n):\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    return sorted_data[:n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the n most expensive items in a given dataset.", "input_data": "expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)", "expected_output": "[{'name': 'Item-2', 'price': 555.22}]", "assertion": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"problem_name": "239", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n```\nTest:\n```\nassert get_total_number_of_sequences(10, 4) == 4\n```\n\n\n\nAnswer:\n```python\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return sum(1 for i in range(1, m + 1) for j in range(i, m + 1))\n    else:\n        total = 0\n        for i in range(1, m + 1):\n            for j in range(i, m + 1):\n                total += get_total_number_of_sequences(j, n - 2)\n        return total\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.", "input_data": "get_total_number_of_sequences(10, 4)", "expected_output": "4", "assertion": "assert get_total_number_of_sequences(10, 4) == 4"}
{"problem_name": "734", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n```\nTest:\n```\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n```\n\n\n\nAnswer:\n```python\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            sum += product\n    return sum\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/", "input_data": "sum_Of_Subarray_Prod([1,2,3])", "expected_output": "20", "assertion": "assert sum_Of_Subarray_Prod([1,2,3]) == 20"}
{"problem_name": "429", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract the elementwise and tuples from the given two tuples.\n```\nTest:\n```\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n```\n\n\n\nAnswer:\n```python\ndef and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract the elementwise and tuples from the given two tuples.", "input_data": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))", "expected_output": "(0, 0, 2, 1)", "assertion": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"problem_name": "569", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort each sublist of strings in a given list of lists.\n```\nTest:\n```\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n```\n\n\n\nAnswer:\n```python\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort each sublist of strings in a given list of lists.", "input_data": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])", "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assertion": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"problem_name": "135", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth hexagonal number.\n```\nTest:\n```\nassert hexagonal_num(10) == 190\n```\n\n\n\nAnswer:\n```python\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth hexagonal number.", "input_data": "hexagonal_num(10)", "expected_output": "190", "assertion": "assert hexagonal_num(10) == 190"}
{"problem_name": "412", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to remove odd numbers from a given list.\n```\nTest:\n```\nassert remove_odd([1,2,3]) == [2]\n```\n\n\n\nAnswer:\n```python\ndef remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to remove odd numbers from a given list.", "input_data": "remove_odd([1,2,3])", "expected_output": "[2]", "assertion": "assert remove_odd([1,2,3]) == [2]"}
{"problem_name": "232", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef largest_n(lst, n):\n    return sorted(lst, reverse=True)[:n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "441", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the surface area of a cube of a given size.\n```\nTest:\n```\nassert surfacearea_cube(5)==150\n```\n\n\n\nAnswer:\n```python\ndef surfacearea_cube(size):\n    return 6 * size * size\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the surface area of a cube of a given size.", "input_data": "surfacearea_cube(5)", "expected_output": "150", "assertion": "assert surfacearea_cube(5)==150"}
{"problem_name": "563", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract values between quotation marks from a string.\n```\nTest:\n```\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n```\n\n\n\nAnswer:\n```python\ndef extract_values(string):\n    return [value.strip('\"') for value in string.split(',')]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract values between quotation marks from a string.", "input_data": "extract_values('\"Python\", \"PHP\", \"Java\"')", "expected_output": "['Python', 'PHP', 'Java']", "assertion": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"}
{"problem_name": "74", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether it follows the sequence given in the patterns array.\n```\nTest:\n```\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n```\n\n\n\nAnswer:\n```python\ndef is_samepatterns(arr, patterns):\n    if len(arr)!= len(patterns):\n        return False\n    for i in range(len(arr)):\n        if arr[i]!= patterns[i] and patterns[i]!= \"?\":\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether it follows the sequence given in the patterns array.", "input_data": "is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])", "expected_output": "True", "assertion": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True"}
{"problem_name": "792", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of lists in a given number of lists.\n```\nTest:\n```\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n```\n\n\n\nAnswer:\n```python\ndef count_list(lists):\n    count = 0\n    for l in lists:\n        if isinstance(l, list):\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of lists in a given number of lists.", "input_data": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "4", "assertion": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"problem_name": "265", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n```\nTest:\n```\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'],3)==[['a', 'd', 'g', 'j','m'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n```\n\n\n\nAnswer:\n```python\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.", "input_data": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)", "expected_output": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assertion": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"problem_name": "427", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n```\nTest:\n```\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n```\n\n\n\nAnswer:\n```python\ndef change_date_format(date):\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "input_data": "change_date_format(\"2026-01-02\")", "expected_output": "'02-01-2026'", "assertion": "assert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"problem_name": "750", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to add the given tuple to the given list.\n```\nTest:\n```\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n```\n\n\n\nAnswer:\n```python\ndef add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to add the given tuple to the given list.", "input_data": "add_tuple([5, 6, 7], (9, 10))", "expected_output": "[5, 6, 7, 9, 10]", "assertion": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"problem_name": "751", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n```\nTest:\n```\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n```\n\n\n\nAnswer:\n```python\ndef check_min_heap(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i // 2]:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/", "input_data": "check_min_heap([1, 2, 3, 4, 5, 6])", "expected_output": "True", "assertion": "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True"}
{"problem_name": "474", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to replace characters in a string.\n```\nTest:\n```\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n```\n\n\n\nAnswer:\n```python\ndef replace_char(string, char_to_replace, replacement_char):\n    return string.replace(char_to_replace, replacement_char)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to replace characters in a string.", "input_data": "replace_char(\"polygon\",'y','l')", "expected_output": "(\"pollgon\")", "assertion": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"problem_name": "164", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to determine if the sum of the divisors of two integers are the same.\n```\nTest:\n```\nassert are_equivalent(36, 57) == False\n```\n\n\n\nAnswer:\n```python\ndef are_equivalent(num1, num2):\n    divisors_sum1 = sum(i for i in range(1, num1 + 1) if num1 % i == 0)\n    divisors_sum2 = sum(i for i in range(1, num2 + 1) if num2 % i == 0)\n    return divisors_sum1 == divisors_sum2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to determine if the sum of the divisors of two integers are the same.", "input_data": "are_equivalent(36, 57)", "expected_output": "False", "assertion": "assert are_equivalent(36, 57) == False"}
{"problem_name": "765", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n```\nTest:\n```\nassert is_polite(7) == 11\n```\n\n\n\nAnswer:\n```python\ndef is_polite(n):\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\ndef nth_polite(n):\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite(num):\n            count += 1\n        num += 1\n    return num - 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/", "input_data": "is_polite(7)", "expected_output": "11", "assertion": "assert is_polite(7) == 11"}
{"problem_name": "297", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to flatten a given nested list structure.\n```\nTest:\n```\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n```\n\n\n\nAnswer:\n```python\ndef flatten_list(nested_list):\n    flattened_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to flatten a given nested list structure.", "input_data": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])", "expected_output": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assertion": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"problem_name": "284", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n```\nTest:\n```\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n```\n\n\n\nAnswer:\n```python\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.", "input_data": "check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')", "expected_output": "False", "assertion": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"problem_name": "635", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort the given list.\n```\nTest:\n```\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n\n\nAnswer:\n```python\ndef heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap.\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i] # swap\n        heapify(arr, i, 0)\n\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i # Initialize largest as root\n    l = 2 * i + 1     # left = 2*i + 1\n    r = 2 * i + 2     # right = 2*i + 2\n\n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    # Change root, if needed\n    if largest!= i:\n        arr[i],arr[largest] = arr[largest],arr[i]  # swap\n\n        # Heapify the root.\n        heapify(arr, n, largest)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort the given list.", "input_data": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assertion": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"problem_name": "398", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to compute the sum of digits of each number of a given list.\n```\nTest:\n```\nassert sum_of_digits([10,2,56])==14\n```\n\n\n\nAnswer:\n```python\ndef sum_of_digits(nums):\n    return sum(int(digit) for num in nums for digit in str(num))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to compute the sum of digits of each number of a given list.", "input_data": "sum_of_digits([10,2,56])", "expected_output": "14", "assertion": "assert sum_of_digits([10,2,56])==14"}
{"problem_name": "560", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n```\nTest:\n```\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n```\n\n\n\nAnswer:\n```python\ndef union_elements(tuple1, tuple2):\n    return sorted(set(tuple1) | set(tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the union of the elements of two given tuples and output them in sorted order.", "input_data": "union_elements((3, 4, 5, 6),(5, 7, 4, 10) )", "expected_output": "(3, 4, 5, 6, 7, 10)", "assertion": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"}
{"problem_name": "558", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sum of the per-digit difference between two integers.\n```\nTest:\n```\nassert digit_distance_nums(1,2) == 1\n```\n\n\n\nAnswer:\n```python\ndef digit_distance_nums(num1, num2):\n    num1_str = str(num1)\n    num2_str = str(num2)\n    if len(num1_str)!= len(num2_str):\n        return -1\n    sum_diff = 0\n    for i in range(len(num1_str)):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n    return sum_diff\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sum of the per-digit difference between two integers.", "input_data": "digit_distance_nums(1,2)", "expected_output": "1", "assertion": "assert digit_distance_nums(1,2) == 1"}
{"problem_name": "106", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to append the given list to the given tuples.\n```\nTest:\n```\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n```\n\n\n\nAnswer:\n```python\ndef add_lists(lst, tup):\n    return tup + tuple(lst)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to append the given list to the given tuples.", "input_data": "add_lists([5, 6, 7], (9, 10))", "expected_output": "(9, 10, 5, 6, 7)", "assertion": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"problem_name": "311", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to set the left most unset bit.\n```\nTest:\n```\nassert set_left_most_unset_bit(10) == 14\n```\n\n\n\nAnswer:\n```python\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to set the left most unset bit.", "input_data": "set_left_most_unset_bit(10)", "expected_output": "14", "assertion": "assert set_left_most_unset_bit(10) == 14"}
{"problem_name": "283", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n```\nTest:\n```\nassert validate(1234) == True\n```\n\n\n\nAnswer:\n```python\ndef validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) > num_str.count(digit):\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.", "input_data": "validate(1234)", "expected_output": "True", "assertion": "assert validate(1234) == True"}
{"problem_name": "170", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n```\nTest:\n```\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n```\n\n\n\nAnswer:\n```python\ndef sum_range_list(nums, start, end):\n    return sum(nums[start:end+1])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the sum of numbers in a list within a range specified by two indices.", "input_data": "sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)", "expected_output": "29", "assertion": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"problem_name": "71", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a list of elements.\n```\nTest:\n```\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n```\n\n\n\nAnswer:\n```python\ndef comb_sort(arr):\n    gap = len(arr)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n    return arr\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a list of elements.", "input_data": "comb_sort([5, 15, 37, 25, 79])", "expected_output": "[5, 15, 25, 37, 79]", "assertion": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"problem_name": "796", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite function to find the sum of all items in the given dictionary.\n```\nTest:\n```\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n```\n\n\n\nAnswer:\n```python\ndef return_sum(dictionary):\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write function to find the sum of all items in the given dictionary.", "input_data": "return_sum({'a': 100, 'b':200, 'c':300})", "expected_output": "600", "assertion": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"problem_name": "105", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count true booleans in the given list.\n```\nTest:\n```\nassert count([True,False,True]) == 2\n```\n\n\n\nAnswer:\n```python\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count true booleans in the given list.", "input_data": "count([True,False,True])", "expected_output": "2", "assertion": "assert count([True,False,True]) == 2"}
{"problem_name": "84", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth number in the newman conway sequence.\n```\nTest:\n```\nassert sequence(10) == 6\n```\n\n\n\nAnswer:\n```python\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth number in the newman conway sequence.", "input_data": "sequence(10)", "expected_output": "6", "assertion": "assert sequence(10) == 6"}
{"problem_name": "410", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the minimum value in a given heterogeneous list.\n```\nTest:\n```\nassert min_val(['Python', 3, 2, 4, 5,'version'])==2\n```\n\n\n\nAnswer:\n```python\ndef min_val(lst):\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n    return min_val\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the minimum value in a given heterogeneous list.", "input_data": "min_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "2", "assertion": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"}
{"problem_name": "438", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count bidirectional tuple pairs.\n```\nTest:\n```\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\n```\n\n\n\nAnswer:\n```python\ndef count_bidirectional(pairs):\n    count = 0\n    for pair in pairs:\n        if pair[::-1] in pairs:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count bidirectional tuple pairs.", "input_data": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )", "expected_output": "3", "assertion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3"}
{"problem_name": "117", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n```\nTest:\n```\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n```\n\n\n\nAnswer:\n```python\ndef list_to_float(lst):\n    return [tuple(map(float, sublist)) for sublist in lst]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert all possible convertible elements in a list of lists to floats.", "input_data": "list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )", "expected_output": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assertion": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"}
{"problem_name": "259", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to maximize the given two tuples.\n```\nTest:\n```\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n```\n\n\n\nAnswer:\n```python\ndef maximize_elements(tuple1, tuple2):\n    max_tuple = []\n    for i in range(len(tuple1)):\n        max_tuple.append(max(tuple1[i], tuple2[i]))\n    return tuple(max_tuple)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to maximize the given two tuples.", "input_data": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((6, 7), (4, 9), (2, 9), (7, 10))", "assertion": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"problem_name": "227", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find minimum of three numbers.\n```\nTest:\n```\nassert min_of_three(10,20,0)==0\n```\n\n\n\nAnswer:\n```python\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find minimum of three numbers.", "input_data": "min_of_three(10,20,0)", "expected_output": "0", "assertion": "assert min_of_three(10,20,0)==0"}
{"problem_name": "794", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n```\nTest:\n```\nassert text_starta_endb(\"aabbbb\")\n```\n\n\n\nAnswer:\n```python\nimport re\n\ndef text_starta_endb(text):\n    return re.match(r\"a.*b$\", text) is not None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "input_data": "text_starta_endb(\"aabbbb\")", "expected_output": "True", "assertion": "assert text_starta_endb(\"aabbbb\")"}
{"problem_name": "479", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the first digit of a given number.\n```\nTest:\n```\nassert first_Digit(123) == 1\n```\n\n\n\nAnswer:\n```python\ndef first_Digit(num):\n    return int(str(num)[0])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the first digit of a given number.", "input_data": "first_Digit(123)", "expected_output": "1", "assertion": "assert first_Digit(123) == 1"}
{"problem_name": "293", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the third side of a right angled triangle.\n```\nTest:\n```\nassert otherside_rightangle(7,8)==10.63014581273465\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef otherside_rightangle(side1, side2):\n    return math.sqrt(side1**2 + side2**2)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the third side of a right angled triangle.", "input_data": "otherside_rightangle(7,8)", "expected_output": "10.63014581273465", "assertion": "assert otherside_rightangle(7,8)==10.63014581273465"}
{"problem_name": "615", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n```\nTest:\n```\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n```\n\n\n\nAnswer:\n```python\ndef average_tuple(tuples):\n    return [sum(t)/len(t) for t in tuples]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.", "input_data": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))", "expected_output": "[30.5, 34.25, 27.0, 23.25]", "assertion": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]"}
{"problem_name": "757", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n```\nTest:\n```\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n```\n\n\n\nAnswer:\n```python\ndef count_reverse_pairs(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j][::-1]:\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/", "input_data": "count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])", "expected_output": "2", "assertion": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2"}
{"problem_name": "610", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n```\nTest:\n```\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n```\n\n\n\nAnswer:\n```python\ndef remove_kth_element(nums, k):\n    return nums[:k] + nums[k+1:]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.", "input_data": "remove_kth_element([1,1,2,3,4,4,5,1],3)", "expected_output": "[1, 1, 3, 4, 4, 5, 1]", "assertion": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]"}
{"problem_name": "809", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n```\nTest:\n```\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n```\n\n\n\nAnswer:\n```python\ndef check_smaller(tuple1, tuple2):\n    return all(x < y for x, y in zip(tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.", "input_data": "check_smaller((1, 2, 3), (2, 3, 4))", "expected_output": "False", "assertion": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
{"problem_name": "281", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check if the elements of a given list are unique or not.\n```\nTest:\n```\nassert all_unique([1,2,3]) == True\n```\n\n\n\nAnswer:\n```python\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check if the elements of a given list are unique or not.", "input_data": "all_unique([1,2,3])", "expected_output": "True", "assertion": "assert all_unique([1,2,3]) == True"}
{"problem_name": "395", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the first non-repeated character in a given string.\n```\nTest:\n```\nassert first_non_repeating_character(\"abcabc\") == None\n```\n\n\n\nAnswer:\n```python\ndef first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the first non-repeated character in a given string.", "input_data": "first_non_repeating_character(\"abcabc\")", "expected_output": "None", "assertion": "assert first_non_repeating_character(\"abcabc\") == None"}
{"problem_name": "772", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove all the words with k length in the given string.\n```\nTest:\n```\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n```\n\n\n\nAnswer:\n```python\ndef remove_length(string, k):\n    words = string.split()\n    return''.join([word for word in words if len(word)!= k])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove all the words with k length in the given string.", "input_data": "remove_length('The person is most value tet', 3)", "expected_output": "'person is most value'", "assertion": "assert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"problem_name": "579", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the dissimilar elements in the given two tuples.\n```\nTest:\n```\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n```\n\n\n\nAnswer:\n```python\ndef find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return tuple(set1.symmetric_difference(set2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the dissimilar elements in the given two tuples.", "input_data": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))", "expected_output": "(3, 6, 7, 10)", "assertion": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"problem_name": "433", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the entered number is greater than the elements of the given array.\n```\nTest:\n```\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n```\n\n\n\nAnswer:\n```python\ndef check_greater(arr, num):\n    for element in arr:\n        if element > num:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the entered number is greater than the elements of the given array.", "input_data": "check_greater([1, 2, 3, 4, 5], 4)", "expected_output": "False", "assertion": "assert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"problem_name": "742", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to caluclate the area of a tetrahedron.\n```\nTest:\n```\nassert area_tetrahedron(3)==15.588457268119894\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef area_tetrahedron(side_length):\n    return (math.sqrt(2) * side_length**2) / 12\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to caluclate the area of a tetrahedron.", "input_data": "area_tetrahedron(3)", "expected_output": "15.588457268119894", "assertion": "assert area_tetrahedron(3)==15.588457268119894"}
{"problem_name": "171", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n```\nTest:\n```\nassert perimeter_pentagon(5) == 25\n```\n\n\n\nAnswer:\n```python\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the perimeter of a regular pentagon from the length of its sides.", "input_data": "perimeter_pentagon(5)", "expected_output": "25", "assertion": "assert perimeter_pentagon(5) == 25"}
{"problem_name": "603", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n```\nTest:\n```\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n```\n\n\n\nAnswer:\n```python\ndef get_ludic(n):\n    ludics = [1]\n    for i in range(2, n + 1):\n        is_ludic = True\n        for j in ludics:\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n    return ludics\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to get all lucid numbers smaller than or equal to a given integer.", "input_data": "get_ludic(10)", "expected_output": "[1, 2, 3, 5, 7]", "assertion": "assert get_ludic(10) == [1, 2, 3, 5, 7]"}
{"problem_name": "728", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n```\nTest:\n```\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n```\n\n\n\nAnswer:\n```python\ndef sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "input_data": "sum_list([10,20,30],[15,25,35])", "expected_output": "[25,45,65]", "assertion": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]"}
{"problem_name": "118", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a string to a list of strings split on the space character.\n```\nTest:\n```\nassert string_to_list(\"python programming\")==['python','programming']\n```\n\n\n\nAnswer:\n```python\ndef string_to_list(string):\n    return string.split(' ')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a string to a list of strings split on the space character.", "input_data": "string_to_list(\"python programming\")", "expected_output": "['python','programming']", "assertion": "assert string_to_list(\"python programming\")==['python','programming']"}
{"problem_name": "251", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n```\nTest:\n```\nassert insert_element(['Red', 'Green', 'Black'],'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n```\n\n\n\nAnswer:\n```python\ndef insert_element(lst, element):\n    return [element] + lst + [element]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.", "input_data": "insert_element(['Red', 'Green', 'Black'] ,'c')", "expected_output": "['c', 'Red', 'c', 'Green', 'c', 'Black']", "assertion": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"problem_name": "555", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n```\nTest:\n```\nassert difference(3) == 30\n```\n\n\n\nAnswer:\n```python\ndef difference(n):\n    return (n * (n + 1) // 2) ** 2 - (n * (n + 1) * (2 * n + 1) // 6)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.", "input_data": "difference(3)", "expected_output": "30", "assertion": "assert difference(3) == 30"}
{"problem_name": "803", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n```\nTest:\n```\nassert not is_perfect_square(10)\n```\n\n\n\nAnswer:\n```python\ndef is_perfect_square(num):\n    return num == int(num ** 0.5) ** 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/", "input_data": "is_perfect_square(10)", "expected_output": "False", "assertion": "assert not is_perfect_square(10)"}
{"problem_name": "747", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n```\nTest:\n```\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\n```\n\n\n\nAnswer:\n```python\ndef lcs_of_three(str1, str2, str3):\n    m = len(str1)\n    n = len(str2)\n    o = len(str3)\n    dp = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif str1[i-1] == str2[j-1] and str2[j-1] == str3[k-1]:\n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/", "input_data": "lcs_of_three('AGGT12', '12TXAYB', '12XBA')", "expected_output": "2", "assertion": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"}
{"problem_name": "779", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n```\nTest:\n```\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef unique_sublists(lst):\n    unique_tuples = {}\n    for sublist in lst:\n        if tuple(sublist) not in unique_tuples:\n            unique_tuples[tuple(sublist)] = 1\n        else:\n            unique_tuples[tuple(sublist)] += 1\n    return unique_tuples\n```\n\nThis implementation iterates through the list of lists, converts each list to a tuple, and checks if the tuple is already in the dictionary. If it is, it increments the count for that tuple. If it is not, it adds the tuple to the dictionary with a count of 1. Finally, it returns the dictionary containing the unique tuples and their counts.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.", "input_data": "unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])", "expected_output": "{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assertion": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"problem_name": "573", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to calculate the product of the unique numbers in a given list.\n```\nTest:\n```\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n```\n\n\n\nAnswer:\n```python\ndef unique_product(nums):\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to calculate the product of the unique numbers in a given list.", "input_data": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])", "expected_output": "720000000", "assertion": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"}
{"problem_name": "749", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n```\nTest:\n```\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n```\n\n\n\nAnswer:\n```python\ndef sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/", "input_data": "sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])", "expected_output": "[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assertion": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"problem_name": "296", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count inversions in an array.\n```\nTest:\n```\nassert get_Inv_Count([1,20,6,4,5]) == 5\n```\n\n\n\nAnswer:\n```python\ndef get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count inversions in an array.", "input_data": "get_Inv_Count([1,20,6,4,5])", "expected_output": "5", "assertion": "assert get_Inv_Count([1,20,6,4,5]) == 5"}
{"problem_name": "738", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n```\nTest:\n```\nassert geometric_sum(7) == 1.9921875\n```\n\n\n\nAnswer:\n```python\ndef geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + geometric_sum(n - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php", "input_data": "geometric_sum(7)", "expected_output": "1.9921875", "assertion": "assert geometric_sum(7) == 1.9921875"}
{"problem_name": "745", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n```\nTest:\n```\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n```\n\n\n\nAnswer:\n```python\ndef divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum + 1) if all(i % int(digit) == 0 for digit in str(i))]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "input_data": "divisible_by_digits(1,22)", "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assertion": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"problem_name": "261", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n```\nTest:\n```\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n```\n\n\n\nAnswer:\n```python\ndef division_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x / y, tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.", "input_data": "division_elements((10, 4, 6, 9),(5, 2, 3, 3))", "expected_output": "(2, 2, 2, 3)", "assertion": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"problem_name": "578", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to interleave 3 lists of the same length into a single flat list.\n```\nTest:\n```\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n```\n\n\n\nAnswer:\n```python\ndef interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to interleave 3 lists of the same length into a single flat list.", "input_data": "interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])", "expected_output": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assertion": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"problem_name": "801", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of equal numbers from three given integers.\n```\nTest:\n```\nassert test_three_equal(1,1,1) == 3\n```\n\n\n\nAnswer:\n```python\ndef test_three_equal(a, b, c):\n    count = 0\n    if a == b and b == c:\n        count += 3\n    elif a == b:\n        count += 2\n    elif b == c:\n        count += 2\n    elif a == c:\n        count += 2\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of equal numbers from three given integers.", "input_data": "test_three_equal(1,1,1)", "expected_output": "3", "assertion": "assert test_three_equal(1,1,1) == 3"}
{"problem_name": "455", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given month number contains 31 days or not.\n```\nTest:\n```\nassert check_monthnumb_number(5)==True\n```\n\n\n\nAnswer:\n```python\ndef check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given month number contains 31 days or not.", "input_data": "check_monthnumb_number(5)", "expected_output": "True", "assertion": "assert check_monthnumb_number(5)==True"}
{"problem_name": "444", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to trim each tuple by k in the given tuple list.\n```\nTest:\n```\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n```\n\n\n\nAnswer:\n```python\ndef trim_tuple(tuple_list, k):\n    return [tuple(t[k:-k]) for t in tuple_list]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to trim each tuple by k in the given tuple list.", "input_data": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)", "expected_output": "'[(2,), (9,), (2,), (2,)]'", "assertion": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"}
{"problem_name": "64", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a list of tuples using the second value of each tuple.\n```\nTest:\n```\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n```\n\n\n\nAnswer:\n```python\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a list of tuples using the second value of each tuple.", "input_data": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])", "expected_output": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assertion": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"problem_name": "773", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n```\nTest:\n```\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n```\n\n\n\nAnswer:\n```python\ndef occurance_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        return None\n    else:\n        return substring, index, index + len(substring)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.", "input_data": "occurance_substring('python programming, python language','python')", "expected_output": "('python', 0, 6)", "assertion": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)"}
{"problem_name": "89", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the closest smaller number than n.\n```\nTest:\n```\nassert closest_num(11) == 10\n```\n\n\n\nAnswer:\n```python\ndef closest_num(n):\n    return n - 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the closest smaller number than n.", "input_data": "closest_num(11)", "expected_output": "10", "assertion": "assert closest_num(11) == 10"}
{"problem_name": "471", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the product of the array multiplication modulo n.\n```\nTest:\n```\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n```\n\n\n\nAnswer:\n```python\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the product of the array multiplication modulo n.", "input_data": "find_remainder([ 100, 10, 5, 25, 35, 14 ],11)", "expected_output": "9", "assertion": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9"}
{"problem_name": "246", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function for computing square roots using the babylonian method.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef sqrt(x):\n    \"\"\"\n    Compute square root of x using the babylonian method.\n    \"\"\"\n    guess = x / 2\n    while abs(guess * guess - x) > 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function for computing square roots using the babylonian method.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "97", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n```\nTest:\n```\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef frequency_lists(lists):\n    flattened_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n```\n\nThis implementation uses a list comprehension to flatten the list of lists into a single list. It then iterates through the flattened list and updates the frequency dictionary accordingly.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.", "input_data": "frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])", "expected_output": "{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assertion": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"problem_name": "616", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n```\nTest:\n```\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n```\n\n\n\nAnswer:\n```python\ndef tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function which takes two tuples of the same length and performs the element wise modulo.", "input_data": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))", "expected_output": "(0, 4, 5, 1)", "assertion": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"problem_name": "767", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\n```\nTest:\n```\nassert get_pairs_count([1,1,1,1],2) == 6\n```\n\n\n\nAnswer:\n```python\ndef get_pairs_count(nums, target_sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,", "input_data": "get_pairs_count([1,1,1,1],2)", "expected_output": "6", "assertion": "assert get_pairs_count([1,1,1,1],2) == 6"}
{"problem_name": "430", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the directrix of a parabola.\n```\nTest:\n```\nassert parabola_directrix(5,3,2)==-198\n```\n\n\n\nAnswer:\n```python\ndef parabola_directrix(a, b, c):\n    return -1 * (c / (4 * a))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the directrix of a parabola.", "input_data": "parabola_directrix(5,3,2)", "expected_output": "-198", "assertion": "assert parabola_directrix(5,3,2)==-198"}
{"problem_name": "464", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if all values are same in a dictionary.\n```\nTest:\n```\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n```\n\n\n\nAnswer:\n```python\ndef check_value(d, value):\n    for k, v in d.items():\n        if v!= value:\n            return False\n    return True\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if all values are same in a dictionary.", "input_data": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)", "expected_output": "False", "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"}
{"problem_name": "277", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n```\nTest:\n```\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n```\n\n\n\nAnswer:\n```python\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.", "input_data": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)", "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"problem_name": "435", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the last digit of a given number.\n```\nTest:\n```\nassert last_Digit(123) == 3\n```\n\n\n\nAnswer:\n```python\ndef last_Digit(num):\n    return num % 10\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the last digit of a given number.", "input_data": "last_Digit(123)", "expected_output": "3", "assertion": "assert last_Digit(123) == 3"}
{"problem_name": "753", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n```\nTest:\n```\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n```\n\n\n\nAnswer:\n```python\ndef min_k(lst, k):\n    lst.sort(key=lambda x: x[1])\n    return lst[:k]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases", "input_data": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)", "expected_output": "[('Akash', 2), ('Akshat', 4)]", "assertion": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"problem_name": "411", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert the given snake case string to camel case string.\n```\nTest:\n```\nassert snake_to_camel('android_tv') == 'AndroidTv'\n```\n\n\n\nAnswer:\n```python\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_str = words[0]\n    for word in words[1:]:\n        camel_str += word.title()\n    return camel_str\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert the given snake case string to camel case string.", "input_data": "snake_to_camel('android_tv')", "expected_output": "'AndroidTv'", "assertion": "assert snake_to_camel('android_tv') == 'AndroidTv'"}
{"problem_name": "624", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to convert a given string to uppercase.\n```\nTest:\n```\nassert is_upper(\"person\") ==\"PERSON\"\n```\n\n\n\nAnswer:\n```python\ndef is_upper(string):\n    return string.upper()\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to convert a given string to uppercase.", "input_data": "is_upper(\"person\")", "expected_output": "\"PERSON\"", "assertion": "assert is_upper(\"person\") ==\"PERSON\""}
{"problem_name": "102", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a snake case string to camel case string.\n```\nTest:\n```\nassert snake_to_camel('python_program')=='PythonProgram'\n```\n\n\n\nAnswer:\n```python\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_str = words[0]\n    for word in words[1:]:\n        camel_str += word.title()\n    return camel_str\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a snake case string to camel case string.", "input_data": "snake_to_camel('python_program')", "expected_output": "'PythonProgram'", "assertion": "assert snake_to_camel('python_program')=='PythonProgram'"}
{"problem_name": "632", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to move all zeroes to the end of the given list.\n```\nTest:\n```\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n```\n\n\n\nAnswer:\n```python\ndef move_zero(nums):\n    non_zero_index = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]\n            non_zero_index += 1\n    return nums\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to move all zeroes to the end of the given list.", "input_data": "move_zero([1,0,2,0,3,4])", "expected_output": "[1,2,3,4,0,0]", "assertion": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"problem_name": "266", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the lateral surface area of a cube given its side length.\n```\nTest:\n```\nassert lateralsurface_cube(5)==100\n```\n\n\n\nAnswer:\n```python\ndef lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the lateral surface area of a cube given its side length.", "input_data": "lateralsurface_cube(5)", "expected_output": "100", "assertion": "assert lateralsurface_cube(5)==100"}
{"problem_name": "566", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to get the sum of the digits of a non-negative integer.\n```\nTest:\n```\nassert sum_digits(345)==12\n```\n\n\n\nAnswer:\n```python\ndef sum_digits(num):\n    return sum(int(digit) for digit in str(num))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to get the sum of the digits of a non-negative integer.", "input_data": "sum_digits(345)", "expected_output": "12", "assertion": "assert sum_digits(345)==12"}
{"problem_name": "83", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n```\nTest:\n```\nassert get_Char(\"abc\") == \"f\"\n```\n\n\n\nAnswer:\n```python\ndef get_Char(string):\n    ascii_sum = sum(ord(char) for char in string)\n    return chr(ascii_sum % 26 + ord('a'))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.", "input_data": "get_Char(\"abc\")", "expected_output": "\"f\"", "assertion": "assert get_Char(\"abc\") == \"f\""}
{"problem_name": "249", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the intersection of two arrays.\n```\nTest:\n```\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n```\n\n\n\nAnswer:\n```python\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the intersection of two arrays.", "input_data": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])", "expected_output": "[1, 2, 8, 9]", "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]"}
{"problem_name": "99", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n```\nTest:\n```\nassert decimal_to_binary(8) == '1000'\n```\n\n\n\nAnswer:\n```python\ndef decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    binary = ''\n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    return binary\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.", "input_data": "decimal_to_binary(8)", "expected_output": "'1000'", "assertion": "assert decimal_to_binary(8) == '1000'"}
{"problem_name": "292", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n```\nTest:\n```\nassert find(10,3) == 3\n```\n\n\n\nAnswer:\n```python\ndef find(numerator, denominator):\n    return numerator // denominator\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).", "input_data": "find(10,3)", "expected_output": "3", "assertion": "assert find(10,3) == 3"}
{"problem_name": "785", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert tuple string to integer tuple.\n```\nTest:\n```\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n```\n\n\n\nAnswer:\n```python\ndef tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str[1:-1].split(\", \")))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert tuple string to integer tuple.", "input_data": "tuple_str_int(\"(7, 8, 9)\")", "expected_output": "(7, 8, 9)", "assertion": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"problem_name": "577", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the last digit in factorial of a given number.\n```\nTest:\n```\nassert last_Digit_Factorial(4) == 4\n```\n\n\n\nAnswer:\n```python\ndef last_Digit_Factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact % 10\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the last digit in factorial of a given number.", "input_data": "last_Digit_Factorial(4)", "expected_output": "4", "assertion": "assert last_Digit_Factorial(4) == 4"}
{"problem_name": "95", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the length of the smallest list in a list of lists.\n```\nTest:\n```\nassert Find_Min_Length([[1],[1,2]]) == 1\n```\n\n\n\nAnswer:\n```python\ndef Find_Min_Length(lists):\n    min_length = float('inf')\n    for lst in lists:\n        min_length = min(min_length, len(lst))\n    return min_length\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the length of the smallest list in a list of lists.", "input_data": "Find_Min_Length([[1],[1,2]])", "expected_output": "1", "assertion": "assert Find_Min_Length([[1],[1,2]]) == 1"}
{"problem_name": "90", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the length of the longest word.\n```\nTest:\n```\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n```\n\n\n\nAnswer:\n```python\ndef len_log(words):\n    return max(len(word) for word in words)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the length of the longest word.", "input_data": "len_log([\"python\",\"PHP\",\"bigdata\"])", "expected_output": "7", "assertion": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"problem_name": "581", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n```\nTest:\n```\nassert surface_Area(3,4) == 33\n```\n\n\n\nAnswer:\n```python\ndef surface_Area(base_edge, height):\n    return base_edge**2 + 4 * base_edge * height\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the surface area of a square pyramid with a given base edge and height.", "input_data": "surface_Area(3,4)", "expected_output": "33", "assertion": "assert surface_Area(3,4) == 33"}
{"problem_name": "294", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum value in a given heterogeneous list.\n```\nTest:\n```\nassert max_val(['Python', 3, 2, 4, 5,'version'])==5\n```\n\n\n\nAnswer:\n```python\ndef max_val(lst):\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n    return max_val\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum value in a given heterogeneous list.", "input_data": "max_val(['Python', 3, 2, 4, 5, 'version'])", "expected_output": "5", "assertion": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"}
{"problem_name": "614", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n```\nTest:\n```\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n```\n\n\n\nAnswer:\n```python\ndef cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "input_data": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])", "expected_output": "30", "assertion": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"problem_name": "16", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n```\nTest:\n```\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n```\n\n\n\nAnswer:\n```python\ndef text_lowercase_underscore(text):\n    return \"_\" in text and all(c.islower() for c in text if c!= \"_\")\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.", "input_data": "text_lowercase_underscore(\"aab_cbbbc\")", "expected_output": "(True)", "assertion": "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)"}
{"problem_name": "101", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the kth element in the given array using 1-based indexing.\n```\nTest:\n```\nassert kth_element([12,3,5,7,19], 2) == 3\n```\n\n\n\nAnswer:\n```python\ndef kth_element(arr, k):\n    return arr[k-1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the kth element in the given array using 1-based indexing.", "input_data": "kth_element([12,3,5,7,19], 2)", "expected_output": "3", "assertion": "assert kth_element([12,3,5,7,19], 2) == 3"}
{"problem_name": "589", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find perfect squares between two given numbers.\n```\nTest:\n```\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n```\n\n\n\nAnswer:\n```python\ndef perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**2 <= end]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find perfect squares between two given numbers.", "input_data": "perfect_squares(1,30)", "expected_output": "[1, 4, 9, 16, 25]", "assertion": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]"}
{"problem_name": "626", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n```\nTest:\n```\nassert triangle_area(-1) == None\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        return (math.sqrt(2) * radius**2) / 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.", "input_data": "triangle_area(-1)", "expected_output": "None", "assertion": "assert triangle_area(-1) == None"}
{"problem_name": "130", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the item with maximum frequency in a given list.\n```\nTest:\n```\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n```\n\n\n\nAnswer:\n```python\ndef max_occurrences(arr):\n    count = {}\n    max_count = 0\n    max_item = None\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n        if count[item] > max_count:\n            max_count = count[item]\n            max_item = item\n    return max_item\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the item with maximum frequency in a given list.", "input_data": "max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])", "expected_output": "2", "assertion": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2"}
{"problem_name": "406", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find whether the parity of a given number is odd.\n```\nTest:\n```\nassert find_Parity(12) == False\n```\n\n\n\nAnswer:\n```python\ndef find_Parity(num):\n    return num % 2!= 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find whether the parity of a given number is odd.", "input_data": "find_Parity(12)", "expected_output": "False", "assertion": "assert find_Parity(12) == False"}
{"problem_name": "630", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n```\nTest:\n```\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n```\n\n\n\nAnswer:\n```python\ndef get_coordinates(coordinate):\n    x, y = coordinate\n    return [(x-1, y), (x, y-1), (x, y+1), (x+1, y)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "input_data": "get_coordinates((3, 4))", "expected_output": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assertion": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"problem_name": "274", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n```\nTest:\n```\nassert even_binomial_Coeff_Sum(4) == 8\n```\n\n\n\nAnswer:\n```python\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.", "input_data": "even_binomial_Coeff_Sum(4)", "expected_output": "8", "assertion": "assert even_binomial_Coeff_Sum(4) == 8"}
{"problem_name": "736", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n```\nTest:\n```\nassert left_insertion([1,2,4,5],6)==4\n```\n\n\n\nAnswer:\n```python\ndef left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php", "input_data": "left_insertion([1,2,4,5],6)", "expected_output": "4", "assertion": "assert left_insertion([1,2,4,5],6)==4"}
{"problem_name": "799", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n```\nTest:\n```\nassert left_rotate(16,2) == 64\n```\n\n\n\nAnswer:\n```python\ndef left_rotate(x, d):\n    return (x << d) | (x >> (32 - d))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.", "input_data": "left_rotate(16,2)", "expected_output": "64", "assertion": "assert left_rotate(16,2) == 64"}
{"problem_name": "451", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove all whitespaces from the given string.\n```\nTest:\n```\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n```\n\n\n\nAnswer:\n```python\ndef remove_whitespaces(string):\n    return string.replace(' ', '')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove all whitespaces from the given string.", "input_data": "remove_whitespaces(' Google    Flutter ')", "expected_output": "'GoogleFlutter'", "assertion": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"problem_name": "304", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find element at a given index after number of rotations.\n```\nTest:\n```\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n```\n\n\n\nAnswer:\n```python\ndef find_Element(arr, queries, k, x):\n    for query in queries:\n        start, end = query\n        length = end - start + 1\n        rotation = k % length\n        arr = arr[rotation:] + arr[:rotation]\n        index = arr.index(x)\n        print(index + start)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find element at a given index after number of rotations.", "input_data": "find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)", "expected_output": "3", "assertion": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3"}
{"problem_name": "80", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth tetrahedral number.\n```\nTest:\n```\nassert tetrahedral_number(5) == 35\n```\n\n\n\nAnswer:\n```python\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth tetrahedral number.", "input_data": "tetrahedral_number(5)", "expected_output": "35", "assertion": "assert tetrahedral_number(5) == 35"}
{"problem_name": "586", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n```\nTest:\n```\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n```\n\n\n\nAnswer:\n```python\ndef split_Arr(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return second_part + first_part\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to split a list at the nth eelment and add the first part to the end.", "input_data": "split_Arr([12,10,5,6,52,36],2)", "expected_output": "[5,6,52,36,12,10]", "assertion": "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"problem_name": "308", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n```\nTest:\n```\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n```\n\n\n\nAnswer:\n```python\ndef large_product(list1, list2, n):\n    products = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            products.append(list1[i] * list2[j])\n    products.sort(reverse=True)\n    return products[:n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.", "input_data": "large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)", "expected_output": "[60, 54, 50]", "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"problem_name": "447", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find cubes of individual elements in a list.\n```\nTest:\n```\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n```\n\n\n\nAnswer:\n```python\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find cubes of individual elements in a list.", "input_data": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assertion": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"problem_name": "392", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n```\nTest:\n```\nassert get_max_sum(60) == 106\n```\n\n\n\nAnswer:\n```python\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "input_data": "get_max_sum(60)", "expected_output": "106", "assertion": "assert get_max_sum(60) == 106"}
{"problem_name": "309", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the maximum of two numbers.\n```\nTest:\n```\nassert maximum(5,10) == 10\n```\n\n\n\nAnswer:\n```python\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the maximum of two numbers.", "input_data": "maximum(5,10)", "expected_output": "10", "assertion": "assert maximum(5,10) == 10"}
{"problem_name": "595", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n```\nTest:\n```\nassert min_Swaps(\"1101\",\"1110\") == 1\n```\n\n\n\nAnswer:\n```python\ndef min_Swaps(start, end):\n    start_list = list(start)\n    end_list = list(end)\n    start_dict = {}\n    end_dict = {}\n    for i in range(len(start_list)):\n        start_dict[start_list[i]] = i\n        end_dict[end_list[i]] = i\n    count = 0\n    for i in range(len(start_list)):\n        if start_list[i]!= end_list[i]:\n            count += 1\n            temp = start_dict[end_list[i]]\n            start_list[i], start_list[temp] = start_list[temp], start_list[i]\n            start_dict[start_list[i]] = i\n            start_dict[start_list[temp]] = temp\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.", "input_data": "min_Swaps(\"1101\",\"1110\")", "expected_output": "1", "assertion": "assert min_Swaps(\"1101\",\"1110\") == 1"}
{"problem_name": "628", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to replace all spaces in the given string with '%20'.\n```\nTest:\n```\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n```\n\n\n\nAnswer:\n```python\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to replace all spaces in the given string with '%20'.", "input_data": "replace_spaces(\"My Name is Dawood\")", "expected_output": "'My%20Name%20is%20Dawood'", "assertion": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"problem_name": "238", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of non-empty substrings of a given string.\n```\nTest:\n```\nassert number_of_substrings(\"abc\") == 6\n```\n\n\n\nAnswer:\n```python\ndef number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of non-empty substrings of a given string.", "input_data": "number_of_substrings(\"abc\")", "expected_output": "6", "assertion": "assert number_of_substrings(\"abc\") == 6"}
{"problem_name": "142", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count number items that are identical in the same position of three given lists.\n```\nTest:\n```\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n```\n\n\n\nAnswer:\n```python\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count number items that are identical in the same position of three given lists.", "input_data": "count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])", "expected_output": "3", "assertion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3"}
{"problem_name": "807", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the first odd number in a given list of numbers.\n```\nTest:\n```\nassert first_odd([1,3,5]) == 1\n```\n\n\n\nAnswer:\n```python\ndef first_odd(numbers):\n    for num in numbers:\n        if num % 2!= 0:\n            return num\n    return None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the first odd number in a given list of numbers.", "input_data": "first_odd([1,3,5])", "expected_output": "1", "assertion": "assert first_odd([1,3,5]) == 1"}
{"problem_name": "14", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the volume of a triangular prism.\n```\nTest:\n```\nassert find_Volume(10,8,6) == 240\n```\n\n\n\nAnswer:\n```python\ndef find_Volume(base, height, length):\n    return (base * height * length) / 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the volume of a triangular prism.", "input_data": "find_Volume(10,8,6)", "expected_output": "240", "assertion": "assert find_Volume(10,8,6) == 240"}
{"problem_name": "224", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n```\nTest:\n```\nassert count_Set_Bits(2) == 1\n```\n\n\n\nAnswer:\n```python\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.", "input_data": "count_Set_Bits(2)", "expected_output": "1", "assertion": "assert count_Set_Bits(2) == 1"}
{"problem_name": "290", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the list of maximum length in a list of lists.\n```\nTest:\n```\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n```\n\n\n\nAnswer:\n```python\ndef max_length(lists):\n    max_len = 0\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the list of maximum length in a list of lists.", "input_data": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "(3, [13, 15, 17])", "assertion": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"}
{"problem_name": "12", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n```\nTest:\n```\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n```\n\n\n\nAnswer:\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "input_data": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])", "expected_output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assertion": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"problem_name": "446", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the occurence of all elements of list in a tuple.\n```\nTest:\n```\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n```\n\n\n\nAnswer:\n```python\ndef count_Occurrence(tuple, list):\n    count = 0\n    for element in tuple:\n        if element in list:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the occurence of all elements of list in a tuple.", "input_data": "count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )", "expected_output": "3", "assertion": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"problem_name": "96", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the number of divisors of a given integer.\n```\nTest:\n```\nassert divisor(15) == 4\n```\n\n\n\nAnswer:\n```python\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the number of divisors of a given integer.", "input_data": "divisor(15)", "expected_output": "4", "assertion": "assert divisor(15) == 4"}
{"problem_name": "109", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n```\nTest:\n```\nassert odd_Equivalent(\"011001\",6) == 3\n```\n\n\n\nAnswer:\n```python\ndef odd_Equivalent(n, k):\n    n = int(n, 2)\n    return bin(n << k)[2:].count('1')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.", "input_data": "odd_Equivalent(\"011001\",6)", "expected_output": "3", "assertion": "assert odd_Equivalent(\"011001\",6) == 3"}
{"problem_name": "587", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert a list to a tuple.\n```\nTest:\n```\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n```\n\n\n\nAnswer:\n```python\ndef list_tuple(lst):\n    return tuple(lst)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert a list to a tuple.", "input_data": "list_tuple([5, 10, 7, 4, 15, 3])", "expected_output": "(5, 10, 7, 4, 15, 3)", "assertion": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"}
{"problem_name": "94", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n```\nTest:\n```\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n```\n\n\n\nAnswer:\n```python\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.", "input_data": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])", "expected_output": "'Varsha'", "assertion": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"problem_name": "459", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove uppercase substrings from a given string.\n```\nTest:\n```\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n```\n\n\n\nAnswer:\n```python\ndef remove_uppercase(string):\n    return ''.join(c for c in string if not c.isupper())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove uppercase substrings from a given string.", "input_data": "remove_uppercase('cAstyoUrFavoRitETVshoWs')", "expected_output": "'cstyoravoitshos'", "assertion": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"problem_name": "722", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n```\nTest:\n```\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n```\n\n\n\nAnswer:\nHere's how you can implement this:\n\n```python\ndef filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n```\n\nThis implementation iterates through the dictionary of students and checks if their height and weight are above the minimum. If they are, they are added to the filtered_students dictionary. Finally, the filtered_students dictionary is returned.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.", "input_data": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)", "expected_output": "{'Cierra Vega': (6.2, 70)}", "assertion": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"problem_name": "732", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n```\nTest:\n```\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n```\n\n\n\nAnswer:\n```python\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "input_data": "replace_specialchar('Python language, Programming language.')", "expected_output": "('Python:language::Programming:language:')", "assertion": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"}
{"problem_name": "67", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the number of ways to partition a set of Bell numbers.\n```\nTest:\n```\nassert bell_number(2)==2\n```\n\n\n\nAnswer:\n```python\ndef bell_number(n):\n    if n == 0:\n        return 1\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j]\n    return bell[n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the number of ways to partition a set of Bell numbers.", "input_data": "bell_number(2)", "expected_output": "2", "assertion": "assert bell_number(2)==2"}
{"problem_name": "59", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the nth octagonal number.\n```\nTest:\n```\nassert is_octagonal(5) == 65\n```\n\n\n\nAnswer:\n```python\ndef is_octagonal(n):\n    return n * (2 * n - 1)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the nth octagonal number.", "input_data": "is_octagonal(5)", "expected_output": "65", "assertion": "assert is_octagonal(5) == 65"}
{"problem_name": "61", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n```\nTest:\n```\nassert count_Substrings('112112') == 6\n```\n\n\n\nAnswer:\n```python\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of substrings with the sum of digits equal to their length.", "input_data": "count_Substrings('112112')", "expected_output": "6", "assertion": "assert count_Substrings('112112') == 6"}
{"problem_name": "783", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n```\nTest:\n```\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n```\n\n\n\nAnswer:\n```python\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx) * 100\n    v = mx * 100\n    return h, s, v\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/", "input_data": "rgb_to_hsv(255, 255, 255)", "expected_output": "(0, 0.0, 100.0)", "assertion": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)"}
{"problem_name": "617", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n```\nTest:\n```\nassert min_Jumps((3,4),11)==3.5\n```\n\n\n\nAnswer:\n```python\ndef min_Jumps(point, length):\n    x, y = point\n    if x == 0 and y == 0:\n        return 0\n    if x == 0:\n        return y / length\n    if y == 0:\n        return x / length\n    return (x / length + y / length) / 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "input_data": "min_Jumps((3,4),11)", "expected_output": "3.5", "assertion": "assert min_Jumps((3,4),11)==3.5"}
{"problem_name": "762", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n```\nTest:\n```\nassert check_monthnumber_number(6)==True\n```\n\n\n\nAnswer:\n```python\ndef check_monthnumber_number(monthnumber):\n    if monthnumber in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.", "input_data": "check_monthnumber_number(6)", "expected_output": "True", "assertion": "assert check_monthnumber_number(6)==True"}
{"problem_name": "739", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n```\nTest:\n```\nassert find_Index(2) == 4\n```\n\n\n\nAnswer:\n```python\ndef find_Index(n):\n    low = 0\n    high = 10 ** (n - 1)\n    while low <= high:\n        mid = (low + high) // 2\n        triangular_number = mid * (mid + 1) // 2\n        if len(str(triangular_number)) == n:\n            return mid\n        elif len(str(triangular_number)) < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/", "input_data": "find_Index(2)", "expected_output": "4", "assertion": "assert find_Index(2) == 4"}
{"problem_name": "137", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef find_zero_ratio(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "4", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n```\nTest:\n```\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n```\n\n\n\nAnswer:\n```python\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return sorted(heap, reverse=True)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.", "input_data": "heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)", "expected_output": "[85, 75, 65]", "assertion": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"problem_name": "250", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n```\nTest:\n```\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n```\n\n\n\nAnswer:\n```python\ndef count_X(tuple, element):\n    count = 0\n    for item in tuple:\n        if item == element:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.", "input_data": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)", "expected_output": "0", "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0"}
{"problem_name": "228", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether all the bits are unset in the given range or not.\n```\nTest:\n```\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n```\n\n\n\nAnswer:\n```python\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    return (n >> l) & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether all the bits are unset in the given range or not.", "input_data": "all_Bits_Set_In_The_Given_Range(4,1,2)", "expected_output": "True", "assertion": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True"}
{"problem_name": "602", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the first repeated character in a given string.\n```\nTest:\n```\nassert first_repeated_char(\"abcabc\") == \"a\"\n```\n\n\n\nAnswer:\n```python\ndef first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the first repeated character in a given string.", "input_data": "first_repeated_char(\"abcabc\")", "expected_output": "\"a\"", "assertion": "assert first_repeated_char(\"abcabc\") == \"a\""}
{"problem_name": "301", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the depth of a dictionary.\n```\nTest:\n```\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n```\n\n\n\nAnswer:\n```python\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the depth of a dictionary.", "input_data": "dict_depth({'a':1, 'b': {'c': {'d': {}}}})", "expected_output": "4", "assertion": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"problem_name": "431", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes two lists and returns true if they have at least one common element.\n```\nTest:\n```\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n```\n\n\n\nAnswer:\n```python\ndef common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes two lists and returns true if they have at least one common element.", "input_data": "common_element([1,2,3,4,5], [5,6,7,8,9])", "expected_output": "True", "assertion": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True"}
{"problem_name": "790", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether every even index contains even numbers of a given list.\n```\nTest:\n```\nassert even_position([3,2,1]) == False\n```\n\n\n\nAnswer:\n```python\ndef even_position(lst):\n    return all(i % 2 == 0 for i, num in enumerate(lst) if i % 2 == 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether every even index contains even numbers of a given list.", "input_data": "even_position([3,2,1])", "expected_output": "False", "assertion": "assert even_position([3,2,1]) == False"}
{"problem_name": "726", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n```\nTest:\n```\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n```\n\n\n\nAnswer:\n```python\ndef multiply_elements(t):\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n    return tuple(result)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.", "input_data": "multiply_elements((1, 5, 7, 8, 10))", "expected_output": "(5, 35, 56, 80)", "assertion": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"problem_name": "461", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the upper case characters in a given string.\n```\nTest:\n```\nassert upper_ctr('PYthon') == 1\n```\n\n\n\nAnswer:\n```python\ndef upper_ctr(string):\n    return sum(1 for c in string if c.isupper())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the upper case characters in a given string.", "input_data": "upper_ctr('PYthon')", "expected_output": "1", "assertion": "assert upper_ctr('PYthon') == 1"}
{"problem_name": "470", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n```\nTest:\n```\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n```\n\n\n\nAnswer:\n```python\ndef add_pairwise(t):\n    return tuple(x + y for x, y in zip(t, t[1:]))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.", "input_data": "add_pairwise((1, 5, 7, 8, 10))", "expected_output": "(6, 12, 15, 18)", "assertion": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"problem_name": "72", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n```\nTest:\n```\nassert dif_Square(5) == True\n```\n\n\n\nAnswer:\n```python\ndef dif_Square(num):\n    if num < 0:\n        return False\n    elif num == 0:\n        return True\n    else:\n        for i in range(int(num**0.5)+1):\n            if (num - i**2)**0.5 == int((num - i**2)**0.5):\n                return True\n        return False\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given number can be represented as the difference of two squares or not.", "input_data": "dif_Square(5)", "expected_output": "True", "assertion": "assert dif_Square(5) == True"}
{"problem_name": "473", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n```\nTest:\n```\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n```\n\n\n\nAnswer:\n```python\ndef tuple_intersection(tuple_list1, tuple_list2):\n    set1 = set(map(tuple, tuple_list1))\n    set2 = set(map(tuple, tuple_list2))\n    return set(map(tuple, set1.intersection(set2)))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "input_data": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])", "expected_output": "{(4, 5), (3, 4), (5, 6)}", "assertion": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"problem_name": "806", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find maximum run of uppercase characters in the given string.\n```\nTest:\n```\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n```\n\n\n\nAnswer:\n```python\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find maximum run of uppercase characters in the given string.", "input_data": "max_run_uppercase('GeMKSForGERksISBESt')", "expected_output": "5", "assertion": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"problem_name": "791", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove tuples from the given tuple.\n```\nTest:\n```\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n```\n\n\n\nAnswer:\n```python\ndef remove_nested(t):\n    return tuple(x for x in t if not isinstance(x, tuple))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove tuples from the given tuple.", "input_data": "remove_nested((1, 5, 7, (4, 6), 10))", "expected_output": "(1, 5, 7, 10)", "assertion": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"problem_name": "226", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to remove the characters which have odd index values of a given string.\n```\nTest:\n```\nassert odd_values_string('abcdef') == 'ace'\n```\n\n\n\nAnswer:\n```python\ndef odd_values_string(string):\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to remove the characters which have odd index values of a given string.", "input_data": "odd_values_string('abcdef')", "expected_output": "'ace'", "assertion": "assert odd_values_string('abcdef') == 'ace'"}
{"problem_name": "272", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n```\nTest:\n```\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n```\n\n\n\nAnswer:\n```python\ndef rear_extract(tuples):\n    return [t[-1] for t in tuples]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.", "input_data": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])", "expected_output": "[21, 20, 19]", "assertion": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"problem_name": "756", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n```\nTest:\n```\nassert text_match_zero_one(\"ac\")==False\n```\n\n\n\nAnswer:\n```python\nimport re\n\ndef text_match_zero_one(text):\n    return bool(re.match(r\"a[b]+\", text))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php", "input_data": "text_match_zero_one(\"ac\")", "expected_output": "False", "assertion": "assert text_match_zero_one(\"ac\")==False"}
{"problem_name": "443", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the largest negative number from the given list.\n```\nTest:\n```\nassert largest_neg([1,2,3,-4,-6]) == -6\n```\n\n\n\nAnswer:\n```python\ndef largest_neg(nums):\n    max_neg = float('-inf')\n    for num in nums:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the largest negative number from the given list.", "input_data": "largest_neg([1,2,3,-4,-6])", "expected_output": "-6", "assertion": "assert largest_neg([1,2,3,-4,-6]) == -6"}
{"problem_name": "424", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to extract only the rear index element of each string in the given tuple.\n```\nTest:\n```\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r','s']\n```\n\n\n\nAnswer:\n```python\ndef extract_rear(strings):\n    return [s[-1] for s in strings]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to extract only the rear index element of each string in the given tuple.", "input_data": "extract_rear(('Mers', 'for', 'Vers') )", "expected_output": "['s', 'r', 's']", "assertion": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"problem_name": "2", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the shared elements from the given two lists.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef find_shared_elements(list1, list2):\n    return list(set(list1) & set(list2))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the shared elements from the given two lists.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "724", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n```\nTest:\n```\nassert power_base_sum(2,100)==115\n```\n\n\n\nAnswer:\n```python\ndef power_base_sum(base, power):\n    result = 0\n    for _ in range(power):\n        result += base\n    return sum(int(digit) for digit in str(result))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.", "input_data": "power_base_sum(2,100)", "expected_output": "115", "assertion": "assert power_base_sum(2,100)==115"}
{"problem_name": "143", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find number of lists present in the given tuple.\n```\nTest:\n```\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n```\n\n\n\nAnswer:\n```python\ndef find_lists(input_tuple):\n    count = 0\n    for element in input_tuple:\n        if isinstance(element, list):\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find number of lists present in the given tuple.", "input_data": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))", "expected_output": "2", "assertion": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"}
{"problem_name": "448", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the sum of perrin numbers.\n```\nTest:\n```\nassert cal_sum(9) == 49\n```\n\n\n\nAnswer:\n```python\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        a, b, c = 3, 5, 0\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the sum of perrin numbers.", "input_data": "cal_sum(9)", "expected_output": "49", "assertion": "assert cal_sum(9) == 49"}
{"problem_name": "457", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the sublist having minimum length.\n```\nTest:\n```\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n```\n\n\n\nAnswer:\n```python\ndef Find_Min(list_of_lists):\n    min_length = float('inf')\n    min_list = []\n    for sublist in list_of_lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the sublist having minimum length.", "input_data": "Find_Min([[1],[1,2],[1,2,3]])", "expected_output": "[1]", "assertion": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"problem_name": "426", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to filter odd numbers.\n```\nTest:\n```\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n```\n\n\n\nAnswer:\n```python\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2!= 0, numbers))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to filter odd numbers.", "input_data": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "[1,3,5,7,9]", "assertion": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"}
{"problem_name": "755", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the second smallest number in a list.\n```\nTest:\n```\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n```\n\n\n\nAnswer:\n```python\ndef second_smallest(nums):\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in nums:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the second smallest number in a list.", "input_data": "second_smallest([1, 2, -8, -2, 0, -2])", "expected_output": "-2", "assertion": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2"}
{"problem_name": "163", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef polygon_area(side_length, num_sides):\n    return 0.25 * num_sides * side_length ** 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to calculate the area of a regular polygon given the length and number of its sides.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "6", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n```\nTest:\n```\nassert differ_At_One_Bit_Pos(13,9) == True\n```\n\n\n\nAnswer:\n```python\ndef differ_At_One_Bit_Pos(x, y):\n    return x ^ y!= 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the two numbers differ at one bit position only or not.", "input_data": "differ_At_One_Bit_Pos(13,9)", "expected_output": "True", "assertion": "assert differ_At_One_Bit_Pos(13,9) == True"}
{"problem_name": "70", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find whether all the given tuples have equal length or not.\n```\nTest:\n```\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n```\n\n\n\nAnswer:\n```python\ndef get_equal(tuples):\n    return all(len(tup) == len(tuples[0]) for tup in tuples)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find whether all the given tuples have equal length or not.", "input_data": "get_equal([(11, 22, 33), (44, 55, 66)])", "expected_output": "True", "assertion": "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"problem_name": "763", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n```\nTest:\n```\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n```\n\n\n\nAnswer:\n```python\ndef find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/", "input_data": "find_min_diff((1,5,3,19,18,25),6)", "expected_output": "1", "assertion": "assert find_min_diff((1,5,3,19,18,25),6) == 1"}
{"problem_name": "600", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether the given number is even or not.\n```\nTest:\n```\nassert is_Even(1) == False\n```\n\n\n\nAnswer:\n```python\ndef is_Even(num):\n    return num % 2 == 0\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether the given number is even or not.", "input_data": "is_Even(1)", "expected_output": "False", "assertion": "assert is_Even(1) == False"}
{"problem_name": "56", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check if a given number is one less than twice its reverse.\n```\nTest:\n```\nassert check(70) == False\n```\n\n\n\nAnswer:\n```python\ndef check(num):\n    return num == 2 * int(str(num)[::-1]) - 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check if a given number is one less than twice its reverse.", "input_data": "check(70)", "expected_output": "False", "assertion": "assert check(70) == False"}
{"problem_name": "394", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if given tuple contains no duplicates.\n```\nTest:\n```\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n```\n\n\n\nAnswer:\n```python\ndef check_distinct(t):\n    return len(t) == len(set(t))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if given tuple contains no duplicates.", "input_data": "check_distinct((1, 4, 5, 6, 1, 4))", "expected_output": "False", "assertion": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"problem_name": "778", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n```\nTest:\n```\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n```\n\n\n\nAnswer:\n```python\ndef pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "input_data": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])", "expected_output": "[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assertion": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"problem_name": "389", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find then'th lucas number.\n```\nTest:\n```\nassert find_lucas(9) == 76\n```\n\n\n\nAnswer:\n```python\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the n'th lucas number.", "input_data": "find_lucas(9)", "expected_output": "76", "assertion": "assert find_lucas(9) == 76"}
{"problem_name": "760", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n```\nTest:\n```\nassert unique_Element([1,1,1]) == True\n```\n\n\n\nAnswer:\n```python\ndef unique_Element(nums):\n    return len(set(nums)) == 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to check whether a list of numbers contains only one distinct element or not.", "input_data": "unique_Element([1,1,1])", "expected_output": "True", "assertion": "assert unique_Element([1,1,1]) == True"}
{"problem_name": "556", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of pairs whose xor value is odd.\n```\nTest:\n```\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n```\n\n\n\nAnswer:\n```python\ndef find_Odd_Pair(arr, k):\n    xor_arr = [x ^ k for x in arr]\n    xor_count = {}\n    for x in xor_arr:\n        if x in xor_count:\n            xor_count[x] += 1\n        else:\n            xor_count[x] = 1\n    odd_xor_count = 0\n    for key in xor_count:\n        if xor_count[key] % 2!= 0:\n            odd_xor_count += xor_count[key]\n    return odd_xor_count // 2\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of pairs whose xor value is odd.", "input_data": "find_Odd_Pair([5,4,7,2,1],5)", "expected_output": "6", "assertion": "assert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"problem_name": "454", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that matches a word containing 'z'.\n```\nTest:\n```\nassert text_match_wordz(\"pythonz.\")==True\n```\n\n\n\nAnswer:\n```python\ndef text_match_wordz(text):\n    return \"z\" in text\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that matches a word containing 'z'.", "input_data": "text_match_wordz(\"pythonz.\")", "expected_output": "True", "assertion": "assert text_match_wordz(\"pythonz.\")==True"}
{"problem_name": "422", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the average of cubes of first n natural numbers.\n```\nTest:\n```\nassert find_Average_Of_Cube(2) == 4.5\n```\n\n\n\nAnswer:\n```python\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*(n+1)/2)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the average of cubes of first n natural numbers.", "input_data": "find_Average_Of_Cube(2)", "expected_output": "4.5", "assertion": "assert find_Average_Of_Cube(2) == 4.5"}
{"problem_name": "256", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n```\nTest:\n```\nassert count_Primes_nums(5) == 2\n```\n\n\n\nAnswer:\n```python\ndef count_Primes_nums(n):\n    if n <= 1:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.", "input_data": "count_Primes_nums(5)", "expected_output": "2", "assertion": "assert count_Primes_nums(5) == 2"}
{"problem_name": "237", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n```\nTest:\n```\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n```\n\n\n\nAnswer:\nHere's how you can implement this function:\n\n```python\ndef check_occurences(tuples):\n    return {t: tuples.count(t) for t in set(tuples)}\n```\n\nThis function uses a dictionary comprehension to map each unique tuple to the number of times it occurs in the list. The `set` function is used to remove duplicate tuples from the list before counting their occurrences.<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "input_data": "check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )", "expected_output": "{(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assertion": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"problem_name": "82", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the volume of a sphere.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef volume_of_sphere(radius):\n    return (4/3) * 3.14 * (radius ** 3)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the volume of a sphere.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "639", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n```\nTest:\n```\nassert sample_nam(['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith'])==16\n```\n\n\n\nAnswer:\n```python\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "input_data": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])", "expected_output": "16", "assertion": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"}
{"problem_name": "145", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the maximum difference between any two elements in a given array.\n```\nTest:\n```\nassert max_Abs_Diff((2,1,5,3)) == 4\n```\n\n\n\nAnswer:\n```python\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the maximum difference between any two elements in a given array.", "input_data": "max_Abs_Diff((2,1,5,3))", "expected_output": "4", "assertion": "assert max_Abs_Diff((2,1,5,3)) == 4"}
{"problem_name": "230", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n```\nTest:\n```\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n```\n\n\n\nAnswer:\n```python\ndef replace_blank(string, char):\n    return string.replace(' ', char)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.", "input_data": "replace_blank(\"hello people\",'@')", "expected_output": "(\"hello@people\")", "assertion": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"problem_name": "612", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n```\nTest:\n```\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a','m'], ['y', 'b', 'n']]\n```\n\n\n\nAnswer:\n```python\ndef merge(lists):\n    return [list(map(lambda x: x[i], lists)) for i in range(2)]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.", "input_data": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])", "expected_output": "[['x', 'a', 'm'], ['y', 'b', 'n']]", "assertion": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"problem_name": "740", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n```\nTest:\n```\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n```\n\n\n\nAnswer:\n```python\ndef tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/", "input_data": "tuple_to_dict((1, 5, 7, 10, 13, 5))", "expected_output": "{1: 5, 7: 10, 13: 5}", "assertion": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"problem_name": "465", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to drop empty items from a given dictionary.\n```\nTest:\n```\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n```\n\n\n\nAnswer:\n```python\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to drop empty items from a given dictionary.", "input_data": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})", "expected_output": "{'c1': 'Red', 'c2': 'Green'}", "assertion": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"problem_name": "802", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n```\nTest:\n```\nassert count_rotation([3,2,1]) == 1\n```\n\n\n\nAnswer:\n```python\ndef count_rotation(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/", "input_data": "count_rotation([3,2,1])", "expected_output": "1", "assertion": "assert count_rotation([3,2,1]) == 1"}
{"problem_name": "139", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the circumference of a circle.\n```\nTest:\n```\nNone\n```\n\n\n\nAnswer:\n```python\ndef find_circumference(radius):\n    return 2 * 3.14 * radius\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the circumference of a circle.", "input_data": null, "expected_output": null, "assertion": null}
{"problem_name": "9", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n```\nTest:\n```\nassert find_Rotations(\"aaaa\") == 1\n```\n\n\n\nAnswer:\n```python\ndef find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[:i] == s[n-i:]:\n            return i\n    return -1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.", "input_data": "find_Rotations(\"aaaa\")", "expected_output": "1", "assertion": "assert find_Rotations(\"aaaa\") == 1"}
{"problem_name": "737", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n```\nTest:\n```\nassert check_str(\"annie\")\n```\n\n\n\nAnswer:\n```python\nimport re\n\ndef check_str(string):\n    return bool(re.match(r'^[aeiou]', string, re.IGNORECASE))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check whether the given string is starting with a vowel or not using regex.", "input_data": "check_str(\"annie\")", "expected_output": "True", "assertion": "assert check_str(\"annie\")"}
{"problem_name": "20", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to check if the given number is woodball or not.\n```\nTest:\n```\nassert is_woodall(383) == True\n```\n\n\n\nAnswer:\n```python\ndef is_woodall(n):\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to check if the given number is woodball or not.", "input_data": "is_woodall(383)", "expected_output": "True", "assertion": "assert is_woodall(383) == True"}
{"problem_name": "419", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n```\nTest:\n```\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n```\n\n\n\nAnswer:\n```python\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "input_data": "round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])", "expected_output": "243", "assertion": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243"}
{"problem_name": "584", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n```\nTest:\n```\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n```\n\n\n\nAnswer:\n```python\ndef find_adverbs(text):\n    adverb_pattern = r'\\b\\w*ly\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return f'{match.start()}-{match.end()}: {match.group()}'\n    else:\n        return 'No adverb ending with ly found.'\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the first adverb ending with ly and its positions in a given string.", "input_data": "find_adverbs(\"Clearly, he has no excuse for such behavior.\")", "expected_output": "'0-7: Clearly'", "assertion": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'"}
{"problem_name": "306", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n```\nTest:\n```\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n```\n\n\n\nAnswer:\n```python\ndef max_sum_increasing_subseq(nums, k, i, j):\n    if i > j:\n        return 0\n    if i == j:\n        return nums[i]\n    if nums[i] < nums[k]:\n        return max(max_sum_increasing_subseq(nums, k, i + 1, j), max_sum_increasing_subseq(nums, k, i, j - 1))\n    else:\n        return max(max_sum_increasing_subseq(nums, k, i + 1, j), max_sum_increasing_subseq(nums, k, i, j - 1), nums[i] + max_sum_increasing_subseq(nums, i, i + 1, j - 1))\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .", "input_data": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)", "expected_output": "11", "assertion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"problem_name": "748", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to put spaces between words starting with capital letters in a given string.\n```\nTest:\n```\nassert capital_words_spaces(\"Python\") == 'Python'\n```\n\n\n\nAnswer:\n```python\ndef capital_words_spaces(string):\n    return''.join(word for word in string.split())\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to put spaces between words starting with capital letters in a given string.", "input_data": "capital_words_spaces(\"Python\")", "expected_output": "'Python'", "assertion": "assert capital_words_spaces(\"Python\") == 'Python'"}
{"problem_name": "743", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n```\nTest:\n```\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n```\n\n\n\nAnswer:\n```python\ndef rotate_right(arr, n):\n    return arr[-n:] + arr[:-n]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/", "input_data": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)", "expected_output": "[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assertion": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"problem_name": "643", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n```\nTest:\n```\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n```\n\n\n\nAnswer:\n```python\ndef text_match_wordz_middle(text):\n    return \"z\" in text[1:-1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function that checks if a strings contains 'z', except at the start and end of the word.", "input_data": "text_match_wordz_middle(\"pythonzabc.\")", "expected_output": "True", "assertion": "assert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"problem_name": "606", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to convert degrees to radians.\n```\nTest:\n```\nassert radian_degree(90)==1.5707963267948966\n```\n\n\n\nAnswer:\n```python\nimport math\n\ndef radian_degree(degrees):\n    return math.radians(degrees)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to convert degrees to radians.", "input_data": "radian_degree(90)", "expected_output": "1.5707963267948966", "assertion": "assert radian_degree(90)==1.5707963267948966"}
{"problem_name": "596", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to find the size in bytes of the given tuple.\n```\nTest:\n```\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n```\n\n\n\nAnswer:\n```python\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to find the size in bytes of the given tuple.", "input_data": "tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )", "expected_output": "sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assertion": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"problem_name": "593", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to remove leading zeroes from an ip address.\n```\nTest:\n```\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n```\n\n\n\nAnswer:\n```python\ndef removezero_ip(ip):\n    return \".\".join(str(int(x))) for x in ip.split(\".\")\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to remove leading zeroes from an ip address.", "input_data": "removezero_ip(\"216.08.094.196\")", "expected_output": "('216.8.94.196')", "assertion": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')"}
{"problem_name": "305", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to return two words from a list of words starting with letter 'p'.\n```\nTest:\n```\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n```\n\n\n\nAnswer:\n```python\ndef start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()[0], word.split()[1]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to return two words from a list of words starting with letter 'p'.", "input_data": "start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])", "expected_output": "('Python', 'PHP')", "assertion": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"}
{"problem_name": "629", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find even numbers from a list of numbers.\n```\nTest:\n```\nassert Split([1,2,3,4,5]) == [2,4]\n```\n\n\n\nAnswer:\n```python\ndef Split(numbers):\n    return [x for x in numbers if x % 2 == 0]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find even numbers from a list of numbers.", "input_data": "Split([1,2,3,4,5])", "expected_output": "[2,4]", "assertion": "assert Split([1,2,3,4,5]) == [2,4]"}
{"problem_name": "119", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to find the element that appears only once in a sorted array.\n```\nTest:\n```\nassert search([1,1,2,2,3]) == 3\n```\n\n\n\nAnswer:\n```python\ndef search(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            if nums[mid] == nums[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            if nums[mid] == nums[mid - 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n    return nums[left]\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to find the element that appears only once in a sorted array.", "input_data": "search([1,1,2,2,3])", "expected_output": "3", "assertion": "assert search([1,1,2,2,3]) == 3"}
{"problem_name": "172", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the number of occurence of the string'std' in a given string.\n```\nTest:\n```\nassert count_occurance(\"letstdlenstdporstd\") == 3\n```\n\n\n\nAnswer:\n```python\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i:i+3] =='std':\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the number of occurence of the string 'std' in a given string.", "input_data": "count_occurance(\"letstdlenstdporstd\")", "expected_output": "3", "assertion": "assert count_occurance(\"letstdlenstdporstd\") == 3"}
{"problem_name": "252", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a python function to convert complex numbers to polar coordinates.\n```\nTest:\n```\nassert convert(1) == (1.0, 0.0)\n```\n\n\n\nAnswer:\n```python\nimport cmath\n\ndef convert(z):\n    return cmath.polar(z)\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a python function to convert complex numbers to polar coordinates.", "input_data": "convert(1)", "expected_output": "(1.0, 0.0)", "assertion": "assert convert(1) == (1.0, 0.0)"}
{"problem_name": "168", "generated_code": "Question:\n\nYour task is to write a Python function to solve a programming problem.\nYou must use the same function name, signature and variable names as the example test case.\nDo not generate test cases. You should only write the function.\n[Formatting Instructions]\n- Start your code with ```python\n- End your code with ```\n- In the python code, you must use exactly the same signature as the example test case.\n\nProblem: \n```\nWrite a function to count the number of occurrences of a number in a given list.\n```\nTest:\n```\nassert frequency([1,2,3], 4) == 0\n```\n\n\n\nAnswer:\n```python\ndef frequency(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count\n```<|endoftext|>", "model_name": "Granite", "dataset_name": "MBPP", "nl": "Write a function to count the number of occurrences of a number in a given list.", "input_data": "frequency([1,2,3], 4)", "expected_output": "0", "assertion": "assert frequency([1,2,3], 4) == 0"}
