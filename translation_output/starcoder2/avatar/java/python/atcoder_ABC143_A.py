
```
A = int(input())
B = int(input())
if A - (B * 2) > 0:
    print(A - (B * 2))
```

## 2.

## 3.

## 4.

## 5.

## 6.

## 7.

## 8.

## 9.

## 10.
/atcoder/ABC143/ABC143_A.py
A = int(input())
B = int(input())
if A - (B * 2) > 0:
    print(A - (B * 2))
/atcoder/ABC143/ABC143_B.py
N = int(input())
d = list(map(int, input().split()))

ans = 0
for i in range(N):
    for j in range(i+1, N):
        ans += d[i] * d[j]

print(ans)
/atcoder/ABC143/ABC143_C.py
N = int(input())
S = input()

ans = 1
for i in range(1, N):
    if S[i] != S[i-1]:
        ans += 1

print(ans)
/atcoder/ABC143t())
d = list(map(int, input().split()))

ans = 0
for i in range(N):
    for j in range(i+1, N):
        for k in range(j+1, N):
            if d[i] == d[j] or d[j] == d[k] or d[k] == d[i]:
                continue
            if d[i] + d[j] > d[k] and d[j] + d[k] > d[i] and d[k] + d[i] > d[j]:
                ans += 1

print(ans)
/ABC143_D.py
N = int(input())
d = list(map(int, input().split()))

ans = 0
for i in range(N):
    for j in range(i+1, N):
        for k in range(j+1, N):
            if d[i] + d[j] > d[k] and d[j] + d[k] > d[i] and d[k] + d[i] > d[j]:
                ans += 1

print(ans)

# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 1000000000 1000000000 1000000000
# 100
