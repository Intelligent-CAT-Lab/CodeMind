
```java

```


```java

```
/solutions/1001.md
# 1001. 害死人不偿命的(3n+1)猜想

## 题目描述

卡拉兹(Callatz)猜想：

对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……

我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？

## 输入格式

每个测试输入包含1个测试用例，即给出自然数n的值。

## 输出格式

输出从n计算到1需要的步数。

## 输入样例

```
3
```

## 输出样例

```
5
```

## 解答

```python
n = int(input())
count = 0
while n != 1:
    if n % 2 == 0:
        n = n // 2
    else:
        n = (3 * n + 1) // 2
    count += 1
print(count)
```/solutions/1002.md
# 1002. 写出这个数

## 题目描述

读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每一位数字。

## 输入格式

每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。

## 输出格式

在一行内输出n的各位数字之和的每一位，拼音数字间有1 空格，但一行中最后一个拼音数字后没有空格。

## 输入样例

```
1234567890987654321123456789
```

## 输出样例

```
yi san wu
```

## 解答

```python
n = input()
sum = 0
for i in n:
    sum += int(i)
sum = str(sum)
dic = {
    "0": "ling",
    "1": "yi",
    "2": "er",
    "3": "san",
    "4": "si",
    "5": "wu",
    "6": "liu",
    "7": "qi",
    "8": "ba",
    "9": "jiu",
}
for i in range(len(sum)):
    print(dic[sum[i]], end=" ")
```

```java

```
/solutions/1003.md
# 1003. 我要通过！

## 题目描述

“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。

得到“答案正确”的条件是：

1. 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；
2. 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；
3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。

现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。

## 输入格式

每个测试输入包含1个测试用例。第1行给出一个自然数n (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。

## 输出格式

每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。

## 输入样例

```
8
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
```

## 输出样例

```
YES
YES
YES
YES
NO
NO
NO
NO
```

## 解答

```python
n = int(input())
for i in range(n):
    s = input()
    if s.count("P") == 1 and s.count("T") == 1:
        if s.index("P") < s.index("T"):
            if s.replace("P", "").replace("T", "") == "A":
                print("YES")
            else:
                print("NO")
        else:
            print("NO")
    else:
        print("NO")
```

```java

```
/solutions/1004.md
# 1004. 成绩排名

## 题目描述

读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。

## 输入格式

每个测试输入包含1个测试用例，格式为

```
第1行：正整数n
第2行：第1个学生的姓名 学号 成绩
第3行：第2个学生的姓名 学号 成绩
  ... ... ...
第n+1行：第n个学生的姓名 学号 成绩
```

其中`姓名`和`学号`均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。

## 输出格式

对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。

## 输入样例

```
3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95
```

## 输出样例

```
Mike CS991301
Joe Math990112
```

## 解答

```python
n = int(input())
max_score = 0
min_score = 100
max_name = ""
max_id = ""
min_name = ""
min_id = ""
for i in range(n):
    name, id, score = input().split()
    score = int(score)
    if score > max_score:
        max_score = score
        max_name = name
        max_id = id
    if score < min_score:
        min_score = score
        min_name = name
        min_id = id

