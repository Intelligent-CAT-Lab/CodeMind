<s> Translate the following java code to python and enclose your solution inside ```python```:
```
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int o, g, x = 0;
        long n, borrow = 0;

        o = sc.nextInt();
        n = sc.nextLong();
        g = sc.nextInt();

        for (int i = 1; i <= g; i++) {
            x = x + i * o;
        }

        borrow = x - n;

        if (borrow <= 0)
            System.out.println(0);
        else
            System.out.println(borrow);
    }
}
```

### 解题思路

```python
import sys

o, n, g = map(int, sys.stdin.readline().split())

x = 0
for _ in range(g):
    x += o

borrow = x - n

if borrow <= 0:
    print(0)
else:
    print(borrow)
```

### 复杂度分析

- 时间复杂度：O(g)。
- 空间复杂度：O(1)。

### 执行

执行用时：**124 ms**，占用 **15.4 MB** 内存。

### 结果

```
Input: 

