<s> Translate the following java code to python and enclose your solution inside ```python```:
```
import java.util.Scanner;


public class p02233 {

	static int[] memo=new int[100];
	static int fib(int n) {
		if (memo[n]!=0) return memo[n];
		if (n==0||n==1) return memo[n]=1;
		return (memo[n-1]=fib(n-1))+(memo[n-2]=fib(n-2));
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		System.out.println(fib(scan.nextInt()));
	}

}
```

### 解答

```python
import math

def fib(n):
    if n == 0 or n == 1:
        return 1
    if n in memo:
        return memo[n]
    memo[n] = fib(n-1) + fib(n-2)
    return memo[n]


if __name__ == '__main__':
    n = int(input())
    print(fib(n))
```

### 解析

1. 首先，我们需要定义一个数组，用于存储已经计算过的值。
2. 然后，我们需要定义一个函数，用于计算fibonacci数列的第n个数。
3. 在这个函数中，我们需要判断n是否为0或1，如果是，则直接返回1。
4. 如果n不为0，则需要判断n是否已经计算过，如果已经计算过，则直接返回。
5. 如果n没有计算过，则需要计算fibonacci数列的前两个数，然后将这两个数加起来，并将结果存储到数组中。
6. 最后，返回数组中的值。

### 复杂度分析

- 时间复杂度：O(n)。
- 空间复杂度：O(n)。

### 相关题目

- [牛客网：100. 牛客网](https://www.nowcoder.com/practice/b
