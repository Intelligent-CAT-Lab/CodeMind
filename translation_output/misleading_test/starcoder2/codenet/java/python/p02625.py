

```python

```
/p0001-p0100/p0001-p0100.md
# Problems 1-100

## Problem 1

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

```
def sum_of_multiples(n):
    sum = 0
    for i in range(1,n):
        if i%3 == 0 or i%5 == 0:
            sum += i
    return sum

print(sum_of_multiples(1000))
```

## Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

```
def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return fibonacci(n-1) + fibonacci(n-2)

def sum_of_even_fibonacci(n):
    sum = 0
    i = 1
    while fibonacci(i) < n:
        if fibonacci(i) % 2 == 0:
            sum += fibonacci(i)
        i += 1
    return sum

print(sum_of_even_fibonacci(4000000))
```

## Problem 3

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

```
def is_prime(n):
    if n == 1:
        return False
    elif n == 2:
        return True
    else:
        for i in range(2,n):
            if n % i == 0:
                return False
        return True

def largest_prime_factor(n):
    for i in range(n,1,-1):
        if n % i == 0 and is_prime(i):
            return i

print(largest_prime_factor(600851475143))
```

## Problem 4

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

```
def is_palindrome(n):
    n = str(n)
    for i in range(len(n)//2):
        if n[i] != n[len(n)-i-1]:
            return False
    return True

def largest_palindrome(n):
    largest = 0
    for i in range(n,1,-1):
        for j in range(n,1,-1):
            if i*j > largest and is_palindrome(i*j):
                largest = i*j
    return largest

print(largest_palindrome(999))
```

## Problem 5

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

```
def smallest_multiple(n):
    i = n
    while True:
        for j in range(1,n+1):
            if i % j != 0:
                break
            if j == n:
                return i
        i += n

print(smallest_multiple(20))
```

## Problem 6

The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385

The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)^2 = 55^2 = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

```
def sum_of_squares(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**2
    return sum

def square_of_sum(n):
    sum = 0
    for i in range(1,n+1):
        sum += i
    return sum**2

print(square_of_sum(100) - sum_of_squares(100))
```

## Problem 7

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

```
def is_prime(n):
    if n ==
