

```
import re

pat = "A{0,1}KIHA{0,1}BA{0,1}RA{0,1}"
s = input()
if re.match(pat, s):
    print("YES")
else:
    print("NO")

```

## 3.5.3.4. 正则表达式的使用

### 3.5.3.4.1. 正则表达式的使用

正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。

在编写代码的过程中，我们经常会有一些需求，要从一个字符串中提取一部分内容。例如，从形如`10.0.0.1 - - [12/Dec/2015:18:25:11 +0800] "GET / HTTP/1.1" 200 276 "-" "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:43.0) Gecko/20100101 Firefox/43.0"`的字符串中提取日期和时间，也就是`12/Dec/2015:18:25:11 +0800`，又如，从形如`<h1>Hello, world!</h1>`的字符串中提取`Hello, world!`，这就是传说中的HTML解析问题了。

如果我们要自己写代码来完成这个任务，可能需要几百行的代码，而使用正则表达式，只需要几行代码就可以完成。

在Python中，我们用正则表达式匹配字符串的方法是通过`re`模块实现的。使用`re`模块时，需要注意：

1.  匹配时采用`re.match(pattern, string)`这样的写法而不是像搜索模块那样`pattern.match(string)`。
2.  强烈建议使用Python的r前缀，就不用考虑转义的问题了：`r'00\d'`，`r'\d{3}'`。

### 3.5.3.4.2. 匹配

要判断正则表达式是否匹配，我们用`match()`方法，传入正则表达式和待匹配的字符串，返回一个`Match`对象，如果匹配成功，就返回一个`Match`对象，否则返回`None`。

常见的判断方法就是：

```
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')

```

### 3.5.3.4.3. 切分字符串

用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：

```
>>> 'a b   c'.split(' ')
['a', 'b', '', '', 'c']

```

嗯，无法识别连续的空格，用正则表达式试试：

```
>>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']

```

无论多少个空格都可以正常分割。加入`,`试试：

```
>>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']

```

再加入`;`试试：

```
>>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
['a', 'b', 'c', 'd']

```

如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。

### 3.5.3.4.4. 分组

除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用`()`表示的就是要提取的分组（Group）。比如：

`^(\d{3})-(\d{3,8})$`分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：

```
>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

```

如果正则表达式中定义了组，就可以在`Match`对象上用`group()`方法提取出子串来。

注意到`group(0)`永远是原始字符串，`group(1)`、`group(2)`……表示第1、2、……个子串。

提取子串非常有用。来看一个更凶残的例子：

```
>>> t = '19:05:30'
>>> m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
>>> m.groups()
('19', '05', '30')

```

这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：

```
'^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'

```

对于`'2-30'`，`'4-31'`这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。

### 3.5.3.4.5. 贪婪匹配

最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的`0`：

```
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')

```

由于`\d+`采用贪婪匹配，直接把后面的`0`全部匹配了，结果`0*`只能匹配空字符串了。

必须让`\d+`采用非贪婪匹配（也就是尽可能少匹配），才能把后面的`0`匹配出来，加个`?`就可以让`\d+`采用非贪婪匹配：

```
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')

```

### 3.5.3.4.6. 编译

当我们在Python中使用正则表达式时，`re`模块内部会干两件事情：

1.  编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
2.  用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

